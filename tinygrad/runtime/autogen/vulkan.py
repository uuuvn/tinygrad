# mypy: ignore-errors
# -*- coding: utf-8 -*-
#
# TARGET arch is: []
# WORD_SIZE is: 8
# POINTER_SIZE is: 8
# LONGDOUBLE_SIZE is: 16
#
import ctypes, ctypes.util


class AsDictMixin:
    @classmethod
    def as_dict(cls, self):
        result = {}
        if not isinstance(self, AsDictMixin):
            # not a structure, assume it's already a python object
            return self
        if not hasattr(cls, "_fields_"):
            return result
        # sys.version_info >= (3, 5)
        # for (field, *_) in cls._fields_:  # noqa
        for field_tuple in cls._fields_:  # noqa
            field = field_tuple[0]
            if field.startswith('PADDING_'):
                continue
            value = getattr(self, field)
            type_ = type(value)
            if hasattr(value, "_length_") and hasattr(value, "_type_"):
                # array
                if not hasattr(type_, "as_dict"):
                    value = [v for v in value]
                else:
                    type_ = type_._type_
                    value = [type_.as_dict(v) for v in value]
            elif hasattr(value, "contents") and hasattr(value, "_type_"):
                # pointer
                try:
                    if not hasattr(type_, "as_dict"):
                        value = value.contents
                    else:
                        type_ = type_._type_
                        value = type_.as_dict(value.contents)
                except ValueError:
                    # nullptr
                    value = None
            elif isinstance(value, AsDictMixin):
                # other structure
                value = type_.as_dict(value)
            result[field] = value
        return result


class Structure(ctypes.Structure, AsDictMixin):

    def __init__(self, *args, **kwds):
        # We don't want to use positional arguments fill PADDING_* fields

        args = dict(zip(self.__class__._field_names_(), args))
        args.update(kwds)
        super(Structure, self).__init__(**args)

    @classmethod
    def _field_names_(cls):
        if hasattr(cls, '_fields_'):
            return (f[0] for f in cls._fields_ if not f[0].startswith('PADDING'))
        else:
            return ()

    @classmethod
    def get_type(cls, field):
        for f in cls._fields_:
            if f[0] == field:
                return f[1]
        return None

    @classmethod
    def bind(cls, bound_fields):
        fields = {}
        for name, type_ in cls._fields_:
            if hasattr(type_, "restype"):
                if name in bound_fields:
                    if bound_fields[name] is None:
                        fields[name] = type_()
                    else:
                        # use a closure to capture the callback from the loop scope
                        fields[name] = (
                            type_((lambda callback: lambda *args: callback(*args))(
                                bound_fields[name]))
                        )
                    del bound_fields[name]
                else:
                    # default callback implementation (does nothing)
                    try:
                        default_ = type_(0).restype().value
                    except TypeError:
                        default_ = None
                    fields[name] = type_((
                        lambda default_: lambda *args: default_)(default_))
            else:
                # not a callback function, use default initialization
                if name in bound_fields:
                    fields[name] = bound_fields[name]
                    del bound_fields[name]
                else:
                    fields[name] = type_()
        if len(bound_fields) != 0:
            raise ValueError(
                "Cannot bind the following unknown callback(s) {}.{}".format(
                    cls.__name__, bound_fields.keys()
            ))
        return cls(**fields)


class Union(ctypes.Union, AsDictMixin):
    pass



c_int128 = ctypes.c_ubyte*16
c_uint128 = c_int128
void = None
if ctypes.sizeof(ctypes.c_longdouble) == 16:
    c_long_double_t = ctypes.c_longdouble
else:
    c_long_double_t = ctypes.c_ubyte*16

def string_cast(char_pointer, encoding='utf-8', errors='strict'):
    value = ctypes.cast(char_pointer, ctypes.c_char_p).value
    if value is not None and encoding is not None:
        value = value.decode(encoding, errors=errors)
    return value


def char_pointer_cast(string, encoding='utf-8'):
    if encoding is not None:
        try:
            string = string.encode(encoding)
        except AttributeError:
            # In Python3, bytes has no encode attribute
            pass
    string = ctypes.c_char_p(string)
    return ctypes.cast(string, ctypes.POINTER(ctypes.c_char))



_libraries = {}
_libraries['libvulkan.so.1'] = ctypes.CDLL(ctypes.util.find_library('vulkan'))
class FunctionFactoryStub:
    def __getattr__(self, _):
      return ctypes.CFUNCTYPE(lambda y:y)

# libraries['FIXME_STUB'] explanation
# As you did not list (-l libraryname.so) a library that exports this function
# This is a non-working stub instead.
# You can either re-run clan2py with -l /path/to/library.so
# Or manually fix this by comment the ctypes.CDLL loading
_libraries['FIXME_STUB'] = FunctionFactoryStub() #  ctypes.CDLL('FIXME_STUB')


VULKAN_CORE_H_ = 1 # macro
VK_VERSION_1_0 = 1 # macro
VK_PLATFORM_H_ = True # macro
VKAPI_ATTR = True # macro
VKAPI_CALL = True # macro
VKAPI_PTR = True # macro
# def VK_DEFINE_HANDLE(object):  # macro
#    return struct_object##_T*object;
VK_USE_64_BIT_PTR_DEFINES = 1 # macro
# VK_NULL_HANDLE = ((void*)0) # macro
# def VK_DEFINE_NON_DISPATCHABLE_HANDLE(object):  # macro
#    return struct_object##_T*object;
def VK_MAKE_API_VERSION(variant, major, minor, patch):  # macro
   return ((((variant))<<29)|(((major))<<22)|(((minor))<<12)|((patch)))
VK_API_VERSION_1_0 = VK_MAKE_API_VERSION ( 0 , 1 , 0 , 0 ) # macro
VK_HEADER_VERSION = 275 # macro
VK_HEADER_VERSION_COMPLETE = VK_MAKE_API_VERSION ( 0 , 1 , 3 , 275 ) # macro
def VK_MAKE_VERSION(major, minor, patch):  # macro
   return ((((major))<<22)|(((minor))<<12)|((patch)))
def VK_VERSION_MAJOR(version):  # macro
   return ((version)>>22)
def VK_VERSION_MINOR(version):  # macro
   return (((version)>>12)&0x3FF)
def VK_VERSION_PATCH(version):  # macro
   return ((version)&0xFFF)
def VK_API_VERSION_VARIANT(version):  # macro
   return ((version)>>29)
def VK_API_VERSION_MAJOR(version):  # macro
   return (((version)>>22)&0x7F)
def VK_API_VERSION_MINOR(version):  # macro
   return (((version)>>12)&0x3FF)
def VK_API_VERSION_PATCH(version):  # macro
   return ((version)&0xFFF)
VK_ATTACHMENT_UNUSED = (~0) # macro
VK_FALSE = 0 # macro
VK_LOD_CLAMP_NONE = 1000.0 # macro
VK_QUEUE_FAMILY_IGNORED = (~0) # macro
VK_REMAINING_ARRAY_LAYERS = (~0) # macro
VK_REMAINING_MIP_LEVELS = (~0) # macro
VK_SUBPASS_EXTERNAL = (~0) # macro
VK_TRUE = 1 # macro
VK_WHOLE_SIZE = (~0) # macro
VK_MAX_MEMORY_TYPES = 32 # macro
VK_MAX_PHYSICAL_DEVICE_NAME_SIZE = 256 # macro
VK_UUID_SIZE = 16 # macro
VK_MAX_EXTENSION_NAME_SIZE = 256 # macro
VK_MAX_DESCRIPTION_SIZE = 256 # macro
VK_MAX_MEMORY_HEAPS = 16 # macro
VK_VERSION_1_1 = 1 # macro
VK_API_VERSION_1_1 = VK_MAKE_API_VERSION ( 0 , 1 , 1 , 0 ) # macro
VK_MAX_DEVICE_GROUP_SIZE = 32 # macro
VK_LUID_SIZE = 8 # macro
VK_QUEUE_FAMILY_EXTERNAL = (~1) # macro
VK_VERSION_1_2 = 1 # macro
VK_API_VERSION_1_2 = VK_MAKE_API_VERSION ( 0 , 1 , 2 , 0 ) # macro
VK_MAX_DRIVER_NAME_SIZE = 256 # macro
VK_MAX_DRIVER_INFO_SIZE = 256 # macro
VK_VERSION_1_3 = 1 # macro
VK_API_VERSION_1_3 = VK_MAKE_API_VERSION ( 0 , 1 , 3 , 0 ) # macro
VK_KHR_surface = 1 # macro
VK_KHR_SURFACE_SPEC_VERSION = 25 # macro
VK_KHR_SURFACE_EXTENSION_NAME = "VK_KHR_surface" # macro
VK_KHR_swapchain = 1 # macro
VK_KHR_SWAPCHAIN_SPEC_VERSION = 70 # macro
VK_KHR_SWAPCHAIN_EXTENSION_NAME = "VK_KHR_swapchain" # macro
VK_KHR_display = 1 # macro
VK_KHR_DISPLAY_SPEC_VERSION = 23 # macro
VK_KHR_DISPLAY_EXTENSION_NAME = "VK_KHR_display" # macro
VK_KHR_display_swapchain = 1 # macro
VK_KHR_DISPLAY_SWAPCHAIN_SPEC_VERSION = 10 # macro
VK_KHR_DISPLAY_SWAPCHAIN_EXTENSION_NAME = "VK_KHR_display_swapchain" # macro
VK_KHR_sampler_mirror_clamp_to_edge = 1 # macro
VK_KHR_SAMPLER_MIRROR_CLAMP_TO_EDGE_SPEC_VERSION = 3 # macro
VK_KHR_SAMPLER_MIRROR_CLAMP_TO_EDGE_EXTENSION_NAME = "VK_KHR_sampler_mirror_clamp_to_edge" # macro
VK_KHR_video_queue = 1 # macro
VK_KHR_VIDEO_QUEUE_SPEC_VERSION = 8 # macro
VK_KHR_VIDEO_QUEUE_EXTENSION_NAME = "VK_KHR_video_queue" # macro
VK_KHR_video_decode_queue = 1 # macro
VK_KHR_VIDEO_DECODE_QUEUE_SPEC_VERSION = 8 # macro
VK_KHR_VIDEO_DECODE_QUEUE_EXTENSION_NAME = "VK_KHR_video_decode_queue" # macro
VK_KHR_video_encode_h264 = 1 # macro
VK_KHR_VIDEO_ENCODE_H264_SPEC_VERSION = 14 # macro
VK_KHR_VIDEO_ENCODE_H264_EXTENSION_NAME = "VK_KHR_video_encode_h264" # macro
VK_KHR_video_encode_h265 = 1 # macro
VK_KHR_VIDEO_ENCODE_H265_SPEC_VERSION = 14 # macro
VK_KHR_VIDEO_ENCODE_H265_EXTENSION_NAME = "VK_KHR_video_encode_h265" # macro
VK_KHR_video_decode_h264 = 1 # macro
VK_KHR_VIDEO_DECODE_H264_SPEC_VERSION = 9 # macro
VK_KHR_VIDEO_DECODE_H264_EXTENSION_NAME = "VK_KHR_video_decode_h264" # macro
VK_KHR_dynamic_rendering = 1 # macro
VK_KHR_DYNAMIC_RENDERING_SPEC_VERSION = 1 # macro
VK_KHR_DYNAMIC_RENDERING_EXTENSION_NAME = "VK_KHR_dynamic_rendering" # macro
VK_KHR_multiview = 1 # macro
VK_KHR_MULTIVIEW_SPEC_VERSION = 1 # macro
VK_KHR_MULTIVIEW_EXTENSION_NAME = "VK_KHR_multiview" # macro
VK_KHR_get_physical_device_properties2 = 1 # macro
VK_KHR_GET_PHYSICAL_DEVICE_PROPERTIES_2_SPEC_VERSION = 2 # macro
VK_KHR_GET_PHYSICAL_DEVICE_PROPERTIES_2_EXTENSION_NAME = "VK_KHR_get_physical_device_properties2" # macro
VK_KHR_device_group = 1 # macro
VK_KHR_DEVICE_GROUP_SPEC_VERSION = 4 # macro
VK_KHR_DEVICE_GROUP_EXTENSION_NAME = "VK_KHR_device_group" # macro
VK_KHR_shader_draw_parameters = 1 # macro
VK_KHR_SHADER_DRAW_PARAMETERS_SPEC_VERSION = 1 # macro
VK_KHR_SHADER_DRAW_PARAMETERS_EXTENSION_NAME = "VK_KHR_shader_draw_parameters" # macro
VK_KHR_maintenance1 = 1 # macro
VK_KHR_MAINTENANCE_1_SPEC_VERSION = 2 # macro
VK_KHR_MAINTENANCE_1_EXTENSION_NAME = "VK_KHR_maintenance1" # macro
VK_KHR_MAINTENANCE1_SPEC_VERSION = 2 # macro
VK_KHR_MAINTENANCE1_EXTENSION_NAME = "VK_KHR_maintenance1" # macro
VK_KHR_device_group_creation = 1 # macro
VK_KHR_DEVICE_GROUP_CREATION_SPEC_VERSION = 1 # macro
VK_KHR_DEVICE_GROUP_CREATION_EXTENSION_NAME = "VK_KHR_device_group_creation" # macro
VK_MAX_DEVICE_GROUP_SIZE_KHR = 32 # macro
VK_KHR_external_memory_capabilities = 1 # macro
VK_KHR_EXTERNAL_MEMORY_CAPABILITIES_SPEC_VERSION = 1 # macro
VK_KHR_EXTERNAL_MEMORY_CAPABILITIES_EXTENSION_NAME = "VK_KHR_external_memory_capabilities" # macro
VK_LUID_SIZE_KHR = 8 # macro
VK_KHR_external_memory = 1 # macro
VK_KHR_EXTERNAL_MEMORY_SPEC_VERSION = 1 # macro
VK_KHR_EXTERNAL_MEMORY_EXTENSION_NAME = "VK_KHR_external_memory" # macro
VK_QUEUE_FAMILY_EXTERNAL_KHR = (~1) # macro
VK_KHR_external_memory_fd = 1 # macro
VK_KHR_EXTERNAL_MEMORY_FD_SPEC_VERSION = 1 # macro
VK_KHR_EXTERNAL_MEMORY_FD_EXTENSION_NAME = "VK_KHR_external_memory_fd" # macro
VK_KHR_external_semaphore_capabilities = 1 # macro
VK_KHR_EXTERNAL_SEMAPHORE_CAPABILITIES_SPEC_VERSION = 1 # macro
VK_KHR_EXTERNAL_SEMAPHORE_CAPABILITIES_EXTENSION_NAME = "VK_KHR_external_semaphore_capabilities" # macro
VK_KHR_external_semaphore = 1 # macro
VK_KHR_EXTERNAL_SEMAPHORE_SPEC_VERSION = 1 # macro
VK_KHR_EXTERNAL_SEMAPHORE_EXTENSION_NAME = "VK_KHR_external_semaphore" # macro
VK_KHR_external_semaphore_fd = 1 # macro
VK_KHR_EXTERNAL_SEMAPHORE_FD_SPEC_VERSION = 1 # macro
VK_KHR_EXTERNAL_SEMAPHORE_FD_EXTENSION_NAME = "VK_KHR_external_semaphore_fd" # macro
VK_KHR_push_descriptor = 1 # macro
VK_KHR_PUSH_DESCRIPTOR_SPEC_VERSION = 2 # macro
VK_KHR_PUSH_DESCRIPTOR_EXTENSION_NAME = "VK_KHR_push_descriptor" # macro
VK_KHR_shader_float16_int8 = 1 # macro
VK_KHR_SHADER_FLOAT16_INT8_SPEC_VERSION = 1 # macro
VK_KHR_SHADER_FLOAT16_INT8_EXTENSION_NAME = "VK_KHR_shader_float16_int8" # macro
VK_KHR_16bit_storage = 1 # macro
VK_KHR_16BIT_STORAGE_SPEC_VERSION = 1 # macro
VK_KHR_16BIT_STORAGE_EXTENSION_NAME = "VK_KHR_16bit_storage" # macro
VK_KHR_incremental_present = 1 # macro
VK_KHR_INCREMENTAL_PRESENT_SPEC_VERSION = 2 # macro
VK_KHR_INCREMENTAL_PRESENT_EXTENSION_NAME = "VK_KHR_incremental_present" # macro
VK_KHR_descriptor_update_template = 1 # macro
VK_KHR_DESCRIPTOR_UPDATE_TEMPLATE_SPEC_VERSION = 1 # macro
VK_KHR_DESCRIPTOR_UPDATE_TEMPLATE_EXTENSION_NAME = "VK_KHR_descriptor_update_template" # macro
VK_KHR_imageless_framebuffer = 1 # macro
VK_KHR_IMAGELESS_FRAMEBUFFER_SPEC_VERSION = 1 # macro
VK_KHR_IMAGELESS_FRAMEBUFFER_EXTENSION_NAME = "VK_KHR_imageless_framebuffer" # macro
VK_KHR_create_renderpass2 = 1 # macro
VK_KHR_CREATE_RENDERPASS_2_SPEC_VERSION = 1 # macro
VK_KHR_CREATE_RENDERPASS_2_EXTENSION_NAME = "VK_KHR_create_renderpass2" # macro
VK_KHR_shared_presentable_image = 1 # macro
VK_KHR_SHARED_PRESENTABLE_IMAGE_SPEC_VERSION = 1 # macro
VK_KHR_SHARED_PRESENTABLE_IMAGE_EXTENSION_NAME = "VK_KHR_shared_presentable_image" # macro
VK_KHR_external_fence_capabilities = 1 # macro
VK_KHR_EXTERNAL_FENCE_CAPABILITIES_SPEC_VERSION = 1 # macro
VK_KHR_EXTERNAL_FENCE_CAPABILITIES_EXTENSION_NAME = "VK_KHR_external_fence_capabilities" # macro
VK_KHR_external_fence = 1 # macro
VK_KHR_EXTERNAL_FENCE_SPEC_VERSION = 1 # macro
VK_KHR_EXTERNAL_FENCE_EXTENSION_NAME = "VK_KHR_external_fence" # macro
VK_KHR_external_fence_fd = 1 # macro
VK_KHR_EXTERNAL_FENCE_FD_SPEC_VERSION = 1 # macro
VK_KHR_EXTERNAL_FENCE_FD_EXTENSION_NAME = "VK_KHR_external_fence_fd" # macro
VK_KHR_performance_query = 1 # macro
VK_KHR_PERFORMANCE_QUERY_SPEC_VERSION = 1 # macro
VK_KHR_PERFORMANCE_QUERY_EXTENSION_NAME = "VK_KHR_performance_query" # macro
VK_KHR_maintenance2 = 1 # macro
VK_KHR_MAINTENANCE_2_SPEC_VERSION = 1 # macro
VK_KHR_MAINTENANCE_2_EXTENSION_NAME = "VK_KHR_maintenance2" # macro
VK_KHR_MAINTENANCE2_SPEC_VERSION = 1 # macro
VK_KHR_MAINTENANCE2_EXTENSION_NAME = "VK_KHR_maintenance2" # macro
VK_KHR_get_surface_capabilities2 = 1 # macro
VK_KHR_GET_SURFACE_CAPABILITIES_2_SPEC_VERSION = 1 # macro
VK_KHR_GET_SURFACE_CAPABILITIES_2_EXTENSION_NAME = "VK_KHR_get_surface_capabilities2" # macro
VK_KHR_variable_pointers = 1 # macro
VK_KHR_VARIABLE_POINTERS_SPEC_VERSION = 1 # macro
VK_KHR_VARIABLE_POINTERS_EXTENSION_NAME = "VK_KHR_variable_pointers" # macro
VK_KHR_get_display_properties2 = 1 # macro
VK_KHR_GET_DISPLAY_PROPERTIES_2_SPEC_VERSION = 1 # macro
VK_KHR_GET_DISPLAY_PROPERTIES_2_EXTENSION_NAME = "VK_KHR_get_display_properties2" # macro
VK_KHR_dedicated_allocation = 1 # macro
VK_KHR_DEDICATED_ALLOCATION_SPEC_VERSION = 3 # macro
VK_KHR_DEDICATED_ALLOCATION_EXTENSION_NAME = "VK_KHR_dedicated_allocation" # macro
VK_KHR_storage_buffer_storage_class = 1 # macro
VK_KHR_STORAGE_BUFFER_STORAGE_CLASS_SPEC_VERSION = 1 # macro
VK_KHR_STORAGE_BUFFER_STORAGE_CLASS_EXTENSION_NAME = "VK_KHR_storage_buffer_storage_class" # macro
VK_KHR_relaxed_block_layout = 1 # macro
VK_KHR_RELAXED_BLOCK_LAYOUT_SPEC_VERSION = 1 # macro
VK_KHR_RELAXED_BLOCK_LAYOUT_EXTENSION_NAME = "VK_KHR_relaxed_block_layout" # macro
VK_KHR_get_memory_requirements2 = 1 # macro
VK_KHR_GET_MEMORY_REQUIREMENTS_2_SPEC_VERSION = 1 # macro
VK_KHR_GET_MEMORY_REQUIREMENTS_2_EXTENSION_NAME = "VK_KHR_get_memory_requirements2" # macro
VK_KHR_image_format_list = 1 # macro
VK_KHR_IMAGE_FORMAT_LIST_SPEC_VERSION = 1 # macro
VK_KHR_IMAGE_FORMAT_LIST_EXTENSION_NAME = "VK_KHR_image_format_list" # macro
VK_KHR_sampler_ycbcr_conversion = 1 # macro
VK_KHR_SAMPLER_YCBCR_CONVERSION_SPEC_VERSION = 14 # macro
VK_KHR_SAMPLER_YCBCR_CONVERSION_EXTENSION_NAME = "VK_KHR_sampler_ycbcr_conversion" # macro
VK_KHR_bind_memory2 = 1 # macro
VK_KHR_BIND_MEMORY_2_SPEC_VERSION = 1 # macro
VK_KHR_BIND_MEMORY_2_EXTENSION_NAME = "VK_KHR_bind_memory2" # macro
VK_KHR_maintenance3 = 1 # macro
VK_KHR_MAINTENANCE_3_SPEC_VERSION = 1 # macro
VK_KHR_MAINTENANCE_3_EXTENSION_NAME = "VK_KHR_maintenance3" # macro
VK_KHR_MAINTENANCE3_SPEC_VERSION = 1 # macro
VK_KHR_MAINTENANCE3_EXTENSION_NAME = "VK_KHR_maintenance3" # macro
VK_KHR_draw_indirect_count = 1 # macro
VK_KHR_DRAW_INDIRECT_COUNT_SPEC_VERSION = 1 # macro
VK_KHR_DRAW_INDIRECT_COUNT_EXTENSION_NAME = "VK_KHR_draw_indirect_count" # macro
VK_KHR_shader_subgroup_extended_types = 1 # macro
VK_KHR_SHADER_SUBGROUP_EXTENDED_TYPES_SPEC_VERSION = 1 # macro
VK_KHR_SHADER_SUBGROUP_EXTENDED_TYPES_EXTENSION_NAME = "VK_KHR_shader_subgroup_extended_types" # macro
VK_KHR_8bit_storage = 1 # macro
VK_KHR_8BIT_STORAGE_SPEC_VERSION = 1 # macro
VK_KHR_8BIT_STORAGE_EXTENSION_NAME = "VK_KHR_8bit_storage" # macro
VK_KHR_shader_atomic_int64 = 1 # macro
VK_KHR_SHADER_ATOMIC_INT64_SPEC_VERSION = 1 # macro
VK_KHR_SHADER_ATOMIC_INT64_EXTENSION_NAME = "VK_KHR_shader_atomic_int64" # macro
VK_KHR_shader_clock = 1 # macro
VK_KHR_SHADER_CLOCK_SPEC_VERSION = 1 # macro
VK_KHR_SHADER_CLOCK_EXTENSION_NAME = "VK_KHR_shader_clock" # macro
VK_KHR_video_decode_h265 = 1 # macro
VK_KHR_VIDEO_DECODE_H265_SPEC_VERSION = 8 # macro
VK_KHR_VIDEO_DECODE_H265_EXTENSION_NAME = "VK_KHR_video_decode_h265" # macro
VK_KHR_global_priority = 1 # macro
VK_MAX_GLOBAL_PRIORITY_SIZE_KHR = 16 # macro
VK_KHR_GLOBAL_PRIORITY_SPEC_VERSION = 1 # macro
VK_KHR_GLOBAL_PRIORITY_EXTENSION_NAME = "VK_KHR_global_priority" # macro
VK_KHR_driver_properties = 1 # macro
VK_KHR_DRIVER_PROPERTIES_SPEC_VERSION = 1 # macro
VK_KHR_DRIVER_PROPERTIES_EXTENSION_NAME = "VK_KHR_driver_properties" # macro
VK_MAX_DRIVER_NAME_SIZE_KHR = 256 # macro
VK_MAX_DRIVER_INFO_SIZE_KHR = 256 # macro
VK_KHR_shader_float_controls = 1 # macro
VK_KHR_SHADER_FLOAT_CONTROLS_SPEC_VERSION = 4 # macro
VK_KHR_SHADER_FLOAT_CONTROLS_EXTENSION_NAME = "VK_KHR_shader_float_controls" # macro
VK_KHR_depth_stencil_resolve = 1 # macro
VK_KHR_DEPTH_STENCIL_RESOLVE_SPEC_VERSION = 1 # macro
VK_KHR_DEPTH_STENCIL_RESOLVE_EXTENSION_NAME = "VK_KHR_depth_stencil_resolve" # macro
VK_KHR_swapchain_mutable_format = 1 # macro
VK_KHR_SWAPCHAIN_MUTABLE_FORMAT_SPEC_VERSION = 1 # macro
VK_KHR_SWAPCHAIN_MUTABLE_FORMAT_EXTENSION_NAME = "VK_KHR_swapchain_mutable_format" # macro
VK_KHR_timeline_semaphore = 1 # macro
VK_KHR_TIMELINE_SEMAPHORE_SPEC_VERSION = 2 # macro
VK_KHR_TIMELINE_SEMAPHORE_EXTENSION_NAME = "VK_KHR_timeline_semaphore" # macro
VK_KHR_vulkan_memory_model = 1 # macro
VK_KHR_VULKAN_MEMORY_MODEL_SPEC_VERSION = 3 # macro
VK_KHR_VULKAN_MEMORY_MODEL_EXTENSION_NAME = "VK_KHR_vulkan_memory_model" # macro
VK_KHR_shader_terminate_invocation = 1 # macro
VK_KHR_SHADER_TERMINATE_INVOCATION_SPEC_VERSION = 1 # macro
VK_KHR_SHADER_TERMINATE_INVOCATION_EXTENSION_NAME = "VK_KHR_shader_terminate_invocation" # macro
VK_KHR_fragment_shading_rate = 1 # macro
VK_KHR_FRAGMENT_SHADING_RATE_SPEC_VERSION = 2 # macro
VK_KHR_FRAGMENT_SHADING_RATE_EXTENSION_NAME = "VK_KHR_fragment_shading_rate" # macro
VK_KHR_spirv_1_4 = 1 # macro
VK_KHR_SPIRV_1_4_SPEC_VERSION = 1 # macro
VK_KHR_SPIRV_1_4_EXTENSION_NAME = "VK_KHR_spirv_1_4" # macro
VK_KHR_surface_protected_capabilities = 1 # macro
VK_KHR_SURFACE_PROTECTED_CAPABILITIES_SPEC_VERSION = 1 # macro
VK_KHR_SURFACE_PROTECTED_CAPABILITIES_EXTENSION_NAME = "VK_KHR_surface_protected_capabilities" # macro
VK_KHR_separate_depth_stencil_layouts = 1 # macro
VK_KHR_SEPARATE_DEPTH_STENCIL_LAYOUTS_SPEC_VERSION = 1 # macro
VK_KHR_SEPARATE_DEPTH_STENCIL_LAYOUTS_EXTENSION_NAME = "VK_KHR_separate_depth_stencil_layouts" # macro
VK_KHR_present_wait = 1 # macro
VK_KHR_PRESENT_WAIT_SPEC_VERSION = 1 # macro
VK_KHR_PRESENT_WAIT_EXTENSION_NAME = "VK_KHR_present_wait" # macro
VK_KHR_uniform_buffer_standard_layout = 1 # macro
VK_KHR_UNIFORM_BUFFER_STANDARD_LAYOUT_SPEC_VERSION = 1 # macro
VK_KHR_UNIFORM_BUFFER_STANDARD_LAYOUT_EXTENSION_NAME = "VK_KHR_uniform_buffer_standard_layout" # macro
VK_KHR_buffer_device_address = 1 # macro
VK_KHR_BUFFER_DEVICE_ADDRESS_SPEC_VERSION = 1 # macro
VK_KHR_BUFFER_DEVICE_ADDRESS_EXTENSION_NAME = "VK_KHR_buffer_device_address" # macro
VK_KHR_deferred_host_operations = 1 # macro
VK_KHR_DEFERRED_HOST_OPERATIONS_SPEC_VERSION = 4 # macro
VK_KHR_DEFERRED_HOST_OPERATIONS_EXTENSION_NAME = "VK_KHR_deferred_host_operations" # macro
VK_KHR_pipeline_executable_properties = 1 # macro
VK_KHR_PIPELINE_EXECUTABLE_PROPERTIES_SPEC_VERSION = 1 # macro
VK_KHR_PIPELINE_EXECUTABLE_PROPERTIES_EXTENSION_NAME = "VK_KHR_pipeline_executable_properties" # macro
VK_KHR_map_memory2 = 1 # macro
VK_KHR_MAP_MEMORY_2_SPEC_VERSION = 1 # macro
VK_KHR_MAP_MEMORY_2_EXTENSION_NAME = "VK_KHR_map_memory2" # macro
VK_KHR_shader_integer_dot_product = 1 # macro
VK_KHR_SHADER_INTEGER_DOT_PRODUCT_SPEC_VERSION = 1 # macro
VK_KHR_SHADER_INTEGER_DOT_PRODUCT_EXTENSION_NAME = "VK_KHR_shader_integer_dot_product" # macro
VK_KHR_pipeline_library = 1 # macro
VK_KHR_PIPELINE_LIBRARY_SPEC_VERSION = 1 # macro
VK_KHR_PIPELINE_LIBRARY_EXTENSION_NAME = "VK_KHR_pipeline_library" # macro
VK_KHR_shader_non_semantic_info = 1 # macro
VK_KHR_SHADER_NON_SEMANTIC_INFO_SPEC_VERSION = 1 # macro
VK_KHR_SHADER_NON_SEMANTIC_INFO_EXTENSION_NAME = "VK_KHR_shader_non_semantic_info" # macro
VK_KHR_present_id = 1 # macro
VK_KHR_PRESENT_ID_SPEC_VERSION = 1 # macro
VK_KHR_PRESENT_ID_EXTENSION_NAME = "VK_KHR_present_id" # macro
VK_KHR_video_encode_queue = 1 # macro
VK_KHR_VIDEO_ENCODE_QUEUE_SPEC_VERSION = 12 # macro
VK_KHR_VIDEO_ENCODE_QUEUE_EXTENSION_NAME = "VK_KHR_video_encode_queue" # macro
VK_KHR_synchronization2 = 1 # macro
VK_KHR_SYNCHRONIZATION_2_SPEC_VERSION = 1 # macro
VK_KHR_SYNCHRONIZATION_2_EXTENSION_NAME = "VK_KHR_synchronization2" # macro
VK_KHR_fragment_shader_barycentric = 1 # macro
VK_KHR_FRAGMENT_SHADER_BARYCENTRIC_SPEC_VERSION = 1 # macro
VK_KHR_FRAGMENT_SHADER_BARYCENTRIC_EXTENSION_NAME = "VK_KHR_fragment_shader_barycentric" # macro
VK_KHR_shader_subgroup_uniform_control_flow = 1 # macro
VK_KHR_SHADER_SUBGROUP_UNIFORM_CONTROL_FLOW_SPEC_VERSION = 1 # macro
VK_KHR_SHADER_SUBGROUP_UNIFORM_CONTROL_FLOW_EXTENSION_NAME = "VK_KHR_shader_subgroup_uniform_control_flow" # macro
VK_KHR_zero_initialize_workgroup_memory = 1 # macro
VK_KHR_ZERO_INITIALIZE_WORKGROUP_MEMORY_SPEC_VERSION = 1 # macro
VK_KHR_ZERO_INITIALIZE_WORKGROUP_MEMORY_EXTENSION_NAME = "VK_KHR_zero_initialize_workgroup_memory" # macro
VK_KHR_workgroup_memory_explicit_layout = 1 # macro
VK_KHR_WORKGROUP_MEMORY_EXPLICIT_LAYOUT_SPEC_VERSION = 1 # macro
VK_KHR_WORKGROUP_MEMORY_EXPLICIT_LAYOUT_EXTENSION_NAME = "VK_KHR_workgroup_memory_explicit_layout" # macro
VK_KHR_copy_commands2 = 1 # macro
VK_KHR_COPY_COMMANDS_2_SPEC_VERSION = 1 # macro
VK_KHR_COPY_COMMANDS_2_EXTENSION_NAME = "VK_KHR_copy_commands2" # macro
VK_KHR_format_feature_flags2 = 1 # macro
VK_KHR_FORMAT_FEATURE_FLAGS_2_SPEC_VERSION = 2 # macro
VK_KHR_FORMAT_FEATURE_FLAGS_2_EXTENSION_NAME = "VK_KHR_format_feature_flags2" # macro
VK_KHR_ray_tracing_maintenance1 = 1 # macro
VK_KHR_RAY_TRACING_MAINTENANCE_1_SPEC_VERSION = 1 # macro
VK_KHR_RAY_TRACING_MAINTENANCE_1_EXTENSION_NAME = "VK_KHR_ray_tracing_maintenance1" # macro
VK_KHR_portability_enumeration = 1 # macro
VK_KHR_PORTABILITY_ENUMERATION_SPEC_VERSION = 1 # macro
VK_KHR_PORTABILITY_ENUMERATION_EXTENSION_NAME = "VK_KHR_portability_enumeration" # macro
VK_KHR_maintenance4 = 1 # macro
VK_KHR_MAINTENANCE_4_SPEC_VERSION = 2 # macro
VK_KHR_MAINTENANCE_4_EXTENSION_NAME = "VK_KHR_maintenance4" # macro
VK_KHR_maintenance5 = 1 # macro
VK_KHR_MAINTENANCE_5_SPEC_VERSION = 1 # macro
VK_KHR_MAINTENANCE_5_EXTENSION_NAME = "VK_KHR_maintenance5" # macro
VK_KHR_ray_tracing_position_fetch = 1 # macro
VK_KHR_RAY_TRACING_POSITION_FETCH_SPEC_VERSION = 1 # macro
VK_KHR_RAY_TRACING_POSITION_FETCH_EXTENSION_NAME = "VK_KHR_ray_tracing_position_fetch" # macro
VK_KHR_cooperative_matrix = 1 # macro
VK_KHR_COOPERATIVE_MATRIX_SPEC_VERSION = 2 # macro
VK_KHR_COOPERATIVE_MATRIX_EXTENSION_NAME = "VK_KHR_cooperative_matrix" # macro
VK_KHR_video_maintenance1 = 1 # macro
VK_KHR_VIDEO_MAINTENANCE_1_SPEC_VERSION = 1 # macro
VK_KHR_VIDEO_MAINTENANCE_1_EXTENSION_NAME = "VK_KHR_video_maintenance1" # macro
VK_KHR_vertex_attribute_divisor = 1 # macro
VK_KHR_VERTEX_ATTRIBUTE_DIVISOR_SPEC_VERSION = 1 # macro
VK_KHR_VERTEX_ATTRIBUTE_DIVISOR_EXTENSION_NAME = "VK_KHR_vertex_attribute_divisor" # macro
VK_KHR_calibrated_timestamps = 1 # macro
VK_KHR_CALIBRATED_TIMESTAMPS_SPEC_VERSION = 1 # macro
VK_KHR_CALIBRATED_TIMESTAMPS_EXTENSION_NAME = "VK_KHR_calibrated_timestamps" # macro
VK_KHR_maintenance6 = 1 # macro
VK_KHR_MAINTENANCE_6_SPEC_VERSION = 1 # macro
VK_KHR_MAINTENANCE_6_EXTENSION_NAME = "VK_KHR_maintenance6" # macro
VK_EXT_debug_report = 1 # macro
VK_EXT_DEBUG_REPORT_SPEC_VERSION = 10 # macro
VK_EXT_DEBUG_REPORT_EXTENSION_NAME = "VK_EXT_debug_report" # macro
VK_NV_glsl_shader = 1 # macro
VK_NV_GLSL_SHADER_SPEC_VERSION = 1 # macro
VK_NV_GLSL_SHADER_EXTENSION_NAME = "VK_NV_glsl_shader" # macro
VK_EXT_depth_range_unrestricted = 1 # macro
VK_EXT_DEPTH_RANGE_UNRESTRICTED_SPEC_VERSION = 1 # macro
VK_EXT_DEPTH_RANGE_UNRESTRICTED_EXTENSION_NAME = "VK_EXT_depth_range_unrestricted" # macro
VK_IMG_filter_cubic = 1 # macro
VK_IMG_FILTER_CUBIC_SPEC_VERSION = 1 # macro
VK_IMG_FILTER_CUBIC_EXTENSION_NAME = "VK_IMG_filter_cubic" # macro
VK_AMD_rasterization_order = 1 # macro
VK_AMD_RASTERIZATION_ORDER_SPEC_VERSION = 1 # macro
VK_AMD_RASTERIZATION_ORDER_EXTENSION_NAME = "VK_AMD_rasterization_order" # macro
VK_AMD_shader_trinary_minmax = 1 # macro
VK_AMD_SHADER_TRINARY_MINMAX_SPEC_VERSION = 1 # macro
VK_AMD_SHADER_TRINARY_MINMAX_EXTENSION_NAME = "VK_AMD_shader_trinary_minmax" # macro
VK_AMD_shader_explicit_vertex_parameter = 1 # macro
VK_AMD_SHADER_EXPLICIT_VERTEX_PARAMETER_SPEC_VERSION = 1 # macro
VK_AMD_SHADER_EXPLICIT_VERTEX_PARAMETER_EXTENSION_NAME = "VK_AMD_shader_explicit_vertex_parameter" # macro
VK_EXT_debug_marker = 1 # macro
VK_EXT_DEBUG_MARKER_SPEC_VERSION = 4 # macro
VK_EXT_DEBUG_MARKER_EXTENSION_NAME = "VK_EXT_debug_marker" # macro
VK_AMD_gcn_shader = 1 # macro
VK_AMD_GCN_SHADER_SPEC_VERSION = 1 # macro
VK_AMD_GCN_SHADER_EXTENSION_NAME = "VK_AMD_gcn_shader" # macro
VK_NV_dedicated_allocation = 1 # macro
VK_NV_DEDICATED_ALLOCATION_SPEC_VERSION = 1 # macro
VK_NV_DEDICATED_ALLOCATION_EXTENSION_NAME = "VK_NV_dedicated_allocation" # macro
VK_EXT_transform_feedback = 1 # macro
VK_EXT_TRANSFORM_FEEDBACK_SPEC_VERSION = 1 # macro
VK_EXT_TRANSFORM_FEEDBACK_EXTENSION_NAME = "VK_EXT_transform_feedback" # macro
VK_NVX_binary_import = 1 # macro
VK_NVX_BINARY_IMPORT_SPEC_VERSION = 1 # macro
VK_NVX_BINARY_IMPORT_EXTENSION_NAME = "VK_NVX_binary_import" # macro
VK_NVX_image_view_handle = 1 # macro
VK_NVX_IMAGE_VIEW_HANDLE_SPEC_VERSION = 2 # macro
VK_NVX_IMAGE_VIEW_HANDLE_EXTENSION_NAME = "VK_NVX_image_view_handle" # macro
VK_AMD_draw_indirect_count = 1 # macro
VK_AMD_DRAW_INDIRECT_COUNT_SPEC_VERSION = 2 # macro
VK_AMD_DRAW_INDIRECT_COUNT_EXTENSION_NAME = "VK_AMD_draw_indirect_count" # macro
VK_AMD_negative_viewport_height = 1 # macro
VK_AMD_NEGATIVE_VIEWPORT_HEIGHT_SPEC_VERSION = 1 # macro
VK_AMD_NEGATIVE_VIEWPORT_HEIGHT_EXTENSION_NAME = "VK_AMD_negative_viewport_height" # macro
VK_AMD_gpu_shader_half_float = 1 # macro
VK_AMD_GPU_SHADER_HALF_FLOAT_SPEC_VERSION = 2 # macro
VK_AMD_GPU_SHADER_HALF_FLOAT_EXTENSION_NAME = "VK_AMD_gpu_shader_half_float" # macro
VK_AMD_shader_ballot = 1 # macro
VK_AMD_SHADER_BALLOT_SPEC_VERSION = 1 # macro
VK_AMD_SHADER_BALLOT_EXTENSION_NAME = "VK_AMD_shader_ballot" # macro
VK_AMD_texture_gather_bias_lod = 1 # macro
VK_AMD_TEXTURE_GATHER_BIAS_LOD_SPEC_VERSION = 1 # macro
VK_AMD_TEXTURE_GATHER_BIAS_LOD_EXTENSION_NAME = "VK_AMD_texture_gather_bias_lod" # macro
VK_AMD_shader_info = 1 # macro
VK_AMD_SHADER_INFO_SPEC_VERSION = 1 # macro
VK_AMD_SHADER_INFO_EXTENSION_NAME = "VK_AMD_shader_info" # macro
VK_AMD_shader_image_load_store_lod = 1 # macro
VK_AMD_SHADER_IMAGE_LOAD_STORE_LOD_SPEC_VERSION = 1 # macro
VK_AMD_SHADER_IMAGE_LOAD_STORE_LOD_EXTENSION_NAME = "VK_AMD_shader_image_load_store_lod" # macro
VK_NV_corner_sampled_image = 1 # macro
VK_NV_CORNER_SAMPLED_IMAGE_SPEC_VERSION = 2 # macro
VK_NV_CORNER_SAMPLED_IMAGE_EXTENSION_NAME = "VK_NV_corner_sampled_image" # macro
VK_IMG_format_pvrtc = 1 # macro
VK_IMG_FORMAT_PVRTC_SPEC_VERSION = 1 # macro
VK_IMG_FORMAT_PVRTC_EXTENSION_NAME = "VK_IMG_format_pvrtc" # macro
VK_NV_external_memory_capabilities = 1 # macro
VK_NV_EXTERNAL_MEMORY_CAPABILITIES_SPEC_VERSION = 1 # macro
VK_NV_EXTERNAL_MEMORY_CAPABILITIES_EXTENSION_NAME = "VK_NV_external_memory_capabilities" # macro
VK_NV_external_memory = 1 # macro
VK_NV_EXTERNAL_MEMORY_SPEC_VERSION = 1 # macro
VK_NV_EXTERNAL_MEMORY_EXTENSION_NAME = "VK_NV_external_memory" # macro
VK_EXT_validation_flags = 1 # macro
VK_EXT_VALIDATION_FLAGS_SPEC_VERSION = 3 # macro
VK_EXT_VALIDATION_FLAGS_EXTENSION_NAME = "VK_EXT_validation_flags" # macro
VK_EXT_shader_subgroup_ballot = 1 # macro
VK_EXT_SHADER_SUBGROUP_BALLOT_SPEC_VERSION = 1 # macro
VK_EXT_SHADER_SUBGROUP_BALLOT_EXTENSION_NAME = "VK_EXT_shader_subgroup_ballot" # macro
VK_EXT_shader_subgroup_vote = 1 # macro
VK_EXT_SHADER_SUBGROUP_VOTE_SPEC_VERSION = 1 # macro
VK_EXT_SHADER_SUBGROUP_VOTE_EXTENSION_NAME = "VK_EXT_shader_subgroup_vote" # macro
VK_EXT_texture_compression_astc_hdr = 1 # macro
VK_EXT_TEXTURE_COMPRESSION_ASTC_HDR_SPEC_VERSION = 1 # macro
VK_EXT_TEXTURE_COMPRESSION_ASTC_HDR_EXTENSION_NAME = "VK_EXT_texture_compression_astc_hdr" # macro
VK_EXT_astc_decode_mode = 1 # macro
VK_EXT_ASTC_DECODE_MODE_SPEC_VERSION = 1 # macro
VK_EXT_ASTC_DECODE_MODE_EXTENSION_NAME = "VK_EXT_astc_decode_mode" # macro
VK_EXT_pipeline_robustness = 1 # macro
VK_EXT_PIPELINE_ROBUSTNESS_SPEC_VERSION = 1 # macro
VK_EXT_PIPELINE_ROBUSTNESS_EXTENSION_NAME = "VK_EXT_pipeline_robustness" # macro
VK_EXT_conditional_rendering = 1 # macro
VK_EXT_CONDITIONAL_RENDERING_SPEC_VERSION = 2 # macro
VK_EXT_CONDITIONAL_RENDERING_EXTENSION_NAME = "VK_EXT_conditional_rendering" # macro
VK_NV_clip_space_w_scaling = 1 # macro
VK_NV_CLIP_SPACE_W_SCALING_SPEC_VERSION = 1 # macro
VK_NV_CLIP_SPACE_W_SCALING_EXTENSION_NAME = "VK_NV_clip_space_w_scaling" # macro
VK_EXT_direct_mode_display = 1 # macro
VK_EXT_DIRECT_MODE_DISPLAY_SPEC_VERSION = 1 # macro
VK_EXT_DIRECT_MODE_DISPLAY_EXTENSION_NAME = "VK_EXT_direct_mode_display" # macro
VK_EXT_display_surface_counter = 1 # macro
VK_EXT_DISPLAY_SURFACE_COUNTER_SPEC_VERSION = 1 # macro
VK_EXT_DISPLAY_SURFACE_COUNTER_EXTENSION_NAME = "VK_EXT_display_surface_counter" # macro
VK_EXT_display_control = 1 # macro
VK_EXT_DISPLAY_CONTROL_SPEC_VERSION = 1 # macro
VK_EXT_DISPLAY_CONTROL_EXTENSION_NAME = "VK_EXT_display_control" # macro
VK_GOOGLE_display_timing = 1 # macro
VK_GOOGLE_DISPLAY_TIMING_SPEC_VERSION = 1 # macro
VK_GOOGLE_DISPLAY_TIMING_EXTENSION_NAME = "VK_GOOGLE_display_timing" # macro
VK_NV_sample_mask_override_coverage = 1 # macro
VK_NV_SAMPLE_MASK_OVERRIDE_COVERAGE_SPEC_VERSION = 1 # macro
VK_NV_SAMPLE_MASK_OVERRIDE_COVERAGE_EXTENSION_NAME = "VK_NV_sample_mask_override_coverage" # macro
VK_NV_geometry_shader_passthrough = 1 # macro
VK_NV_GEOMETRY_SHADER_PASSTHROUGH_SPEC_VERSION = 1 # macro
VK_NV_GEOMETRY_SHADER_PASSTHROUGH_EXTENSION_NAME = "VK_NV_geometry_shader_passthrough" # macro
VK_NV_viewport_array2 = 1 # macro
VK_NV_VIEWPORT_ARRAY_2_SPEC_VERSION = 1 # macro
VK_NV_VIEWPORT_ARRAY_2_EXTENSION_NAME = "VK_NV_viewport_array2" # macro
VK_NV_VIEWPORT_ARRAY2_SPEC_VERSION = 1 # macro
VK_NV_VIEWPORT_ARRAY2_EXTENSION_NAME = "VK_NV_viewport_array2" # macro
VK_NVX_multiview_per_view_attributes = 1 # macro
VK_NVX_MULTIVIEW_PER_VIEW_ATTRIBUTES_SPEC_VERSION = 1 # macro
VK_NVX_MULTIVIEW_PER_VIEW_ATTRIBUTES_EXTENSION_NAME = "VK_NVX_multiview_per_view_attributes" # macro
VK_NV_viewport_swizzle = 1 # macro
VK_NV_VIEWPORT_SWIZZLE_SPEC_VERSION = 1 # macro
VK_NV_VIEWPORT_SWIZZLE_EXTENSION_NAME = "VK_NV_viewport_swizzle" # macro
VK_EXT_discard_rectangles = 1 # macro
VK_EXT_DISCARD_RECTANGLES_SPEC_VERSION = 2 # macro
VK_EXT_DISCARD_RECTANGLES_EXTENSION_NAME = "VK_EXT_discard_rectangles" # macro
VK_EXT_conservative_rasterization = 1 # macro
VK_EXT_CONSERVATIVE_RASTERIZATION_SPEC_VERSION = 1 # macro
VK_EXT_CONSERVATIVE_RASTERIZATION_EXTENSION_NAME = "VK_EXT_conservative_rasterization" # macro
VK_EXT_depth_clip_enable = 1 # macro
VK_EXT_DEPTH_CLIP_ENABLE_SPEC_VERSION = 1 # macro
VK_EXT_DEPTH_CLIP_ENABLE_EXTENSION_NAME = "VK_EXT_depth_clip_enable" # macro
VK_EXT_swapchain_colorspace = 1 # macro
VK_EXT_SWAPCHAIN_COLOR_SPACE_SPEC_VERSION = 4 # macro
VK_EXT_SWAPCHAIN_COLOR_SPACE_EXTENSION_NAME = "VK_EXT_swapchain_colorspace" # macro
VK_EXT_hdr_metadata = 1 # macro
VK_EXT_HDR_METADATA_SPEC_VERSION = 2 # macro
VK_EXT_HDR_METADATA_EXTENSION_NAME = "VK_EXT_hdr_metadata" # macro
VK_IMG_relaxed_line_rasterization = 1 # macro
VK_IMG_RELAXED_LINE_RASTERIZATION_SPEC_VERSION = 1 # macro
VK_IMG_RELAXED_LINE_RASTERIZATION_EXTENSION_NAME = "VK_IMG_relaxed_line_rasterization" # macro
VK_EXT_external_memory_dma_buf = 1 # macro
VK_EXT_EXTERNAL_MEMORY_DMA_BUF_SPEC_VERSION = 1 # macro
VK_EXT_EXTERNAL_MEMORY_DMA_BUF_EXTENSION_NAME = "VK_EXT_external_memory_dma_buf" # macro
VK_EXT_queue_family_foreign = 1 # macro
VK_EXT_QUEUE_FAMILY_FOREIGN_SPEC_VERSION = 1 # macro
VK_EXT_QUEUE_FAMILY_FOREIGN_EXTENSION_NAME = "VK_EXT_queue_family_foreign" # macro
VK_QUEUE_FAMILY_FOREIGN_EXT = (~2) # macro
VK_EXT_debug_utils = 1 # macro
VK_EXT_DEBUG_UTILS_SPEC_VERSION = 2 # macro
VK_EXT_DEBUG_UTILS_EXTENSION_NAME = "VK_EXT_debug_utils" # macro
VK_EXT_sampler_filter_minmax = 1 # macro
VK_EXT_SAMPLER_FILTER_MINMAX_SPEC_VERSION = 2 # macro
VK_EXT_SAMPLER_FILTER_MINMAX_EXTENSION_NAME = "VK_EXT_sampler_filter_minmax" # macro
VK_AMD_gpu_shader_int16 = 1 # macro
VK_AMD_GPU_SHADER_INT16_SPEC_VERSION = 2 # macro
VK_AMD_GPU_SHADER_INT16_EXTENSION_NAME = "VK_AMD_gpu_shader_int16" # macro
VK_AMD_mixed_attachment_samples = 1 # macro
VK_AMD_MIXED_ATTACHMENT_SAMPLES_SPEC_VERSION = 1 # macro
VK_AMD_MIXED_ATTACHMENT_SAMPLES_EXTENSION_NAME = "VK_AMD_mixed_attachment_samples" # macro
VK_AMD_shader_fragment_mask = 1 # macro
VK_AMD_SHADER_FRAGMENT_MASK_SPEC_VERSION = 1 # macro
VK_AMD_SHADER_FRAGMENT_MASK_EXTENSION_NAME = "VK_AMD_shader_fragment_mask" # macro
VK_EXT_inline_uniform_block = 1 # macro
VK_EXT_INLINE_UNIFORM_BLOCK_SPEC_VERSION = 1 # macro
VK_EXT_INLINE_UNIFORM_BLOCK_EXTENSION_NAME = "VK_EXT_inline_uniform_block" # macro
VK_EXT_shader_stencil_export = 1 # macro
VK_EXT_SHADER_STENCIL_EXPORT_SPEC_VERSION = 1 # macro
VK_EXT_SHADER_STENCIL_EXPORT_EXTENSION_NAME = "VK_EXT_shader_stencil_export" # macro
VK_EXT_sample_locations = 1 # macro
VK_EXT_SAMPLE_LOCATIONS_SPEC_VERSION = 1 # macro
VK_EXT_SAMPLE_LOCATIONS_EXTENSION_NAME = "VK_EXT_sample_locations" # macro
VK_EXT_blend_operation_advanced = 1 # macro
VK_EXT_BLEND_OPERATION_ADVANCED_SPEC_VERSION = 2 # macro
VK_EXT_BLEND_OPERATION_ADVANCED_EXTENSION_NAME = "VK_EXT_blend_operation_advanced" # macro
VK_NV_fragment_coverage_to_color = 1 # macro
VK_NV_FRAGMENT_COVERAGE_TO_COLOR_SPEC_VERSION = 1 # macro
VK_NV_FRAGMENT_COVERAGE_TO_COLOR_EXTENSION_NAME = "VK_NV_fragment_coverage_to_color" # macro
VK_NV_framebuffer_mixed_samples = 1 # macro
VK_NV_FRAMEBUFFER_MIXED_SAMPLES_SPEC_VERSION = 1 # macro
VK_NV_FRAMEBUFFER_MIXED_SAMPLES_EXTENSION_NAME = "VK_NV_framebuffer_mixed_samples" # macro
VK_NV_fill_rectangle = 1 # macro
VK_NV_FILL_RECTANGLE_SPEC_VERSION = 1 # macro
VK_NV_FILL_RECTANGLE_EXTENSION_NAME = "VK_NV_fill_rectangle" # macro
VK_NV_shader_sm_builtins = 1 # macro
VK_NV_SHADER_SM_BUILTINS_SPEC_VERSION = 1 # macro
VK_NV_SHADER_SM_BUILTINS_EXTENSION_NAME = "VK_NV_shader_sm_builtins" # macro
VK_EXT_post_depth_coverage = 1 # macro
VK_EXT_POST_DEPTH_COVERAGE_SPEC_VERSION = 1 # macro
VK_EXT_POST_DEPTH_COVERAGE_EXTENSION_NAME = "VK_EXT_post_depth_coverage" # macro
VK_EXT_image_drm_format_modifier = 1 # macro
VK_EXT_IMAGE_DRM_FORMAT_MODIFIER_SPEC_VERSION = 2 # macro
VK_EXT_IMAGE_DRM_FORMAT_MODIFIER_EXTENSION_NAME = "VK_EXT_image_drm_format_modifier" # macro
VK_EXT_validation_cache = 1 # macro
VK_EXT_VALIDATION_CACHE_SPEC_VERSION = 1 # macro
VK_EXT_VALIDATION_CACHE_EXTENSION_NAME = "VK_EXT_validation_cache" # macro
VK_EXT_descriptor_indexing = 1 # macro
VK_EXT_DESCRIPTOR_INDEXING_SPEC_VERSION = 2 # macro
VK_EXT_DESCRIPTOR_INDEXING_EXTENSION_NAME = "VK_EXT_descriptor_indexing" # macro
VK_EXT_shader_viewport_index_layer = 1 # macro
VK_EXT_SHADER_VIEWPORT_INDEX_LAYER_SPEC_VERSION = 1 # macro
VK_EXT_SHADER_VIEWPORT_INDEX_LAYER_EXTENSION_NAME = "VK_EXT_shader_viewport_index_layer" # macro
VK_NV_shading_rate_image = 1 # macro
VK_NV_SHADING_RATE_IMAGE_SPEC_VERSION = 3 # macro
VK_NV_SHADING_RATE_IMAGE_EXTENSION_NAME = "VK_NV_shading_rate_image" # macro
VK_NV_ray_tracing = 1 # macro
VK_NV_RAY_TRACING_SPEC_VERSION = 3 # macro
VK_NV_RAY_TRACING_EXTENSION_NAME = "VK_NV_ray_tracing" # macro
VK_SHADER_UNUSED_KHR = (~0) # macro
VK_SHADER_UNUSED_NV = (~0) # macro
VK_NV_representative_fragment_test = 1 # macro
VK_NV_REPRESENTATIVE_FRAGMENT_TEST_SPEC_VERSION = 2 # macro
VK_NV_REPRESENTATIVE_FRAGMENT_TEST_EXTENSION_NAME = "VK_NV_representative_fragment_test" # macro
VK_EXT_filter_cubic = 1 # macro
VK_EXT_FILTER_CUBIC_SPEC_VERSION = 3 # macro
VK_EXT_FILTER_CUBIC_EXTENSION_NAME = "VK_EXT_filter_cubic" # macro
VK_QCOM_render_pass_shader_resolve = 1 # macro
VK_QCOM_RENDER_PASS_SHADER_RESOLVE_SPEC_VERSION = 4 # macro
VK_QCOM_RENDER_PASS_SHADER_RESOLVE_EXTENSION_NAME = "VK_QCOM_render_pass_shader_resolve" # macro
VK_EXT_global_priority = 1 # macro
VK_EXT_GLOBAL_PRIORITY_SPEC_VERSION = 2 # macro
VK_EXT_GLOBAL_PRIORITY_EXTENSION_NAME = "VK_EXT_global_priority" # macro
VK_EXT_external_memory_host = 1 # macro
VK_EXT_EXTERNAL_MEMORY_HOST_SPEC_VERSION = 1 # macro
VK_EXT_EXTERNAL_MEMORY_HOST_EXTENSION_NAME = "VK_EXT_external_memory_host" # macro
VK_AMD_buffer_marker = 1 # macro
VK_AMD_BUFFER_MARKER_SPEC_VERSION = 1 # macro
VK_AMD_BUFFER_MARKER_EXTENSION_NAME = "VK_AMD_buffer_marker" # macro
VK_AMD_pipeline_compiler_control = 1 # macro
VK_AMD_PIPELINE_COMPILER_CONTROL_SPEC_VERSION = 1 # macro
VK_AMD_PIPELINE_COMPILER_CONTROL_EXTENSION_NAME = "VK_AMD_pipeline_compiler_control" # macro
VK_EXT_calibrated_timestamps = 1 # macro
VK_EXT_CALIBRATED_TIMESTAMPS_SPEC_VERSION = 2 # macro
VK_EXT_CALIBRATED_TIMESTAMPS_EXTENSION_NAME = "VK_EXT_calibrated_timestamps" # macro
VK_AMD_shader_core_properties = 1 # macro
VK_AMD_SHADER_CORE_PROPERTIES_SPEC_VERSION = 2 # macro
VK_AMD_SHADER_CORE_PROPERTIES_EXTENSION_NAME = "VK_AMD_shader_core_properties" # macro
VK_AMD_memory_overallocation_behavior = 1 # macro
VK_AMD_MEMORY_OVERALLOCATION_BEHAVIOR_SPEC_VERSION = 1 # macro
VK_AMD_MEMORY_OVERALLOCATION_BEHAVIOR_EXTENSION_NAME = "VK_AMD_memory_overallocation_behavior" # macro
VK_EXT_vertex_attribute_divisor = 1 # macro
VK_EXT_VERTEX_ATTRIBUTE_DIVISOR_SPEC_VERSION = 3 # macro
VK_EXT_VERTEX_ATTRIBUTE_DIVISOR_EXTENSION_NAME = "VK_EXT_vertex_attribute_divisor" # macro
VK_EXT_pipeline_creation_feedback = 1 # macro
VK_EXT_PIPELINE_CREATION_FEEDBACK_SPEC_VERSION = 1 # macro
VK_EXT_PIPELINE_CREATION_FEEDBACK_EXTENSION_NAME = "VK_EXT_pipeline_creation_feedback" # macro
VK_NV_shader_subgroup_partitioned = 1 # macro
VK_NV_SHADER_SUBGROUP_PARTITIONED_SPEC_VERSION = 1 # macro
VK_NV_SHADER_SUBGROUP_PARTITIONED_EXTENSION_NAME = "VK_NV_shader_subgroup_partitioned" # macro
VK_NV_compute_shader_derivatives = 1 # macro
VK_NV_COMPUTE_SHADER_DERIVATIVES_SPEC_VERSION = 1 # macro
VK_NV_COMPUTE_SHADER_DERIVATIVES_EXTENSION_NAME = "VK_NV_compute_shader_derivatives" # macro
VK_NV_mesh_shader = 1 # macro
VK_NV_MESH_SHADER_SPEC_VERSION = 1 # macro
VK_NV_MESH_SHADER_EXTENSION_NAME = "VK_NV_mesh_shader" # macro
VK_NV_fragment_shader_barycentric = 1 # macro
VK_NV_FRAGMENT_SHADER_BARYCENTRIC_SPEC_VERSION = 1 # macro
VK_NV_FRAGMENT_SHADER_BARYCENTRIC_EXTENSION_NAME = "VK_NV_fragment_shader_barycentric" # macro
VK_NV_shader_image_footprint = 1 # macro
VK_NV_SHADER_IMAGE_FOOTPRINT_SPEC_VERSION = 2 # macro
VK_NV_SHADER_IMAGE_FOOTPRINT_EXTENSION_NAME = "VK_NV_shader_image_footprint" # macro
VK_NV_scissor_exclusive = 1 # macro
VK_NV_SCISSOR_EXCLUSIVE_SPEC_VERSION = 2 # macro
VK_NV_SCISSOR_EXCLUSIVE_EXTENSION_NAME = "VK_NV_scissor_exclusive" # macro
VK_NV_device_diagnostic_checkpoints = 1 # macro
VK_NV_DEVICE_DIAGNOSTIC_CHECKPOINTS_SPEC_VERSION = 2 # macro
VK_NV_DEVICE_DIAGNOSTIC_CHECKPOINTS_EXTENSION_NAME = "VK_NV_device_diagnostic_checkpoints" # macro
VK_INTEL_shader_integer_functions2 = 1 # macro
VK_INTEL_SHADER_INTEGER_FUNCTIONS_2_SPEC_VERSION = 1 # macro
VK_INTEL_SHADER_INTEGER_FUNCTIONS_2_EXTENSION_NAME = "VK_INTEL_shader_integer_functions2" # macro
VK_INTEL_performance_query = 1 # macro
VK_INTEL_PERFORMANCE_QUERY_SPEC_VERSION = 2 # macro
VK_INTEL_PERFORMANCE_QUERY_EXTENSION_NAME = "VK_INTEL_performance_query" # macro
VK_EXT_pci_bus_info = 1 # macro
VK_EXT_PCI_BUS_INFO_SPEC_VERSION = 2 # macro
VK_EXT_PCI_BUS_INFO_EXTENSION_NAME = "VK_EXT_pci_bus_info" # macro
VK_AMD_display_native_hdr = 1 # macro
VK_AMD_DISPLAY_NATIVE_HDR_SPEC_VERSION = 1 # macro
VK_AMD_DISPLAY_NATIVE_HDR_EXTENSION_NAME = "VK_AMD_display_native_hdr" # macro
VK_EXT_fragment_density_map = 1 # macro
VK_EXT_FRAGMENT_DENSITY_MAP_SPEC_VERSION = 2 # macro
VK_EXT_FRAGMENT_DENSITY_MAP_EXTENSION_NAME = "VK_EXT_fragment_density_map" # macro
VK_EXT_scalar_block_layout = 1 # macro
VK_EXT_SCALAR_BLOCK_LAYOUT_SPEC_VERSION = 1 # macro
VK_EXT_SCALAR_BLOCK_LAYOUT_EXTENSION_NAME = "VK_EXT_scalar_block_layout" # macro
VK_GOOGLE_hlsl_functionality1 = 1 # macro
VK_GOOGLE_HLSL_FUNCTIONALITY_1_SPEC_VERSION = 1 # macro
VK_GOOGLE_HLSL_FUNCTIONALITY_1_EXTENSION_NAME = "VK_GOOGLE_hlsl_functionality1" # macro
VK_GOOGLE_HLSL_FUNCTIONALITY1_SPEC_VERSION = 1 # macro
VK_GOOGLE_HLSL_FUNCTIONALITY1_EXTENSION_NAME = "VK_GOOGLE_hlsl_functionality1" # macro
VK_GOOGLE_decorate_string = 1 # macro
VK_GOOGLE_DECORATE_STRING_SPEC_VERSION = 1 # macro
VK_GOOGLE_DECORATE_STRING_EXTENSION_NAME = "VK_GOOGLE_decorate_string" # macro
VK_EXT_subgroup_size_control = 1 # macro
VK_EXT_SUBGROUP_SIZE_CONTROL_SPEC_VERSION = 2 # macro
VK_EXT_SUBGROUP_SIZE_CONTROL_EXTENSION_NAME = "VK_EXT_subgroup_size_control" # macro
VK_AMD_shader_core_properties2 = 1 # macro
VK_AMD_SHADER_CORE_PROPERTIES_2_SPEC_VERSION = 1 # macro
VK_AMD_SHADER_CORE_PROPERTIES_2_EXTENSION_NAME = "VK_AMD_shader_core_properties2" # macro
VK_AMD_device_coherent_memory = 1 # macro
VK_AMD_DEVICE_COHERENT_MEMORY_SPEC_VERSION = 1 # macro
VK_AMD_DEVICE_COHERENT_MEMORY_EXTENSION_NAME = "VK_AMD_device_coherent_memory" # macro
VK_EXT_shader_image_atomic_int64 = 1 # macro
VK_EXT_SHADER_IMAGE_ATOMIC_INT64_SPEC_VERSION = 1 # macro
VK_EXT_SHADER_IMAGE_ATOMIC_INT64_EXTENSION_NAME = "VK_EXT_shader_image_atomic_int64" # macro
VK_EXT_memory_budget = 1 # macro
VK_EXT_MEMORY_BUDGET_SPEC_VERSION = 1 # macro
VK_EXT_MEMORY_BUDGET_EXTENSION_NAME = "VK_EXT_memory_budget" # macro
VK_EXT_memory_priority = 1 # macro
VK_EXT_MEMORY_PRIORITY_SPEC_VERSION = 1 # macro
VK_EXT_MEMORY_PRIORITY_EXTENSION_NAME = "VK_EXT_memory_priority" # macro
VK_NV_dedicated_allocation_image_aliasing = 1 # macro
VK_NV_DEDICATED_ALLOCATION_IMAGE_ALIASING_SPEC_VERSION = 1 # macro
VK_NV_DEDICATED_ALLOCATION_IMAGE_ALIASING_EXTENSION_NAME = "VK_NV_dedicated_allocation_image_aliasing" # macro
VK_EXT_buffer_device_address = 1 # macro
VK_EXT_BUFFER_DEVICE_ADDRESS_SPEC_VERSION = 2 # macro
VK_EXT_BUFFER_DEVICE_ADDRESS_EXTENSION_NAME = "VK_EXT_buffer_device_address" # macro
VK_EXT_tooling_info = 1 # macro
VK_EXT_TOOLING_INFO_SPEC_VERSION = 1 # macro
VK_EXT_TOOLING_INFO_EXTENSION_NAME = "VK_EXT_tooling_info" # macro
VK_EXT_separate_stencil_usage = 1 # macro
VK_EXT_SEPARATE_STENCIL_USAGE_SPEC_VERSION = 1 # macro
VK_EXT_SEPARATE_STENCIL_USAGE_EXTENSION_NAME = "VK_EXT_separate_stencil_usage" # macro
VK_EXT_validation_features = 1 # macro
VK_EXT_VALIDATION_FEATURES_SPEC_VERSION = 6 # macro
VK_EXT_VALIDATION_FEATURES_EXTENSION_NAME = "VK_EXT_validation_features" # macro
VK_NV_cooperative_matrix = 1 # macro
VK_NV_COOPERATIVE_MATRIX_SPEC_VERSION = 1 # macro
VK_NV_COOPERATIVE_MATRIX_EXTENSION_NAME = "VK_NV_cooperative_matrix" # macro
VK_NV_coverage_reduction_mode = 1 # macro
VK_NV_COVERAGE_REDUCTION_MODE_SPEC_VERSION = 1 # macro
VK_NV_COVERAGE_REDUCTION_MODE_EXTENSION_NAME = "VK_NV_coverage_reduction_mode" # macro
VK_EXT_fragment_shader_interlock = 1 # macro
VK_EXT_FRAGMENT_SHADER_INTERLOCK_SPEC_VERSION = 1 # macro
VK_EXT_FRAGMENT_SHADER_INTERLOCK_EXTENSION_NAME = "VK_EXT_fragment_shader_interlock" # macro
VK_EXT_ycbcr_image_arrays = 1 # macro
VK_EXT_YCBCR_IMAGE_ARRAYS_SPEC_VERSION = 1 # macro
VK_EXT_YCBCR_IMAGE_ARRAYS_EXTENSION_NAME = "VK_EXT_ycbcr_image_arrays" # macro
VK_EXT_provoking_vertex = 1 # macro
VK_EXT_PROVOKING_VERTEX_SPEC_VERSION = 1 # macro
VK_EXT_PROVOKING_VERTEX_EXTENSION_NAME = "VK_EXT_provoking_vertex" # macro
VK_EXT_headless_surface = 1 # macro
VK_EXT_HEADLESS_SURFACE_SPEC_VERSION = 1 # macro
VK_EXT_HEADLESS_SURFACE_EXTENSION_NAME = "VK_EXT_headless_surface" # macro
VK_EXT_line_rasterization = 1 # macro
VK_EXT_LINE_RASTERIZATION_SPEC_VERSION = 1 # macro
VK_EXT_LINE_RASTERIZATION_EXTENSION_NAME = "VK_EXT_line_rasterization" # macro
VK_EXT_shader_atomic_float = 1 # macro
VK_EXT_SHADER_ATOMIC_FLOAT_SPEC_VERSION = 1 # macro
VK_EXT_SHADER_ATOMIC_FLOAT_EXTENSION_NAME = "VK_EXT_shader_atomic_float" # macro
VK_EXT_host_query_reset = 1 # macro
VK_EXT_HOST_QUERY_RESET_SPEC_VERSION = 1 # macro
VK_EXT_HOST_QUERY_RESET_EXTENSION_NAME = "VK_EXT_host_query_reset" # macro
VK_EXT_index_type_uint8 = 1 # macro
VK_EXT_INDEX_TYPE_UINT8_SPEC_VERSION = 1 # macro
VK_EXT_INDEX_TYPE_UINT8_EXTENSION_NAME = "VK_EXT_index_type_uint8" # macro
VK_EXT_extended_dynamic_state = 1 # macro
VK_EXT_EXTENDED_DYNAMIC_STATE_SPEC_VERSION = 1 # macro
VK_EXT_EXTENDED_DYNAMIC_STATE_EXTENSION_NAME = "VK_EXT_extended_dynamic_state" # macro
VK_EXT_host_image_copy = 1 # macro
VK_EXT_HOST_IMAGE_COPY_SPEC_VERSION = 1 # macro
VK_EXT_HOST_IMAGE_COPY_EXTENSION_NAME = "VK_EXT_host_image_copy" # macro
VK_EXT_shader_atomic_float2 = 1 # macro
VK_EXT_SHADER_ATOMIC_FLOAT_2_SPEC_VERSION = 1 # macro
VK_EXT_SHADER_ATOMIC_FLOAT_2_EXTENSION_NAME = "VK_EXT_shader_atomic_float2" # macro
VK_EXT_surface_maintenance1 = 1 # macro
VK_EXT_SURFACE_MAINTENANCE_1_SPEC_VERSION = 1 # macro
VK_EXT_SURFACE_MAINTENANCE_1_EXTENSION_NAME = "VK_EXT_surface_maintenance1" # macro
VK_EXT_swapchain_maintenance1 = 1 # macro
VK_EXT_SWAPCHAIN_MAINTENANCE_1_SPEC_VERSION = 1 # macro
VK_EXT_SWAPCHAIN_MAINTENANCE_1_EXTENSION_NAME = "VK_EXT_swapchain_maintenance1" # macro
VK_EXT_shader_demote_to_helper_invocation = 1 # macro
VK_EXT_SHADER_DEMOTE_TO_HELPER_INVOCATION_SPEC_VERSION = 1 # macro
VK_EXT_SHADER_DEMOTE_TO_HELPER_INVOCATION_EXTENSION_NAME = "VK_EXT_shader_demote_to_helper_invocation" # macro
VK_NV_device_generated_commands = 1 # macro
VK_NV_DEVICE_GENERATED_COMMANDS_SPEC_VERSION = 3 # macro
VK_NV_DEVICE_GENERATED_COMMANDS_EXTENSION_NAME = "VK_NV_device_generated_commands" # macro
VK_NV_inherited_viewport_scissor = 1 # macro
VK_NV_INHERITED_VIEWPORT_SCISSOR_SPEC_VERSION = 1 # macro
VK_NV_INHERITED_VIEWPORT_SCISSOR_EXTENSION_NAME = "VK_NV_inherited_viewport_scissor" # macro
VK_EXT_texel_buffer_alignment = 1 # macro
VK_EXT_TEXEL_BUFFER_ALIGNMENT_SPEC_VERSION = 1 # macro
VK_EXT_TEXEL_BUFFER_ALIGNMENT_EXTENSION_NAME = "VK_EXT_texel_buffer_alignment" # macro
VK_QCOM_render_pass_transform = 1 # macro
VK_QCOM_RENDER_PASS_TRANSFORM_SPEC_VERSION = 4 # macro
VK_QCOM_RENDER_PASS_TRANSFORM_EXTENSION_NAME = "VK_QCOM_render_pass_transform" # macro
VK_EXT_depth_bias_control = 1 # macro
VK_EXT_DEPTH_BIAS_CONTROL_SPEC_VERSION = 1 # macro
VK_EXT_DEPTH_BIAS_CONTROL_EXTENSION_NAME = "VK_EXT_depth_bias_control" # macro
VK_EXT_device_memory_report = 1 # macro
VK_EXT_DEVICE_MEMORY_REPORT_SPEC_VERSION = 2 # macro
VK_EXT_DEVICE_MEMORY_REPORT_EXTENSION_NAME = "VK_EXT_device_memory_report" # macro
VK_EXT_acquire_drm_display = 1 # macro
VK_EXT_ACQUIRE_DRM_DISPLAY_SPEC_VERSION = 1 # macro
VK_EXT_ACQUIRE_DRM_DISPLAY_EXTENSION_NAME = "VK_EXT_acquire_drm_display" # macro
VK_EXT_robustness2 = 1 # macro
VK_EXT_ROBUSTNESS_2_SPEC_VERSION = 1 # macro
VK_EXT_ROBUSTNESS_2_EXTENSION_NAME = "VK_EXT_robustness2" # macro
VK_EXT_custom_border_color = 1 # macro
VK_EXT_CUSTOM_BORDER_COLOR_SPEC_VERSION = 12 # macro
VK_EXT_CUSTOM_BORDER_COLOR_EXTENSION_NAME = "VK_EXT_custom_border_color" # macro
VK_GOOGLE_user_type = 1 # macro
VK_GOOGLE_USER_TYPE_SPEC_VERSION = 1 # macro
VK_GOOGLE_USER_TYPE_EXTENSION_NAME = "VK_GOOGLE_user_type" # macro
VK_NV_present_barrier = 1 # macro
VK_NV_PRESENT_BARRIER_SPEC_VERSION = 1 # macro
VK_NV_PRESENT_BARRIER_EXTENSION_NAME = "VK_NV_present_barrier" # macro
VK_EXT_private_data = 1 # macro
VK_EXT_PRIVATE_DATA_SPEC_VERSION = 1 # macro
VK_EXT_PRIVATE_DATA_EXTENSION_NAME = "VK_EXT_private_data" # macro
VK_EXT_pipeline_creation_cache_control = 1 # macro
VK_EXT_PIPELINE_CREATION_CACHE_CONTROL_SPEC_VERSION = 3 # macro
VK_EXT_PIPELINE_CREATION_CACHE_CONTROL_EXTENSION_NAME = "VK_EXT_pipeline_creation_cache_control" # macro
VK_NV_device_diagnostics_config = 1 # macro
VK_NV_DEVICE_DIAGNOSTICS_CONFIG_SPEC_VERSION = 2 # macro
VK_NV_DEVICE_DIAGNOSTICS_CONFIG_EXTENSION_NAME = "VK_NV_device_diagnostics_config" # macro
VK_QCOM_render_pass_store_ops = 1 # macro
VK_QCOM_RENDER_PASS_STORE_OPS_SPEC_VERSION = 2 # macro
VK_QCOM_RENDER_PASS_STORE_OPS_EXTENSION_NAME = "VK_QCOM_render_pass_store_ops" # macro
VK_NV_cuda_kernel_launch = 1 # macro
VK_NV_CUDA_KERNEL_LAUNCH_SPEC_VERSION = 2 # macro
VK_NV_CUDA_KERNEL_LAUNCH_EXTENSION_NAME = "VK_NV_cuda_kernel_launch" # macro
VK_NV_low_latency = 1 # macro
VK_NV_LOW_LATENCY_SPEC_VERSION = 1 # macro
VK_NV_LOW_LATENCY_EXTENSION_NAME = "VK_NV_low_latency" # macro
VK_EXT_descriptor_buffer = 1 # macro
VK_EXT_DESCRIPTOR_BUFFER_SPEC_VERSION = 1 # macro
VK_EXT_DESCRIPTOR_BUFFER_EXTENSION_NAME = "VK_EXT_descriptor_buffer" # macro
VK_EXT_graphics_pipeline_library = 1 # macro
VK_EXT_GRAPHICS_PIPELINE_LIBRARY_SPEC_VERSION = 1 # macro
VK_EXT_GRAPHICS_PIPELINE_LIBRARY_EXTENSION_NAME = "VK_EXT_graphics_pipeline_library" # macro
VK_AMD_shader_early_and_late_fragment_tests = 1 # macro
VK_AMD_SHADER_EARLY_AND_LATE_FRAGMENT_TESTS_SPEC_VERSION = 1 # macro
VK_AMD_SHADER_EARLY_AND_LATE_FRAGMENT_TESTS_EXTENSION_NAME = "VK_AMD_shader_early_and_late_fragment_tests" # macro
VK_NV_fragment_shading_rate_enums = 1 # macro
VK_NV_FRAGMENT_SHADING_RATE_ENUMS_SPEC_VERSION = 1 # macro
VK_NV_FRAGMENT_SHADING_RATE_ENUMS_EXTENSION_NAME = "VK_NV_fragment_shading_rate_enums" # macro
VK_NV_ray_tracing_motion_blur = 1 # macro
VK_NV_RAY_TRACING_MOTION_BLUR_SPEC_VERSION = 1 # macro
VK_NV_RAY_TRACING_MOTION_BLUR_EXTENSION_NAME = "VK_NV_ray_tracing_motion_blur" # macro
VK_EXT_ycbcr_2plane_444_formats = 1 # macro
VK_EXT_YCBCR_2PLANE_444_FORMATS_SPEC_VERSION = 1 # macro
VK_EXT_YCBCR_2PLANE_444_FORMATS_EXTENSION_NAME = "VK_EXT_ycbcr_2plane_444_formats" # macro
VK_EXT_fragment_density_map2 = 1 # macro
VK_EXT_FRAGMENT_DENSITY_MAP_2_SPEC_VERSION = 1 # macro
VK_EXT_FRAGMENT_DENSITY_MAP_2_EXTENSION_NAME = "VK_EXT_fragment_density_map2" # macro
VK_QCOM_rotated_copy_commands = 1 # macro
VK_QCOM_ROTATED_COPY_COMMANDS_SPEC_VERSION = 2 # macro
VK_QCOM_ROTATED_COPY_COMMANDS_EXTENSION_NAME = "VK_QCOM_rotated_copy_commands" # macro
VK_EXT_image_robustness = 1 # macro
VK_EXT_IMAGE_ROBUSTNESS_SPEC_VERSION = 1 # macro
VK_EXT_IMAGE_ROBUSTNESS_EXTENSION_NAME = "VK_EXT_image_robustness" # macro
VK_EXT_image_compression_control = 1 # macro
VK_EXT_IMAGE_COMPRESSION_CONTROL_SPEC_VERSION = 1 # macro
VK_EXT_IMAGE_COMPRESSION_CONTROL_EXTENSION_NAME = "VK_EXT_image_compression_control" # macro
VK_EXT_attachment_feedback_loop_layout = 1 # macro
VK_EXT_ATTACHMENT_FEEDBACK_LOOP_LAYOUT_SPEC_VERSION = 2 # macro
VK_EXT_ATTACHMENT_FEEDBACK_LOOP_LAYOUT_EXTENSION_NAME = "VK_EXT_attachment_feedback_loop_layout" # macro
VK_EXT_4444_formats = 1 # macro
VK_EXT_4444_FORMATS_SPEC_VERSION = 1 # macro
VK_EXT_4444_FORMATS_EXTENSION_NAME = "VK_EXT_4444_formats" # macro
VK_EXT_device_fault = 1 # macro
VK_EXT_DEVICE_FAULT_SPEC_VERSION = 2 # macro
VK_EXT_DEVICE_FAULT_EXTENSION_NAME = "VK_EXT_device_fault" # macro
VK_ARM_rasterization_order_attachment_access = 1 # macro
VK_ARM_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_SPEC_VERSION = 1 # macro
VK_ARM_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_EXTENSION_NAME = "VK_ARM_rasterization_order_attachment_access" # macro
VK_EXT_rgba10x6_formats = 1 # macro
VK_EXT_RGBA10X6_FORMATS_SPEC_VERSION = 1 # macro
VK_EXT_RGBA10X6_FORMATS_EXTENSION_NAME = "VK_EXT_rgba10x6_formats" # macro
VK_VALVE_mutable_descriptor_type = 1 # macro
VK_VALVE_MUTABLE_DESCRIPTOR_TYPE_SPEC_VERSION = 1 # macro
VK_VALVE_MUTABLE_DESCRIPTOR_TYPE_EXTENSION_NAME = "VK_VALVE_mutable_descriptor_type" # macro
VK_EXT_vertex_input_dynamic_state = 1 # macro
VK_EXT_VERTEX_INPUT_DYNAMIC_STATE_SPEC_VERSION = 2 # macro
VK_EXT_VERTEX_INPUT_DYNAMIC_STATE_EXTENSION_NAME = "VK_EXT_vertex_input_dynamic_state" # macro
VK_EXT_physical_device_drm = 1 # macro
VK_EXT_PHYSICAL_DEVICE_DRM_SPEC_VERSION = 1 # macro
VK_EXT_PHYSICAL_DEVICE_DRM_EXTENSION_NAME = "VK_EXT_physical_device_drm" # macro
VK_EXT_device_address_binding_report = 1 # macro
VK_EXT_DEVICE_ADDRESS_BINDING_REPORT_SPEC_VERSION = 1 # macro
VK_EXT_DEVICE_ADDRESS_BINDING_REPORT_EXTENSION_NAME = "VK_EXT_device_address_binding_report" # macro
VK_EXT_depth_clip_control = 1 # macro
VK_EXT_DEPTH_CLIP_CONTROL_SPEC_VERSION = 1 # macro
VK_EXT_DEPTH_CLIP_CONTROL_EXTENSION_NAME = "VK_EXT_depth_clip_control" # macro
VK_EXT_primitive_topology_list_restart = 1 # macro
VK_EXT_PRIMITIVE_TOPOLOGY_LIST_RESTART_SPEC_VERSION = 1 # macro
VK_EXT_PRIMITIVE_TOPOLOGY_LIST_RESTART_EXTENSION_NAME = "VK_EXT_primitive_topology_list_restart" # macro
VK_HUAWEI_subpass_shading = 1 # macro
VK_HUAWEI_SUBPASS_SHADING_SPEC_VERSION = 3 # macro
VK_HUAWEI_SUBPASS_SHADING_EXTENSION_NAME = "VK_HUAWEI_subpass_shading" # macro
VK_HUAWEI_invocation_mask = 1 # macro
VK_HUAWEI_INVOCATION_MASK_SPEC_VERSION = 1 # macro
VK_HUAWEI_INVOCATION_MASK_EXTENSION_NAME = "VK_HUAWEI_invocation_mask" # macro
VK_NV_external_memory_rdma = 1 # macro
VK_NV_EXTERNAL_MEMORY_RDMA_SPEC_VERSION = 1 # macro
VK_NV_EXTERNAL_MEMORY_RDMA_EXTENSION_NAME = "VK_NV_external_memory_rdma" # macro
VK_EXT_pipeline_properties = 1 # macro
VK_EXT_PIPELINE_PROPERTIES_SPEC_VERSION = 1 # macro
VK_EXT_PIPELINE_PROPERTIES_EXTENSION_NAME = "VK_EXT_pipeline_properties" # macro
VK_EXT_frame_boundary = 1 # macro
VK_EXT_FRAME_BOUNDARY_SPEC_VERSION = 1 # macro
VK_EXT_FRAME_BOUNDARY_EXTENSION_NAME = "VK_EXT_frame_boundary" # macro
VK_EXT_multisampled_render_to_single_sampled = 1 # macro
VK_EXT_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_SPEC_VERSION = 1 # macro
VK_EXT_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_EXTENSION_NAME = "VK_EXT_multisampled_render_to_single_sampled" # macro
VK_EXT_extended_dynamic_state2 = 1 # macro
VK_EXT_EXTENDED_DYNAMIC_STATE_2_SPEC_VERSION = 1 # macro
VK_EXT_EXTENDED_DYNAMIC_STATE_2_EXTENSION_NAME = "VK_EXT_extended_dynamic_state2" # macro
VK_EXT_color_write_enable = 1 # macro
VK_EXT_COLOR_WRITE_ENABLE_SPEC_VERSION = 1 # macro
VK_EXT_COLOR_WRITE_ENABLE_EXTENSION_NAME = "VK_EXT_color_write_enable" # macro
VK_EXT_primitives_generated_query = 1 # macro
VK_EXT_PRIMITIVES_GENERATED_QUERY_SPEC_VERSION = 1 # macro
VK_EXT_PRIMITIVES_GENERATED_QUERY_EXTENSION_NAME = "VK_EXT_primitives_generated_query" # macro
VK_EXT_global_priority_query = 1 # macro
VK_EXT_GLOBAL_PRIORITY_QUERY_SPEC_VERSION = 1 # macro
VK_EXT_GLOBAL_PRIORITY_QUERY_EXTENSION_NAME = "VK_EXT_global_priority_query" # macro
VK_MAX_GLOBAL_PRIORITY_SIZE_EXT = 16 # macro
VK_EXT_image_view_min_lod = 1 # macro
VK_EXT_IMAGE_VIEW_MIN_LOD_SPEC_VERSION = 1 # macro
VK_EXT_IMAGE_VIEW_MIN_LOD_EXTENSION_NAME = "VK_EXT_image_view_min_lod" # macro
VK_EXT_multi_draw = 1 # macro
VK_EXT_MULTI_DRAW_SPEC_VERSION = 1 # macro
VK_EXT_MULTI_DRAW_EXTENSION_NAME = "VK_EXT_multi_draw" # macro
VK_EXT_image_2d_view_of_3d = 1 # macro
VK_EXT_IMAGE_2D_VIEW_OF_3D_SPEC_VERSION = 1 # macro
VK_EXT_IMAGE_2D_VIEW_OF_3D_EXTENSION_NAME = "VK_EXT_image_2d_view_of_3d" # macro
VK_EXT_shader_tile_image = 1 # macro
VK_EXT_SHADER_TILE_IMAGE_SPEC_VERSION = 1 # macro
VK_EXT_SHADER_TILE_IMAGE_EXTENSION_NAME = "VK_EXT_shader_tile_image" # macro
VK_EXT_opacity_micromap = 1 # macro
VK_EXT_OPACITY_MICROMAP_SPEC_VERSION = 2 # macro
VK_EXT_OPACITY_MICROMAP_EXTENSION_NAME = "VK_EXT_opacity_micromap" # macro
VK_EXT_load_store_op_none = 1 # macro
VK_EXT_LOAD_STORE_OP_NONE_SPEC_VERSION = 1 # macro
VK_EXT_LOAD_STORE_OP_NONE_EXTENSION_NAME = "VK_EXT_load_store_op_none" # macro
VK_HUAWEI_cluster_culling_shader = 1 # macro
VK_HUAWEI_CLUSTER_CULLING_SHADER_SPEC_VERSION = 3 # macro
VK_HUAWEI_CLUSTER_CULLING_SHADER_EXTENSION_NAME = "VK_HUAWEI_cluster_culling_shader" # macro
VK_EXT_border_color_swizzle = 1 # macro
VK_EXT_BORDER_COLOR_SWIZZLE_SPEC_VERSION = 1 # macro
VK_EXT_BORDER_COLOR_SWIZZLE_EXTENSION_NAME = "VK_EXT_border_color_swizzle" # macro
VK_EXT_pageable_device_local_memory = 1 # macro
VK_EXT_PAGEABLE_DEVICE_LOCAL_MEMORY_SPEC_VERSION = 1 # macro
VK_EXT_PAGEABLE_DEVICE_LOCAL_MEMORY_EXTENSION_NAME = "VK_EXT_pageable_device_local_memory" # macro
VK_ARM_shader_core_properties = 1 # macro
VK_ARM_SHADER_CORE_PROPERTIES_SPEC_VERSION = 1 # macro
VK_ARM_SHADER_CORE_PROPERTIES_EXTENSION_NAME = "VK_ARM_shader_core_properties" # macro
VK_ARM_scheduling_controls = 1 # macro
VK_ARM_SCHEDULING_CONTROLS_SPEC_VERSION = 1 # macro
VK_ARM_SCHEDULING_CONTROLS_EXTENSION_NAME = "VK_ARM_scheduling_controls" # macro
VK_EXT_image_sliced_view_of_3d = 1 # macro
VK_EXT_IMAGE_SLICED_VIEW_OF_3D_SPEC_VERSION = 1 # macro
VK_EXT_IMAGE_SLICED_VIEW_OF_3D_EXTENSION_NAME = "VK_EXT_image_sliced_view_of_3d" # macro
VK_REMAINING_3D_SLICES_EXT = (~0) # macro
VK_VALVE_descriptor_set_host_mapping = 1 # macro
VK_VALVE_DESCRIPTOR_SET_HOST_MAPPING_SPEC_VERSION = 1 # macro
VK_VALVE_DESCRIPTOR_SET_HOST_MAPPING_EXTENSION_NAME = "VK_VALVE_descriptor_set_host_mapping" # macro
VK_EXT_depth_clamp_zero_one = 1 # macro
VK_EXT_DEPTH_CLAMP_ZERO_ONE_SPEC_VERSION = 1 # macro
VK_EXT_DEPTH_CLAMP_ZERO_ONE_EXTENSION_NAME = "VK_EXT_depth_clamp_zero_one" # macro
VK_EXT_non_seamless_cube_map = 1 # macro
VK_EXT_NON_SEAMLESS_CUBE_MAP_SPEC_VERSION = 1 # macro
VK_EXT_NON_SEAMLESS_CUBE_MAP_EXTENSION_NAME = "VK_EXT_non_seamless_cube_map" # macro
VK_ARM_render_pass_striped = 1 # macro
VK_ARM_RENDER_PASS_STRIPED_SPEC_VERSION = 1 # macro
VK_ARM_RENDER_PASS_STRIPED_EXTENSION_NAME = "VK_ARM_render_pass_striped" # macro
VK_QCOM_fragment_density_map_offset = 1 # macro
VK_QCOM_FRAGMENT_DENSITY_MAP_OFFSET_SPEC_VERSION = 1 # macro
VK_QCOM_FRAGMENT_DENSITY_MAP_OFFSET_EXTENSION_NAME = "VK_QCOM_fragment_density_map_offset" # macro
VK_NV_copy_memory_indirect = 1 # macro
VK_NV_COPY_MEMORY_INDIRECT_SPEC_VERSION = 1 # macro
VK_NV_COPY_MEMORY_INDIRECT_EXTENSION_NAME = "VK_NV_copy_memory_indirect" # macro
VK_NV_memory_decompression = 1 # macro
VK_NV_MEMORY_DECOMPRESSION_SPEC_VERSION = 1 # macro
VK_NV_MEMORY_DECOMPRESSION_EXTENSION_NAME = "VK_NV_memory_decompression" # macro
VK_NV_device_generated_commands_compute = 1 # macro
VK_NV_DEVICE_GENERATED_COMMANDS_COMPUTE_SPEC_VERSION = 2 # macro
VK_NV_DEVICE_GENERATED_COMMANDS_COMPUTE_EXTENSION_NAME = "VK_NV_device_generated_commands_compute" # macro
VK_NV_linear_color_attachment = 1 # macro
VK_NV_LINEAR_COLOR_ATTACHMENT_SPEC_VERSION = 1 # macro
VK_NV_LINEAR_COLOR_ATTACHMENT_EXTENSION_NAME = "VK_NV_linear_color_attachment" # macro
VK_GOOGLE_surfaceless_query = 1 # macro
VK_GOOGLE_SURFACELESS_QUERY_SPEC_VERSION = 2 # macro
VK_GOOGLE_SURFACELESS_QUERY_EXTENSION_NAME = "VK_GOOGLE_surfaceless_query" # macro
VK_EXT_image_compression_control_swapchain = 1 # macro
VK_EXT_IMAGE_COMPRESSION_CONTROL_SWAPCHAIN_SPEC_VERSION = 1 # macro
VK_EXT_IMAGE_COMPRESSION_CONTROL_SWAPCHAIN_EXTENSION_NAME = "VK_EXT_image_compression_control_swapchain" # macro
VK_QCOM_image_processing = 1 # macro
VK_QCOM_IMAGE_PROCESSING_SPEC_VERSION = 1 # macro
VK_QCOM_IMAGE_PROCESSING_EXTENSION_NAME = "VK_QCOM_image_processing" # macro
VK_EXT_nested_command_buffer = 1 # macro
VK_EXT_NESTED_COMMAND_BUFFER_SPEC_VERSION = 1 # macro
VK_EXT_NESTED_COMMAND_BUFFER_EXTENSION_NAME = "VK_EXT_nested_command_buffer" # macro
VK_EXT_external_memory_acquire_unmodified = 1 # macro
VK_EXT_EXTERNAL_MEMORY_ACQUIRE_UNMODIFIED_SPEC_VERSION = 1 # macro
VK_EXT_EXTERNAL_MEMORY_ACQUIRE_UNMODIFIED_EXTENSION_NAME = "VK_EXT_external_memory_acquire_unmodified" # macro
VK_EXT_extended_dynamic_state3 = 1 # macro
VK_EXT_EXTENDED_DYNAMIC_STATE_3_SPEC_VERSION = 2 # macro
VK_EXT_EXTENDED_DYNAMIC_STATE_3_EXTENSION_NAME = "VK_EXT_extended_dynamic_state3" # macro
VK_EXT_subpass_merge_feedback = 1 # macro
VK_EXT_SUBPASS_MERGE_FEEDBACK_SPEC_VERSION = 2 # macro
VK_EXT_SUBPASS_MERGE_FEEDBACK_EXTENSION_NAME = "VK_EXT_subpass_merge_feedback" # macro
VK_LUNARG_direct_driver_loading = 1 # macro
VK_LUNARG_DIRECT_DRIVER_LOADING_SPEC_VERSION = 1 # macro
VK_LUNARG_DIRECT_DRIVER_LOADING_EXTENSION_NAME = "VK_LUNARG_direct_driver_loading" # macro
VK_EXT_shader_module_identifier = 1 # macro
VK_MAX_SHADER_MODULE_IDENTIFIER_SIZE_EXT = 32 # macro
VK_EXT_SHADER_MODULE_IDENTIFIER_SPEC_VERSION = 1 # macro
VK_EXT_SHADER_MODULE_IDENTIFIER_EXTENSION_NAME = "VK_EXT_shader_module_identifier" # macro
VK_EXT_rasterization_order_attachment_access = 1 # macro
VK_EXT_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_SPEC_VERSION = 1 # macro
VK_EXT_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_EXTENSION_NAME = "VK_EXT_rasterization_order_attachment_access" # macro
VK_NV_optical_flow = 1 # macro
VK_NV_OPTICAL_FLOW_SPEC_VERSION = 1 # macro
VK_NV_OPTICAL_FLOW_EXTENSION_NAME = "VK_NV_optical_flow" # macro
VK_EXT_legacy_dithering = 1 # macro
VK_EXT_LEGACY_DITHERING_SPEC_VERSION = 1 # macro
VK_EXT_LEGACY_DITHERING_EXTENSION_NAME = "VK_EXT_legacy_dithering" # macro
VK_EXT_pipeline_protected_access = 1 # macro
VK_EXT_PIPELINE_PROTECTED_ACCESS_SPEC_VERSION = 1 # macro
VK_EXT_PIPELINE_PROTECTED_ACCESS_EXTENSION_NAME = "VK_EXT_pipeline_protected_access" # macro
VK_EXT_shader_object = 1 # macro
VK_EXT_SHADER_OBJECT_SPEC_VERSION = 1 # macro
VK_EXT_SHADER_OBJECT_EXTENSION_NAME = "VK_EXT_shader_object" # macro
VK_QCOM_tile_properties = 1 # macro
VK_QCOM_TILE_PROPERTIES_SPEC_VERSION = 1 # macro
VK_QCOM_TILE_PROPERTIES_EXTENSION_NAME = "VK_QCOM_tile_properties" # macro
VK_SEC_amigo_profiling = 1 # macro
VK_SEC_AMIGO_PROFILING_SPEC_VERSION = 1 # macro
VK_SEC_AMIGO_PROFILING_EXTENSION_NAME = "VK_SEC_amigo_profiling" # macro
VK_QCOM_multiview_per_view_viewports = 1 # macro
VK_QCOM_MULTIVIEW_PER_VIEW_VIEWPORTS_SPEC_VERSION = 1 # macro
VK_QCOM_MULTIVIEW_PER_VIEW_VIEWPORTS_EXTENSION_NAME = "VK_QCOM_multiview_per_view_viewports" # macro
VK_NV_ray_tracing_invocation_reorder = 1 # macro
VK_NV_RAY_TRACING_INVOCATION_REORDER_SPEC_VERSION = 1 # macro
VK_NV_RAY_TRACING_INVOCATION_REORDER_EXTENSION_NAME = "VK_NV_ray_tracing_invocation_reorder" # macro
VK_NV_extended_sparse_address_space = 1 # macro
VK_NV_EXTENDED_SPARSE_ADDRESS_SPACE_SPEC_VERSION = 1 # macro
VK_NV_EXTENDED_SPARSE_ADDRESS_SPACE_EXTENSION_NAME = "VK_NV_extended_sparse_address_space" # macro
VK_EXT_mutable_descriptor_type = 1 # macro
VK_EXT_MUTABLE_DESCRIPTOR_TYPE_SPEC_VERSION = 1 # macro
VK_EXT_MUTABLE_DESCRIPTOR_TYPE_EXTENSION_NAME = "VK_EXT_mutable_descriptor_type" # macro
VK_EXT_layer_settings = 1 # macro
VK_EXT_LAYER_SETTINGS_SPEC_VERSION = 2 # macro
VK_EXT_LAYER_SETTINGS_EXTENSION_NAME = "VK_EXT_layer_settings" # macro
VK_ARM_shader_core_builtins = 1 # macro
VK_ARM_SHADER_CORE_BUILTINS_SPEC_VERSION = 2 # macro
VK_ARM_SHADER_CORE_BUILTINS_EXTENSION_NAME = "VK_ARM_shader_core_builtins" # macro
VK_EXT_pipeline_library_group_handles = 1 # macro
VK_EXT_PIPELINE_LIBRARY_GROUP_HANDLES_SPEC_VERSION = 1 # macro
VK_EXT_PIPELINE_LIBRARY_GROUP_HANDLES_EXTENSION_NAME = "VK_EXT_pipeline_library_group_handles" # macro
VK_EXT_dynamic_rendering_unused_attachments = 1 # macro
VK_EXT_DYNAMIC_RENDERING_UNUSED_ATTACHMENTS_SPEC_VERSION = 1 # macro
VK_EXT_DYNAMIC_RENDERING_UNUSED_ATTACHMENTS_EXTENSION_NAME = "VK_EXT_dynamic_rendering_unused_attachments" # macro
VK_NV_low_latency2 = 1 # macro
VK_NV_LOW_LATENCY_2_SPEC_VERSION = 2 # macro
VK_NV_LOW_LATENCY_2_EXTENSION_NAME = "VK_NV_low_latency2" # macro
VK_QCOM_multiview_per_view_render_areas = 1 # macro
VK_QCOM_MULTIVIEW_PER_VIEW_RENDER_AREAS_SPEC_VERSION = 1 # macro
VK_QCOM_MULTIVIEW_PER_VIEW_RENDER_AREAS_EXTENSION_NAME = "VK_QCOM_multiview_per_view_render_areas" # macro
VK_NV_per_stage_descriptor_set = 1 # macro
VK_NV_PER_STAGE_DESCRIPTOR_SET_SPEC_VERSION = 1 # macro
VK_NV_PER_STAGE_DESCRIPTOR_SET_EXTENSION_NAME = "VK_NV_per_stage_descriptor_set" # macro
VK_QCOM_image_processing2 = 1 # macro
VK_QCOM_IMAGE_PROCESSING_2_SPEC_VERSION = 1 # macro
VK_QCOM_IMAGE_PROCESSING_2_EXTENSION_NAME = "VK_QCOM_image_processing2" # macro
VK_QCOM_filter_cubic_weights = 1 # macro
VK_QCOM_FILTER_CUBIC_WEIGHTS_SPEC_VERSION = 1 # macro
VK_QCOM_FILTER_CUBIC_WEIGHTS_EXTENSION_NAME = "VK_QCOM_filter_cubic_weights" # macro
VK_QCOM_ycbcr_degamma = 1 # macro
VK_QCOM_YCBCR_DEGAMMA_SPEC_VERSION = 1 # macro
VK_QCOM_YCBCR_DEGAMMA_EXTENSION_NAME = "VK_QCOM_ycbcr_degamma" # macro
VK_QCOM_filter_cubic_clamp = 1 # macro
VK_QCOM_FILTER_CUBIC_CLAMP_SPEC_VERSION = 1 # macro
VK_QCOM_FILTER_CUBIC_CLAMP_EXTENSION_NAME = "VK_QCOM_filter_cubic_clamp" # macro
VK_EXT_attachment_feedback_loop_dynamic_state = 1 # macro
VK_EXT_ATTACHMENT_FEEDBACK_LOOP_DYNAMIC_STATE_SPEC_VERSION = 1 # macro
VK_EXT_ATTACHMENT_FEEDBACK_LOOP_DYNAMIC_STATE_EXTENSION_NAME = "VK_EXT_attachment_feedback_loop_dynamic_state" # macro
VK_MSFT_layered_driver = 1 # macro
VK_MSFT_LAYERED_DRIVER_SPEC_VERSION = 1 # macro
VK_MSFT_LAYERED_DRIVER_EXTENSION_NAME = "VK_MSFT_layered_driver" # macro
VK_NV_descriptor_pool_overallocation = 1 # macro
VK_NV_DESCRIPTOR_POOL_OVERALLOCATION_SPEC_VERSION = 1 # macro
VK_NV_DESCRIPTOR_POOL_OVERALLOCATION_EXTENSION_NAME = "VK_NV_descriptor_pool_overallocation" # macro
VK_KHR_acceleration_structure = 1 # macro
VK_KHR_ACCELERATION_STRUCTURE_SPEC_VERSION = 13 # macro
VK_KHR_ACCELERATION_STRUCTURE_EXTENSION_NAME = "VK_KHR_acceleration_structure" # macro
VK_KHR_ray_tracing_pipeline = 1 # macro
VK_KHR_RAY_TRACING_PIPELINE_SPEC_VERSION = 1 # macro
VK_KHR_RAY_TRACING_PIPELINE_EXTENSION_NAME = "VK_KHR_ray_tracing_pipeline" # macro
VK_KHR_ray_query = 1 # macro
VK_KHR_RAY_QUERY_SPEC_VERSION = 1 # macro
VK_KHR_RAY_QUERY_EXTENSION_NAME = "VK_KHR_ray_query" # macro
VK_EXT_mesh_shader = 1 # macro
VK_EXT_MESH_SHADER_SPEC_VERSION = 1 # macro
VK_EXT_MESH_SHADER_EXTENSION_NAME = "VK_EXT_mesh_shader" # macro
VkBool32 = ctypes.c_uint32
VkDeviceAddress = ctypes.c_uint64
VkDeviceSize = ctypes.c_uint64
VkFlags = ctypes.c_uint32
VkSampleMask = ctypes.c_uint32
class struct_VkBuffer_T(Structure):
    pass

VkBuffer = ctypes.POINTER(struct_VkBuffer_T)
class struct_VkImage_T(Structure):
    pass

VkImage = ctypes.POINTER(struct_VkImage_T)
class struct_VkInstance_T(Structure):
    pass

VkInstance = ctypes.POINTER(struct_VkInstance_T)
class struct_VkPhysicalDevice_T(Structure):
    pass

VkPhysicalDevice = ctypes.POINTER(struct_VkPhysicalDevice_T)
class struct_VkDevice_T(Structure):
    pass

VkDevice = ctypes.POINTER(struct_VkDevice_T)
class struct_VkQueue_T(Structure):
    pass

VkQueue = ctypes.POINTER(struct_VkQueue_T)
class struct_VkSemaphore_T(Structure):
    pass

VkSemaphore = ctypes.POINTER(struct_VkSemaphore_T)
class struct_VkCommandBuffer_T(Structure):
    pass

VkCommandBuffer = ctypes.POINTER(struct_VkCommandBuffer_T)
class struct_VkFence_T(Structure):
    pass

VkFence = ctypes.POINTER(struct_VkFence_T)
class struct_VkDeviceMemory_T(Structure):
    pass

VkDeviceMemory = ctypes.POINTER(struct_VkDeviceMemory_T)
class struct_VkEvent_T(Structure):
    pass

VkEvent = ctypes.POINTER(struct_VkEvent_T)
class struct_VkQueryPool_T(Structure):
    pass

VkQueryPool = ctypes.POINTER(struct_VkQueryPool_T)
class struct_VkBufferView_T(Structure):
    pass

VkBufferView = ctypes.POINTER(struct_VkBufferView_T)
class struct_VkImageView_T(Structure):
    pass

VkImageView = ctypes.POINTER(struct_VkImageView_T)
class struct_VkShaderModule_T(Structure):
    pass

VkShaderModule = ctypes.POINTER(struct_VkShaderModule_T)
class struct_VkPipelineCache_T(Structure):
    pass

VkPipelineCache = ctypes.POINTER(struct_VkPipelineCache_T)
class struct_VkPipelineLayout_T(Structure):
    pass

VkPipelineLayout = ctypes.POINTER(struct_VkPipelineLayout_T)
class struct_VkPipeline_T(Structure):
    pass

VkPipeline = ctypes.POINTER(struct_VkPipeline_T)
class struct_VkRenderPass_T(Structure):
    pass

VkRenderPass = ctypes.POINTER(struct_VkRenderPass_T)
class struct_VkDescriptorSetLayout_T(Structure):
    pass

VkDescriptorSetLayout = ctypes.POINTER(struct_VkDescriptorSetLayout_T)
class struct_VkSampler_T(Structure):
    pass

VkSampler = ctypes.POINTER(struct_VkSampler_T)
class struct_VkDescriptorSet_T(Structure):
    pass

VkDescriptorSet = ctypes.POINTER(struct_VkDescriptorSet_T)
class struct_VkDescriptorPool_T(Structure):
    pass

VkDescriptorPool = ctypes.POINTER(struct_VkDescriptorPool_T)
class struct_VkFramebuffer_T(Structure):
    pass

VkFramebuffer = ctypes.POINTER(struct_VkFramebuffer_T)
class struct_VkCommandPool_T(Structure):
    pass

VkCommandPool = ctypes.POINTER(struct_VkCommandPool_T)

# values for enumeration 'VkResult'
VkResult__enumvalues = {
    0: 'VK_SUCCESS',
    1: 'VK_NOT_READY',
    2: 'VK_TIMEOUT',
    3: 'VK_EVENT_SET',
    4: 'VK_EVENT_RESET',
    5: 'VK_INCOMPLETE',
    -1: 'VK_ERROR_OUT_OF_HOST_MEMORY',
    -2: 'VK_ERROR_OUT_OF_DEVICE_MEMORY',
    -3: 'VK_ERROR_INITIALIZATION_FAILED',
    -4: 'VK_ERROR_DEVICE_LOST',
    -5: 'VK_ERROR_MEMORY_MAP_FAILED',
    -6: 'VK_ERROR_LAYER_NOT_PRESENT',
    -7: 'VK_ERROR_EXTENSION_NOT_PRESENT',
    -8: 'VK_ERROR_FEATURE_NOT_PRESENT',
    -9: 'VK_ERROR_INCOMPATIBLE_DRIVER',
    -10: 'VK_ERROR_TOO_MANY_OBJECTS',
    -11: 'VK_ERROR_FORMAT_NOT_SUPPORTED',
    -12: 'VK_ERROR_FRAGMENTED_POOL',
    -13: 'VK_ERROR_UNKNOWN',
    -1000069000: 'VK_ERROR_OUT_OF_POOL_MEMORY',
    -1000072003: 'VK_ERROR_INVALID_EXTERNAL_HANDLE',
    -1000161000: 'VK_ERROR_FRAGMENTATION',
    -1000257000: 'VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS',
    1000297000: 'VK_PIPELINE_COMPILE_REQUIRED',
    -1000000000: 'VK_ERROR_SURFACE_LOST_KHR',
    -1000000001: 'VK_ERROR_NATIVE_WINDOW_IN_USE_KHR',
    1000001003: 'VK_SUBOPTIMAL_KHR',
    -1000001004: 'VK_ERROR_OUT_OF_DATE_KHR',
    -1000003001: 'VK_ERROR_INCOMPATIBLE_DISPLAY_KHR',
    -1000011001: 'VK_ERROR_VALIDATION_FAILED_EXT',
    -1000012000: 'VK_ERROR_INVALID_SHADER_NV',
    -1000023000: 'VK_ERROR_IMAGE_USAGE_NOT_SUPPORTED_KHR',
    -1000023001: 'VK_ERROR_VIDEO_PICTURE_LAYOUT_NOT_SUPPORTED_KHR',
    -1000023002: 'VK_ERROR_VIDEO_PROFILE_OPERATION_NOT_SUPPORTED_KHR',
    -1000023003: 'VK_ERROR_VIDEO_PROFILE_FORMAT_NOT_SUPPORTED_KHR',
    -1000023004: 'VK_ERROR_VIDEO_PROFILE_CODEC_NOT_SUPPORTED_KHR',
    -1000023005: 'VK_ERROR_VIDEO_STD_VERSION_NOT_SUPPORTED_KHR',
    -1000158000: 'VK_ERROR_INVALID_DRM_FORMAT_MODIFIER_PLANE_LAYOUT_EXT',
    -1000174001: 'VK_ERROR_NOT_PERMITTED_KHR',
    -1000255000: 'VK_ERROR_FULL_SCREEN_EXCLUSIVE_MODE_LOST_EXT',
    1000268000: 'VK_THREAD_IDLE_KHR',
    1000268001: 'VK_THREAD_DONE_KHR',
    1000268002: 'VK_OPERATION_DEFERRED_KHR',
    1000268003: 'VK_OPERATION_NOT_DEFERRED_KHR',
    -1000299000: 'VK_ERROR_INVALID_VIDEO_STD_PARAMETERS_KHR',
    -1000338000: 'VK_ERROR_COMPRESSION_EXHAUSTED_EXT',
    1000482000: 'VK_ERROR_INCOMPATIBLE_SHADER_BINARY_EXT',
    -1000069000: 'VK_ERROR_OUT_OF_POOL_MEMORY_KHR',
    -1000072003: 'VK_ERROR_INVALID_EXTERNAL_HANDLE_KHR',
    -1000161000: 'VK_ERROR_FRAGMENTATION_EXT',
    -1000174001: 'VK_ERROR_NOT_PERMITTED_EXT',
    -1000257000: 'VK_ERROR_INVALID_DEVICE_ADDRESS_EXT',
    -1000257000: 'VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS_KHR',
    1000297000: 'VK_PIPELINE_COMPILE_REQUIRED_EXT',
    1000297000: 'VK_ERROR_PIPELINE_COMPILE_REQUIRED_EXT',
    2147483647: 'VK_RESULT_MAX_ENUM',
}
VK_SUCCESS = 0
VK_NOT_READY = 1
VK_TIMEOUT = 2
VK_EVENT_SET = 3
VK_EVENT_RESET = 4
VK_INCOMPLETE = 5
VK_ERROR_OUT_OF_HOST_MEMORY = -1
VK_ERROR_OUT_OF_DEVICE_MEMORY = -2
VK_ERROR_INITIALIZATION_FAILED = -3
VK_ERROR_DEVICE_LOST = -4
VK_ERROR_MEMORY_MAP_FAILED = -5
VK_ERROR_LAYER_NOT_PRESENT = -6
VK_ERROR_EXTENSION_NOT_PRESENT = -7
VK_ERROR_FEATURE_NOT_PRESENT = -8
VK_ERROR_INCOMPATIBLE_DRIVER = -9
VK_ERROR_TOO_MANY_OBJECTS = -10
VK_ERROR_FORMAT_NOT_SUPPORTED = -11
VK_ERROR_FRAGMENTED_POOL = -12
VK_ERROR_UNKNOWN = -13
VK_ERROR_OUT_OF_POOL_MEMORY = -1000069000
VK_ERROR_INVALID_EXTERNAL_HANDLE = -1000072003
VK_ERROR_FRAGMENTATION = -1000161000
VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS = -1000257000
VK_PIPELINE_COMPILE_REQUIRED = 1000297000
VK_ERROR_SURFACE_LOST_KHR = -1000000000
VK_ERROR_NATIVE_WINDOW_IN_USE_KHR = -1000000001
VK_SUBOPTIMAL_KHR = 1000001003
VK_ERROR_OUT_OF_DATE_KHR = -1000001004
VK_ERROR_INCOMPATIBLE_DISPLAY_KHR = -1000003001
VK_ERROR_VALIDATION_FAILED_EXT = -1000011001
VK_ERROR_INVALID_SHADER_NV = -1000012000
VK_ERROR_IMAGE_USAGE_NOT_SUPPORTED_KHR = -1000023000
VK_ERROR_VIDEO_PICTURE_LAYOUT_NOT_SUPPORTED_KHR = -1000023001
VK_ERROR_VIDEO_PROFILE_OPERATION_NOT_SUPPORTED_KHR = -1000023002
VK_ERROR_VIDEO_PROFILE_FORMAT_NOT_SUPPORTED_KHR = -1000023003
VK_ERROR_VIDEO_PROFILE_CODEC_NOT_SUPPORTED_KHR = -1000023004
VK_ERROR_VIDEO_STD_VERSION_NOT_SUPPORTED_KHR = -1000023005
VK_ERROR_INVALID_DRM_FORMAT_MODIFIER_PLANE_LAYOUT_EXT = -1000158000
VK_ERROR_NOT_PERMITTED_KHR = -1000174001
VK_ERROR_FULL_SCREEN_EXCLUSIVE_MODE_LOST_EXT = -1000255000
VK_THREAD_IDLE_KHR = 1000268000
VK_THREAD_DONE_KHR = 1000268001
VK_OPERATION_DEFERRED_KHR = 1000268002
VK_OPERATION_NOT_DEFERRED_KHR = 1000268003
VK_ERROR_INVALID_VIDEO_STD_PARAMETERS_KHR = -1000299000
VK_ERROR_COMPRESSION_EXHAUSTED_EXT = -1000338000
VK_ERROR_INCOMPATIBLE_SHADER_BINARY_EXT = 1000482000
VK_ERROR_OUT_OF_POOL_MEMORY_KHR = -1000069000
VK_ERROR_INVALID_EXTERNAL_HANDLE_KHR = -1000072003
VK_ERROR_FRAGMENTATION_EXT = -1000161000
VK_ERROR_NOT_PERMITTED_EXT = -1000174001
VK_ERROR_INVALID_DEVICE_ADDRESS_EXT = -1000257000
VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS_KHR = -1000257000
VK_PIPELINE_COMPILE_REQUIRED_EXT = 1000297000
VK_ERROR_PIPELINE_COMPILE_REQUIRED_EXT = 1000297000
VK_RESULT_MAX_ENUM = 2147483647
VkResult = ctypes.c_int32 # enum

# values for enumeration 'VkStructureType'
VkStructureType__enumvalues = {
    0: 'VK_STRUCTURE_TYPE_APPLICATION_INFO',
    1: 'VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO',
    2: 'VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO',
    3: 'VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO',
    4: 'VK_STRUCTURE_TYPE_SUBMIT_INFO',
    5: 'VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO',
    6: 'VK_STRUCTURE_TYPE_MAPPED_MEMORY_RANGE',
    7: 'VK_STRUCTURE_TYPE_BIND_SPARSE_INFO',
    8: 'VK_STRUCTURE_TYPE_FENCE_CREATE_INFO',
    9: 'VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO',
    10: 'VK_STRUCTURE_TYPE_EVENT_CREATE_INFO',
    11: 'VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO',
    12: 'VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO',
    13: 'VK_STRUCTURE_TYPE_BUFFER_VIEW_CREATE_INFO',
    14: 'VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO',
    15: 'VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO',
    16: 'VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO',
    17: 'VK_STRUCTURE_TYPE_PIPELINE_CACHE_CREATE_INFO',
    18: 'VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO',
    19: 'VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO',
    20: 'VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO',
    21: 'VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO',
    22: 'VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO',
    23: 'VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO',
    24: 'VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO',
    25: 'VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO',
    26: 'VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO',
    27: 'VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO',
    28: 'VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO',
    29: 'VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO',
    30: 'VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO',
    31: 'VK_STRUCTURE_TYPE_SAMPLER_CREATE_INFO',
    32: 'VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO',
    33: 'VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO',
    34: 'VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO',
    35: 'VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET',
    36: 'VK_STRUCTURE_TYPE_COPY_DESCRIPTOR_SET',
    37: 'VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO',
    38: 'VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO',
    39: 'VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO',
    40: 'VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO',
    41: 'VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_INFO',
    42: 'VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO',
    43: 'VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO',
    44: 'VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER',
    45: 'VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER',
    46: 'VK_STRUCTURE_TYPE_MEMORY_BARRIER',
    47: 'VK_STRUCTURE_TYPE_LOADER_INSTANCE_CREATE_INFO',
    48: 'VK_STRUCTURE_TYPE_LOADER_DEVICE_CREATE_INFO',
    1000094000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_PROPERTIES',
    1000157000: 'VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO',
    1000157001: 'VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO',
    1000083000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES',
    1000127000: 'VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS',
    1000127001: 'VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO',
    1000060000: 'VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO',
    1000060003: 'VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO',
    1000060004: 'VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO',
    1000060005: 'VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO',
    1000060006: 'VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO',
    1000060013: 'VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO',
    1000060014: 'VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO',
    1000070000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES',
    1000070001: 'VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO',
    1000146000: 'VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2',
    1000146001: 'VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2',
    1000146002: 'VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2',
    1000146003: 'VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2',
    1000146004: 'VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2',
    1000059000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2',
    1000059001: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2',
    1000059002: 'VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2',
    1000059003: 'VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2',
    1000059004: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2',
    1000059005: 'VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2',
    1000059006: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2',
    1000059007: 'VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2',
    1000059008: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2',
    1000117000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES',
    1000117001: 'VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO',
    1000117002: 'VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO',
    1000117003: 'VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO',
    1000053000: 'VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO',
    1000053001: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES',
    1000053002: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES',
    1000120000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES',
    1000145000: 'VK_STRUCTURE_TYPE_PROTECTED_SUBMIT_INFO',
    1000145001: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_FEATURES',
    1000145002: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_PROPERTIES',
    1000145003: 'VK_STRUCTURE_TYPE_DEVICE_QUEUE_INFO_2',
    1000156000: 'VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO',
    1000156001: 'VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO',
    1000156002: 'VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO',
    1000156003: 'VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO',
    1000156004: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES',
    1000156005: 'VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES',
    1000085000: 'VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO',
    1000071000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO',
    1000071001: 'VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES',
    1000071002: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO',
    1000071003: 'VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES',
    1000071004: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES',
    1000072000: 'VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO',
    1000072001: 'VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO',
    1000072002: 'VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO',
    1000112000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO',
    1000112001: 'VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES',
    1000113000: 'VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO',
    1000077000: 'VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO',
    1000076000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO',
    1000076001: 'VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES',
    1000168000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES',
    1000168001: 'VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT',
    1000063000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETERS_FEATURES',
    49: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_FEATURES',
    50: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_PROPERTIES',
    51: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_FEATURES',
    52: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_PROPERTIES',
    1000147000: 'VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO',
    1000109000: 'VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2',
    1000109001: 'VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2',
    1000109002: 'VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2',
    1000109003: 'VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2',
    1000109004: 'VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2',
    1000109005: 'VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO',
    1000109006: 'VK_STRUCTURE_TYPE_SUBPASS_END_INFO',
    1000177000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES',
    1000196000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES',
    1000180000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES',
    1000082000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES',
    1000197000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES',
    1000161000: 'VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO',
    1000161001: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES',
    1000161002: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES',
    1000161003: 'VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO',
    1000161004: 'VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT',
    1000199000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES',
    1000199001: 'VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE',
    1000221000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES',
    1000246000: 'VK_STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO',
    1000130000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES',
    1000130001: 'VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO',
    1000211000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES',
    1000108000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES',
    1000108001: 'VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO',
    1000108002: 'VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO',
    1000108003: 'VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO',
    1000253000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES',
    1000175000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES',
    1000241000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES',
    1000241001: 'VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT',
    1000241002: 'VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT',
    1000261000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES',
    1000207000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES',
    1000207001: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES',
    1000207002: 'VK_STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO',
    1000207003: 'VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO',
    1000207004: 'VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO',
    1000207005: 'VK_STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO',
    1000257000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES',
    1000244001: 'VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO',
    1000257002: 'VK_STRUCTURE_TYPE_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO',
    1000257003: 'VK_STRUCTURE_TYPE_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO',
    1000257004: 'VK_STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO',
    53: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_3_FEATURES',
    54: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_3_PROPERTIES',
    1000192000: 'VK_STRUCTURE_TYPE_PIPELINE_CREATION_FEEDBACK_CREATE_INFO',
    1000215000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TERMINATE_INVOCATION_FEATURES',
    1000245000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TOOL_PROPERTIES',
    1000276000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DEMOTE_TO_HELPER_INVOCATION_FEATURES',
    1000295000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIVATE_DATA_FEATURES',
    1000295001: 'VK_STRUCTURE_TYPE_DEVICE_PRIVATE_DATA_CREATE_INFO',
    1000295002: 'VK_STRUCTURE_TYPE_PRIVATE_DATA_SLOT_CREATE_INFO',
    1000297000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_CREATION_CACHE_CONTROL_FEATURES',
    1000314000: 'VK_STRUCTURE_TYPE_MEMORY_BARRIER_2',
    1000314001: 'VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER_2',
    1000314002: 'VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER_2',
    1000314003: 'VK_STRUCTURE_TYPE_DEPENDENCY_INFO',
    1000314004: 'VK_STRUCTURE_TYPE_SUBMIT_INFO_2',
    1000314005: 'VK_STRUCTURE_TYPE_SEMAPHORE_SUBMIT_INFO',
    1000314006: 'VK_STRUCTURE_TYPE_COMMAND_BUFFER_SUBMIT_INFO',
    1000314007: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SYNCHRONIZATION_2_FEATURES',
    1000325000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ZERO_INITIALIZE_WORKGROUP_MEMORY_FEATURES',
    1000335000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ROBUSTNESS_FEATURES',
    1000337000: 'VK_STRUCTURE_TYPE_COPY_BUFFER_INFO_2',
    1000337001: 'VK_STRUCTURE_TYPE_COPY_IMAGE_INFO_2',
    1000337002: 'VK_STRUCTURE_TYPE_COPY_BUFFER_TO_IMAGE_INFO_2',
    1000337003: 'VK_STRUCTURE_TYPE_COPY_IMAGE_TO_BUFFER_INFO_2',
    1000337004: 'VK_STRUCTURE_TYPE_BLIT_IMAGE_INFO_2',
    1000337005: 'VK_STRUCTURE_TYPE_RESOLVE_IMAGE_INFO_2',
    1000337006: 'VK_STRUCTURE_TYPE_BUFFER_COPY_2',
    1000337007: 'VK_STRUCTURE_TYPE_IMAGE_COPY_2',
    1000337008: 'VK_STRUCTURE_TYPE_IMAGE_BLIT_2',
    1000337009: 'VK_STRUCTURE_TYPE_BUFFER_IMAGE_COPY_2',
    1000337010: 'VK_STRUCTURE_TYPE_IMAGE_RESOLVE_2',
    1000225000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_PROPERTIES',
    1000225001: 'VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_REQUIRED_SUBGROUP_SIZE_CREATE_INFO',
    1000225002: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_FEATURES',
    1000138000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES',
    1000138001: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES',
    1000138002: 'VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_INLINE_UNIFORM_BLOCK',
    1000138003: 'VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_INLINE_UNIFORM_BLOCK_CREATE_INFO',
    1000066000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXTURE_COMPRESSION_ASTC_HDR_FEATURES',
    1000044000: 'VK_STRUCTURE_TYPE_RENDERING_INFO',
    1000044001: 'VK_STRUCTURE_TYPE_RENDERING_ATTACHMENT_INFO',
    1000044002: 'VK_STRUCTURE_TYPE_PIPELINE_RENDERING_CREATE_INFO',
    1000044003: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DYNAMIC_RENDERING_FEATURES',
    1000044004: 'VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDERING_INFO',
    1000280000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_FEATURES',
    1000280001: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_PROPERTIES',
    1000281001: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_PROPERTIES',
    1000360000: 'VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_3',
    1000413000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_FEATURES',
    1000413001: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_PROPERTIES',
    1000413002: 'VK_STRUCTURE_TYPE_DEVICE_BUFFER_MEMORY_REQUIREMENTS',
    1000413003: 'VK_STRUCTURE_TYPE_DEVICE_IMAGE_MEMORY_REQUIREMENTS',
    1000001000: 'VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR',
    1000001001: 'VK_STRUCTURE_TYPE_PRESENT_INFO_KHR',
    1000060007: 'VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_CAPABILITIES_KHR',
    1000060008: 'VK_STRUCTURE_TYPE_IMAGE_SWAPCHAIN_CREATE_INFO_KHR',
    1000060009: 'VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_SWAPCHAIN_INFO_KHR',
    1000060010: 'VK_STRUCTURE_TYPE_ACQUIRE_NEXT_IMAGE_INFO_KHR',
    1000060011: 'VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_INFO_KHR',
    1000060012: 'VK_STRUCTURE_TYPE_DEVICE_GROUP_SWAPCHAIN_CREATE_INFO_KHR',
    1000002000: 'VK_STRUCTURE_TYPE_DISPLAY_MODE_CREATE_INFO_KHR',
    1000002001: 'VK_STRUCTURE_TYPE_DISPLAY_SURFACE_CREATE_INFO_KHR',
    1000003000: 'VK_STRUCTURE_TYPE_DISPLAY_PRESENT_INFO_KHR',
    1000004000: 'VK_STRUCTURE_TYPE_XLIB_SURFACE_CREATE_INFO_KHR',
    1000005000: 'VK_STRUCTURE_TYPE_XCB_SURFACE_CREATE_INFO_KHR',
    1000006000: 'VK_STRUCTURE_TYPE_WAYLAND_SURFACE_CREATE_INFO_KHR',
    1000008000: 'VK_STRUCTURE_TYPE_ANDROID_SURFACE_CREATE_INFO_KHR',
    1000009000: 'VK_STRUCTURE_TYPE_WIN32_SURFACE_CREATE_INFO_KHR',
    1000011000: 'VK_STRUCTURE_TYPE_DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT',
    1000018000: 'VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_RASTERIZATION_ORDER_AMD',
    1000022000: 'VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_NAME_INFO_EXT',
    1000022001: 'VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_TAG_INFO_EXT',
    1000022002: 'VK_STRUCTURE_TYPE_DEBUG_MARKER_MARKER_INFO_EXT',
    1000023000: 'VK_STRUCTURE_TYPE_VIDEO_PROFILE_INFO_KHR',
    1000023001: 'VK_STRUCTURE_TYPE_VIDEO_CAPABILITIES_KHR',
    1000023002: 'VK_STRUCTURE_TYPE_VIDEO_PICTURE_RESOURCE_INFO_KHR',
    1000023003: 'VK_STRUCTURE_TYPE_VIDEO_SESSION_MEMORY_REQUIREMENTS_KHR',
    1000023004: 'VK_STRUCTURE_TYPE_BIND_VIDEO_SESSION_MEMORY_INFO_KHR',
    1000023005: 'VK_STRUCTURE_TYPE_VIDEO_SESSION_CREATE_INFO_KHR',
    1000023006: 'VK_STRUCTURE_TYPE_VIDEO_SESSION_PARAMETERS_CREATE_INFO_KHR',
    1000023007: 'VK_STRUCTURE_TYPE_VIDEO_SESSION_PARAMETERS_UPDATE_INFO_KHR',
    1000023008: 'VK_STRUCTURE_TYPE_VIDEO_BEGIN_CODING_INFO_KHR',
    1000023009: 'VK_STRUCTURE_TYPE_VIDEO_END_CODING_INFO_KHR',
    1000023010: 'VK_STRUCTURE_TYPE_VIDEO_CODING_CONTROL_INFO_KHR',
    1000023011: 'VK_STRUCTURE_TYPE_VIDEO_REFERENCE_SLOT_INFO_KHR',
    1000023012: 'VK_STRUCTURE_TYPE_QUEUE_FAMILY_VIDEO_PROPERTIES_KHR',
    1000023013: 'VK_STRUCTURE_TYPE_VIDEO_PROFILE_LIST_INFO_KHR',
    1000023014: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VIDEO_FORMAT_INFO_KHR',
    1000023015: 'VK_STRUCTURE_TYPE_VIDEO_FORMAT_PROPERTIES_KHR',
    1000023016: 'VK_STRUCTURE_TYPE_QUEUE_FAMILY_QUERY_RESULT_STATUS_PROPERTIES_KHR',
    1000024000: 'VK_STRUCTURE_TYPE_VIDEO_DECODE_INFO_KHR',
    1000024001: 'VK_STRUCTURE_TYPE_VIDEO_DECODE_CAPABILITIES_KHR',
    1000024002: 'VK_STRUCTURE_TYPE_VIDEO_DECODE_USAGE_INFO_KHR',
    1000026000: 'VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_IMAGE_CREATE_INFO_NV',
    1000026001: 'VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_BUFFER_CREATE_INFO_NV',
    1000026002: 'VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_MEMORY_ALLOCATE_INFO_NV',
    1000028000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_FEATURES_EXT',
    1000028001: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_PROPERTIES_EXT',
    1000028002: 'VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_STREAM_CREATE_INFO_EXT',
    1000029000: 'VK_STRUCTURE_TYPE_CU_MODULE_CREATE_INFO_NVX',
    1000029001: 'VK_STRUCTURE_TYPE_CU_FUNCTION_CREATE_INFO_NVX',
    1000029002: 'VK_STRUCTURE_TYPE_CU_LAUNCH_INFO_NVX',
    1000030000: 'VK_STRUCTURE_TYPE_IMAGE_VIEW_HANDLE_INFO_NVX',
    1000030001: 'VK_STRUCTURE_TYPE_IMAGE_VIEW_ADDRESS_PROPERTIES_NVX',
    1000038000: 'VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_CAPABILITIES_KHR',
    1000038001: 'VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_PARAMETERS_CREATE_INFO_KHR',
    1000038002: 'VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_PARAMETERS_ADD_INFO_KHR',
    1000038003: 'VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_PICTURE_INFO_KHR',
    1000038004: 'VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_DPB_SLOT_INFO_KHR',
    1000038005: 'VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_NALU_SLICE_INFO_KHR',
    1000038006: 'VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_GOP_REMAINING_FRAME_INFO_KHR',
    1000038007: 'VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_PROFILE_INFO_KHR',
    1000038008: 'VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_RATE_CONTROL_INFO_KHR',
    1000038009: 'VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_RATE_CONTROL_LAYER_INFO_KHR',
    1000038010: 'VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_CREATE_INFO_KHR',
    1000038011: 'VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_QUALITY_LEVEL_PROPERTIES_KHR',
    1000038012: 'VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_PARAMETERS_GET_INFO_KHR',
    1000038013: 'VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_PARAMETERS_FEEDBACK_INFO_KHR',
    1000039000: 'VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_CAPABILITIES_KHR',
    1000039001: 'VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_SESSION_PARAMETERS_CREATE_INFO_KHR',
    1000039002: 'VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_SESSION_PARAMETERS_ADD_INFO_KHR',
    1000039003: 'VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_PICTURE_INFO_KHR',
    1000039004: 'VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_DPB_SLOT_INFO_KHR',
    1000039005: 'VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_NALU_SLICE_SEGMENT_INFO_KHR',
    1000039006: 'VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_GOP_REMAINING_FRAME_INFO_KHR',
    1000039007: 'VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_PROFILE_INFO_KHR',
    1000039009: 'VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_RATE_CONTROL_INFO_KHR',
    1000039010: 'VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_RATE_CONTROL_LAYER_INFO_KHR',
    1000039011: 'VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_SESSION_CREATE_INFO_KHR',
    1000039012: 'VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_QUALITY_LEVEL_PROPERTIES_KHR',
    1000039013: 'VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_SESSION_PARAMETERS_GET_INFO_KHR',
    1000039014: 'VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_SESSION_PARAMETERS_FEEDBACK_INFO_KHR',
    1000040000: 'VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_CAPABILITIES_KHR',
    1000040001: 'VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_PICTURE_INFO_KHR',
    1000040003: 'VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_PROFILE_INFO_KHR',
    1000040004: 'VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_SESSION_PARAMETERS_CREATE_INFO_KHR',
    1000040005: 'VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_SESSION_PARAMETERS_ADD_INFO_KHR',
    1000040006: 'VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_DPB_SLOT_INFO_KHR',
    1000041000: 'VK_STRUCTURE_TYPE_TEXTURE_LOD_GATHER_FORMAT_PROPERTIES_AMD',
    1000044006: 'VK_STRUCTURE_TYPE_RENDERING_FRAGMENT_SHADING_RATE_ATTACHMENT_INFO_KHR',
    1000044007: 'VK_STRUCTURE_TYPE_RENDERING_FRAGMENT_DENSITY_MAP_ATTACHMENT_INFO_EXT',
    1000044008: 'VK_STRUCTURE_TYPE_ATTACHMENT_SAMPLE_COUNT_INFO_AMD',
    1000044009: 'VK_STRUCTURE_TYPE_MULTIVIEW_PER_VIEW_ATTRIBUTES_INFO_NVX',
    1000049000: 'VK_STRUCTURE_TYPE_STREAM_DESCRIPTOR_SURFACE_CREATE_INFO_GGP',
    1000050000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CORNER_SAMPLED_IMAGE_FEATURES_NV',
    1000056000: 'VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_NV',
    1000056001: 'VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_NV',
    1000057000: 'VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_NV',
    1000057001: 'VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_NV',
    1000058000: 'VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_NV',
    1000061000: 'VK_STRUCTURE_TYPE_VALIDATION_FLAGS_EXT',
    1000062000: 'VK_STRUCTURE_TYPE_VI_SURFACE_CREATE_INFO_NN',
    1000067000: 'VK_STRUCTURE_TYPE_IMAGE_VIEW_ASTC_DECODE_MODE_EXT',
    1000067001: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ASTC_DECODE_FEATURES_EXT',
    1000068000: 'VK_STRUCTURE_TYPE_PIPELINE_ROBUSTNESS_CREATE_INFO_EXT',
    1000068001: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_ROBUSTNESS_FEATURES_EXT',
    1000068002: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_ROBUSTNESS_PROPERTIES_EXT',
    1000073000: 'VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_KHR',
    1000073001: 'VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_KHR',
    1000073002: 'VK_STRUCTURE_TYPE_MEMORY_WIN32_HANDLE_PROPERTIES_KHR',
    1000073003: 'VK_STRUCTURE_TYPE_MEMORY_GET_WIN32_HANDLE_INFO_KHR',
    1000074000: 'VK_STRUCTURE_TYPE_IMPORT_MEMORY_FD_INFO_KHR',
    1000074001: 'VK_STRUCTURE_TYPE_MEMORY_FD_PROPERTIES_KHR',
    1000074002: 'VK_STRUCTURE_TYPE_MEMORY_GET_FD_INFO_KHR',
    1000075000: 'VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_KHR',
    1000078000: 'VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR',
    1000078001: 'VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR',
    1000078002: 'VK_STRUCTURE_TYPE_D3D12_FENCE_SUBMIT_INFO_KHR',
    1000078003: 'VK_STRUCTURE_TYPE_SEMAPHORE_GET_WIN32_HANDLE_INFO_KHR',
    1000079000: 'VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_FD_INFO_KHR',
    1000079001: 'VK_STRUCTURE_TYPE_SEMAPHORE_GET_FD_INFO_KHR',
    1000080000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PUSH_DESCRIPTOR_PROPERTIES_KHR',
    1000081000: 'VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_CONDITIONAL_RENDERING_INFO_EXT',
    1000081001: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONDITIONAL_RENDERING_FEATURES_EXT',
    1000081002: 'VK_STRUCTURE_TYPE_CONDITIONAL_RENDERING_BEGIN_INFO_EXT',
    1000084000: 'VK_STRUCTURE_TYPE_PRESENT_REGIONS_KHR',
    1000087000: 'VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_W_SCALING_STATE_CREATE_INFO_NV',
    1000090000: 'VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_EXT',
    1000091000: 'VK_STRUCTURE_TYPE_DISPLAY_POWER_INFO_EXT',
    1000091001: 'VK_STRUCTURE_TYPE_DEVICE_EVENT_INFO_EXT',
    1000091002: 'VK_STRUCTURE_TYPE_DISPLAY_EVENT_INFO_EXT',
    1000091003: 'VK_STRUCTURE_TYPE_SWAPCHAIN_COUNTER_CREATE_INFO_EXT',
    1000092000: 'VK_STRUCTURE_TYPE_PRESENT_TIMES_INFO_GOOGLE',
    1000097000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_ATTRIBUTES_PROPERTIES_NVX',
    1000098000: 'VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SWIZZLE_STATE_CREATE_INFO_NV',
    1000099000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DISCARD_RECTANGLE_PROPERTIES_EXT',
    1000099001: 'VK_STRUCTURE_TYPE_PIPELINE_DISCARD_RECTANGLE_STATE_CREATE_INFO_EXT',
    1000101000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONSERVATIVE_RASTERIZATION_PROPERTIES_EXT',
    1000101001: 'VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_CONSERVATIVE_STATE_CREATE_INFO_EXT',
    1000102000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLIP_ENABLE_FEATURES_EXT',
    1000102001: 'VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_DEPTH_CLIP_STATE_CREATE_INFO_EXT',
    1000105000: 'VK_STRUCTURE_TYPE_HDR_METADATA_EXT',
    1000110000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RELAXED_LINE_RASTERIZATION_FEATURES_IMG',
    1000111000: 'VK_STRUCTURE_TYPE_SHARED_PRESENT_SURFACE_CAPABILITIES_KHR',
    1000114000: 'VK_STRUCTURE_TYPE_IMPORT_FENCE_WIN32_HANDLE_INFO_KHR',
    1000114001: 'VK_STRUCTURE_TYPE_EXPORT_FENCE_WIN32_HANDLE_INFO_KHR',
    1000114002: 'VK_STRUCTURE_TYPE_FENCE_GET_WIN32_HANDLE_INFO_KHR',
    1000115000: 'VK_STRUCTURE_TYPE_IMPORT_FENCE_FD_INFO_KHR',
    1000115001: 'VK_STRUCTURE_TYPE_FENCE_GET_FD_INFO_KHR',
    1000116000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_FEATURES_KHR',
    1000116001: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_PROPERTIES_KHR',
    1000116002: 'VK_STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_CREATE_INFO_KHR',
    1000116003: 'VK_STRUCTURE_TYPE_PERFORMANCE_QUERY_SUBMIT_INFO_KHR',
    1000116004: 'VK_STRUCTURE_TYPE_ACQUIRE_PROFILING_LOCK_INFO_KHR',
    1000116005: 'VK_STRUCTURE_TYPE_PERFORMANCE_COUNTER_KHR',
    1000116006: 'VK_STRUCTURE_TYPE_PERFORMANCE_COUNTER_DESCRIPTION_KHR',
    1000119000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SURFACE_INFO_2_KHR',
    1000119001: 'VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_KHR',
    1000119002: 'VK_STRUCTURE_TYPE_SURFACE_FORMAT_2_KHR',
    1000121000: 'VK_STRUCTURE_TYPE_DISPLAY_PROPERTIES_2_KHR',
    1000121001: 'VK_STRUCTURE_TYPE_DISPLAY_PLANE_PROPERTIES_2_KHR',
    1000121002: 'VK_STRUCTURE_TYPE_DISPLAY_MODE_PROPERTIES_2_KHR',
    1000121003: 'VK_STRUCTURE_TYPE_DISPLAY_PLANE_INFO_2_KHR',
    1000121004: 'VK_STRUCTURE_TYPE_DISPLAY_PLANE_CAPABILITIES_2_KHR',
    1000122000: 'VK_STRUCTURE_TYPE_IOS_SURFACE_CREATE_INFO_MVK',
    1000123000: 'VK_STRUCTURE_TYPE_MACOS_SURFACE_CREATE_INFO_MVK',
    1000128000: 'VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT',
    1000128001: 'VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_TAG_INFO_EXT',
    1000128002: 'VK_STRUCTURE_TYPE_DEBUG_UTILS_LABEL_EXT',
    1000128003: 'VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CALLBACK_DATA_EXT',
    1000128004: 'VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT',
    1000129000: 'VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_USAGE_ANDROID',
    1000129001: 'VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_PROPERTIES_ANDROID',
    1000129002: 'VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_FORMAT_PROPERTIES_ANDROID',
    1000129003: 'VK_STRUCTURE_TYPE_IMPORT_ANDROID_HARDWARE_BUFFER_INFO_ANDROID',
    1000129004: 'VK_STRUCTURE_TYPE_MEMORY_GET_ANDROID_HARDWARE_BUFFER_INFO_ANDROID',
    1000129005: 'VK_STRUCTURE_TYPE_EXTERNAL_FORMAT_ANDROID',
    1000129006: 'VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_FORMAT_PROPERTIES_2_ANDROID',
    1000143000: 'VK_STRUCTURE_TYPE_SAMPLE_LOCATIONS_INFO_EXT',
    1000143001: 'VK_STRUCTURE_TYPE_RENDER_PASS_SAMPLE_LOCATIONS_BEGIN_INFO_EXT',
    1000143002: 'VK_STRUCTURE_TYPE_PIPELINE_SAMPLE_LOCATIONS_STATE_CREATE_INFO_EXT',
    1000143003: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLE_LOCATIONS_PROPERTIES_EXT',
    1000143004: 'VK_STRUCTURE_TYPE_MULTISAMPLE_PROPERTIES_EXT',
    1000148000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_FEATURES_EXT',
    1000148001: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_PROPERTIES_EXT',
    1000148002: 'VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_ADVANCED_STATE_CREATE_INFO_EXT',
    1000149000: 'VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_TO_COLOR_STATE_CREATE_INFO_NV',
    1000150007: 'VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_KHR',
    1000150000: 'VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_GEOMETRY_INFO_KHR',
    1000150002: 'VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_DEVICE_ADDRESS_INFO_KHR',
    1000150003: 'VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_AABBS_DATA_KHR',
    1000150004: 'VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_INSTANCES_DATA_KHR',
    1000150005: 'VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_TRIANGLES_DATA_KHR',
    1000150006: 'VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_KHR',
    1000150009: 'VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_VERSION_INFO_KHR',
    1000150010: 'VK_STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_INFO_KHR',
    1000150011: 'VK_STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_TO_MEMORY_INFO_KHR',
    1000150012: 'VK_STRUCTURE_TYPE_COPY_MEMORY_TO_ACCELERATION_STRUCTURE_INFO_KHR',
    1000150013: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_FEATURES_KHR',
    1000150014: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_PROPERTIES_KHR',
    1000150017: 'VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_KHR',
    1000150020: 'VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_SIZES_INFO_KHR',
    1000347000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PIPELINE_FEATURES_KHR',
    1000347001: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PIPELINE_PROPERTIES_KHR',
    1000150015: 'VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_KHR',
    1000150016: 'VK_STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_KHR',
    1000150018: 'VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_INTERFACE_CREATE_INFO_KHR',
    1000348013: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_QUERY_FEATURES_KHR',
    1000152000: 'VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_MODULATION_STATE_CREATE_INFO_NV',
    1000154000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_FEATURES_NV',
    1000154001: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_PROPERTIES_NV',
    1000158000: 'VK_STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_LIST_EXT',
    1000158002: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_DRM_FORMAT_MODIFIER_INFO_EXT',
    1000158003: 'VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_LIST_CREATE_INFO_EXT',
    1000158004: 'VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_EXPLICIT_CREATE_INFO_EXT',
    1000158005: 'VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_PROPERTIES_EXT',
    1000158006: 'VK_STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_LIST_2_EXT',
    1000160000: 'VK_STRUCTURE_TYPE_VALIDATION_CACHE_CREATE_INFO_EXT',
    1000160001: 'VK_STRUCTURE_TYPE_SHADER_MODULE_VALIDATION_CACHE_CREATE_INFO_EXT',
    1000164000: 'VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SHADING_RATE_IMAGE_STATE_CREATE_INFO_NV',
    1000164001: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_FEATURES_NV',
    1000164002: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_PROPERTIES_NV',
    1000164005: 'VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_COARSE_SAMPLE_ORDER_STATE_CREATE_INFO_NV',
    1000165000: 'VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_NV',
    1000165001: 'VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_NV',
    1000165003: 'VK_STRUCTURE_TYPE_GEOMETRY_NV',
    1000165004: 'VK_STRUCTURE_TYPE_GEOMETRY_TRIANGLES_NV',
    1000165005: 'VK_STRUCTURE_TYPE_GEOMETRY_AABB_NV',
    1000165006: 'VK_STRUCTURE_TYPE_BIND_ACCELERATION_STRUCTURE_MEMORY_INFO_NV',
    1000165007: 'VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_NV',
    1000165008: 'VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_INFO_NV',
    1000165009: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PROPERTIES_NV',
    1000165011: 'VK_STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_NV',
    1000165012: 'VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_INFO_NV',
    1000166000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_REPRESENTATIVE_FRAGMENT_TEST_FEATURES_NV',
    1000166001: 'VK_STRUCTURE_TYPE_PIPELINE_REPRESENTATIVE_FRAGMENT_TEST_STATE_CREATE_INFO_NV',
    1000170000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_VIEW_IMAGE_FORMAT_INFO_EXT',
    1000170001: 'VK_STRUCTURE_TYPE_FILTER_CUBIC_IMAGE_VIEW_IMAGE_FORMAT_PROPERTIES_EXT',
    1000178000: 'VK_STRUCTURE_TYPE_IMPORT_MEMORY_HOST_POINTER_INFO_EXT',
    1000178001: 'VK_STRUCTURE_TYPE_MEMORY_HOST_POINTER_PROPERTIES_EXT',
    1000178002: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_HOST_PROPERTIES_EXT',
    1000181000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CLOCK_FEATURES_KHR',
    1000183000: 'VK_STRUCTURE_TYPE_PIPELINE_COMPILER_CONTROL_CREATE_INFO_AMD',
    1000185000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_AMD',
    1000187000: 'VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_CAPABILITIES_KHR',
    1000187001: 'VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_SESSION_PARAMETERS_CREATE_INFO_KHR',
    1000187002: 'VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_SESSION_PARAMETERS_ADD_INFO_KHR',
    1000187003: 'VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_PROFILE_INFO_KHR',
    1000187004: 'VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_PICTURE_INFO_KHR',
    1000187005: 'VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_DPB_SLOT_INFO_KHR',
    1000174000: 'VK_STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_KHR',
    1000388000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GLOBAL_PRIORITY_QUERY_FEATURES_KHR',
    1000388001: 'VK_STRUCTURE_TYPE_QUEUE_FAMILY_GLOBAL_PRIORITY_PROPERTIES_KHR',
    1000189000: 'VK_STRUCTURE_TYPE_DEVICE_MEMORY_OVERALLOCATION_CREATE_INFO_AMD',
    1000190000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_PROPERTIES_EXT',
    1000191000: 'VK_STRUCTURE_TYPE_PRESENT_FRAME_TOKEN_GGP',
    1000201000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COMPUTE_SHADER_DERIVATIVES_FEATURES_NV',
    1000202000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_FEATURES_NV',
    1000202001: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_PROPERTIES_NV',
    1000204000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_FOOTPRINT_FEATURES_NV',
    1000205000: 'VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_EXCLUSIVE_SCISSOR_STATE_CREATE_INFO_NV',
    1000205002: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXCLUSIVE_SCISSOR_FEATURES_NV',
    1000206000: 'VK_STRUCTURE_TYPE_CHECKPOINT_DATA_NV',
    1000206001: 'VK_STRUCTURE_TYPE_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_NV',
    1000209000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_FUNCTIONS_2_FEATURES_INTEL',
    1000210000: 'VK_STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_QUERY_CREATE_INFO_INTEL',
    1000210001: 'VK_STRUCTURE_TYPE_INITIALIZE_PERFORMANCE_API_INFO_INTEL',
    1000210002: 'VK_STRUCTURE_TYPE_PERFORMANCE_MARKER_INFO_INTEL',
    1000210003: 'VK_STRUCTURE_TYPE_PERFORMANCE_STREAM_MARKER_INFO_INTEL',
    1000210004: 'VK_STRUCTURE_TYPE_PERFORMANCE_OVERRIDE_INFO_INTEL',
    1000210005: 'VK_STRUCTURE_TYPE_PERFORMANCE_CONFIGURATION_ACQUIRE_INFO_INTEL',
    1000212000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PCI_BUS_INFO_PROPERTIES_EXT',
    1000213000: 'VK_STRUCTURE_TYPE_DISPLAY_NATIVE_HDR_SURFACE_CAPABILITIES_AMD',
    1000213001: 'VK_STRUCTURE_TYPE_SWAPCHAIN_DISPLAY_NATIVE_HDR_CREATE_INFO_AMD',
    1000214000: 'VK_STRUCTURE_TYPE_IMAGEPIPE_SURFACE_CREATE_INFO_FUCHSIA',
    1000217000: 'VK_STRUCTURE_TYPE_METAL_SURFACE_CREATE_INFO_EXT',
    1000218000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_FEATURES_EXT',
    1000218001: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_PROPERTIES_EXT',
    1000218002: 'VK_STRUCTURE_TYPE_RENDER_PASS_FRAGMENT_DENSITY_MAP_CREATE_INFO_EXT',
    1000226000: 'VK_STRUCTURE_TYPE_FRAGMENT_SHADING_RATE_ATTACHMENT_INFO_KHR',
    1000226001: 'VK_STRUCTURE_TYPE_PIPELINE_FRAGMENT_SHADING_RATE_STATE_CREATE_INFO_KHR',
    1000226002: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_PROPERTIES_KHR',
    1000226003: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_FEATURES_KHR',
    1000226004: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_KHR',
    1000227000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_2_AMD',
    1000229000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COHERENT_MEMORY_FEATURES_AMD',
    1000234000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_ATOMIC_INT64_FEATURES_EXT',
    1000237000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_BUDGET_PROPERTIES_EXT',
    1000238000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PRIORITY_FEATURES_EXT',
    1000238001: 'VK_STRUCTURE_TYPE_MEMORY_PRIORITY_ALLOCATE_INFO_EXT',
    1000239000: 'VK_STRUCTURE_TYPE_SURFACE_PROTECTED_CAPABILITIES_KHR',
    1000240000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEDICATED_ALLOCATION_IMAGE_ALIASING_FEATURES_NV',
    1000244000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_EXT',
    1000244002: 'VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_CREATE_INFO_EXT',
    1000247000: 'VK_STRUCTURE_TYPE_VALIDATION_FEATURES_EXT',
    1000248000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_WAIT_FEATURES_KHR',
    1000249000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_FEATURES_NV',
    1000249001: 'VK_STRUCTURE_TYPE_COOPERATIVE_MATRIX_PROPERTIES_NV',
    1000249002: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_PROPERTIES_NV',
    1000250000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COVERAGE_REDUCTION_MODE_FEATURES_NV',
    1000250001: 'VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_REDUCTION_STATE_CREATE_INFO_NV',
    1000250002: 'VK_STRUCTURE_TYPE_FRAMEBUFFER_MIXED_SAMPLES_COMBINATION_NV',
    1000251000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_INTERLOCK_FEATURES_EXT',
    1000252000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_IMAGE_ARRAYS_FEATURES_EXT',
    1000254000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROVOKING_VERTEX_FEATURES_EXT',
    1000254001: 'VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_PROVOKING_VERTEX_STATE_CREATE_INFO_EXT',
    1000254002: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROVOKING_VERTEX_PROPERTIES_EXT',
    1000255000: 'VK_STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_INFO_EXT',
    1000255002: 'VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_FULL_SCREEN_EXCLUSIVE_EXT',
    1000255001: 'VK_STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_WIN32_INFO_EXT',
    1000256000: 'VK_STRUCTURE_TYPE_HEADLESS_SURFACE_CREATE_INFO_EXT',
    1000259000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_FEATURES_EXT',
    1000259001: 'VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_LINE_STATE_CREATE_INFO_EXT',
    1000259002: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_PROPERTIES_EXT',
    1000260000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT_FEATURES_EXT',
    1000265000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INDEX_TYPE_UINT8_FEATURES_EXT',
    1000267000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_FEATURES_EXT',
    1000269000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_EXECUTABLE_PROPERTIES_FEATURES_KHR',
    1000269001: 'VK_STRUCTURE_TYPE_PIPELINE_INFO_KHR',
    1000269002: 'VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_PROPERTIES_KHR',
    1000269003: 'VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INFO_KHR',
    1000269004: 'VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_STATISTIC_KHR',
    1000269005: 'VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INTERNAL_REPRESENTATION_KHR',
    1000270000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_IMAGE_COPY_FEATURES_EXT',
    1000270001: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_IMAGE_COPY_PROPERTIES_EXT',
    1000270002: 'VK_STRUCTURE_TYPE_MEMORY_TO_IMAGE_COPY_EXT',
    1000270003: 'VK_STRUCTURE_TYPE_IMAGE_TO_MEMORY_COPY_EXT',
    1000270004: 'VK_STRUCTURE_TYPE_COPY_IMAGE_TO_MEMORY_INFO_EXT',
    1000270005: 'VK_STRUCTURE_TYPE_COPY_MEMORY_TO_IMAGE_INFO_EXT',
    1000270006: 'VK_STRUCTURE_TYPE_HOST_IMAGE_LAYOUT_TRANSITION_INFO_EXT',
    1000270007: 'VK_STRUCTURE_TYPE_COPY_IMAGE_TO_IMAGE_INFO_EXT',
    1000270008: 'VK_STRUCTURE_TYPE_SUBRESOURCE_HOST_MEMCPY_SIZE_EXT',
    1000270009: 'VK_STRUCTURE_TYPE_HOST_IMAGE_COPY_DEVICE_PERFORMANCE_QUERY_EXT',
    1000271000: 'VK_STRUCTURE_TYPE_MEMORY_MAP_INFO_KHR',
    1000271001: 'VK_STRUCTURE_TYPE_MEMORY_UNMAP_INFO_KHR',
    1000273000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT_2_FEATURES_EXT',
    1000274000: 'VK_STRUCTURE_TYPE_SURFACE_PRESENT_MODE_EXT',
    1000274001: 'VK_STRUCTURE_TYPE_SURFACE_PRESENT_SCALING_CAPABILITIES_EXT',
    1000274002: 'VK_STRUCTURE_TYPE_SURFACE_PRESENT_MODE_COMPATIBILITY_EXT',
    1000275000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SWAPCHAIN_MAINTENANCE_1_FEATURES_EXT',
    1000275001: 'VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_FENCE_INFO_EXT',
    1000275002: 'VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_MODES_CREATE_INFO_EXT',
    1000275003: 'VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_MODE_INFO_EXT',
    1000275004: 'VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_SCALING_CREATE_INFO_EXT',
    1000275005: 'VK_STRUCTURE_TYPE_RELEASE_SWAPCHAIN_IMAGES_INFO_EXT',
    1000277000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_PROPERTIES_NV',
    1000277001: 'VK_STRUCTURE_TYPE_GRAPHICS_SHADER_GROUP_CREATE_INFO_NV',
    1000277002: 'VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_SHADER_GROUPS_CREATE_INFO_NV',
    1000277003: 'VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_TOKEN_NV',
    1000277004: 'VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_CREATE_INFO_NV',
    1000277005: 'VK_STRUCTURE_TYPE_GENERATED_COMMANDS_INFO_NV',
    1000277006: 'VK_STRUCTURE_TYPE_GENERATED_COMMANDS_MEMORY_REQUIREMENTS_INFO_NV',
    1000277007: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_FEATURES_NV',
    1000278000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INHERITED_VIEWPORT_SCISSOR_FEATURES_NV',
    1000278001: 'VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_VIEWPORT_SCISSOR_INFO_NV',
    1000281000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_FEATURES_EXT',
    1000282000: 'VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDER_PASS_TRANSFORM_INFO_QCOM',
    1000282001: 'VK_STRUCTURE_TYPE_RENDER_PASS_TRANSFORM_BEGIN_INFO_QCOM',
    1000283000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_BIAS_CONTROL_FEATURES_EXT',
    1000283001: 'VK_STRUCTURE_TYPE_DEPTH_BIAS_INFO_EXT',
    1000283002: 'VK_STRUCTURE_TYPE_DEPTH_BIAS_REPRESENTATION_INFO_EXT',
    1000284000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_MEMORY_REPORT_FEATURES_EXT',
    1000284001: 'VK_STRUCTURE_TYPE_DEVICE_DEVICE_MEMORY_REPORT_CREATE_INFO_EXT',
    1000284002: 'VK_STRUCTURE_TYPE_DEVICE_MEMORY_REPORT_CALLBACK_DATA_EXT',
    1000286000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_FEATURES_EXT',
    1000286001: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_PROPERTIES_EXT',
    1000287000: 'VK_STRUCTURE_TYPE_SAMPLER_CUSTOM_BORDER_COLOR_CREATE_INFO_EXT',
    1000287001: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_PROPERTIES_EXT',
    1000287002: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_FEATURES_EXT',
    1000290000: 'VK_STRUCTURE_TYPE_PIPELINE_LIBRARY_CREATE_INFO_KHR',
    1000292000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_BARRIER_FEATURES_NV',
    1000292001: 'VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_PRESENT_BARRIER_NV',
    1000292002: 'VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_BARRIER_CREATE_INFO_NV',
    1000294000: 'VK_STRUCTURE_TYPE_PRESENT_ID_KHR',
    1000294001: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_ID_FEATURES_KHR',
    1000299000: 'VK_STRUCTURE_TYPE_VIDEO_ENCODE_INFO_KHR',
    1000299001: 'VK_STRUCTURE_TYPE_VIDEO_ENCODE_RATE_CONTROL_INFO_KHR',
    1000299002: 'VK_STRUCTURE_TYPE_VIDEO_ENCODE_RATE_CONTROL_LAYER_INFO_KHR',
    1000299003: 'VK_STRUCTURE_TYPE_VIDEO_ENCODE_CAPABILITIES_KHR',
    1000299004: 'VK_STRUCTURE_TYPE_VIDEO_ENCODE_USAGE_INFO_KHR',
    1000299005: 'VK_STRUCTURE_TYPE_QUERY_POOL_VIDEO_ENCODE_FEEDBACK_CREATE_INFO_KHR',
    1000299006: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VIDEO_ENCODE_QUALITY_LEVEL_INFO_KHR',
    1000299007: 'VK_STRUCTURE_TYPE_VIDEO_ENCODE_QUALITY_LEVEL_PROPERTIES_KHR',
    1000299008: 'VK_STRUCTURE_TYPE_VIDEO_ENCODE_QUALITY_LEVEL_INFO_KHR',
    1000299009: 'VK_STRUCTURE_TYPE_VIDEO_ENCODE_SESSION_PARAMETERS_GET_INFO_KHR',
    1000299010: 'VK_STRUCTURE_TYPE_VIDEO_ENCODE_SESSION_PARAMETERS_FEEDBACK_INFO_KHR',
    1000300000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DIAGNOSTICS_CONFIG_FEATURES_NV',
    1000300001: 'VK_STRUCTURE_TYPE_DEVICE_DIAGNOSTICS_CONFIG_CREATE_INFO_NV',
    1000307000: 'VK_STRUCTURE_TYPE_CUDA_MODULE_CREATE_INFO_NV',
    1000307001: 'VK_STRUCTURE_TYPE_CUDA_FUNCTION_CREATE_INFO_NV',
    1000307002: 'VK_STRUCTURE_TYPE_CUDA_LAUNCH_INFO_NV',
    1000307003: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUDA_KERNEL_LAUNCH_FEATURES_NV',
    1000307004: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUDA_KERNEL_LAUNCH_PROPERTIES_NV',
    1000310000: 'VK_STRUCTURE_TYPE_QUERY_LOW_LATENCY_SUPPORT_NV',
    1000311000: 'VK_STRUCTURE_TYPE_EXPORT_METAL_OBJECT_CREATE_INFO_EXT',
    1000311001: 'VK_STRUCTURE_TYPE_EXPORT_METAL_OBJECTS_INFO_EXT',
    1000311002: 'VK_STRUCTURE_TYPE_EXPORT_METAL_DEVICE_INFO_EXT',
    1000311003: 'VK_STRUCTURE_TYPE_EXPORT_METAL_COMMAND_QUEUE_INFO_EXT',
    1000311004: 'VK_STRUCTURE_TYPE_EXPORT_METAL_BUFFER_INFO_EXT',
    1000311005: 'VK_STRUCTURE_TYPE_IMPORT_METAL_BUFFER_INFO_EXT',
    1000311006: 'VK_STRUCTURE_TYPE_EXPORT_METAL_TEXTURE_INFO_EXT',
    1000311007: 'VK_STRUCTURE_TYPE_IMPORT_METAL_TEXTURE_INFO_EXT',
    1000311008: 'VK_STRUCTURE_TYPE_EXPORT_METAL_IO_SURFACE_INFO_EXT',
    1000311009: 'VK_STRUCTURE_TYPE_IMPORT_METAL_IO_SURFACE_INFO_EXT',
    1000311010: 'VK_STRUCTURE_TYPE_EXPORT_METAL_SHARED_EVENT_INFO_EXT',
    1000311011: 'VK_STRUCTURE_TYPE_IMPORT_METAL_SHARED_EVENT_INFO_EXT',
    1000314008: 'VK_STRUCTURE_TYPE_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_2_NV',
    1000314009: 'VK_STRUCTURE_TYPE_CHECKPOINT_DATA_2_NV',
    1000316000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_BUFFER_PROPERTIES_EXT',
    1000316001: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_BUFFER_DENSITY_MAP_PROPERTIES_EXT',
    1000316002: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_BUFFER_FEATURES_EXT',
    1000316003: 'VK_STRUCTURE_TYPE_DESCRIPTOR_ADDRESS_INFO_EXT',
    1000316004: 'VK_STRUCTURE_TYPE_DESCRIPTOR_GET_INFO_EXT',
    1000316005: 'VK_STRUCTURE_TYPE_BUFFER_CAPTURE_DESCRIPTOR_DATA_INFO_EXT',
    1000316006: 'VK_STRUCTURE_TYPE_IMAGE_CAPTURE_DESCRIPTOR_DATA_INFO_EXT',
    1000316007: 'VK_STRUCTURE_TYPE_IMAGE_VIEW_CAPTURE_DESCRIPTOR_DATA_INFO_EXT',
    1000316008: 'VK_STRUCTURE_TYPE_SAMPLER_CAPTURE_DESCRIPTOR_DATA_INFO_EXT',
    1000316010: 'VK_STRUCTURE_TYPE_OPAQUE_CAPTURE_DESCRIPTOR_DATA_CREATE_INFO_EXT',
    1000316011: 'VK_STRUCTURE_TYPE_DESCRIPTOR_BUFFER_BINDING_INFO_EXT',
    1000316012: 'VK_STRUCTURE_TYPE_DESCRIPTOR_BUFFER_BINDING_PUSH_DESCRIPTOR_BUFFER_HANDLE_EXT',
    1000316009: 'VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CAPTURE_DESCRIPTOR_DATA_INFO_EXT',
    1000320000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GRAPHICS_PIPELINE_LIBRARY_FEATURES_EXT',
    1000320001: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GRAPHICS_PIPELINE_LIBRARY_PROPERTIES_EXT',
    1000320002: 'VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_LIBRARY_CREATE_INFO_EXT',
    1000321000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_EARLY_AND_LATE_FRAGMENT_TESTS_FEATURES_AMD',
    1000203000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_FEATURES_KHR',
    1000322000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_PROPERTIES_KHR',
    1000323000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_UNIFORM_CONTROL_FLOW_FEATURES_KHR',
    1000326000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_ENUMS_PROPERTIES_NV',
    1000326001: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_ENUMS_FEATURES_NV',
    1000326002: 'VK_STRUCTURE_TYPE_PIPELINE_FRAGMENT_SHADING_RATE_ENUM_STATE_CREATE_INFO_NV',
    1000327000: 'VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_MOTION_TRIANGLES_DATA_NV',
    1000327001: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_MOTION_BLUR_FEATURES_NV',
    1000327002: 'VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MOTION_INFO_NV',
    1000328000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_FEATURES_EXT',
    1000328001: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_PROPERTIES_EXT',
    1000330000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_2_PLANE_444_FORMATS_FEATURES_EXT',
    1000332000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_FEATURES_EXT',
    1000332001: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_PROPERTIES_EXT',
    1000333000: 'VK_STRUCTURE_TYPE_COPY_COMMAND_TRANSFORM_INFO_QCOM',
    1000336000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_WORKGROUP_MEMORY_EXPLICIT_LAYOUT_FEATURES_KHR',
    1000338000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_COMPRESSION_CONTROL_FEATURES_EXT',
    1000338001: 'VK_STRUCTURE_TYPE_IMAGE_COMPRESSION_CONTROL_EXT',
    1000338004: 'VK_STRUCTURE_TYPE_IMAGE_COMPRESSION_PROPERTIES_EXT',
    1000339000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ATTACHMENT_FEEDBACK_LOOP_LAYOUT_FEATURES_EXT',
    1000340000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_4444_FORMATS_FEATURES_EXT',
    1000341000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FAULT_FEATURES_EXT',
    1000341001: 'VK_STRUCTURE_TYPE_DEVICE_FAULT_COUNTS_EXT',
    1000341002: 'VK_STRUCTURE_TYPE_DEVICE_FAULT_INFO_EXT',
    1000344000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RGBA10X6_FORMATS_FEATURES_EXT',
    1000346000: 'VK_STRUCTURE_TYPE_DIRECTFB_SURFACE_CREATE_INFO_EXT',
    1000352000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_INPUT_DYNAMIC_STATE_FEATURES_EXT',
    1000352001: 'VK_STRUCTURE_TYPE_VERTEX_INPUT_BINDING_DESCRIPTION_2_EXT',
    1000352002: 'VK_STRUCTURE_TYPE_VERTEX_INPUT_ATTRIBUTE_DESCRIPTION_2_EXT',
    1000353000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRM_PROPERTIES_EXT',
    1000354000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ADDRESS_BINDING_REPORT_FEATURES_EXT',
    1000354001: 'VK_STRUCTURE_TYPE_DEVICE_ADDRESS_BINDING_CALLBACK_DATA_EXT',
    1000355000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLIP_CONTROL_FEATURES_EXT',
    1000355001: 'VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_DEPTH_CLIP_CONTROL_CREATE_INFO_EXT',
    1000356000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIMITIVE_TOPOLOGY_LIST_RESTART_FEATURES_EXT',
    1000364000: 'VK_STRUCTURE_TYPE_IMPORT_MEMORY_ZIRCON_HANDLE_INFO_FUCHSIA',
    1000364001: 'VK_STRUCTURE_TYPE_MEMORY_ZIRCON_HANDLE_PROPERTIES_FUCHSIA',
    1000364002: 'VK_STRUCTURE_TYPE_MEMORY_GET_ZIRCON_HANDLE_INFO_FUCHSIA',
    1000365000: 'VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_ZIRCON_HANDLE_INFO_FUCHSIA',
    1000365001: 'VK_STRUCTURE_TYPE_SEMAPHORE_GET_ZIRCON_HANDLE_INFO_FUCHSIA',
    1000366000: 'VK_STRUCTURE_TYPE_BUFFER_COLLECTION_CREATE_INFO_FUCHSIA',
    1000366001: 'VK_STRUCTURE_TYPE_IMPORT_MEMORY_BUFFER_COLLECTION_FUCHSIA',
    1000366002: 'VK_STRUCTURE_TYPE_BUFFER_COLLECTION_IMAGE_CREATE_INFO_FUCHSIA',
    1000366003: 'VK_STRUCTURE_TYPE_BUFFER_COLLECTION_PROPERTIES_FUCHSIA',
    1000366004: 'VK_STRUCTURE_TYPE_BUFFER_CONSTRAINTS_INFO_FUCHSIA',
    1000366005: 'VK_STRUCTURE_TYPE_BUFFER_COLLECTION_BUFFER_CREATE_INFO_FUCHSIA',
    1000366006: 'VK_STRUCTURE_TYPE_IMAGE_CONSTRAINTS_INFO_FUCHSIA',
    1000366007: 'VK_STRUCTURE_TYPE_IMAGE_FORMAT_CONSTRAINTS_INFO_FUCHSIA',
    1000366008: 'VK_STRUCTURE_TYPE_SYSMEM_COLOR_SPACE_FUCHSIA',
    1000366009: 'VK_STRUCTURE_TYPE_BUFFER_COLLECTION_CONSTRAINTS_INFO_FUCHSIA',
    1000369000: 'VK_STRUCTURE_TYPE_SUBPASS_SHADING_PIPELINE_CREATE_INFO_HUAWEI',
    1000369001: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBPASS_SHADING_FEATURES_HUAWEI',
    1000369002: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBPASS_SHADING_PROPERTIES_HUAWEI',
    1000370000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INVOCATION_MASK_FEATURES_HUAWEI',
    1000371000: 'VK_STRUCTURE_TYPE_MEMORY_GET_REMOTE_ADDRESS_INFO_NV',
    1000371001: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_RDMA_FEATURES_NV',
    1000372000: 'VK_STRUCTURE_TYPE_PIPELINE_PROPERTIES_IDENTIFIER_EXT',
    1000372001: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_PROPERTIES_FEATURES_EXT',
    1000375000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAME_BOUNDARY_FEATURES_EXT',
    1000375001: 'VK_STRUCTURE_TYPE_FRAME_BOUNDARY_EXT',
    1000376000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_FEATURES_EXT',
    1000376001: 'VK_STRUCTURE_TYPE_SUBPASS_RESOLVE_PERFORMANCE_QUERY_EXT',
    1000376002: 'VK_STRUCTURE_TYPE_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_INFO_EXT',
    1000377000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_2_FEATURES_EXT',
    1000378000: 'VK_STRUCTURE_TYPE_SCREEN_SURFACE_CREATE_INFO_QNX',
    1000381000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COLOR_WRITE_ENABLE_FEATURES_EXT',
    1000381001: 'VK_STRUCTURE_TYPE_PIPELINE_COLOR_WRITE_CREATE_INFO_EXT',
    1000382000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIMITIVES_GENERATED_QUERY_FEATURES_EXT',
    1000386000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_MAINTENANCE_1_FEATURES_KHR',
    1000391000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_VIEW_MIN_LOD_FEATURES_EXT',
    1000391001: 'VK_STRUCTURE_TYPE_IMAGE_VIEW_MIN_LOD_CREATE_INFO_EXT',
    1000392000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTI_DRAW_FEATURES_EXT',
    1000392001: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTI_DRAW_PROPERTIES_EXT',
    1000393000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_2D_VIEW_OF_3D_FEATURES_EXT',
    1000395000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TILE_IMAGE_FEATURES_EXT',
    1000395001: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TILE_IMAGE_PROPERTIES_EXT',
    1000396000: 'VK_STRUCTURE_TYPE_MICROMAP_BUILD_INFO_EXT',
    1000396001: 'VK_STRUCTURE_TYPE_MICROMAP_VERSION_INFO_EXT',
    1000396002: 'VK_STRUCTURE_TYPE_COPY_MICROMAP_INFO_EXT',
    1000396003: 'VK_STRUCTURE_TYPE_COPY_MICROMAP_TO_MEMORY_INFO_EXT',
    1000396004: 'VK_STRUCTURE_TYPE_COPY_MEMORY_TO_MICROMAP_INFO_EXT',
    1000396005: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_OPACITY_MICROMAP_FEATURES_EXT',
    1000396006: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_OPACITY_MICROMAP_PROPERTIES_EXT',
    1000396007: 'VK_STRUCTURE_TYPE_MICROMAP_CREATE_INFO_EXT',
    1000396008: 'VK_STRUCTURE_TYPE_MICROMAP_BUILD_SIZES_INFO_EXT',
    1000396009: 'VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_TRIANGLES_OPACITY_MICROMAP_EXT',
    1000404000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CLUSTER_CULLING_SHADER_FEATURES_HUAWEI',
    1000404001: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CLUSTER_CULLING_SHADER_PROPERTIES_HUAWEI',
    1000404002: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CLUSTER_CULLING_SHADER_VRS_FEATURES_HUAWEI',
    1000411000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BORDER_COLOR_SWIZZLE_FEATURES_EXT',
    1000411001: 'VK_STRUCTURE_TYPE_SAMPLER_BORDER_COLOR_COMPONENT_MAPPING_CREATE_INFO_EXT',
    1000412000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PAGEABLE_DEVICE_LOCAL_MEMORY_FEATURES_EXT',
    1000415000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_ARM',
    1000417000: 'VK_STRUCTURE_TYPE_DEVICE_QUEUE_SHADER_CORE_CONTROL_CREATE_INFO_ARM',
    1000417001: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCHEDULING_CONTROLS_FEATURES_ARM',
    1000417002: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCHEDULING_CONTROLS_PROPERTIES_ARM',
    1000418000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_SLICED_VIEW_OF_3D_FEATURES_EXT',
    1000418001: 'VK_STRUCTURE_TYPE_IMAGE_VIEW_SLICED_CREATE_INFO_EXT',
    1000420000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_SET_HOST_MAPPING_FEATURES_VALVE',
    1000420001: 'VK_STRUCTURE_TYPE_DESCRIPTOR_SET_BINDING_REFERENCE_VALVE',
    1000420002: 'VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_HOST_MAPPING_INFO_VALVE',
    1000421000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLAMP_ZERO_ONE_FEATURES_EXT',
    1000422000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_NON_SEAMLESS_CUBE_MAP_FEATURES_EXT',
    1000424000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RENDER_PASS_STRIPED_FEATURES_ARM',
    1000424001: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RENDER_PASS_STRIPED_PROPERTIES_ARM',
    1000424002: 'VK_STRUCTURE_TYPE_RENDER_PASS_STRIPE_BEGIN_INFO_ARM',
    1000424003: 'VK_STRUCTURE_TYPE_RENDER_PASS_STRIPE_INFO_ARM',
    1000424004: 'VK_STRUCTURE_TYPE_RENDER_PASS_STRIPE_SUBMIT_INFO_ARM',
    1000425000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_OFFSET_FEATURES_QCOM',
    1000425001: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_OFFSET_PROPERTIES_QCOM',
    1000425002: 'VK_STRUCTURE_TYPE_SUBPASS_FRAGMENT_DENSITY_MAP_OFFSET_END_INFO_QCOM',
    1000426000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COPY_MEMORY_INDIRECT_FEATURES_NV',
    1000426001: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COPY_MEMORY_INDIRECT_PROPERTIES_NV',
    1000427000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_DECOMPRESSION_FEATURES_NV',
    1000427001: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_DECOMPRESSION_PROPERTIES_NV',
    1000428000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_COMPUTE_FEATURES_NV',
    1000428001: 'VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_INDIRECT_BUFFER_INFO_NV',
    1000428002: 'VK_STRUCTURE_TYPE_PIPELINE_INDIRECT_DEVICE_ADDRESS_INFO_NV',
    1000430000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINEAR_COLOR_ATTACHMENT_FEATURES_NV',
    1000437000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_COMPRESSION_CONTROL_SWAPCHAIN_FEATURES_EXT',
    1000440000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_PROCESSING_FEATURES_QCOM',
    1000440001: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_PROCESSING_PROPERTIES_QCOM',
    1000440002: 'VK_STRUCTURE_TYPE_IMAGE_VIEW_SAMPLE_WEIGHT_CREATE_INFO_QCOM',
    1000451000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_NESTED_COMMAND_BUFFER_FEATURES_EXT',
    1000451001: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_NESTED_COMMAND_BUFFER_PROPERTIES_EXT',
    1000453000: 'VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_ACQUIRE_UNMODIFIED_EXT',
    1000455000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_3_FEATURES_EXT',
    1000455001: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_3_PROPERTIES_EXT',
    1000458000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBPASS_MERGE_FEEDBACK_FEATURES_EXT',
    1000458001: 'VK_STRUCTURE_TYPE_RENDER_PASS_CREATION_CONTROL_EXT',
    1000458002: 'VK_STRUCTURE_TYPE_RENDER_PASS_CREATION_FEEDBACK_CREATE_INFO_EXT',
    1000458003: 'VK_STRUCTURE_TYPE_RENDER_PASS_SUBPASS_FEEDBACK_CREATE_INFO_EXT',
    1000459000: 'VK_STRUCTURE_TYPE_DIRECT_DRIVER_LOADING_INFO_LUNARG',
    1000459001: 'VK_STRUCTURE_TYPE_DIRECT_DRIVER_LOADING_LIST_LUNARG',
    1000462000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_MODULE_IDENTIFIER_FEATURES_EXT',
    1000462001: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_MODULE_IDENTIFIER_PROPERTIES_EXT',
    1000462002: 'VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_MODULE_IDENTIFIER_CREATE_INFO_EXT',
    1000462003: 'VK_STRUCTURE_TYPE_SHADER_MODULE_IDENTIFIER_EXT',
    1000342000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_FEATURES_EXT',
    1000464000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_OPTICAL_FLOW_FEATURES_NV',
    1000464001: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_OPTICAL_FLOW_PROPERTIES_NV',
    1000464002: 'VK_STRUCTURE_TYPE_OPTICAL_FLOW_IMAGE_FORMAT_INFO_NV',
    1000464003: 'VK_STRUCTURE_TYPE_OPTICAL_FLOW_IMAGE_FORMAT_PROPERTIES_NV',
    1000464004: 'VK_STRUCTURE_TYPE_OPTICAL_FLOW_SESSION_CREATE_INFO_NV',
    1000464005: 'VK_STRUCTURE_TYPE_OPTICAL_FLOW_EXECUTE_INFO_NV',
    1000464010: 'VK_STRUCTURE_TYPE_OPTICAL_FLOW_SESSION_CREATE_PRIVATE_DATA_INFO_NV',
    1000465000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LEGACY_DITHERING_FEATURES_EXT',
    1000466000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_PROTECTED_ACCESS_FEATURES_EXT',
    1000468000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FORMAT_RESOLVE_FEATURES_ANDROID',
    1000468001: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FORMAT_RESOLVE_PROPERTIES_ANDROID',
    1000468002: 'VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_FORMAT_RESOLVE_PROPERTIES_ANDROID',
    1000470000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_5_FEATURES_KHR',
    1000470001: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_5_PROPERTIES_KHR',
    1000470003: 'VK_STRUCTURE_TYPE_RENDERING_AREA_INFO_KHR',
    1000470004: 'VK_STRUCTURE_TYPE_DEVICE_IMAGE_SUBRESOURCE_INFO_KHR',
    1000338002: 'VK_STRUCTURE_TYPE_SUBRESOURCE_LAYOUT_2_KHR',
    1000338003: 'VK_STRUCTURE_TYPE_IMAGE_SUBRESOURCE_2_KHR',
    1000470005: 'VK_STRUCTURE_TYPE_PIPELINE_CREATE_FLAGS_2_CREATE_INFO_KHR',
    1000470006: 'VK_STRUCTURE_TYPE_BUFFER_USAGE_FLAGS_2_CREATE_INFO_KHR',
    1000481000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_POSITION_FETCH_FEATURES_KHR',
    1000482000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_OBJECT_FEATURES_EXT',
    1000482001: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_OBJECT_PROPERTIES_EXT',
    1000482002: 'VK_STRUCTURE_TYPE_SHADER_CREATE_INFO_EXT',
    1000484000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TILE_PROPERTIES_FEATURES_QCOM',
    1000484001: 'VK_STRUCTURE_TYPE_TILE_PROPERTIES_QCOM',
    1000485000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_AMIGO_PROFILING_FEATURES_SEC',
    1000485001: 'VK_STRUCTURE_TYPE_AMIGO_PROFILING_SUBMIT_INFO_SEC',
    1000488000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_VIEWPORTS_FEATURES_QCOM',
    1000490000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_INVOCATION_REORDER_FEATURES_NV',
    1000490001: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_INVOCATION_REORDER_PROPERTIES_NV',
    1000492000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_SPARSE_ADDRESS_SPACE_FEATURES_NV',
    1000492001: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_SPARSE_ADDRESS_SPACE_PROPERTIES_NV',
    1000351000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MUTABLE_DESCRIPTOR_TYPE_FEATURES_EXT',
    1000351002: 'VK_STRUCTURE_TYPE_MUTABLE_DESCRIPTOR_TYPE_CREATE_INFO_EXT',
    1000496000: 'VK_STRUCTURE_TYPE_LAYER_SETTINGS_CREATE_INFO_EXT',
    1000497000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_BUILTINS_FEATURES_ARM',
    1000497001: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_BUILTINS_PROPERTIES_ARM',
    1000498000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_LIBRARY_GROUP_HANDLES_FEATURES_EXT',
    1000499000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DYNAMIC_RENDERING_UNUSED_ATTACHMENTS_FEATURES_EXT',
    1000505000: 'VK_STRUCTURE_TYPE_LATENCY_SLEEP_MODE_INFO_NV',
    1000505001: 'VK_STRUCTURE_TYPE_LATENCY_SLEEP_INFO_NV',
    1000505002: 'VK_STRUCTURE_TYPE_SET_LATENCY_MARKER_INFO_NV',
    1000505003: 'VK_STRUCTURE_TYPE_GET_LATENCY_MARKER_INFO_NV',
    1000505004: 'VK_STRUCTURE_TYPE_LATENCY_TIMINGS_FRAME_REPORT_NV',
    1000505005: 'VK_STRUCTURE_TYPE_LATENCY_SUBMISSION_PRESENT_ID_NV',
    1000505006: 'VK_STRUCTURE_TYPE_OUT_OF_BAND_QUEUE_TYPE_INFO_NV',
    1000505007: 'VK_STRUCTURE_TYPE_SWAPCHAIN_LATENCY_CREATE_INFO_NV',
    1000505008: 'VK_STRUCTURE_TYPE_LATENCY_SURFACE_CAPABILITIES_NV',
    1000506000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_FEATURES_KHR',
    1000506001: 'VK_STRUCTURE_TYPE_COOPERATIVE_MATRIX_PROPERTIES_KHR',
    1000506002: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_PROPERTIES_KHR',
    1000510000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_RENDER_AREAS_FEATURES_QCOM',
    1000510001: 'VK_STRUCTURE_TYPE_MULTIVIEW_PER_VIEW_RENDER_AREAS_RENDER_PASS_BEGIN_INFO_QCOM',
    1000515000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VIDEO_MAINTENANCE_1_FEATURES_KHR',
    1000515001: 'VK_STRUCTURE_TYPE_VIDEO_INLINE_QUERY_INFO_KHR',
    1000516000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PER_STAGE_DESCRIPTOR_SET_FEATURES_NV',
    1000518000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_PROCESSING_2_FEATURES_QCOM',
    1000518001: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_PROCESSING_2_PROPERTIES_QCOM',
    1000518002: 'VK_STRUCTURE_TYPE_SAMPLER_BLOCK_MATCH_WINDOW_CREATE_INFO_QCOM',
    1000519000: 'VK_STRUCTURE_TYPE_SAMPLER_CUBIC_WEIGHTS_CREATE_INFO_QCOM',
    1000519001: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUBIC_WEIGHTS_FEATURES_QCOM',
    1000519002: 'VK_STRUCTURE_TYPE_BLIT_IMAGE_CUBIC_WEIGHTS_INFO_QCOM',
    1000520000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_DEGAMMA_FEATURES_QCOM',
    1000520001: 'VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_YCBCR_DEGAMMA_CREATE_INFO_QCOM',
    1000521000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUBIC_CLAMP_FEATURES_QCOM',
    1000524000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ATTACHMENT_FEEDBACK_LOOP_DYNAMIC_STATE_FEATURES_EXT',
    1000525000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_PROPERTIES_KHR',
    1000190001: 'VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_DIVISOR_STATE_CREATE_INFO_KHR',
    1000190002: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_FEATURES_KHR',
    1000529000: 'VK_STRUCTURE_TYPE_SCREEN_BUFFER_PROPERTIES_QNX',
    1000529001: 'VK_STRUCTURE_TYPE_SCREEN_BUFFER_FORMAT_PROPERTIES_QNX',
    1000529002: 'VK_STRUCTURE_TYPE_IMPORT_SCREEN_BUFFER_INFO_QNX',
    1000529003: 'VK_STRUCTURE_TYPE_EXTERNAL_FORMAT_QNX',
    1000529004: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_SCREEN_BUFFER_FEATURES_QNX',
    1000530000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LAYERED_DRIVER_PROPERTIES_MSFT',
    1000184000: 'VK_STRUCTURE_TYPE_CALIBRATED_TIMESTAMP_INFO_KHR',
    1000545000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_6_FEATURES_KHR',
    1000545001: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_6_PROPERTIES_KHR',
    1000545002: 'VK_STRUCTURE_TYPE_BIND_MEMORY_STATUS_KHR',
    1000545003: 'VK_STRUCTURE_TYPE_BIND_DESCRIPTOR_SETS_INFO_KHR',
    1000545004: 'VK_STRUCTURE_TYPE_PUSH_CONSTANTS_INFO_KHR',
    1000545005: 'VK_STRUCTURE_TYPE_PUSH_DESCRIPTOR_SET_INFO_KHR',
    1000545006: 'VK_STRUCTURE_TYPE_PUSH_DESCRIPTOR_SET_WITH_TEMPLATE_INFO_KHR',
    1000545007: 'VK_STRUCTURE_TYPE_SET_DESCRIPTOR_BUFFER_OFFSETS_INFO_EXT',
    1000545008: 'VK_STRUCTURE_TYPE_BIND_DESCRIPTOR_BUFFER_EMBEDDED_SAMPLERS_INFO_EXT',
    1000546000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_POOL_OVERALLOCATION_FEATURES_NV',
    1000120000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTER_FEATURES',
    1000063000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETER_FEATURES',
    1000011000: 'VK_STRUCTURE_TYPE_DEBUG_REPORT_CREATE_INFO_EXT',
    1000044000: 'VK_STRUCTURE_TYPE_RENDERING_INFO_KHR',
    1000044001: 'VK_STRUCTURE_TYPE_RENDERING_ATTACHMENT_INFO_KHR',
    1000044002: 'VK_STRUCTURE_TYPE_PIPELINE_RENDERING_CREATE_INFO_KHR',
    1000044003: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DYNAMIC_RENDERING_FEATURES_KHR',
    1000044004: 'VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDERING_INFO_KHR',
    1000044008: 'VK_STRUCTURE_TYPE_ATTACHMENT_SAMPLE_COUNT_INFO_NV',
    1000053000: 'VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO_KHR',
    1000053001: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES_KHR',
    1000053002: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES_KHR',
    1000059000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2_KHR',
    1000059001: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2_KHR',
    1000059002: 'VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2_KHR',
    1000059003: 'VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2_KHR',
    1000059004: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2_KHR',
    1000059005: 'VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2_KHR',
    1000059006: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2_KHR',
    1000059007: 'VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2_KHR',
    1000059008: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2_KHR',
    1000060000: 'VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO_KHR',
    1000060003: 'VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO_KHR',
    1000060004: 'VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO_KHR',
    1000060005: 'VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO_KHR',
    1000060006: 'VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO_KHR',
    1000060013: 'VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO_KHR',
    1000060014: 'VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO_KHR',
    1000066000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXTURE_COMPRESSION_ASTC_HDR_FEATURES_EXT',
    1000070000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES_KHR',
    1000070001: 'VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO_KHR',
    1000071000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO_KHR',
    1000071001: 'VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES_KHR',
    1000071002: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO_KHR',
    1000071003: 'VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES_KHR',
    1000071004: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES_KHR',
    1000072000: 'VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO_KHR',
    1000072001: 'VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_KHR',
    1000072002: 'VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_KHR',
    1000076000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO_KHR',
    1000076001: 'VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES_KHR',
    1000077000: 'VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO_KHR',
    1000082000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES_KHR',
    1000082000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT16_INT8_FEATURES_KHR',
    1000083000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES_KHR',
    1000085000: 'VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO_KHR',
    1000090000: 'VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES2_EXT',
    1000108000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES_KHR',
    1000108001: 'VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO_KHR',
    1000108002: 'VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO_KHR',
    1000108003: 'VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO_KHR',
    1000109000: 'VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2_KHR',
    1000109001: 'VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2_KHR',
    1000109002: 'VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2_KHR',
    1000109003: 'VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2_KHR',
    1000109004: 'VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2_KHR',
    1000109005: 'VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO_KHR',
    1000109006: 'VK_STRUCTURE_TYPE_SUBPASS_END_INFO_KHR',
    1000112000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO_KHR',
    1000112001: 'VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES_KHR',
    1000113000: 'VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO_KHR',
    1000117000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES_KHR',
    1000117001: 'VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO_KHR',
    1000117002: 'VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO_KHR',
    1000117003: 'VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO_KHR',
    1000120000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES_KHR',
    1000120000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTER_FEATURES_KHR',
    1000127000: 'VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS_KHR',
    1000127001: 'VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO_KHR',
    1000130000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES_EXT',
    1000130001: 'VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO_EXT',
    1000138000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES_EXT',
    1000138001: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES_EXT',
    1000138002: 'VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_INLINE_UNIFORM_BLOCK_EXT',
    1000138003: 'VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_INLINE_UNIFORM_BLOCK_CREATE_INFO_EXT',
    1000146000: 'VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2_KHR',
    1000146001: 'VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2_KHR',
    1000146002: 'VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2_KHR',
    1000146003: 'VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2_KHR',
    1000146004: 'VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2_KHR',
    1000147000: 'VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO_KHR',
    1000156000: 'VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO_KHR',
    1000156001: 'VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO_KHR',
    1000156002: 'VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO_KHR',
    1000156003: 'VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO_KHR',
    1000156004: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES_KHR',
    1000156005: 'VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES_KHR',
    1000157000: 'VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO_KHR',
    1000157001: 'VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO_KHR',
    1000161000: 'VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO_EXT',
    1000161001: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES_EXT',
    1000161002: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES_EXT',
    1000161003: 'VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO_EXT',
    1000161004: 'VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT_EXT',
    1000168000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES_KHR',
    1000168001: 'VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT_KHR',
    1000174000: 'VK_STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_EXT',
    1000175000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES_KHR',
    1000177000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES_KHR',
    1000180000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES_KHR',
    1000184000: 'VK_STRUCTURE_TYPE_CALIBRATED_TIMESTAMP_INFO_EXT',
    1000190001: 'VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_DIVISOR_STATE_CREATE_INFO_EXT',
    1000190002: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_FEATURES_EXT',
    1000192000: 'VK_STRUCTURE_TYPE_PIPELINE_CREATION_FEEDBACK_CREATE_INFO_EXT',
    1000196000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES_KHR',
    1000197000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES_KHR',
    1000199000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES_KHR',
    1000199001: 'VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE_KHR',
    1000203000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_FEATURES_NV',
    1000207000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES_KHR',
    1000207001: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES_KHR',
    1000207002: 'VK_STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO_KHR',
    1000207003: 'VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO_KHR',
    1000207004: 'VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO_KHR',
    1000207005: 'VK_STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO_KHR',
    1000210000: 'VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO_INTEL',
    1000211000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES_KHR',
    1000215000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TERMINATE_INVOCATION_FEATURES_KHR',
    1000221000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES_EXT',
    1000225000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_PROPERTIES_EXT',
    1000225001: 'VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_REQUIRED_SUBGROUP_SIZE_CREATE_INFO_EXT',
    1000225002: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_FEATURES_EXT',
    1000241000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES_KHR',
    1000241001: 'VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT_KHR',
    1000241002: 'VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT_KHR',
    1000244000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_ADDRESS_FEATURES_EXT',
    1000244001: 'VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO_EXT',
    1000245000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TOOL_PROPERTIES_EXT',
    1000246000: 'VK_STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO_EXT',
    1000253000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES_KHR',
    1000257000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_KHR',
    1000244001: 'VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO_KHR',
    1000257002: 'VK_STRUCTURE_TYPE_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO_KHR',
    1000257003: 'VK_STRUCTURE_TYPE_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO_KHR',
    1000257004: 'VK_STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO_KHR',
    1000261000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES_EXT',
    1000276000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DEMOTE_TO_HELPER_INVOCATION_FEATURES_EXT',
    1000280000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_FEATURES_KHR',
    1000280001: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_PROPERTIES_KHR',
    1000281001: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_PROPERTIES_EXT',
    1000295000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIVATE_DATA_FEATURES_EXT',
    1000295001: 'VK_STRUCTURE_TYPE_DEVICE_PRIVATE_DATA_CREATE_INFO_EXT',
    1000295002: 'VK_STRUCTURE_TYPE_PRIVATE_DATA_SLOT_CREATE_INFO_EXT',
    1000297000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_CREATION_CACHE_CONTROL_FEATURES_EXT',
    1000314000: 'VK_STRUCTURE_TYPE_MEMORY_BARRIER_2_KHR',
    1000314001: 'VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER_2_KHR',
    1000314002: 'VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER_2_KHR',
    1000314003: 'VK_STRUCTURE_TYPE_DEPENDENCY_INFO_KHR',
    1000314004: 'VK_STRUCTURE_TYPE_SUBMIT_INFO_2_KHR',
    1000314005: 'VK_STRUCTURE_TYPE_SEMAPHORE_SUBMIT_INFO_KHR',
    1000314006: 'VK_STRUCTURE_TYPE_COMMAND_BUFFER_SUBMIT_INFO_KHR',
    1000314007: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SYNCHRONIZATION_2_FEATURES_KHR',
    1000325000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ZERO_INITIALIZE_WORKGROUP_MEMORY_FEATURES_KHR',
    1000335000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ROBUSTNESS_FEATURES_EXT',
    1000337000: 'VK_STRUCTURE_TYPE_COPY_BUFFER_INFO_2_KHR',
    1000337001: 'VK_STRUCTURE_TYPE_COPY_IMAGE_INFO_2_KHR',
    1000337002: 'VK_STRUCTURE_TYPE_COPY_BUFFER_TO_IMAGE_INFO_2_KHR',
    1000337003: 'VK_STRUCTURE_TYPE_COPY_IMAGE_TO_BUFFER_INFO_2_KHR',
    1000337004: 'VK_STRUCTURE_TYPE_BLIT_IMAGE_INFO_2_KHR',
    1000337005: 'VK_STRUCTURE_TYPE_RESOLVE_IMAGE_INFO_2_KHR',
    1000337006: 'VK_STRUCTURE_TYPE_BUFFER_COPY_2_KHR',
    1000337007: 'VK_STRUCTURE_TYPE_IMAGE_COPY_2_KHR',
    1000337008: 'VK_STRUCTURE_TYPE_IMAGE_BLIT_2_KHR',
    1000337009: 'VK_STRUCTURE_TYPE_BUFFER_IMAGE_COPY_2_KHR',
    1000337010: 'VK_STRUCTURE_TYPE_IMAGE_RESOLVE_2_KHR',
    1000338002: 'VK_STRUCTURE_TYPE_SUBRESOURCE_LAYOUT_2_EXT',
    1000338003: 'VK_STRUCTURE_TYPE_IMAGE_SUBRESOURCE_2_EXT',
    1000342000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_FEATURES_ARM',
    1000351000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MUTABLE_DESCRIPTOR_TYPE_FEATURES_VALVE',
    1000351002: 'VK_STRUCTURE_TYPE_MUTABLE_DESCRIPTOR_TYPE_CREATE_INFO_VALVE',
    1000360000: 'VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_3_KHR',
    1000269001: 'VK_STRUCTURE_TYPE_PIPELINE_INFO_EXT',
    1000388000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GLOBAL_PRIORITY_QUERY_FEATURES_EXT',
    1000388001: 'VK_STRUCTURE_TYPE_QUEUE_FAMILY_GLOBAL_PRIORITY_PROPERTIES_EXT',
    1000413000: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_FEATURES_KHR',
    1000413001: 'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_PROPERTIES_KHR',
    1000413002: 'VK_STRUCTURE_TYPE_DEVICE_BUFFER_MEMORY_REQUIREMENTS_KHR',
    1000413003: 'VK_STRUCTURE_TYPE_DEVICE_IMAGE_MEMORY_REQUIREMENTS_KHR',
    1000225001: 'VK_STRUCTURE_TYPE_SHADER_REQUIRED_SUBGROUP_SIZE_CREATE_INFO_EXT',
    2147483647: 'VK_STRUCTURE_TYPE_MAX_ENUM',
}
VK_STRUCTURE_TYPE_APPLICATION_INFO = 0
VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO = 1
VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO = 2
VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO = 3
VK_STRUCTURE_TYPE_SUBMIT_INFO = 4
VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO = 5
VK_STRUCTURE_TYPE_MAPPED_MEMORY_RANGE = 6
VK_STRUCTURE_TYPE_BIND_SPARSE_INFO = 7
VK_STRUCTURE_TYPE_FENCE_CREATE_INFO = 8
VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO = 9
VK_STRUCTURE_TYPE_EVENT_CREATE_INFO = 10
VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO = 11
VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO = 12
VK_STRUCTURE_TYPE_BUFFER_VIEW_CREATE_INFO = 13
VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO = 14
VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO = 15
VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO = 16
VK_STRUCTURE_TYPE_PIPELINE_CACHE_CREATE_INFO = 17
VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO = 18
VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO = 19
VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO = 20
VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO = 21
VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO = 22
VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO = 23
VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO = 24
VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO = 25
VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO = 26
VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO = 27
VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO = 28
VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO = 29
VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO = 30
VK_STRUCTURE_TYPE_SAMPLER_CREATE_INFO = 31
VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO = 32
VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO = 33
VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO = 34
VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET = 35
VK_STRUCTURE_TYPE_COPY_DESCRIPTOR_SET = 36
VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO = 37
VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO = 38
VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO = 39
VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO = 40
VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_INFO = 41
VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO = 42
VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO = 43
VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER = 44
VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER = 45
VK_STRUCTURE_TYPE_MEMORY_BARRIER = 46
VK_STRUCTURE_TYPE_LOADER_INSTANCE_CREATE_INFO = 47
VK_STRUCTURE_TYPE_LOADER_DEVICE_CREATE_INFO = 48
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_PROPERTIES = 1000094000
VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO = 1000157000
VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO = 1000157001
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES = 1000083000
VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS = 1000127000
VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO = 1000127001
VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO = 1000060000
VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO = 1000060003
VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO = 1000060004
VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO = 1000060005
VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO = 1000060006
VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO = 1000060013
VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO = 1000060014
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES = 1000070000
VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO = 1000070001
VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2 = 1000146000
VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2 = 1000146001
VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2 = 1000146002
VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2 = 1000146003
VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2 = 1000146004
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2 = 1000059000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2 = 1000059001
VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2 = 1000059002
VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2 = 1000059003
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2 = 1000059004
VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2 = 1000059005
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2 = 1000059006
VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2 = 1000059007
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2 = 1000059008
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES = 1000117000
VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO = 1000117001
VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO = 1000117002
VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO = 1000117003
VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO = 1000053000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES = 1000053001
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES = 1000053002
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES = 1000120000
VK_STRUCTURE_TYPE_PROTECTED_SUBMIT_INFO = 1000145000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_FEATURES = 1000145001
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_PROPERTIES = 1000145002
VK_STRUCTURE_TYPE_DEVICE_QUEUE_INFO_2 = 1000145003
VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO = 1000156000
VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO = 1000156001
VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO = 1000156002
VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO = 1000156003
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES = 1000156004
VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES = 1000156005
VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO = 1000085000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO = 1000071000
VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES = 1000071001
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO = 1000071002
VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES = 1000071003
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES = 1000071004
VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO = 1000072000
VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO = 1000072001
VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO = 1000072002
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO = 1000112000
VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES = 1000112001
VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO = 1000113000
VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO = 1000077000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO = 1000076000
VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES = 1000076001
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES = 1000168000
VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT = 1000168001
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETERS_FEATURES = 1000063000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_FEATURES = 49
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_PROPERTIES = 50
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_FEATURES = 51
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_PROPERTIES = 52
VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO = 1000147000
VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2 = 1000109000
VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2 = 1000109001
VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2 = 1000109002
VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2 = 1000109003
VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2 = 1000109004
VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO = 1000109005
VK_STRUCTURE_TYPE_SUBPASS_END_INFO = 1000109006
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES = 1000177000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES = 1000196000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES = 1000180000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES = 1000082000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES = 1000197000
VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO = 1000161000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES = 1000161001
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES = 1000161002
VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO = 1000161003
VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT = 1000161004
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES = 1000199000
VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE = 1000199001
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES = 1000221000
VK_STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO = 1000246000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES = 1000130000
VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO = 1000130001
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES = 1000211000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES = 1000108000
VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO = 1000108001
VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO = 1000108002
VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO = 1000108003
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES = 1000253000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES = 1000175000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES = 1000241000
VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT = 1000241001
VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT = 1000241002
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES = 1000261000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES = 1000207000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES = 1000207001
VK_STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO = 1000207002
VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO = 1000207003
VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO = 1000207004
VK_STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO = 1000207005
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES = 1000257000
VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO = 1000244001
VK_STRUCTURE_TYPE_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO = 1000257002
VK_STRUCTURE_TYPE_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO = 1000257003
VK_STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO = 1000257004
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_3_FEATURES = 53
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_3_PROPERTIES = 54
VK_STRUCTURE_TYPE_PIPELINE_CREATION_FEEDBACK_CREATE_INFO = 1000192000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TERMINATE_INVOCATION_FEATURES = 1000215000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TOOL_PROPERTIES = 1000245000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DEMOTE_TO_HELPER_INVOCATION_FEATURES = 1000276000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIVATE_DATA_FEATURES = 1000295000
VK_STRUCTURE_TYPE_DEVICE_PRIVATE_DATA_CREATE_INFO = 1000295001
VK_STRUCTURE_TYPE_PRIVATE_DATA_SLOT_CREATE_INFO = 1000295002
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_CREATION_CACHE_CONTROL_FEATURES = 1000297000
VK_STRUCTURE_TYPE_MEMORY_BARRIER_2 = 1000314000
VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER_2 = 1000314001
VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER_2 = 1000314002
VK_STRUCTURE_TYPE_DEPENDENCY_INFO = 1000314003
VK_STRUCTURE_TYPE_SUBMIT_INFO_2 = 1000314004
VK_STRUCTURE_TYPE_SEMAPHORE_SUBMIT_INFO = 1000314005
VK_STRUCTURE_TYPE_COMMAND_BUFFER_SUBMIT_INFO = 1000314006
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SYNCHRONIZATION_2_FEATURES = 1000314007
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ZERO_INITIALIZE_WORKGROUP_MEMORY_FEATURES = 1000325000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ROBUSTNESS_FEATURES = 1000335000
VK_STRUCTURE_TYPE_COPY_BUFFER_INFO_2 = 1000337000
VK_STRUCTURE_TYPE_COPY_IMAGE_INFO_2 = 1000337001
VK_STRUCTURE_TYPE_COPY_BUFFER_TO_IMAGE_INFO_2 = 1000337002
VK_STRUCTURE_TYPE_COPY_IMAGE_TO_BUFFER_INFO_2 = 1000337003
VK_STRUCTURE_TYPE_BLIT_IMAGE_INFO_2 = 1000337004
VK_STRUCTURE_TYPE_RESOLVE_IMAGE_INFO_2 = 1000337005
VK_STRUCTURE_TYPE_BUFFER_COPY_2 = 1000337006
VK_STRUCTURE_TYPE_IMAGE_COPY_2 = 1000337007
VK_STRUCTURE_TYPE_IMAGE_BLIT_2 = 1000337008
VK_STRUCTURE_TYPE_BUFFER_IMAGE_COPY_2 = 1000337009
VK_STRUCTURE_TYPE_IMAGE_RESOLVE_2 = 1000337010
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_PROPERTIES = 1000225000
VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_REQUIRED_SUBGROUP_SIZE_CREATE_INFO = 1000225001
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_FEATURES = 1000225002
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES = 1000138000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES = 1000138001
VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_INLINE_UNIFORM_BLOCK = 1000138002
VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_INLINE_UNIFORM_BLOCK_CREATE_INFO = 1000138003
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXTURE_COMPRESSION_ASTC_HDR_FEATURES = 1000066000
VK_STRUCTURE_TYPE_RENDERING_INFO = 1000044000
VK_STRUCTURE_TYPE_RENDERING_ATTACHMENT_INFO = 1000044001
VK_STRUCTURE_TYPE_PIPELINE_RENDERING_CREATE_INFO = 1000044002
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DYNAMIC_RENDERING_FEATURES = 1000044003
VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDERING_INFO = 1000044004
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_FEATURES = 1000280000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_PROPERTIES = 1000280001
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_PROPERTIES = 1000281001
VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_3 = 1000360000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_FEATURES = 1000413000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_PROPERTIES = 1000413001
VK_STRUCTURE_TYPE_DEVICE_BUFFER_MEMORY_REQUIREMENTS = 1000413002
VK_STRUCTURE_TYPE_DEVICE_IMAGE_MEMORY_REQUIREMENTS = 1000413003
VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR = 1000001000
VK_STRUCTURE_TYPE_PRESENT_INFO_KHR = 1000001001
VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_CAPABILITIES_KHR = 1000060007
VK_STRUCTURE_TYPE_IMAGE_SWAPCHAIN_CREATE_INFO_KHR = 1000060008
VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_SWAPCHAIN_INFO_KHR = 1000060009
VK_STRUCTURE_TYPE_ACQUIRE_NEXT_IMAGE_INFO_KHR = 1000060010
VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_INFO_KHR = 1000060011
VK_STRUCTURE_TYPE_DEVICE_GROUP_SWAPCHAIN_CREATE_INFO_KHR = 1000060012
VK_STRUCTURE_TYPE_DISPLAY_MODE_CREATE_INFO_KHR = 1000002000
VK_STRUCTURE_TYPE_DISPLAY_SURFACE_CREATE_INFO_KHR = 1000002001
VK_STRUCTURE_TYPE_DISPLAY_PRESENT_INFO_KHR = 1000003000
VK_STRUCTURE_TYPE_XLIB_SURFACE_CREATE_INFO_KHR = 1000004000
VK_STRUCTURE_TYPE_XCB_SURFACE_CREATE_INFO_KHR = 1000005000
VK_STRUCTURE_TYPE_WAYLAND_SURFACE_CREATE_INFO_KHR = 1000006000
VK_STRUCTURE_TYPE_ANDROID_SURFACE_CREATE_INFO_KHR = 1000008000
VK_STRUCTURE_TYPE_WIN32_SURFACE_CREATE_INFO_KHR = 1000009000
VK_STRUCTURE_TYPE_DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT = 1000011000
VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_RASTERIZATION_ORDER_AMD = 1000018000
VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_NAME_INFO_EXT = 1000022000
VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_TAG_INFO_EXT = 1000022001
VK_STRUCTURE_TYPE_DEBUG_MARKER_MARKER_INFO_EXT = 1000022002
VK_STRUCTURE_TYPE_VIDEO_PROFILE_INFO_KHR = 1000023000
VK_STRUCTURE_TYPE_VIDEO_CAPABILITIES_KHR = 1000023001
VK_STRUCTURE_TYPE_VIDEO_PICTURE_RESOURCE_INFO_KHR = 1000023002
VK_STRUCTURE_TYPE_VIDEO_SESSION_MEMORY_REQUIREMENTS_KHR = 1000023003
VK_STRUCTURE_TYPE_BIND_VIDEO_SESSION_MEMORY_INFO_KHR = 1000023004
VK_STRUCTURE_TYPE_VIDEO_SESSION_CREATE_INFO_KHR = 1000023005
VK_STRUCTURE_TYPE_VIDEO_SESSION_PARAMETERS_CREATE_INFO_KHR = 1000023006
VK_STRUCTURE_TYPE_VIDEO_SESSION_PARAMETERS_UPDATE_INFO_KHR = 1000023007
VK_STRUCTURE_TYPE_VIDEO_BEGIN_CODING_INFO_KHR = 1000023008
VK_STRUCTURE_TYPE_VIDEO_END_CODING_INFO_KHR = 1000023009
VK_STRUCTURE_TYPE_VIDEO_CODING_CONTROL_INFO_KHR = 1000023010
VK_STRUCTURE_TYPE_VIDEO_REFERENCE_SLOT_INFO_KHR = 1000023011
VK_STRUCTURE_TYPE_QUEUE_FAMILY_VIDEO_PROPERTIES_KHR = 1000023012
VK_STRUCTURE_TYPE_VIDEO_PROFILE_LIST_INFO_KHR = 1000023013
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VIDEO_FORMAT_INFO_KHR = 1000023014
VK_STRUCTURE_TYPE_VIDEO_FORMAT_PROPERTIES_KHR = 1000023015
VK_STRUCTURE_TYPE_QUEUE_FAMILY_QUERY_RESULT_STATUS_PROPERTIES_KHR = 1000023016
VK_STRUCTURE_TYPE_VIDEO_DECODE_INFO_KHR = 1000024000
VK_STRUCTURE_TYPE_VIDEO_DECODE_CAPABILITIES_KHR = 1000024001
VK_STRUCTURE_TYPE_VIDEO_DECODE_USAGE_INFO_KHR = 1000024002
VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_IMAGE_CREATE_INFO_NV = 1000026000
VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_BUFFER_CREATE_INFO_NV = 1000026001
VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_MEMORY_ALLOCATE_INFO_NV = 1000026002
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_FEATURES_EXT = 1000028000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_PROPERTIES_EXT = 1000028001
VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_STREAM_CREATE_INFO_EXT = 1000028002
VK_STRUCTURE_TYPE_CU_MODULE_CREATE_INFO_NVX = 1000029000
VK_STRUCTURE_TYPE_CU_FUNCTION_CREATE_INFO_NVX = 1000029001
VK_STRUCTURE_TYPE_CU_LAUNCH_INFO_NVX = 1000029002
VK_STRUCTURE_TYPE_IMAGE_VIEW_HANDLE_INFO_NVX = 1000030000
VK_STRUCTURE_TYPE_IMAGE_VIEW_ADDRESS_PROPERTIES_NVX = 1000030001
VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_CAPABILITIES_KHR = 1000038000
VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_PARAMETERS_CREATE_INFO_KHR = 1000038001
VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_PARAMETERS_ADD_INFO_KHR = 1000038002
VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_PICTURE_INFO_KHR = 1000038003
VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_DPB_SLOT_INFO_KHR = 1000038004
VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_NALU_SLICE_INFO_KHR = 1000038005
VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_GOP_REMAINING_FRAME_INFO_KHR = 1000038006
VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_PROFILE_INFO_KHR = 1000038007
VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_RATE_CONTROL_INFO_KHR = 1000038008
VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_RATE_CONTROL_LAYER_INFO_KHR = 1000038009
VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_CREATE_INFO_KHR = 1000038010
VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_QUALITY_LEVEL_PROPERTIES_KHR = 1000038011
VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_PARAMETERS_GET_INFO_KHR = 1000038012
VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_PARAMETERS_FEEDBACK_INFO_KHR = 1000038013
VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_CAPABILITIES_KHR = 1000039000
VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_SESSION_PARAMETERS_CREATE_INFO_KHR = 1000039001
VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_SESSION_PARAMETERS_ADD_INFO_KHR = 1000039002
VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_PICTURE_INFO_KHR = 1000039003
VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_DPB_SLOT_INFO_KHR = 1000039004
VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_NALU_SLICE_SEGMENT_INFO_KHR = 1000039005
VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_GOP_REMAINING_FRAME_INFO_KHR = 1000039006
VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_PROFILE_INFO_KHR = 1000039007
VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_RATE_CONTROL_INFO_KHR = 1000039009
VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_RATE_CONTROL_LAYER_INFO_KHR = 1000039010
VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_SESSION_CREATE_INFO_KHR = 1000039011
VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_QUALITY_LEVEL_PROPERTIES_KHR = 1000039012
VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_SESSION_PARAMETERS_GET_INFO_KHR = 1000039013
VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_SESSION_PARAMETERS_FEEDBACK_INFO_KHR = 1000039014
VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_CAPABILITIES_KHR = 1000040000
VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_PICTURE_INFO_KHR = 1000040001
VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_PROFILE_INFO_KHR = 1000040003
VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_SESSION_PARAMETERS_CREATE_INFO_KHR = 1000040004
VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_SESSION_PARAMETERS_ADD_INFO_KHR = 1000040005
VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_DPB_SLOT_INFO_KHR = 1000040006
VK_STRUCTURE_TYPE_TEXTURE_LOD_GATHER_FORMAT_PROPERTIES_AMD = 1000041000
VK_STRUCTURE_TYPE_RENDERING_FRAGMENT_SHADING_RATE_ATTACHMENT_INFO_KHR = 1000044006
VK_STRUCTURE_TYPE_RENDERING_FRAGMENT_DENSITY_MAP_ATTACHMENT_INFO_EXT = 1000044007
VK_STRUCTURE_TYPE_ATTACHMENT_SAMPLE_COUNT_INFO_AMD = 1000044008
VK_STRUCTURE_TYPE_MULTIVIEW_PER_VIEW_ATTRIBUTES_INFO_NVX = 1000044009
VK_STRUCTURE_TYPE_STREAM_DESCRIPTOR_SURFACE_CREATE_INFO_GGP = 1000049000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CORNER_SAMPLED_IMAGE_FEATURES_NV = 1000050000
VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_NV = 1000056000
VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_NV = 1000056001
VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_NV = 1000057000
VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_NV = 1000057001
VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_NV = 1000058000
VK_STRUCTURE_TYPE_VALIDATION_FLAGS_EXT = 1000061000
VK_STRUCTURE_TYPE_VI_SURFACE_CREATE_INFO_NN = 1000062000
VK_STRUCTURE_TYPE_IMAGE_VIEW_ASTC_DECODE_MODE_EXT = 1000067000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ASTC_DECODE_FEATURES_EXT = 1000067001
VK_STRUCTURE_TYPE_PIPELINE_ROBUSTNESS_CREATE_INFO_EXT = 1000068000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_ROBUSTNESS_FEATURES_EXT = 1000068001
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_ROBUSTNESS_PROPERTIES_EXT = 1000068002
VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_KHR = 1000073000
VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_KHR = 1000073001
VK_STRUCTURE_TYPE_MEMORY_WIN32_HANDLE_PROPERTIES_KHR = 1000073002
VK_STRUCTURE_TYPE_MEMORY_GET_WIN32_HANDLE_INFO_KHR = 1000073003
VK_STRUCTURE_TYPE_IMPORT_MEMORY_FD_INFO_KHR = 1000074000
VK_STRUCTURE_TYPE_MEMORY_FD_PROPERTIES_KHR = 1000074001
VK_STRUCTURE_TYPE_MEMORY_GET_FD_INFO_KHR = 1000074002
VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_KHR = 1000075000
VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR = 1000078000
VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR = 1000078001
VK_STRUCTURE_TYPE_D3D12_FENCE_SUBMIT_INFO_KHR = 1000078002
VK_STRUCTURE_TYPE_SEMAPHORE_GET_WIN32_HANDLE_INFO_KHR = 1000078003
VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_FD_INFO_KHR = 1000079000
VK_STRUCTURE_TYPE_SEMAPHORE_GET_FD_INFO_KHR = 1000079001
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PUSH_DESCRIPTOR_PROPERTIES_KHR = 1000080000
VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_CONDITIONAL_RENDERING_INFO_EXT = 1000081000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONDITIONAL_RENDERING_FEATURES_EXT = 1000081001
VK_STRUCTURE_TYPE_CONDITIONAL_RENDERING_BEGIN_INFO_EXT = 1000081002
VK_STRUCTURE_TYPE_PRESENT_REGIONS_KHR = 1000084000
VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_W_SCALING_STATE_CREATE_INFO_NV = 1000087000
VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_EXT = 1000090000
VK_STRUCTURE_TYPE_DISPLAY_POWER_INFO_EXT = 1000091000
VK_STRUCTURE_TYPE_DEVICE_EVENT_INFO_EXT = 1000091001
VK_STRUCTURE_TYPE_DISPLAY_EVENT_INFO_EXT = 1000091002
VK_STRUCTURE_TYPE_SWAPCHAIN_COUNTER_CREATE_INFO_EXT = 1000091003
VK_STRUCTURE_TYPE_PRESENT_TIMES_INFO_GOOGLE = 1000092000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_ATTRIBUTES_PROPERTIES_NVX = 1000097000
VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SWIZZLE_STATE_CREATE_INFO_NV = 1000098000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DISCARD_RECTANGLE_PROPERTIES_EXT = 1000099000
VK_STRUCTURE_TYPE_PIPELINE_DISCARD_RECTANGLE_STATE_CREATE_INFO_EXT = 1000099001
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONSERVATIVE_RASTERIZATION_PROPERTIES_EXT = 1000101000
VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_CONSERVATIVE_STATE_CREATE_INFO_EXT = 1000101001
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLIP_ENABLE_FEATURES_EXT = 1000102000
VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_DEPTH_CLIP_STATE_CREATE_INFO_EXT = 1000102001
VK_STRUCTURE_TYPE_HDR_METADATA_EXT = 1000105000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RELAXED_LINE_RASTERIZATION_FEATURES_IMG = 1000110000
VK_STRUCTURE_TYPE_SHARED_PRESENT_SURFACE_CAPABILITIES_KHR = 1000111000
VK_STRUCTURE_TYPE_IMPORT_FENCE_WIN32_HANDLE_INFO_KHR = 1000114000
VK_STRUCTURE_TYPE_EXPORT_FENCE_WIN32_HANDLE_INFO_KHR = 1000114001
VK_STRUCTURE_TYPE_FENCE_GET_WIN32_HANDLE_INFO_KHR = 1000114002
VK_STRUCTURE_TYPE_IMPORT_FENCE_FD_INFO_KHR = 1000115000
VK_STRUCTURE_TYPE_FENCE_GET_FD_INFO_KHR = 1000115001
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_FEATURES_KHR = 1000116000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_PROPERTIES_KHR = 1000116001
VK_STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_CREATE_INFO_KHR = 1000116002
VK_STRUCTURE_TYPE_PERFORMANCE_QUERY_SUBMIT_INFO_KHR = 1000116003
VK_STRUCTURE_TYPE_ACQUIRE_PROFILING_LOCK_INFO_KHR = 1000116004
VK_STRUCTURE_TYPE_PERFORMANCE_COUNTER_KHR = 1000116005
VK_STRUCTURE_TYPE_PERFORMANCE_COUNTER_DESCRIPTION_KHR = 1000116006
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SURFACE_INFO_2_KHR = 1000119000
VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_KHR = 1000119001
VK_STRUCTURE_TYPE_SURFACE_FORMAT_2_KHR = 1000119002
VK_STRUCTURE_TYPE_DISPLAY_PROPERTIES_2_KHR = 1000121000
VK_STRUCTURE_TYPE_DISPLAY_PLANE_PROPERTIES_2_KHR = 1000121001
VK_STRUCTURE_TYPE_DISPLAY_MODE_PROPERTIES_2_KHR = 1000121002
VK_STRUCTURE_TYPE_DISPLAY_PLANE_INFO_2_KHR = 1000121003
VK_STRUCTURE_TYPE_DISPLAY_PLANE_CAPABILITIES_2_KHR = 1000121004
VK_STRUCTURE_TYPE_IOS_SURFACE_CREATE_INFO_MVK = 1000122000
VK_STRUCTURE_TYPE_MACOS_SURFACE_CREATE_INFO_MVK = 1000123000
VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT = 1000128000
VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_TAG_INFO_EXT = 1000128001
VK_STRUCTURE_TYPE_DEBUG_UTILS_LABEL_EXT = 1000128002
VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CALLBACK_DATA_EXT = 1000128003
VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT = 1000128004
VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_USAGE_ANDROID = 1000129000
VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_PROPERTIES_ANDROID = 1000129001
VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_FORMAT_PROPERTIES_ANDROID = 1000129002
VK_STRUCTURE_TYPE_IMPORT_ANDROID_HARDWARE_BUFFER_INFO_ANDROID = 1000129003
VK_STRUCTURE_TYPE_MEMORY_GET_ANDROID_HARDWARE_BUFFER_INFO_ANDROID = 1000129004
VK_STRUCTURE_TYPE_EXTERNAL_FORMAT_ANDROID = 1000129005
VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_FORMAT_PROPERTIES_2_ANDROID = 1000129006
VK_STRUCTURE_TYPE_SAMPLE_LOCATIONS_INFO_EXT = 1000143000
VK_STRUCTURE_TYPE_RENDER_PASS_SAMPLE_LOCATIONS_BEGIN_INFO_EXT = 1000143001
VK_STRUCTURE_TYPE_PIPELINE_SAMPLE_LOCATIONS_STATE_CREATE_INFO_EXT = 1000143002
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLE_LOCATIONS_PROPERTIES_EXT = 1000143003
VK_STRUCTURE_TYPE_MULTISAMPLE_PROPERTIES_EXT = 1000143004
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_FEATURES_EXT = 1000148000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_PROPERTIES_EXT = 1000148001
VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_ADVANCED_STATE_CREATE_INFO_EXT = 1000148002
VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_TO_COLOR_STATE_CREATE_INFO_NV = 1000149000
VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_KHR = 1000150007
VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_GEOMETRY_INFO_KHR = 1000150000
VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_DEVICE_ADDRESS_INFO_KHR = 1000150002
VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_AABBS_DATA_KHR = 1000150003
VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_INSTANCES_DATA_KHR = 1000150004
VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_TRIANGLES_DATA_KHR = 1000150005
VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_KHR = 1000150006
VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_VERSION_INFO_KHR = 1000150009
VK_STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_INFO_KHR = 1000150010
VK_STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_TO_MEMORY_INFO_KHR = 1000150011
VK_STRUCTURE_TYPE_COPY_MEMORY_TO_ACCELERATION_STRUCTURE_INFO_KHR = 1000150012
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_FEATURES_KHR = 1000150013
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_PROPERTIES_KHR = 1000150014
VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_KHR = 1000150017
VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_SIZES_INFO_KHR = 1000150020
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PIPELINE_FEATURES_KHR = 1000347000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PIPELINE_PROPERTIES_KHR = 1000347001
VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_KHR = 1000150015
VK_STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_KHR = 1000150016
VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_INTERFACE_CREATE_INFO_KHR = 1000150018
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_QUERY_FEATURES_KHR = 1000348013
VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_MODULATION_STATE_CREATE_INFO_NV = 1000152000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_FEATURES_NV = 1000154000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_PROPERTIES_NV = 1000154001
VK_STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_LIST_EXT = 1000158000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_DRM_FORMAT_MODIFIER_INFO_EXT = 1000158002
VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_LIST_CREATE_INFO_EXT = 1000158003
VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_EXPLICIT_CREATE_INFO_EXT = 1000158004
VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_PROPERTIES_EXT = 1000158005
VK_STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_LIST_2_EXT = 1000158006
VK_STRUCTURE_TYPE_VALIDATION_CACHE_CREATE_INFO_EXT = 1000160000
VK_STRUCTURE_TYPE_SHADER_MODULE_VALIDATION_CACHE_CREATE_INFO_EXT = 1000160001
VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SHADING_RATE_IMAGE_STATE_CREATE_INFO_NV = 1000164000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_FEATURES_NV = 1000164001
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_PROPERTIES_NV = 1000164002
VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_COARSE_SAMPLE_ORDER_STATE_CREATE_INFO_NV = 1000164005
VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_NV = 1000165000
VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_NV = 1000165001
VK_STRUCTURE_TYPE_GEOMETRY_NV = 1000165003
VK_STRUCTURE_TYPE_GEOMETRY_TRIANGLES_NV = 1000165004
VK_STRUCTURE_TYPE_GEOMETRY_AABB_NV = 1000165005
VK_STRUCTURE_TYPE_BIND_ACCELERATION_STRUCTURE_MEMORY_INFO_NV = 1000165006
VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_NV = 1000165007
VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_INFO_NV = 1000165008
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PROPERTIES_NV = 1000165009
VK_STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_NV = 1000165011
VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_INFO_NV = 1000165012
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_REPRESENTATIVE_FRAGMENT_TEST_FEATURES_NV = 1000166000
VK_STRUCTURE_TYPE_PIPELINE_REPRESENTATIVE_FRAGMENT_TEST_STATE_CREATE_INFO_NV = 1000166001
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_VIEW_IMAGE_FORMAT_INFO_EXT = 1000170000
VK_STRUCTURE_TYPE_FILTER_CUBIC_IMAGE_VIEW_IMAGE_FORMAT_PROPERTIES_EXT = 1000170001
VK_STRUCTURE_TYPE_IMPORT_MEMORY_HOST_POINTER_INFO_EXT = 1000178000
VK_STRUCTURE_TYPE_MEMORY_HOST_POINTER_PROPERTIES_EXT = 1000178001
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_HOST_PROPERTIES_EXT = 1000178002
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CLOCK_FEATURES_KHR = 1000181000
VK_STRUCTURE_TYPE_PIPELINE_COMPILER_CONTROL_CREATE_INFO_AMD = 1000183000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_AMD = 1000185000
VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_CAPABILITIES_KHR = 1000187000
VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_SESSION_PARAMETERS_CREATE_INFO_KHR = 1000187001
VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_SESSION_PARAMETERS_ADD_INFO_KHR = 1000187002
VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_PROFILE_INFO_KHR = 1000187003
VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_PICTURE_INFO_KHR = 1000187004
VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_DPB_SLOT_INFO_KHR = 1000187005
VK_STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_KHR = 1000174000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GLOBAL_PRIORITY_QUERY_FEATURES_KHR = 1000388000
VK_STRUCTURE_TYPE_QUEUE_FAMILY_GLOBAL_PRIORITY_PROPERTIES_KHR = 1000388001
VK_STRUCTURE_TYPE_DEVICE_MEMORY_OVERALLOCATION_CREATE_INFO_AMD = 1000189000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_PROPERTIES_EXT = 1000190000
VK_STRUCTURE_TYPE_PRESENT_FRAME_TOKEN_GGP = 1000191000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COMPUTE_SHADER_DERIVATIVES_FEATURES_NV = 1000201000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_FEATURES_NV = 1000202000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_PROPERTIES_NV = 1000202001
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_FOOTPRINT_FEATURES_NV = 1000204000
VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_EXCLUSIVE_SCISSOR_STATE_CREATE_INFO_NV = 1000205000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXCLUSIVE_SCISSOR_FEATURES_NV = 1000205002
VK_STRUCTURE_TYPE_CHECKPOINT_DATA_NV = 1000206000
VK_STRUCTURE_TYPE_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_NV = 1000206001
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_FUNCTIONS_2_FEATURES_INTEL = 1000209000
VK_STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_QUERY_CREATE_INFO_INTEL = 1000210000
VK_STRUCTURE_TYPE_INITIALIZE_PERFORMANCE_API_INFO_INTEL = 1000210001
VK_STRUCTURE_TYPE_PERFORMANCE_MARKER_INFO_INTEL = 1000210002
VK_STRUCTURE_TYPE_PERFORMANCE_STREAM_MARKER_INFO_INTEL = 1000210003
VK_STRUCTURE_TYPE_PERFORMANCE_OVERRIDE_INFO_INTEL = 1000210004
VK_STRUCTURE_TYPE_PERFORMANCE_CONFIGURATION_ACQUIRE_INFO_INTEL = 1000210005
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PCI_BUS_INFO_PROPERTIES_EXT = 1000212000
VK_STRUCTURE_TYPE_DISPLAY_NATIVE_HDR_SURFACE_CAPABILITIES_AMD = 1000213000
VK_STRUCTURE_TYPE_SWAPCHAIN_DISPLAY_NATIVE_HDR_CREATE_INFO_AMD = 1000213001
VK_STRUCTURE_TYPE_IMAGEPIPE_SURFACE_CREATE_INFO_FUCHSIA = 1000214000
VK_STRUCTURE_TYPE_METAL_SURFACE_CREATE_INFO_EXT = 1000217000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_FEATURES_EXT = 1000218000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_PROPERTIES_EXT = 1000218001
VK_STRUCTURE_TYPE_RENDER_PASS_FRAGMENT_DENSITY_MAP_CREATE_INFO_EXT = 1000218002
VK_STRUCTURE_TYPE_FRAGMENT_SHADING_RATE_ATTACHMENT_INFO_KHR = 1000226000
VK_STRUCTURE_TYPE_PIPELINE_FRAGMENT_SHADING_RATE_STATE_CREATE_INFO_KHR = 1000226001
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_PROPERTIES_KHR = 1000226002
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_FEATURES_KHR = 1000226003
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_KHR = 1000226004
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_2_AMD = 1000227000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COHERENT_MEMORY_FEATURES_AMD = 1000229000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_ATOMIC_INT64_FEATURES_EXT = 1000234000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_BUDGET_PROPERTIES_EXT = 1000237000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PRIORITY_FEATURES_EXT = 1000238000
VK_STRUCTURE_TYPE_MEMORY_PRIORITY_ALLOCATE_INFO_EXT = 1000238001
VK_STRUCTURE_TYPE_SURFACE_PROTECTED_CAPABILITIES_KHR = 1000239000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEDICATED_ALLOCATION_IMAGE_ALIASING_FEATURES_NV = 1000240000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_EXT = 1000244000
VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_CREATE_INFO_EXT = 1000244002
VK_STRUCTURE_TYPE_VALIDATION_FEATURES_EXT = 1000247000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_WAIT_FEATURES_KHR = 1000248000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_FEATURES_NV = 1000249000
VK_STRUCTURE_TYPE_COOPERATIVE_MATRIX_PROPERTIES_NV = 1000249001
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_PROPERTIES_NV = 1000249002
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COVERAGE_REDUCTION_MODE_FEATURES_NV = 1000250000
VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_REDUCTION_STATE_CREATE_INFO_NV = 1000250001
VK_STRUCTURE_TYPE_FRAMEBUFFER_MIXED_SAMPLES_COMBINATION_NV = 1000250002
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_INTERLOCK_FEATURES_EXT = 1000251000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_IMAGE_ARRAYS_FEATURES_EXT = 1000252000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROVOKING_VERTEX_FEATURES_EXT = 1000254000
VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_PROVOKING_VERTEX_STATE_CREATE_INFO_EXT = 1000254001
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROVOKING_VERTEX_PROPERTIES_EXT = 1000254002
VK_STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_INFO_EXT = 1000255000
VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_FULL_SCREEN_EXCLUSIVE_EXT = 1000255002
VK_STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_WIN32_INFO_EXT = 1000255001
VK_STRUCTURE_TYPE_HEADLESS_SURFACE_CREATE_INFO_EXT = 1000256000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_FEATURES_EXT = 1000259000
VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_LINE_STATE_CREATE_INFO_EXT = 1000259001
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_PROPERTIES_EXT = 1000259002
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT_FEATURES_EXT = 1000260000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INDEX_TYPE_UINT8_FEATURES_EXT = 1000265000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_FEATURES_EXT = 1000267000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_EXECUTABLE_PROPERTIES_FEATURES_KHR = 1000269000
VK_STRUCTURE_TYPE_PIPELINE_INFO_KHR = 1000269001
VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_PROPERTIES_KHR = 1000269002
VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INFO_KHR = 1000269003
VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_STATISTIC_KHR = 1000269004
VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INTERNAL_REPRESENTATION_KHR = 1000269005
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_IMAGE_COPY_FEATURES_EXT = 1000270000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_IMAGE_COPY_PROPERTIES_EXT = 1000270001
VK_STRUCTURE_TYPE_MEMORY_TO_IMAGE_COPY_EXT = 1000270002
VK_STRUCTURE_TYPE_IMAGE_TO_MEMORY_COPY_EXT = 1000270003
VK_STRUCTURE_TYPE_COPY_IMAGE_TO_MEMORY_INFO_EXT = 1000270004
VK_STRUCTURE_TYPE_COPY_MEMORY_TO_IMAGE_INFO_EXT = 1000270005
VK_STRUCTURE_TYPE_HOST_IMAGE_LAYOUT_TRANSITION_INFO_EXT = 1000270006
VK_STRUCTURE_TYPE_COPY_IMAGE_TO_IMAGE_INFO_EXT = 1000270007
VK_STRUCTURE_TYPE_SUBRESOURCE_HOST_MEMCPY_SIZE_EXT = 1000270008
VK_STRUCTURE_TYPE_HOST_IMAGE_COPY_DEVICE_PERFORMANCE_QUERY_EXT = 1000270009
VK_STRUCTURE_TYPE_MEMORY_MAP_INFO_KHR = 1000271000
VK_STRUCTURE_TYPE_MEMORY_UNMAP_INFO_KHR = 1000271001
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT_2_FEATURES_EXT = 1000273000
VK_STRUCTURE_TYPE_SURFACE_PRESENT_MODE_EXT = 1000274000
VK_STRUCTURE_TYPE_SURFACE_PRESENT_SCALING_CAPABILITIES_EXT = 1000274001
VK_STRUCTURE_TYPE_SURFACE_PRESENT_MODE_COMPATIBILITY_EXT = 1000274002
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SWAPCHAIN_MAINTENANCE_1_FEATURES_EXT = 1000275000
VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_FENCE_INFO_EXT = 1000275001
VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_MODES_CREATE_INFO_EXT = 1000275002
VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_MODE_INFO_EXT = 1000275003
VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_SCALING_CREATE_INFO_EXT = 1000275004
VK_STRUCTURE_TYPE_RELEASE_SWAPCHAIN_IMAGES_INFO_EXT = 1000275005
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_PROPERTIES_NV = 1000277000
VK_STRUCTURE_TYPE_GRAPHICS_SHADER_GROUP_CREATE_INFO_NV = 1000277001
VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_SHADER_GROUPS_CREATE_INFO_NV = 1000277002
VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_TOKEN_NV = 1000277003
VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_CREATE_INFO_NV = 1000277004
VK_STRUCTURE_TYPE_GENERATED_COMMANDS_INFO_NV = 1000277005
VK_STRUCTURE_TYPE_GENERATED_COMMANDS_MEMORY_REQUIREMENTS_INFO_NV = 1000277006
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_FEATURES_NV = 1000277007
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INHERITED_VIEWPORT_SCISSOR_FEATURES_NV = 1000278000
VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_VIEWPORT_SCISSOR_INFO_NV = 1000278001
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_FEATURES_EXT = 1000281000
VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDER_PASS_TRANSFORM_INFO_QCOM = 1000282000
VK_STRUCTURE_TYPE_RENDER_PASS_TRANSFORM_BEGIN_INFO_QCOM = 1000282001
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_BIAS_CONTROL_FEATURES_EXT = 1000283000
VK_STRUCTURE_TYPE_DEPTH_BIAS_INFO_EXT = 1000283001
VK_STRUCTURE_TYPE_DEPTH_BIAS_REPRESENTATION_INFO_EXT = 1000283002
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_MEMORY_REPORT_FEATURES_EXT = 1000284000
VK_STRUCTURE_TYPE_DEVICE_DEVICE_MEMORY_REPORT_CREATE_INFO_EXT = 1000284001
VK_STRUCTURE_TYPE_DEVICE_MEMORY_REPORT_CALLBACK_DATA_EXT = 1000284002
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_FEATURES_EXT = 1000286000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_PROPERTIES_EXT = 1000286001
VK_STRUCTURE_TYPE_SAMPLER_CUSTOM_BORDER_COLOR_CREATE_INFO_EXT = 1000287000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_PROPERTIES_EXT = 1000287001
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_FEATURES_EXT = 1000287002
VK_STRUCTURE_TYPE_PIPELINE_LIBRARY_CREATE_INFO_KHR = 1000290000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_BARRIER_FEATURES_NV = 1000292000
VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_PRESENT_BARRIER_NV = 1000292001
VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_BARRIER_CREATE_INFO_NV = 1000292002
VK_STRUCTURE_TYPE_PRESENT_ID_KHR = 1000294000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_ID_FEATURES_KHR = 1000294001
VK_STRUCTURE_TYPE_VIDEO_ENCODE_INFO_KHR = 1000299000
VK_STRUCTURE_TYPE_VIDEO_ENCODE_RATE_CONTROL_INFO_KHR = 1000299001
VK_STRUCTURE_TYPE_VIDEO_ENCODE_RATE_CONTROL_LAYER_INFO_KHR = 1000299002
VK_STRUCTURE_TYPE_VIDEO_ENCODE_CAPABILITIES_KHR = 1000299003
VK_STRUCTURE_TYPE_VIDEO_ENCODE_USAGE_INFO_KHR = 1000299004
VK_STRUCTURE_TYPE_QUERY_POOL_VIDEO_ENCODE_FEEDBACK_CREATE_INFO_KHR = 1000299005
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VIDEO_ENCODE_QUALITY_LEVEL_INFO_KHR = 1000299006
VK_STRUCTURE_TYPE_VIDEO_ENCODE_QUALITY_LEVEL_PROPERTIES_KHR = 1000299007
VK_STRUCTURE_TYPE_VIDEO_ENCODE_QUALITY_LEVEL_INFO_KHR = 1000299008
VK_STRUCTURE_TYPE_VIDEO_ENCODE_SESSION_PARAMETERS_GET_INFO_KHR = 1000299009
VK_STRUCTURE_TYPE_VIDEO_ENCODE_SESSION_PARAMETERS_FEEDBACK_INFO_KHR = 1000299010
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DIAGNOSTICS_CONFIG_FEATURES_NV = 1000300000
VK_STRUCTURE_TYPE_DEVICE_DIAGNOSTICS_CONFIG_CREATE_INFO_NV = 1000300001
VK_STRUCTURE_TYPE_CUDA_MODULE_CREATE_INFO_NV = 1000307000
VK_STRUCTURE_TYPE_CUDA_FUNCTION_CREATE_INFO_NV = 1000307001
VK_STRUCTURE_TYPE_CUDA_LAUNCH_INFO_NV = 1000307002
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUDA_KERNEL_LAUNCH_FEATURES_NV = 1000307003
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUDA_KERNEL_LAUNCH_PROPERTIES_NV = 1000307004
VK_STRUCTURE_TYPE_QUERY_LOW_LATENCY_SUPPORT_NV = 1000310000
VK_STRUCTURE_TYPE_EXPORT_METAL_OBJECT_CREATE_INFO_EXT = 1000311000
VK_STRUCTURE_TYPE_EXPORT_METAL_OBJECTS_INFO_EXT = 1000311001
VK_STRUCTURE_TYPE_EXPORT_METAL_DEVICE_INFO_EXT = 1000311002
VK_STRUCTURE_TYPE_EXPORT_METAL_COMMAND_QUEUE_INFO_EXT = 1000311003
VK_STRUCTURE_TYPE_EXPORT_METAL_BUFFER_INFO_EXT = 1000311004
VK_STRUCTURE_TYPE_IMPORT_METAL_BUFFER_INFO_EXT = 1000311005
VK_STRUCTURE_TYPE_EXPORT_METAL_TEXTURE_INFO_EXT = 1000311006
VK_STRUCTURE_TYPE_IMPORT_METAL_TEXTURE_INFO_EXT = 1000311007
VK_STRUCTURE_TYPE_EXPORT_METAL_IO_SURFACE_INFO_EXT = 1000311008
VK_STRUCTURE_TYPE_IMPORT_METAL_IO_SURFACE_INFO_EXT = 1000311009
VK_STRUCTURE_TYPE_EXPORT_METAL_SHARED_EVENT_INFO_EXT = 1000311010
VK_STRUCTURE_TYPE_IMPORT_METAL_SHARED_EVENT_INFO_EXT = 1000311011
VK_STRUCTURE_TYPE_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_2_NV = 1000314008
VK_STRUCTURE_TYPE_CHECKPOINT_DATA_2_NV = 1000314009
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_BUFFER_PROPERTIES_EXT = 1000316000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_BUFFER_DENSITY_MAP_PROPERTIES_EXT = 1000316001
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_BUFFER_FEATURES_EXT = 1000316002
VK_STRUCTURE_TYPE_DESCRIPTOR_ADDRESS_INFO_EXT = 1000316003
VK_STRUCTURE_TYPE_DESCRIPTOR_GET_INFO_EXT = 1000316004
VK_STRUCTURE_TYPE_BUFFER_CAPTURE_DESCRIPTOR_DATA_INFO_EXT = 1000316005
VK_STRUCTURE_TYPE_IMAGE_CAPTURE_DESCRIPTOR_DATA_INFO_EXT = 1000316006
VK_STRUCTURE_TYPE_IMAGE_VIEW_CAPTURE_DESCRIPTOR_DATA_INFO_EXT = 1000316007
VK_STRUCTURE_TYPE_SAMPLER_CAPTURE_DESCRIPTOR_DATA_INFO_EXT = 1000316008
VK_STRUCTURE_TYPE_OPAQUE_CAPTURE_DESCRIPTOR_DATA_CREATE_INFO_EXT = 1000316010
VK_STRUCTURE_TYPE_DESCRIPTOR_BUFFER_BINDING_INFO_EXT = 1000316011
VK_STRUCTURE_TYPE_DESCRIPTOR_BUFFER_BINDING_PUSH_DESCRIPTOR_BUFFER_HANDLE_EXT = 1000316012
VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CAPTURE_DESCRIPTOR_DATA_INFO_EXT = 1000316009
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GRAPHICS_PIPELINE_LIBRARY_FEATURES_EXT = 1000320000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GRAPHICS_PIPELINE_LIBRARY_PROPERTIES_EXT = 1000320001
VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_LIBRARY_CREATE_INFO_EXT = 1000320002
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_EARLY_AND_LATE_FRAGMENT_TESTS_FEATURES_AMD = 1000321000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_FEATURES_KHR = 1000203000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_PROPERTIES_KHR = 1000322000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_UNIFORM_CONTROL_FLOW_FEATURES_KHR = 1000323000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_ENUMS_PROPERTIES_NV = 1000326000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_ENUMS_FEATURES_NV = 1000326001
VK_STRUCTURE_TYPE_PIPELINE_FRAGMENT_SHADING_RATE_ENUM_STATE_CREATE_INFO_NV = 1000326002
VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_MOTION_TRIANGLES_DATA_NV = 1000327000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_MOTION_BLUR_FEATURES_NV = 1000327001
VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MOTION_INFO_NV = 1000327002
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_FEATURES_EXT = 1000328000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_PROPERTIES_EXT = 1000328001
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_2_PLANE_444_FORMATS_FEATURES_EXT = 1000330000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_FEATURES_EXT = 1000332000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_PROPERTIES_EXT = 1000332001
VK_STRUCTURE_TYPE_COPY_COMMAND_TRANSFORM_INFO_QCOM = 1000333000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_WORKGROUP_MEMORY_EXPLICIT_LAYOUT_FEATURES_KHR = 1000336000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_COMPRESSION_CONTROL_FEATURES_EXT = 1000338000
VK_STRUCTURE_TYPE_IMAGE_COMPRESSION_CONTROL_EXT = 1000338001
VK_STRUCTURE_TYPE_IMAGE_COMPRESSION_PROPERTIES_EXT = 1000338004
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ATTACHMENT_FEEDBACK_LOOP_LAYOUT_FEATURES_EXT = 1000339000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_4444_FORMATS_FEATURES_EXT = 1000340000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FAULT_FEATURES_EXT = 1000341000
VK_STRUCTURE_TYPE_DEVICE_FAULT_COUNTS_EXT = 1000341001
VK_STRUCTURE_TYPE_DEVICE_FAULT_INFO_EXT = 1000341002
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RGBA10X6_FORMATS_FEATURES_EXT = 1000344000
VK_STRUCTURE_TYPE_DIRECTFB_SURFACE_CREATE_INFO_EXT = 1000346000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_INPUT_DYNAMIC_STATE_FEATURES_EXT = 1000352000
VK_STRUCTURE_TYPE_VERTEX_INPUT_BINDING_DESCRIPTION_2_EXT = 1000352001
VK_STRUCTURE_TYPE_VERTEX_INPUT_ATTRIBUTE_DESCRIPTION_2_EXT = 1000352002
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRM_PROPERTIES_EXT = 1000353000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ADDRESS_BINDING_REPORT_FEATURES_EXT = 1000354000
VK_STRUCTURE_TYPE_DEVICE_ADDRESS_BINDING_CALLBACK_DATA_EXT = 1000354001
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLIP_CONTROL_FEATURES_EXT = 1000355000
VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_DEPTH_CLIP_CONTROL_CREATE_INFO_EXT = 1000355001
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIMITIVE_TOPOLOGY_LIST_RESTART_FEATURES_EXT = 1000356000
VK_STRUCTURE_TYPE_IMPORT_MEMORY_ZIRCON_HANDLE_INFO_FUCHSIA = 1000364000
VK_STRUCTURE_TYPE_MEMORY_ZIRCON_HANDLE_PROPERTIES_FUCHSIA = 1000364001
VK_STRUCTURE_TYPE_MEMORY_GET_ZIRCON_HANDLE_INFO_FUCHSIA = 1000364002
VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_ZIRCON_HANDLE_INFO_FUCHSIA = 1000365000
VK_STRUCTURE_TYPE_SEMAPHORE_GET_ZIRCON_HANDLE_INFO_FUCHSIA = 1000365001
VK_STRUCTURE_TYPE_BUFFER_COLLECTION_CREATE_INFO_FUCHSIA = 1000366000
VK_STRUCTURE_TYPE_IMPORT_MEMORY_BUFFER_COLLECTION_FUCHSIA = 1000366001
VK_STRUCTURE_TYPE_BUFFER_COLLECTION_IMAGE_CREATE_INFO_FUCHSIA = 1000366002
VK_STRUCTURE_TYPE_BUFFER_COLLECTION_PROPERTIES_FUCHSIA = 1000366003
VK_STRUCTURE_TYPE_BUFFER_CONSTRAINTS_INFO_FUCHSIA = 1000366004
VK_STRUCTURE_TYPE_BUFFER_COLLECTION_BUFFER_CREATE_INFO_FUCHSIA = 1000366005
VK_STRUCTURE_TYPE_IMAGE_CONSTRAINTS_INFO_FUCHSIA = 1000366006
VK_STRUCTURE_TYPE_IMAGE_FORMAT_CONSTRAINTS_INFO_FUCHSIA = 1000366007
VK_STRUCTURE_TYPE_SYSMEM_COLOR_SPACE_FUCHSIA = 1000366008
VK_STRUCTURE_TYPE_BUFFER_COLLECTION_CONSTRAINTS_INFO_FUCHSIA = 1000366009
VK_STRUCTURE_TYPE_SUBPASS_SHADING_PIPELINE_CREATE_INFO_HUAWEI = 1000369000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBPASS_SHADING_FEATURES_HUAWEI = 1000369001
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBPASS_SHADING_PROPERTIES_HUAWEI = 1000369002
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INVOCATION_MASK_FEATURES_HUAWEI = 1000370000
VK_STRUCTURE_TYPE_MEMORY_GET_REMOTE_ADDRESS_INFO_NV = 1000371000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_RDMA_FEATURES_NV = 1000371001
VK_STRUCTURE_TYPE_PIPELINE_PROPERTIES_IDENTIFIER_EXT = 1000372000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_PROPERTIES_FEATURES_EXT = 1000372001
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAME_BOUNDARY_FEATURES_EXT = 1000375000
VK_STRUCTURE_TYPE_FRAME_BOUNDARY_EXT = 1000375001
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_FEATURES_EXT = 1000376000
VK_STRUCTURE_TYPE_SUBPASS_RESOLVE_PERFORMANCE_QUERY_EXT = 1000376001
VK_STRUCTURE_TYPE_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_INFO_EXT = 1000376002
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_2_FEATURES_EXT = 1000377000
VK_STRUCTURE_TYPE_SCREEN_SURFACE_CREATE_INFO_QNX = 1000378000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COLOR_WRITE_ENABLE_FEATURES_EXT = 1000381000
VK_STRUCTURE_TYPE_PIPELINE_COLOR_WRITE_CREATE_INFO_EXT = 1000381001
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIMITIVES_GENERATED_QUERY_FEATURES_EXT = 1000382000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_MAINTENANCE_1_FEATURES_KHR = 1000386000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_VIEW_MIN_LOD_FEATURES_EXT = 1000391000
VK_STRUCTURE_TYPE_IMAGE_VIEW_MIN_LOD_CREATE_INFO_EXT = 1000391001
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTI_DRAW_FEATURES_EXT = 1000392000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTI_DRAW_PROPERTIES_EXT = 1000392001
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_2D_VIEW_OF_3D_FEATURES_EXT = 1000393000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TILE_IMAGE_FEATURES_EXT = 1000395000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TILE_IMAGE_PROPERTIES_EXT = 1000395001
VK_STRUCTURE_TYPE_MICROMAP_BUILD_INFO_EXT = 1000396000
VK_STRUCTURE_TYPE_MICROMAP_VERSION_INFO_EXT = 1000396001
VK_STRUCTURE_TYPE_COPY_MICROMAP_INFO_EXT = 1000396002
VK_STRUCTURE_TYPE_COPY_MICROMAP_TO_MEMORY_INFO_EXT = 1000396003
VK_STRUCTURE_TYPE_COPY_MEMORY_TO_MICROMAP_INFO_EXT = 1000396004
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_OPACITY_MICROMAP_FEATURES_EXT = 1000396005
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_OPACITY_MICROMAP_PROPERTIES_EXT = 1000396006
VK_STRUCTURE_TYPE_MICROMAP_CREATE_INFO_EXT = 1000396007
VK_STRUCTURE_TYPE_MICROMAP_BUILD_SIZES_INFO_EXT = 1000396008
VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_TRIANGLES_OPACITY_MICROMAP_EXT = 1000396009
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CLUSTER_CULLING_SHADER_FEATURES_HUAWEI = 1000404000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CLUSTER_CULLING_SHADER_PROPERTIES_HUAWEI = 1000404001
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CLUSTER_CULLING_SHADER_VRS_FEATURES_HUAWEI = 1000404002
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BORDER_COLOR_SWIZZLE_FEATURES_EXT = 1000411000
VK_STRUCTURE_TYPE_SAMPLER_BORDER_COLOR_COMPONENT_MAPPING_CREATE_INFO_EXT = 1000411001
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PAGEABLE_DEVICE_LOCAL_MEMORY_FEATURES_EXT = 1000412000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_ARM = 1000415000
VK_STRUCTURE_TYPE_DEVICE_QUEUE_SHADER_CORE_CONTROL_CREATE_INFO_ARM = 1000417000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCHEDULING_CONTROLS_FEATURES_ARM = 1000417001
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCHEDULING_CONTROLS_PROPERTIES_ARM = 1000417002
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_SLICED_VIEW_OF_3D_FEATURES_EXT = 1000418000
VK_STRUCTURE_TYPE_IMAGE_VIEW_SLICED_CREATE_INFO_EXT = 1000418001
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_SET_HOST_MAPPING_FEATURES_VALVE = 1000420000
VK_STRUCTURE_TYPE_DESCRIPTOR_SET_BINDING_REFERENCE_VALVE = 1000420001
VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_HOST_MAPPING_INFO_VALVE = 1000420002
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLAMP_ZERO_ONE_FEATURES_EXT = 1000421000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_NON_SEAMLESS_CUBE_MAP_FEATURES_EXT = 1000422000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RENDER_PASS_STRIPED_FEATURES_ARM = 1000424000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RENDER_PASS_STRIPED_PROPERTIES_ARM = 1000424001
VK_STRUCTURE_TYPE_RENDER_PASS_STRIPE_BEGIN_INFO_ARM = 1000424002
VK_STRUCTURE_TYPE_RENDER_PASS_STRIPE_INFO_ARM = 1000424003
VK_STRUCTURE_TYPE_RENDER_PASS_STRIPE_SUBMIT_INFO_ARM = 1000424004
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_OFFSET_FEATURES_QCOM = 1000425000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_OFFSET_PROPERTIES_QCOM = 1000425001
VK_STRUCTURE_TYPE_SUBPASS_FRAGMENT_DENSITY_MAP_OFFSET_END_INFO_QCOM = 1000425002
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COPY_MEMORY_INDIRECT_FEATURES_NV = 1000426000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COPY_MEMORY_INDIRECT_PROPERTIES_NV = 1000426001
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_DECOMPRESSION_FEATURES_NV = 1000427000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_DECOMPRESSION_PROPERTIES_NV = 1000427001
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_COMPUTE_FEATURES_NV = 1000428000
VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_INDIRECT_BUFFER_INFO_NV = 1000428001
VK_STRUCTURE_TYPE_PIPELINE_INDIRECT_DEVICE_ADDRESS_INFO_NV = 1000428002
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINEAR_COLOR_ATTACHMENT_FEATURES_NV = 1000430000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_COMPRESSION_CONTROL_SWAPCHAIN_FEATURES_EXT = 1000437000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_PROCESSING_FEATURES_QCOM = 1000440000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_PROCESSING_PROPERTIES_QCOM = 1000440001
VK_STRUCTURE_TYPE_IMAGE_VIEW_SAMPLE_WEIGHT_CREATE_INFO_QCOM = 1000440002
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_NESTED_COMMAND_BUFFER_FEATURES_EXT = 1000451000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_NESTED_COMMAND_BUFFER_PROPERTIES_EXT = 1000451001
VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_ACQUIRE_UNMODIFIED_EXT = 1000453000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_3_FEATURES_EXT = 1000455000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_3_PROPERTIES_EXT = 1000455001
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBPASS_MERGE_FEEDBACK_FEATURES_EXT = 1000458000
VK_STRUCTURE_TYPE_RENDER_PASS_CREATION_CONTROL_EXT = 1000458001
VK_STRUCTURE_TYPE_RENDER_PASS_CREATION_FEEDBACK_CREATE_INFO_EXT = 1000458002
VK_STRUCTURE_TYPE_RENDER_PASS_SUBPASS_FEEDBACK_CREATE_INFO_EXT = 1000458003
VK_STRUCTURE_TYPE_DIRECT_DRIVER_LOADING_INFO_LUNARG = 1000459000
VK_STRUCTURE_TYPE_DIRECT_DRIVER_LOADING_LIST_LUNARG = 1000459001
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_MODULE_IDENTIFIER_FEATURES_EXT = 1000462000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_MODULE_IDENTIFIER_PROPERTIES_EXT = 1000462001
VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_MODULE_IDENTIFIER_CREATE_INFO_EXT = 1000462002
VK_STRUCTURE_TYPE_SHADER_MODULE_IDENTIFIER_EXT = 1000462003
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_FEATURES_EXT = 1000342000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_OPTICAL_FLOW_FEATURES_NV = 1000464000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_OPTICAL_FLOW_PROPERTIES_NV = 1000464001
VK_STRUCTURE_TYPE_OPTICAL_FLOW_IMAGE_FORMAT_INFO_NV = 1000464002
VK_STRUCTURE_TYPE_OPTICAL_FLOW_IMAGE_FORMAT_PROPERTIES_NV = 1000464003
VK_STRUCTURE_TYPE_OPTICAL_FLOW_SESSION_CREATE_INFO_NV = 1000464004
VK_STRUCTURE_TYPE_OPTICAL_FLOW_EXECUTE_INFO_NV = 1000464005
VK_STRUCTURE_TYPE_OPTICAL_FLOW_SESSION_CREATE_PRIVATE_DATA_INFO_NV = 1000464010
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LEGACY_DITHERING_FEATURES_EXT = 1000465000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_PROTECTED_ACCESS_FEATURES_EXT = 1000466000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FORMAT_RESOLVE_FEATURES_ANDROID = 1000468000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FORMAT_RESOLVE_PROPERTIES_ANDROID = 1000468001
VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_FORMAT_RESOLVE_PROPERTIES_ANDROID = 1000468002
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_5_FEATURES_KHR = 1000470000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_5_PROPERTIES_KHR = 1000470001
VK_STRUCTURE_TYPE_RENDERING_AREA_INFO_KHR = 1000470003
VK_STRUCTURE_TYPE_DEVICE_IMAGE_SUBRESOURCE_INFO_KHR = 1000470004
VK_STRUCTURE_TYPE_SUBRESOURCE_LAYOUT_2_KHR = 1000338002
VK_STRUCTURE_TYPE_IMAGE_SUBRESOURCE_2_KHR = 1000338003
VK_STRUCTURE_TYPE_PIPELINE_CREATE_FLAGS_2_CREATE_INFO_KHR = 1000470005
VK_STRUCTURE_TYPE_BUFFER_USAGE_FLAGS_2_CREATE_INFO_KHR = 1000470006
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_POSITION_FETCH_FEATURES_KHR = 1000481000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_OBJECT_FEATURES_EXT = 1000482000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_OBJECT_PROPERTIES_EXT = 1000482001
VK_STRUCTURE_TYPE_SHADER_CREATE_INFO_EXT = 1000482002
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TILE_PROPERTIES_FEATURES_QCOM = 1000484000
VK_STRUCTURE_TYPE_TILE_PROPERTIES_QCOM = 1000484001
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_AMIGO_PROFILING_FEATURES_SEC = 1000485000
VK_STRUCTURE_TYPE_AMIGO_PROFILING_SUBMIT_INFO_SEC = 1000485001
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_VIEWPORTS_FEATURES_QCOM = 1000488000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_INVOCATION_REORDER_FEATURES_NV = 1000490000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_INVOCATION_REORDER_PROPERTIES_NV = 1000490001
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_SPARSE_ADDRESS_SPACE_FEATURES_NV = 1000492000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_SPARSE_ADDRESS_SPACE_PROPERTIES_NV = 1000492001
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MUTABLE_DESCRIPTOR_TYPE_FEATURES_EXT = 1000351000
VK_STRUCTURE_TYPE_MUTABLE_DESCRIPTOR_TYPE_CREATE_INFO_EXT = 1000351002
VK_STRUCTURE_TYPE_LAYER_SETTINGS_CREATE_INFO_EXT = 1000496000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_BUILTINS_FEATURES_ARM = 1000497000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_BUILTINS_PROPERTIES_ARM = 1000497001
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_LIBRARY_GROUP_HANDLES_FEATURES_EXT = 1000498000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DYNAMIC_RENDERING_UNUSED_ATTACHMENTS_FEATURES_EXT = 1000499000
VK_STRUCTURE_TYPE_LATENCY_SLEEP_MODE_INFO_NV = 1000505000
VK_STRUCTURE_TYPE_LATENCY_SLEEP_INFO_NV = 1000505001
VK_STRUCTURE_TYPE_SET_LATENCY_MARKER_INFO_NV = 1000505002
VK_STRUCTURE_TYPE_GET_LATENCY_MARKER_INFO_NV = 1000505003
VK_STRUCTURE_TYPE_LATENCY_TIMINGS_FRAME_REPORT_NV = 1000505004
VK_STRUCTURE_TYPE_LATENCY_SUBMISSION_PRESENT_ID_NV = 1000505005
VK_STRUCTURE_TYPE_OUT_OF_BAND_QUEUE_TYPE_INFO_NV = 1000505006
VK_STRUCTURE_TYPE_SWAPCHAIN_LATENCY_CREATE_INFO_NV = 1000505007
VK_STRUCTURE_TYPE_LATENCY_SURFACE_CAPABILITIES_NV = 1000505008
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_FEATURES_KHR = 1000506000
VK_STRUCTURE_TYPE_COOPERATIVE_MATRIX_PROPERTIES_KHR = 1000506001
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_PROPERTIES_KHR = 1000506002
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_RENDER_AREAS_FEATURES_QCOM = 1000510000
VK_STRUCTURE_TYPE_MULTIVIEW_PER_VIEW_RENDER_AREAS_RENDER_PASS_BEGIN_INFO_QCOM = 1000510001
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VIDEO_MAINTENANCE_1_FEATURES_KHR = 1000515000
VK_STRUCTURE_TYPE_VIDEO_INLINE_QUERY_INFO_KHR = 1000515001
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PER_STAGE_DESCRIPTOR_SET_FEATURES_NV = 1000516000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_PROCESSING_2_FEATURES_QCOM = 1000518000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_PROCESSING_2_PROPERTIES_QCOM = 1000518001
VK_STRUCTURE_TYPE_SAMPLER_BLOCK_MATCH_WINDOW_CREATE_INFO_QCOM = 1000518002
VK_STRUCTURE_TYPE_SAMPLER_CUBIC_WEIGHTS_CREATE_INFO_QCOM = 1000519000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUBIC_WEIGHTS_FEATURES_QCOM = 1000519001
VK_STRUCTURE_TYPE_BLIT_IMAGE_CUBIC_WEIGHTS_INFO_QCOM = 1000519002
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_DEGAMMA_FEATURES_QCOM = 1000520000
VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_YCBCR_DEGAMMA_CREATE_INFO_QCOM = 1000520001
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUBIC_CLAMP_FEATURES_QCOM = 1000521000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ATTACHMENT_FEEDBACK_LOOP_DYNAMIC_STATE_FEATURES_EXT = 1000524000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_PROPERTIES_KHR = 1000525000
VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_DIVISOR_STATE_CREATE_INFO_KHR = 1000190001
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_FEATURES_KHR = 1000190002
VK_STRUCTURE_TYPE_SCREEN_BUFFER_PROPERTIES_QNX = 1000529000
VK_STRUCTURE_TYPE_SCREEN_BUFFER_FORMAT_PROPERTIES_QNX = 1000529001
VK_STRUCTURE_TYPE_IMPORT_SCREEN_BUFFER_INFO_QNX = 1000529002
VK_STRUCTURE_TYPE_EXTERNAL_FORMAT_QNX = 1000529003
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_SCREEN_BUFFER_FEATURES_QNX = 1000529004
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LAYERED_DRIVER_PROPERTIES_MSFT = 1000530000
VK_STRUCTURE_TYPE_CALIBRATED_TIMESTAMP_INFO_KHR = 1000184000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_6_FEATURES_KHR = 1000545000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_6_PROPERTIES_KHR = 1000545001
VK_STRUCTURE_TYPE_BIND_MEMORY_STATUS_KHR = 1000545002
VK_STRUCTURE_TYPE_BIND_DESCRIPTOR_SETS_INFO_KHR = 1000545003
VK_STRUCTURE_TYPE_PUSH_CONSTANTS_INFO_KHR = 1000545004
VK_STRUCTURE_TYPE_PUSH_DESCRIPTOR_SET_INFO_KHR = 1000545005
VK_STRUCTURE_TYPE_PUSH_DESCRIPTOR_SET_WITH_TEMPLATE_INFO_KHR = 1000545006
VK_STRUCTURE_TYPE_SET_DESCRIPTOR_BUFFER_OFFSETS_INFO_EXT = 1000545007
VK_STRUCTURE_TYPE_BIND_DESCRIPTOR_BUFFER_EMBEDDED_SAMPLERS_INFO_EXT = 1000545008
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_POOL_OVERALLOCATION_FEATURES_NV = 1000546000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTER_FEATURES = 1000120000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETER_FEATURES = 1000063000
VK_STRUCTURE_TYPE_DEBUG_REPORT_CREATE_INFO_EXT = 1000011000
VK_STRUCTURE_TYPE_RENDERING_INFO_KHR = 1000044000
VK_STRUCTURE_TYPE_RENDERING_ATTACHMENT_INFO_KHR = 1000044001
VK_STRUCTURE_TYPE_PIPELINE_RENDERING_CREATE_INFO_KHR = 1000044002
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DYNAMIC_RENDERING_FEATURES_KHR = 1000044003
VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDERING_INFO_KHR = 1000044004
VK_STRUCTURE_TYPE_ATTACHMENT_SAMPLE_COUNT_INFO_NV = 1000044008
VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO_KHR = 1000053000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES_KHR = 1000053001
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES_KHR = 1000053002
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2_KHR = 1000059000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2_KHR = 1000059001
VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2_KHR = 1000059002
VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2_KHR = 1000059003
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2_KHR = 1000059004
VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2_KHR = 1000059005
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2_KHR = 1000059006
VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2_KHR = 1000059007
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2_KHR = 1000059008
VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO_KHR = 1000060000
VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO_KHR = 1000060003
VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO_KHR = 1000060004
VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO_KHR = 1000060005
VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO_KHR = 1000060006
VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO_KHR = 1000060013
VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO_KHR = 1000060014
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXTURE_COMPRESSION_ASTC_HDR_FEATURES_EXT = 1000066000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES_KHR = 1000070000
VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO_KHR = 1000070001
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO_KHR = 1000071000
VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES_KHR = 1000071001
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO_KHR = 1000071002
VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES_KHR = 1000071003
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES_KHR = 1000071004
VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO_KHR = 1000072000
VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_KHR = 1000072001
VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_KHR = 1000072002
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO_KHR = 1000076000
VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES_KHR = 1000076001
VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO_KHR = 1000077000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES_KHR = 1000082000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT16_INT8_FEATURES_KHR = 1000082000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES_KHR = 1000083000
VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO_KHR = 1000085000
VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES2_EXT = 1000090000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES_KHR = 1000108000
VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO_KHR = 1000108001
VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO_KHR = 1000108002
VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO_KHR = 1000108003
VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2_KHR = 1000109000
VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2_KHR = 1000109001
VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2_KHR = 1000109002
VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2_KHR = 1000109003
VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2_KHR = 1000109004
VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO_KHR = 1000109005
VK_STRUCTURE_TYPE_SUBPASS_END_INFO_KHR = 1000109006
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO_KHR = 1000112000
VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES_KHR = 1000112001
VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO_KHR = 1000113000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES_KHR = 1000117000
VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO_KHR = 1000117001
VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO_KHR = 1000117002
VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO_KHR = 1000117003
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES_KHR = 1000120000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTER_FEATURES_KHR = 1000120000
VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS_KHR = 1000127000
VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO_KHR = 1000127001
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES_EXT = 1000130000
VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO_EXT = 1000130001
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES_EXT = 1000138000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES_EXT = 1000138001
VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_INLINE_UNIFORM_BLOCK_EXT = 1000138002
VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_INLINE_UNIFORM_BLOCK_CREATE_INFO_EXT = 1000138003
VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2_KHR = 1000146000
VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2_KHR = 1000146001
VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2_KHR = 1000146002
VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2_KHR = 1000146003
VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2_KHR = 1000146004
VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO_KHR = 1000147000
VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO_KHR = 1000156000
VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO_KHR = 1000156001
VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO_KHR = 1000156002
VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO_KHR = 1000156003
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES_KHR = 1000156004
VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES_KHR = 1000156005
VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO_KHR = 1000157000
VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO_KHR = 1000157001
VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO_EXT = 1000161000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES_EXT = 1000161001
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES_EXT = 1000161002
VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO_EXT = 1000161003
VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT_EXT = 1000161004
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES_KHR = 1000168000
VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT_KHR = 1000168001
VK_STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_EXT = 1000174000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES_KHR = 1000175000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES_KHR = 1000177000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES_KHR = 1000180000
VK_STRUCTURE_TYPE_CALIBRATED_TIMESTAMP_INFO_EXT = 1000184000
VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_DIVISOR_STATE_CREATE_INFO_EXT = 1000190001
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_FEATURES_EXT = 1000190002
VK_STRUCTURE_TYPE_PIPELINE_CREATION_FEEDBACK_CREATE_INFO_EXT = 1000192000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES_KHR = 1000196000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES_KHR = 1000197000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES_KHR = 1000199000
VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE_KHR = 1000199001
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_FEATURES_NV = 1000203000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES_KHR = 1000207000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES_KHR = 1000207001
VK_STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO_KHR = 1000207002
VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO_KHR = 1000207003
VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO_KHR = 1000207004
VK_STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO_KHR = 1000207005
VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO_INTEL = 1000210000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES_KHR = 1000211000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TERMINATE_INVOCATION_FEATURES_KHR = 1000215000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES_EXT = 1000221000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_PROPERTIES_EXT = 1000225000
VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_REQUIRED_SUBGROUP_SIZE_CREATE_INFO_EXT = 1000225001
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_FEATURES_EXT = 1000225002
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES_KHR = 1000241000
VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT_KHR = 1000241001
VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT_KHR = 1000241002
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_ADDRESS_FEATURES_EXT = 1000244000
VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO_EXT = 1000244001
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TOOL_PROPERTIES_EXT = 1000245000
VK_STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO_EXT = 1000246000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES_KHR = 1000253000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_KHR = 1000257000
VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO_KHR = 1000244001
VK_STRUCTURE_TYPE_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO_KHR = 1000257002
VK_STRUCTURE_TYPE_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO_KHR = 1000257003
VK_STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO_KHR = 1000257004
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES_EXT = 1000261000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DEMOTE_TO_HELPER_INVOCATION_FEATURES_EXT = 1000276000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_FEATURES_KHR = 1000280000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_PROPERTIES_KHR = 1000280001
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_PROPERTIES_EXT = 1000281001
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIVATE_DATA_FEATURES_EXT = 1000295000
VK_STRUCTURE_TYPE_DEVICE_PRIVATE_DATA_CREATE_INFO_EXT = 1000295001
VK_STRUCTURE_TYPE_PRIVATE_DATA_SLOT_CREATE_INFO_EXT = 1000295002
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_CREATION_CACHE_CONTROL_FEATURES_EXT = 1000297000
VK_STRUCTURE_TYPE_MEMORY_BARRIER_2_KHR = 1000314000
VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER_2_KHR = 1000314001
VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER_2_KHR = 1000314002
VK_STRUCTURE_TYPE_DEPENDENCY_INFO_KHR = 1000314003
VK_STRUCTURE_TYPE_SUBMIT_INFO_2_KHR = 1000314004
VK_STRUCTURE_TYPE_SEMAPHORE_SUBMIT_INFO_KHR = 1000314005
VK_STRUCTURE_TYPE_COMMAND_BUFFER_SUBMIT_INFO_KHR = 1000314006
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SYNCHRONIZATION_2_FEATURES_KHR = 1000314007
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ZERO_INITIALIZE_WORKGROUP_MEMORY_FEATURES_KHR = 1000325000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ROBUSTNESS_FEATURES_EXT = 1000335000
VK_STRUCTURE_TYPE_COPY_BUFFER_INFO_2_KHR = 1000337000
VK_STRUCTURE_TYPE_COPY_IMAGE_INFO_2_KHR = 1000337001
VK_STRUCTURE_TYPE_COPY_BUFFER_TO_IMAGE_INFO_2_KHR = 1000337002
VK_STRUCTURE_TYPE_COPY_IMAGE_TO_BUFFER_INFO_2_KHR = 1000337003
VK_STRUCTURE_TYPE_BLIT_IMAGE_INFO_2_KHR = 1000337004
VK_STRUCTURE_TYPE_RESOLVE_IMAGE_INFO_2_KHR = 1000337005
VK_STRUCTURE_TYPE_BUFFER_COPY_2_KHR = 1000337006
VK_STRUCTURE_TYPE_IMAGE_COPY_2_KHR = 1000337007
VK_STRUCTURE_TYPE_IMAGE_BLIT_2_KHR = 1000337008
VK_STRUCTURE_TYPE_BUFFER_IMAGE_COPY_2_KHR = 1000337009
VK_STRUCTURE_TYPE_IMAGE_RESOLVE_2_KHR = 1000337010
VK_STRUCTURE_TYPE_SUBRESOURCE_LAYOUT_2_EXT = 1000338002
VK_STRUCTURE_TYPE_IMAGE_SUBRESOURCE_2_EXT = 1000338003
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_FEATURES_ARM = 1000342000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MUTABLE_DESCRIPTOR_TYPE_FEATURES_VALVE = 1000351000
VK_STRUCTURE_TYPE_MUTABLE_DESCRIPTOR_TYPE_CREATE_INFO_VALVE = 1000351002
VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_3_KHR = 1000360000
VK_STRUCTURE_TYPE_PIPELINE_INFO_EXT = 1000269001
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GLOBAL_PRIORITY_QUERY_FEATURES_EXT = 1000388000
VK_STRUCTURE_TYPE_QUEUE_FAMILY_GLOBAL_PRIORITY_PROPERTIES_EXT = 1000388001
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_FEATURES_KHR = 1000413000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_PROPERTIES_KHR = 1000413001
VK_STRUCTURE_TYPE_DEVICE_BUFFER_MEMORY_REQUIREMENTS_KHR = 1000413002
VK_STRUCTURE_TYPE_DEVICE_IMAGE_MEMORY_REQUIREMENTS_KHR = 1000413003
VK_STRUCTURE_TYPE_SHADER_REQUIRED_SUBGROUP_SIZE_CREATE_INFO_EXT = 1000225001
VK_STRUCTURE_TYPE_MAX_ENUM = 2147483647
VkStructureType = ctypes.c_uint32 # enum

# values for enumeration 'VkPipelineCacheHeaderVersion'
VkPipelineCacheHeaderVersion__enumvalues = {
    1: 'VK_PIPELINE_CACHE_HEADER_VERSION_ONE',
    2147483647: 'VK_PIPELINE_CACHE_HEADER_VERSION_MAX_ENUM',
}
VK_PIPELINE_CACHE_HEADER_VERSION_ONE = 1
VK_PIPELINE_CACHE_HEADER_VERSION_MAX_ENUM = 2147483647
VkPipelineCacheHeaderVersion = ctypes.c_uint32 # enum

# values for enumeration 'VkImageLayout'
VkImageLayout__enumvalues = {
    0: 'VK_IMAGE_LAYOUT_UNDEFINED',
    1: 'VK_IMAGE_LAYOUT_GENERAL',
    2: 'VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL',
    3: 'VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL',
    4: 'VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL',
    5: 'VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL',
    6: 'VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL',
    7: 'VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL',
    8: 'VK_IMAGE_LAYOUT_PREINITIALIZED',
    1000117000: 'VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL',
    1000117001: 'VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL',
    1000241000: 'VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL',
    1000241001: 'VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL',
    1000241002: 'VK_IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL',
    1000241003: 'VK_IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL',
    1000314000: 'VK_IMAGE_LAYOUT_READ_ONLY_OPTIMAL',
    1000314001: 'VK_IMAGE_LAYOUT_ATTACHMENT_OPTIMAL',
    1000001002: 'VK_IMAGE_LAYOUT_PRESENT_SRC_KHR',
    1000024000: 'VK_IMAGE_LAYOUT_VIDEO_DECODE_DST_KHR',
    1000024001: 'VK_IMAGE_LAYOUT_VIDEO_DECODE_SRC_KHR',
    1000024002: 'VK_IMAGE_LAYOUT_VIDEO_DECODE_DPB_KHR',
    1000111000: 'VK_IMAGE_LAYOUT_SHARED_PRESENT_KHR',
    1000218000: 'VK_IMAGE_LAYOUT_FRAGMENT_DENSITY_MAP_OPTIMAL_EXT',
    1000164003: 'VK_IMAGE_LAYOUT_FRAGMENT_SHADING_RATE_ATTACHMENT_OPTIMAL_KHR',
    1000299000: 'VK_IMAGE_LAYOUT_VIDEO_ENCODE_DST_KHR',
    1000299001: 'VK_IMAGE_LAYOUT_VIDEO_ENCODE_SRC_KHR',
    1000299002: 'VK_IMAGE_LAYOUT_VIDEO_ENCODE_DPB_KHR',
    1000339000: 'VK_IMAGE_LAYOUT_ATTACHMENT_FEEDBACK_LOOP_OPTIMAL_EXT',
    1000117000: 'VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL_KHR',
    1000117001: 'VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL_KHR',
    1000164003: 'VK_IMAGE_LAYOUT_SHADING_RATE_OPTIMAL_NV',
    1000241000: 'VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL_KHR',
    1000241001: 'VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL_KHR',
    1000241002: 'VK_IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL_KHR',
    1000241003: 'VK_IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL_KHR',
    1000314000: 'VK_IMAGE_LAYOUT_READ_ONLY_OPTIMAL_KHR',
    1000314001: 'VK_IMAGE_LAYOUT_ATTACHMENT_OPTIMAL_KHR',
    2147483647: 'VK_IMAGE_LAYOUT_MAX_ENUM',
}
VK_IMAGE_LAYOUT_UNDEFINED = 0
VK_IMAGE_LAYOUT_GENERAL = 1
VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL = 2
VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL = 3
VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL = 4
VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL = 5
VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL = 6
VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL = 7
VK_IMAGE_LAYOUT_PREINITIALIZED = 8
VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL = 1000117000
VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL = 1000117001
VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL = 1000241000
VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL = 1000241001
VK_IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL = 1000241002
VK_IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL = 1000241003
VK_IMAGE_LAYOUT_READ_ONLY_OPTIMAL = 1000314000
VK_IMAGE_LAYOUT_ATTACHMENT_OPTIMAL = 1000314001
VK_IMAGE_LAYOUT_PRESENT_SRC_KHR = 1000001002
VK_IMAGE_LAYOUT_VIDEO_DECODE_DST_KHR = 1000024000
VK_IMAGE_LAYOUT_VIDEO_DECODE_SRC_KHR = 1000024001
VK_IMAGE_LAYOUT_VIDEO_DECODE_DPB_KHR = 1000024002
VK_IMAGE_LAYOUT_SHARED_PRESENT_KHR = 1000111000
VK_IMAGE_LAYOUT_FRAGMENT_DENSITY_MAP_OPTIMAL_EXT = 1000218000
VK_IMAGE_LAYOUT_FRAGMENT_SHADING_RATE_ATTACHMENT_OPTIMAL_KHR = 1000164003
VK_IMAGE_LAYOUT_VIDEO_ENCODE_DST_KHR = 1000299000
VK_IMAGE_LAYOUT_VIDEO_ENCODE_SRC_KHR = 1000299001
VK_IMAGE_LAYOUT_VIDEO_ENCODE_DPB_KHR = 1000299002
VK_IMAGE_LAYOUT_ATTACHMENT_FEEDBACK_LOOP_OPTIMAL_EXT = 1000339000
VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL_KHR = 1000117000
VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL_KHR = 1000117001
VK_IMAGE_LAYOUT_SHADING_RATE_OPTIMAL_NV = 1000164003
VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL_KHR = 1000241000
VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL_KHR = 1000241001
VK_IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL_KHR = 1000241002
VK_IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL_KHR = 1000241003
VK_IMAGE_LAYOUT_READ_ONLY_OPTIMAL_KHR = 1000314000
VK_IMAGE_LAYOUT_ATTACHMENT_OPTIMAL_KHR = 1000314001
VK_IMAGE_LAYOUT_MAX_ENUM = 2147483647
VkImageLayout = ctypes.c_uint32 # enum

# values for enumeration 'VkObjectType'
VkObjectType__enumvalues = {
    0: 'VK_OBJECT_TYPE_UNKNOWN',
    1: 'VK_OBJECT_TYPE_INSTANCE',
    2: 'VK_OBJECT_TYPE_PHYSICAL_DEVICE',
    3: 'VK_OBJECT_TYPE_DEVICE',
    4: 'VK_OBJECT_TYPE_QUEUE',
    5: 'VK_OBJECT_TYPE_SEMAPHORE',
    6: 'VK_OBJECT_TYPE_COMMAND_BUFFER',
    7: 'VK_OBJECT_TYPE_FENCE',
    8: 'VK_OBJECT_TYPE_DEVICE_MEMORY',
    9: 'VK_OBJECT_TYPE_BUFFER',
    10: 'VK_OBJECT_TYPE_IMAGE',
    11: 'VK_OBJECT_TYPE_EVENT',
    12: 'VK_OBJECT_TYPE_QUERY_POOL',
    13: 'VK_OBJECT_TYPE_BUFFER_VIEW',
    14: 'VK_OBJECT_TYPE_IMAGE_VIEW',
    15: 'VK_OBJECT_TYPE_SHADER_MODULE',
    16: 'VK_OBJECT_TYPE_PIPELINE_CACHE',
    17: 'VK_OBJECT_TYPE_PIPELINE_LAYOUT',
    18: 'VK_OBJECT_TYPE_RENDER_PASS',
    19: 'VK_OBJECT_TYPE_PIPELINE',
    20: 'VK_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT',
    21: 'VK_OBJECT_TYPE_SAMPLER',
    22: 'VK_OBJECT_TYPE_DESCRIPTOR_POOL',
    23: 'VK_OBJECT_TYPE_DESCRIPTOR_SET',
    24: 'VK_OBJECT_TYPE_FRAMEBUFFER',
    25: 'VK_OBJECT_TYPE_COMMAND_POOL',
    1000156000: 'VK_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION',
    1000085000: 'VK_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE',
    1000295000: 'VK_OBJECT_TYPE_PRIVATE_DATA_SLOT',
    1000000000: 'VK_OBJECT_TYPE_SURFACE_KHR',
    1000001000: 'VK_OBJECT_TYPE_SWAPCHAIN_KHR',
    1000002000: 'VK_OBJECT_TYPE_DISPLAY_KHR',
    1000002001: 'VK_OBJECT_TYPE_DISPLAY_MODE_KHR',
    1000011000: 'VK_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT',
    1000023000: 'VK_OBJECT_TYPE_VIDEO_SESSION_KHR',
    1000023001: 'VK_OBJECT_TYPE_VIDEO_SESSION_PARAMETERS_KHR',
    1000029000: 'VK_OBJECT_TYPE_CU_MODULE_NVX',
    1000029001: 'VK_OBJECT_TYPE_CU_FUNCTION_NVX',
    1000128000: 'VK_OBJECT_TYPE_DEBUG_UTILS_MESSENGER_EXT',
    1000150000: 'VK_OBJECT_TYPE_ACCELERATION_STRUCTURE_KHR',
    1000160000: 'VK_OBJECT_TYPE_VALIDATION_CACHE_EXT',
    1000165000: 'VK_OBJECT_TYPE_ACCELERATION_STRUCTURE_NV',
    1000210000: 'VK_OBJECT_TYPE_PERFORMANCE_CONFIGURATION_INTEL',
    1000268000: 'VK_OBJECT_TYPE_DEFERRED_OPERATION_KHR',
    1000277000: 'VK_OBJECT_TYPE_INDIRECT_COMMANDS_LAYOUT_NV',
    1000307000: 'VK_OBJECT_TYPE_CUDA_MODULE_NV',
    1000307001: 'VK_OBJECT_TYPE_CUDA_FUNCTION_NV',
    1000366000: 'VK_OBJECT_TYPE_BUFFER_COLLECTION_FUCHSIA',
    1000396000: 'VK_OBJECT_TYPE_MICROMAP_EXT',
    1000464000: 'VK_OBJECT_TYPE_OPTICAL_FLOW_SESSION_NV',
    1000482000: 'VK_OBJECT_TYPE_SHADER_EXT',
    1000085000: 'VK_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_KHR',
    1000156000: 'VK_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_KHR',
    1000295000: 'VK_OBJECT_TYPE_PRIVATE_DATA_SLOT_EXT',
    2147483647: 'VK_OBJECT_TYPE_MAX_ENUM',
}
VK_OBJECT_TYPE_UNKNOWN = 0
VK_OBJECT_TYPE_INSTANCE = 1
VK_OBJECT_TYPE_PHYSICAL_DEVICE = 2
VK_OBJECT_TYPE_DEVICE = 3
VK_OBJECT_TYPE_QUEUE = 4
VK_OBJECT_TYPE_SEMAPHORE = 5
VK_OBJECT_TYPE_COMMAND_BUFFER = 6
VK_OBJECT_TYPE_FENCE = 7
VK_OBJECT_TYPE_DEVICE_MEMORY = 8
VK_OBJECT_TYPE_BUFFER = 9
VK_OBJECT_TYPE_IMAGE = 10
VK_OBJECT_TYPE_EVENT = 11
VK_OBJECT_TYPE_QUERY_POOL = 12
VK_OBJECT_TYPE_BUFFER_VIEW = 13
VK_OBJECT_TYPE_IMAGE_VIEW = 14
VK_OBJECT_TYPE_SHADER_MODULE = 15
VK_OBJECT_TYPE_PIPELINE_CACHE = 16
VK_OBJECT_TYPE_PIPELINE_LAYOUT = 17
VK_OBJECT_TYPE_RENDER_PASS = 18
VK_OBJECT_TYPE_PIPELINE = 19
VK_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT = 20
VK_OBJECT_TYPE_SAMPLER = 21
VK_OBJECT_TYPE_DESCRIPTOR_POOL = 22
VK_OBJECT_TYPE_DESCRIPTOR_SET = 23
VK_OBJECT_TYPE_FRAMEBUFFER = 24
VK_OBJECT_TYPE_COMMAND_POOL = 25
VK_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION = 1000156000
VK_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE = 1000085000
VK_OBJECT_TYPE_PRIVATE_DATA_SLOT = 1000295000
VK_OBJECT_TYPE_SURFACE_KHR = 1000000000
VK_OBJECT_TYPE_SWAPCHAIN_KHR = 1000001000
VK_OBJECT_TYPE_DISPLAY_KHR = 1000002000
VK_OBJECT_TYPE_DISPLAY_MODE_KHR = 1000002001
VK_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT = 1000011000
VK_OBJECT_TYPE_VIDEO_SESSION_KHR = 1000023000
VK_OBJECT_TYPE_VIDEO_SESSION_PARAMETERS_KHR = 1000023001
VK_OBJECT_TYPE_CU_MODULE_NVX = 1000029000
VK_OBJECT_TYPE_CU_FUNCTION_NVX = 1000029001
VK_OBJECT_TYPE_DEBUG_UTILS_MESSENGER_EXT = 1000128000
VK_OBJECT_TYPE_ACCELERATION_STRUCTURE_KHR = 1000150000
VK_OBJECT_TYPE_VALIDATION_CACHE_EXT = 1000160000
VK_OBJECT_TYPE_ACCELERATION_STRUCTURE_NV = 1000165000
VK_OBJECT_TYPE_PERFORMANCE_CONFIGURATION_INTEL = 1000210000
VK_OBJECT_TYPE_DEFERRED_OPERATION_KHR = 1000268000
VK_OBJECT_TYPE_INDIRECT_COMMANDS_LAYOUT_NV = 1000277000
VK_OBJECT_TYPE_CUDA_MODULE_NV = 1000307000
VK_OBJECT_TYPE_CUDA_FUNCTION_NV = 1000307001
VK_OBJECT_TYPE_BUFFER_COLLECTION_FUCHSIA = 1000366000
VK_OBJECT_TYPE_MICROMAP_EXT = 1000396000
VK_OBJECT_TYPE_OPTICAL_FLOW_SESSION_NV = 1000464000
VK_OBJECT_TYPE_SHADER_EXT = 1000482000
VK_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_KHR = 1000085000
VK_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_KHR = 1000156000
VK_OBJECT_TYPE_PRIVATE_DATA_SLOT_EXT = 1000295000
VK_OBJECT_TYPE_MAX_ENUM = 2147483647
VkObjectType = ctypes.c_uint32 # enum

# values for enumeration 'VkVendorId'
VkVendorId__enumvalues = {
    65537: 'VK_VENDOR_ID_VIV',
    65538: 'VK_VENDOR_ID_VSI',
    65539: 'VK_VENDOR_ID_KAZAN',
    65540: 'VK_VENDOR_ID_CODEPLAY',
    65541: 'VK_VENDOR_ID_MESA',
    65542: 'VK_VENDOR_ID_POCL',
    65543: 'VK_VENDOR_ID_MOBILEYE',
    2147483647: 'VK_VENDOR_ID_MAX_ENUM',
}
VK_VENDOR_ID_VIV = 65537
VK_VENDOR_ID_VSI = 65538
VK_VENDOR_ID_KAZAN = 65539
VK_VENDOR_ID_CODEPLAY = 65540
VK_VENDOR_ID_MESA = 65541
VK_VENDOR_ID_POCL = 65542
VK_VENDOR_ID_MOBILEYE = 65543
VK_VENDOR_ID_MAX_ENUM = 2147483647
VkVendorId = ctypes.c_uint32 # enum

# values for enumeration 'VkSystemAllocationScope'
VkSystemAllocationScope__enumvalues = {
    0: 'VK_SYSTEM_ALLOCATION_SCOPE_COMMAND',
    1: 'VK_SYSTEM_ALLOCATION_SCOPE_OBJECT',
    2: 'VK_SYSTEM_ALLOCATION_SCOPE_CACHE',
    3: 'VK_SYSTEM_ALLOCATION_SCOPE_DEVICE',
    4: 'VK_SYSTEM_ALLOCATION_SCOPE_INSTANCE',
    2147483647: 'VK_SYSTEM_ALLOCATION_SCOPE_MAX_ENUM',
}
VK_SYSTEM_ALLOCATION_SCOPE_COMMAND = 0
VK_SYSTEM_ALLOCATION_SCOPE_OBJECT = 1
VK_SYSTEM_ALLOCATION_SCOPE_CACHE = 2
VK_SYSTEM_ALLOCATION_SCOPE_DEVICE = 3
VK_SYSTEM_ALLOCATION_SCOPE_INSTANCE = 4
VK_SYSTEM_ALLOCATION_SCOPE_MAX_ENUM = 2147483647
VkSystemAllocationScope = ctypes.c_uint32 # enum

# values for enumeration 'VkInternalAllocationType'
VkInternalAllocationType__enumvalues = {
    0: 'VK_INTERNAL_ALLOCATION_TYPE_EXECUTABLE',
    2147483647: 'VK_INTERNAL_ALLOCATION_TYPE_MAX_ENUM',
}
VK_INTERNAL_ALLOCATION_TYPE_EXECUTABLE = 0
VK_INTERNAL_ALLOCATION_TYPE_MAX_ENUM = 2147483647
VkInternalAllocationType = ctypes.c_uint32 # enum

# values for enumeration 'VkFormat'
VkFormat__enumvalues = {
    0: 'VK_FORMAT_UNDEFINED',
    1: 'VK_FORMAT_R4G4_UNORM_PACK8',
    2: 'VK_FORMAT_R4G4B4A4_UNORM_PACK16',
    3: 'VK_FORMAT_B4G4R4A4_UNORM_PACK16',
    4: 'VK_FORMAT_R5G6B5_UNORM_PACK16',
    5: 'VK_FORMAT_B5G6R5_UNORM_PACK16',
    6: 'VK_FORMAT_R5G5B5A1_UNORM_PACK16',
    7: 'VK_FORMAT_B5G5R5A1_UNORM_PACK16',
    8: 'VK_FORMAT_A1R5G5B5_UNORM_PACK16',
    9: 'VK_FORMAT_R8_UNORM',
    10: 'VK_FORMAT_R8_SNORM',
    11: 'VK_FORMAT_R8_USCALED',
    12: 'VK_FORMAT_R8_SSCALED',
    13: 'VK_FORMAT_R8_UINT',
    14: 'VK_FORMAT_R8_SINT',
    15: 'VK_FORMAT_R8_SRGB',
    16: 'VK_FORMAT_R8G8_UNORM',
    17: 'VK_FORMAT_R8G8_SNORM',
    18: 'VK_FORMAT_R8G8_USCALED',
    19: 'VK_FORMAT_R8G8_SSCALED',
    20: 'VK_FORMAT_R8G8_UINT',
    21: 'VK_FORMAT_R8G8_SINT',
    22: 'VK_FORMAT_R8G8_SRGB',
    23: 'VK_FORMAT_R8G8B8_UNORM',
    24: 'VK_FORMAT_R8G8B8_SNORM',
    25: 'VK_FORMAT_R8G8B8_USCALED',
    26: 'VK_FORMAT_R8G8B8_SSCALED',
    27: 'VK_FORMAT_R8G8B8_UINT',
    28: 'VK_FORMAT_R8G8B8_SINT',
    29: 'VK_FORMAT_R8G8B8_SRGB',
    30: 'VK_FORMAT_B8G8R8_UNORM',
    31: 'VK_FORMAT_B8G8R8_SNORM',
    32: 'VK_FORMAT_B8G8R8_USCALED',
    33: 'VK_FORMAT_B8G8R8_SSCALED',
    34: 'VK_FORMAT_B8G8R8_UINT',
    35: 'VK_FORMAT_B8G8R8_SINT',
    36: 'VK_FORMAT_B8G8R8_SRGB',
    37: 'VK_FORMAT_R8G8B8A8_UNORM',
    38: 'VK_FORMAT_R8G8B8A8_SNORM',
    39: 'VK_FORMAT_R8G8B8A8_USCALED',
    40: 'VK_FORMAT_R8G8B8A8_SSCALED',
    41: 'VK_FORMAT_R8G8B8A8_UINT',
    42: 'VK_FORMAT_R8G8B8A8_SINT',
    43: 'VK_FORMAT_R8G8B8A8_SRGB',
    44: 'VK_FORMAT_B8G8R8A8_UNORM',
    45: 'VK_FORMAT_B8G8R8A8_SNORM',
    46: 'VK_FORMAT_B8G8R8A8_USCALED',
    47: 'VK_FORMAT_B8G8R8A8_SSCALED',
    48: 'VK_FORMAT_B8G8R8A8_UINT',
    49: 'VK_FORMAT_B8G8R8A8_SINT',
    50: 'VK_FORMAT_B8G8R8A8_SRGB',
    51: 'VK_FORMAT_A8B8G8R8_UNORM_PACK32',
    52: 'VK_FORMAT_A8B8G8R8_SNORM_PACK32',
    53: 'VK_FORMAT_A8B8G8R8_USCALED_PACK32',
    54: 'VK_FORMAT_A8B8G8R8_SSCALED_PACK32',
    55: 'VK_FORMAT_A8B8G8R8_UINT_PACK32',
    56: 'VK_FORMAT_A8B8G8R8_SINT_PACK32',
    57: 'VK_FORMAT_A8B8G8R8_SRGB_PACK32',
    58: 'VK_FORMAT_A2R10G10B10_UNORM_PACK32',
    59: 'VK_FORMAT_A2R10G10B10_SNORM_PACK32',
    60: 'VK_FORMAT_A2R10G10B10_USCALED_PACK32',
    61: 'VK_FORMAT_A2R10G10B10_SSCALED_PACK32',
    62: 'VK_FORMAT_A2R10G10B10_UINT_PACK32',
    63: 'VK_FORMAT_A2R10G10B10_SINT_PACK32',
    64: 'VK_FORMAT_A2B10G10R10_UNORM_PACK32',
    65: 'VK_FORMAT_A2B10G10R10_SNORM_PACK32',
    66: 'VK_FORMAT_A2B10G10R10_USCALED_PACK32',
    67: 'VK_FORMAT_A2B10G10R10_SSCALED_PACK32',
    68: 'VK_FORMAT_A2B10G10R10_UINT_PACK32',
    69: 'VK_FORMAT_A2B10G10R10_SINT_PACK32',
    70: 'VK_FORMAT_R16_UNORM',
    71: 'VK_FORMAT_R16_SNORM',
    72: 'VK_FORMAT_R16_USCALED',
    73: 'VK_FORMAT_R16_SSCALED',
    74: 'VK_FORMAT_R16_UINT',
    75: 'VK_FORMAT_R16_SINT',
    76: 'VK_FORMAT_R16_SFLOAT',
    77: 'VK_FORMAT_R16G16_UNORM',
    78: 'VK_FORMAT_R16G16_SNORM',
    79: 'VK_FORMAT_R16G16_USCALED',
    80: 'VK_FORMAT_R16G16_SSCALED',
    81: 'VK_FORMAT_R16G16_UINT',
    82: 'VK_FORMAT_R16G16_SINT',
    83: 'VK_FORMAT_R16G16_SFLOAT',
    84: 'VK_FORMAT_R16G16B16_UNORM',
    85: 'VK_FORMAT_R16G16B16_SNORM',
    86: 'VK_FORMAT_R16G16B16_USCALED',
    87: 'VK_FORMAT_R16G16B16_SSCALED',
    88: 'VK_FORMAT_R16G16B16_UINT',
    89: 'VK_FORMAT_R16G16B16_SINT',
    90: 'VK_FORMAT_R16G16B16_SFLOAT',
    91: 'VK_FORMAT_R16G16B16A16_UNORM',
    92: 'VK_FORMAT_R16G16B16A16_SNORM',
    93: 'VK_FORMAT_R16G16B16A16_USCALED',
    94: 'VK_FORMAT_R16G16B16A16_SSCALED',
    95: 'VK_FORMAT_R16G16B16A16_UINT',
    96: 'VK_FORMAT_R16G16B16A16_SINT',
    97: 'VK_FORMAT_R16G16B16A16_SFLOAT',
    98: 'VK_FORMAT_R32_UINT',
    99: 'VK_FORMAT_R32_SINT',
    100: 'VK_FORMAT_R32_SFLOAT',
    101: 'VK_FORMAT_R32G32_UINT',
    102: 'VK_FORMAT_R32G32_SINT',
    103: 'VK_FORMAT_R32G32_SFLOAT',
    104: 'VK_FORMAT_R32G32B32_UINT',
    105: 'VK_FORMAT_R32G32B32_SINT',
    106: 'VK_FORMAT_R32G32B32_SFLOAT',
    107: 'VK_FORMAT_R32G32B32A32_UINT',
    108: 'VK_FORMAT_R32G32B32A32_SINT',
    109: 'VK_FORMAT_R32G32B32A32_SFLOAT',
    110: 'VK_FORMAT_R64_UINT',
    111: 'VK_FORMAT_R64_SINT',
    112: 'VK_FORMAT_R64_SFLOAT',
    113: 'VK_FORMAT_R64G64_UINT',
    114: 'VK_FORMAT_R64G64_SINT',
    115: 'VK_FORMAT_R64G64_SFLOAT',
    116: 'VK_FORMAT_R64G64B64_UINT',
    117: 'VK_FORMAT_R64G64B64_SINT',
    118: 'VK_FORMAT_R64G64B64_SFLOAT',
    119: 'VK_FORMAT_R64G64B64A64_UINT',
    120: 'VK_FORMAT_R64G64B64A64_SINT',
    121: 'VK_FORMAT_R64G64B64A64_SFLOAT',
    122: 'VK_FORMAT_B10G11R11_UFLOAT_PACK32',
    123: 'VK_FORMAT_E5B9G9R9_UFLOAT_PACK32',
    124: 'VK_FORMAT_D16_UNORM',
    125: 'VK_FORMAT_X8_D24_UNORM_PACK32',
    126: 'VK_FORMAT_D32_SFLOAT',
    127: 'VK_FORMAT_S8_UINT',
    128: 'VK_FORMAT_D16_UNORM_S8_UINT',
    129: 'VK_FORMAT_D24_UNORM_S8_UINT',
    130: 'VK_FORMAT_D32_SFLOAT_S8_UINT',
    131: 'VK_FORMAT_BC1_RGB_UNORM_BLOCK',
    132: 'VK_FORMAT_BC1_RGB_SRGB_BLOCK',
    133: 'VK_FORMAT_BC1_RGBA_UNORM_BLOCK',
    134: 'VK_FORMAT_BC1_RGBA_SRGB_BLOCK',
    135: 'VK_FORMAT_BC2_UNORM_BLOCK',
    136: 'VK_FORMAT_BC2_SRGB_BLOCK',
    137: 'VK_FORMAT_BC3_UNORM_BLOCK',
    138: 'VK_FORMAT_BC3_SRGB_BLOCK',
    139: 'VK_FORMAT_BC4_UNORM_BLOCK',
    140: 'VK_FORMAT_BC4_SNORM_BLOCK',
    141: 'VK_FORMAT_BC5_UNORM_BLOCK',
    142: 'VK_FORMAT_BC5_SNORM_BLOCK',
    143: 'VK_FORMAT_BC6H_UFLOAT_BLOCK',
    144: 'VK_FORMAT_BC6H_SFLOAT_BLOCK',
    145: 'VK_FORMAT_BC7_UNORM_BLOCK',
    146: 'VK_FORMAT_BC7_SRGB_BLOCK',
    147: 'VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK',
    148: 'VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK',
    149: 'VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK',
    150: 'VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK',
    151: 'VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK',
    152: 'VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK',
    153: 'VK_FORMAT_EAC_R11_UNORM_BLOCK',
    154: 'VK_FORMAT_EAC_R11_SNORM_BLOCK',
    155: 'VK_FORMAT_EAC_R11G11_UNORM_BLOCK',
    156: 'VK_FORMAT_EAC_R11G11_SNORM_BLOCK',
    157: 'VK_FORMAT_ASTC_4x4_UNORM_BLOCK',
    158: 'VK_FORMAT_ASTC_4x4_SRGB_BLOCK',
    159: 'VK_FORMAT_ASTC_5x4_UNORM_BLOCK',
    160: 'VK_FORMAT_ASTC_5x4_SRGB_BLOCK',
    161: 'VK_FORMAT_ASTC_5x5_UNORM_BLOCK',
    162: 'VK_FORMAT_ASTC_5x5_SRGB_BLOCK',
    163: 'VK_FORMAT_ASTC_6x5_UNORM_BLOCK',
    164: 'VK_FORMAT_ASTC_6x5_SRGB_BLOCK',
    165: 'VK_FORMAT_ASTC_6x6_UNORM_BLOCK',
    166: 'VK_FORMAT_ASTC_6x6_SRGB_BLOCK',
    167: 'VK_FORMAT_ASTC_8x5_UNORM_BLOCK',
    168: 'VK_FORMAT_ASTC_8x5_SRGB_BLOCK',
    169: 'VK_FORMAT_ASTC_8x6_UNORM_BLOCK',
    170: 'VK_FORMAT_ASTC_8x6_SRGB_BLOCK',
    171: 'VK_FORMAT_ASTC_8x8_UNORM_BLOCK',
    172: 'VK_FORMAT_ASTC_8x8_SRGB_BLOCK',
    173: 'VK_FORMAT_ASTC_10x5_UNORM_BLOCK',
    174: 'VK_FORMAT_ASTC_10x5_SRGB_BLOCK',
    175: 'VK_FORMAT_ASTC_10x6_UNORM_BLOCK',
    176: 'VK_FORMAT_ASTC_10x6_SRGB_BLOCK',
    177: 'VK_FORMAT_ASTC_10x8_UNORM_BLOCK',
    178: 'VK_FORMAT_ASTC_10x8_SRGB_BLOCK',
    179: 'VK_FORMAT_ASTC_10x10_UNORM_BLOCK',
    180: 'VK_FORMAT_ASTC_10x10_SRGB_BLOCK',
    181: 'VK_FORMAT_ASTC_12x10_UNORM_BLOCK',
    182: 'VK_FORMAT_ASTC_12x10_SRGB_BLOCK',
    183: 'VK_FORMAT_ASTC_12x12_UNORM_BLOCK',
    184: 'VK_FORMAT_ASTC_12x12_SRGB_BLOCK',
    1000156000: 'VK_FORMAT_G8B8G8R8_422_UNORM',
    1000156001: 'VK_FORMAT_B8G8R8G8_422_UNORM',
    1000156002: 'VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM',
    1000156003: 'VK_FORMAT_G8_B8R8_2PLANE_420_UNORM',
    1000156004: 'VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM',
    1000156005: 'VK_FORMAT_G8_B8R8_2PLANE_422_UNORM',
    1000156006: 'VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM',
    1000156007: 'VK_FORMAT_R10X6_UNORM_PACK16',
    1000156008: 'VK_FORMAT_R10X6G10X6_UNORM_2PACK16',
    1000156009: 'VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16',
    1000156010: 'VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16',
    1000156011: 'VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16',
    1000156012: 'VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16',
    1000156013: 'VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16',
    1000156014: 'VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16',
    1000156015: 'VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16',
    1000156016: 'VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16',
    1000156017: 'VK_FORMAT_R12X4_UNORM_PACK16',
    1000156018: 'VK_FORMAT_R12X4G12X4_UNORM_2PACK16',
    1000156019: 'VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16',
    1000156020: 'VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16',
    1000156021: 'VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16',
    1000156022: 'VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16',
    1000156023: 'VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16',
    1000156024: 'VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16',
    1000156025: 'VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16',
    1000156026: 'VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16',
    1000156027: 'VK_FORMAT_G16B16G16R16_422_UNORM',
    1000156028: 'VK_FORMAT_B16G16R16G16_422_UNORM',
    1000156029: 'VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM',
    1000156030: 'VK_FORMAT_G16_B16R16_2PLANE_420_UNORM',
    1000156031: 'VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM',
    1000156032: 'VK_FORMAT_G16_B16R16_2PLANE_422_UNORM',
    1000156033: 'VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM',
    1000330000: 'VK_FORMAT_G8_B8R8_2PLANE_444_UNORM',
    1000330001: 'VK_FORMAT_G10X6_B10X6R10X6_2PLANE_444_UNORM_3PACK16',
    1000330002: 'VK_FORMAT_G12X4_B12X4R12X4_2PLANE_444_UNORM_3PACK16',
    1000330003: 'VK_FORMAT_G16_B16R16_2PLANE_444_UNORM',
    1000340000: 'VK_FORMAT_A4R4G4B4_UNORM_PACK16',
    1000340001: 'VK_FORMAT_A4B4G4R4_UNORM_PACK16',
    1000066000: 'VK_FORMAT_ASTC_4x4_SFLOAT_BLOCK',
    1000066001: 'VK_FORMAT_ASTC_5x4_SFLOAT_BLOCK',
    1000066002: 'VK_FORMAT_ASTC_5x5_SFLOAT_BLOCK',
    1000066003: 'VK_FORMAT_ASTC_6x5_SFLOAT_BLOCK',
    1000066004: 'VK_FORMAT_ASTC_6x6_SFLOAT_BLOCK',
    1000066005: 'VK_FORMAT_ASTC_8x5_SFLOAT_BLOCK',
    1000066006: 'VK_FORMAT_ASTC_8x6_SFLOAT_BLOCK',
    1000066007: 'VK_FORMAT_ASTC_8x8_SFLOAT_BLOCK',
    1000066008: 'VK_FORMAT_ASTC_10x5_SFLOAT_BLOCK',
    1000066009: 'VK_FORMAT_ASTC_10x6_SFLOAT_BLOCK',
    1000066010: 'VK_FORMAT_ASTC_10x8_SFLOAT_BLOCK',
    1000066011: 'VK_FORMAT_ASTC_10x10_SFLOAT_BLOCK',
    1000066012: 'VK_FORMAT_ASTC_12x10_SFLOAT_BLOCK',
    1000066013: 'VK_FORMAT_ASTC_12x12_SFLOAT_BLOCK',
    1000054000: 'VK_FORMAT_PVRTC1_2BPP_UNORM_BLOCK_IMG',
    1000054001: 'VK_FORMAT_PVRTC1_4BPP_UNORM_BLOCK_IMG',
    1000054002: 'VK_FORMAT_PVRTC2_2BPP_UNORM_BLOCK_IMG',
    1000054003: 'VK_FORMAT_PVRTC2_4BPP_UNORM_BLOCK_IMG',
    1000054004: 'VK_FORMAT_PVRTC1_2BPP_SRGB_BLOCK_IMG',
    1000054005: 'VK_FORMAT_PVRTC1_4BPP_SRGB_BLOCK_IMG',
    1000054006: 'VK_FORMAT_PVRTC2_2BPP_SRGB_BLOCK_IMG',
    1000054007: 'VK_FORMAT_PVRTC2_4BPP_SRGB_BLOCK_IMG',
    1000464000: 'VK_FORMAT_R16G16_S10_5_NV',
    1000470000: 'VK_FORMAT_A1B5G5R5_UNORM_PACK16_KHR',
    1000470001: 'VK_FORMAT_A8_UNORM_KHR',
    1000066000: 'VK_FORMAT_ASTC_4x4_SFLOAT_BLOCK_EXT',
    1000066001: 'VK_FORMAT_ASTC_5x4_SFLOAT_BLOCK_EXT',
    1000066002: 'VK_FORMAT_ASTC_5x5_SFLOAT_BLOCK_EXT',
    1000066003: 'VK_FORMAT_ASTC_6x5_SFLOAT_BLOCK_EXT',
    1000066004: 'VK_FORMAT_ASTC_6x6_SFLOAT_BLOCK_EXT',
    1000066005: 'VK_FORMAT_ASTC_8x5_SFLOAT_BLOCK_EXT',
    1000066006: 'VK_FORMAT_ASTC_8x6_SFLOAT_BLOCK_EXT',
    1000066007: 'VK_FORMAT_ASTC_8x8_SFLOAT_BLOCK_EXT',
    1000066008: 'VK_FORMAT_ASTC_10x5_SFLOAT_BLOCK_EXT',
    1000066009: 'VK_FORMAT_ASTC_10x6_SFLOAT_BLOCK_EXT',
    1000066010: 'VK_FORMAT_ASTC_10x8_SFLOAT_BLOCK_EXT',
    1000066011: 'VK_FORMAT_ASTC_10x10_SFLOAT_BLOCK_EXT',
    1000066012: 'VK_FORMAT_ASTC_12x10_SFLOAT_BLOCK_EXT',
    1000066013: 'VK_FORMAT_ASTC_12x12_SFLOAT_BLOCK_EXT',
    1000156000: 'VK_FORMAT_G8B8G8R8_422_UNORM_KHR',
    1000156001: 'VK_FORMAT_B8G8R8G8_422_UNORM_KHR',
    1000156002: 'VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM_KHR',
    1000156003: 'VK_FORMAT_G8_B8R8_2PLANE_420_UNORM_KHR',
    1000156004: 'VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM_KHR',
    1000156005: 'VK_FORMAT_G8_B8R8_2PLANE_422_UNORM_KHR',
    1000156006: 'VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM_KHR',
    1000156007: 'VK_FORMAT_R10X6_UNORM_PACK16_KHR',
    1000156008: 'VK_FORMAT_R10X6G10X6_UNORM_2PACK16_KHR',
    1000156009: 'VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16_KHR',
    1000156010: 'VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16_KHR',
    1000156011: 'VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16_KHR',
    1000156012: 'VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16_KHR',
    1000156013: 'VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16_KHR',
    1000156014: 'VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16_KHR',
    1000156015: 'VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16_KHR',
    1000156016: 'VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16_KHR',
    1000156017: 'VK_FORMAT_R12X4_UNORM_PACK16_KHR',
    1000156018: 'VK_FORMAT_R12X4G12X4_UNORM_2PACK16_KHR',
    1000156019: 'VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16_KHR',
    1000156020: 'VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16_KHR',
    1000156021: 'VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16_KHR',
    1000156022: 'VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16_KHR',
    1000156023: 'VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16_KHR',
    1000156024: 'VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16_KHR',
    1000156025: 'VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16_KHR',
    1000156026: 'VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16_KHR',
    1000156027: 'VK_FORMAT_G16B16G16R16_422_UNORM_KHR',
    1000156028: 'VK_FORMAT_B16G16R16G16_422_UNORM_KHR',
    1000156029: 'VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM_KHR',
    1000156030: 'VK_FORMAT_G16_B16R16_2PLANE_420_UNORM_KHR',
    1000156031: 'VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM_KHR',
    1000156032: 'VK_FORMAT_G16_B16R16_2PLANE_422_UNORM_KHR',
    1000156033: 'VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM_KHR',
    1000330000: 'VK_FORMAT_G8_B8R8_2PLANE_444_UNORM_EXT',
    1000330001: 'VK_FORMAT_G10X6_B10X6R10X6_2PLANE_444_UNORM_3PACK16_EXT',
    1000330002: 'VK_FORMAT_G12X4_B12X4R12X4_2PLANE_444_UNORM_3PACK16_EXT',
    1000330003: 'VK_FORMAT_G16_B16R16_2PLANE_444_UNORM_EXT',
    1000340000: 'VK_FORMAT_A4R4G4B4_UNORM_PACK16_EXT',
    1000340001: 'VK_FORMAT_A4B4G4R4_UNORM_PACK16_EXT',
    2147483647: 'VK_FORMAT_MAX_ENUM',
}
VK_FORMAT_UNDEFINED = 0
VK_FORMAT_R4G4_UNORM_PACK8 = 1
VK_FORMAT_R4G4B4A4_UNORM_PACK16 = 2
VK_FORMAT_B4G4R4A4_UNORM_PACK16 = 3
VK_FORMAT_R5G6B5_UNORM_PACK16 = 4
VK_FORMAT_B5G6R5_UNORM_PACK16 = 5
VK_FORMAT_R5G5B5A1_UNORM_PACK16 = 6
VK_FORMAT_B5G5R5A1_UNORM_PACK16 = 7
VK_FORMAT_A1R5G5B5_UNORM_PACK16 = 8
VK_FORMAT_R8_UNORM = 9
VK_FORMAT_R8_SNORM = 10
VK_FORMAT_R8_USCALED = 11
VK_FORMAT_R8_SSCALED = 12
VK_FORMAT_R8_UINT = 13
VK_FORMAT_R8_SINT = 14
VK_FORMAT_R8_SRGB = 15
VK_FORMAT_R8G8_UNORM = 16
VK_FORMAT_R8G8_SNORM = 17
VK_FORMAT_R8G8_USCALED = 18
VK_FORMAT_R8G8_SSCALED = 19
VK_FORMAT_R8G8_UINT = 20
VK_FORMAT_R8G8_SINT = 21
VK_FORMAT_R8G8_SRGB = 22
VK_FORMAT_R8G8B8_UNORM = 23
VK_FORMAT_R8G8B8_SNORM = 24
VK_FORMAT_R8G8B8_USCALED = 25
VK_FORMAT_R8G8B8_SSCALED = 26
VK_FORMAT_R8G8B8_UINT = 27
VK_FORMAT_R8G8B8_SINT = 28
VK_FORMAT_R8G8B8_SRGB = 29
VK_FORMAT_B8G8R8_UNORM = 30
VK_FORMAT_B8G8R8_SNORM = 31
VK_FORMAT_B8G8R8_USCALED = 32
VK_FORMAT_B8G8R8_SSCALED = 33
VK_FORMAT_B8G8R8_UINT = 34
VK_FORMAT_B8G8R8_SINT = 35
VK_FORMAT_B8G8R8_SRGB = 36
VK_FORMAT_R8G8B8A8_UNORM = 37
VK_FORMAT_R8G8B8A8_SNORM = 38
VK_FORMAT_R8G8B8A8_USCALED = 39
VK_FORMAT_R8G8B8A8_SSCALED = 40
VK_FORMAT_R8G8B8A8_UINT = 41
VK_FORMAT_R8G8B8A8_SINT = 42
VK_FORMAT_R8G8B8A8_SRGB = 43
VK_FORMAT_B8G8R8A8_UNORM = 44
VK_FORMAT_B8G8R8A8_SNORM = 45
VK_FORMAT_B8G8R8A8_USCALED = 46
VK_FORMAT_B8G8R8A8_SSCALED = 47
VK_FORMAT_B8G8R8A8_UINT = 48
VK_FORMAT_B8G8R8A8_SINT = 49
VK_FORMAT_B8G8R8A8_SRGB = 50
VK_FORMAT_A8B8G8R8_UNORM_PACK32 = 51
VK_FORMAT_A8B8G8R8_SNORM_PACK32 = 52
VK_FORMAT_A8B8G8R8_USCALED_PACK32 = 53
VK_FORMAT_A8B8G8R8_SSCALED_PACK32 = 54
VK_FORMAT_A8B8G8R8_UINT_PACK32 = 55
VK_FORMAT_A8B8G8R8_SINT_PACK32 = 56
VK_FORMAT_A8B8G8R8_SRGB_PACK32 = 57
VK_FORMAT_A2R10G10B10_UNORM_PACK32 = 58
VK_FORMAT_A2R10G10B10_SNORM_PACK32 = 59
VK_FORMAT_A2R10G10B10_USCALED_PACK32 = 60
VK_FORMAT_A2R10G10B10_SSCALED_PACK32 = 61
VK_FORMAT_A2R10G10B10_UINT_PACK32 = 62
VK_FORMAT_A2R10G10B10_SINT_PACK32 = 63
VK_FORMAT_A2B10G10R10_UNORM_PACK32 = 64
VK_FORMAT_A2B10G10R10_SNORM_PACK32 = 65
VK_FORMAT_A2B10G10R10_USCALED_PACK32 = 66
VK_FORMAT_A2B10G10R10_SSCALED_PACK32 = 67
VK_FORMAT_A2B10G10R10_UINT_PACK32 = 68
VK_FORMAT_A2B10G10R10_SINT_PACK32 = 69
VK_FORMAT_R16_UNORM = 70
VK_FORMAT_R16_SNORM = 71
VK_FORMAT_R16_USCALED = 72
VK_FORMAT_R16_SSCALED = 73
VK_FORMAT_R16_UINT = 74
VK_FORMAT_R16_SINT = 75
VK_FORMAT_R16_SFLOAT = 76
VK_FORMAT_R16G16_UNORM = 77
VK_FORMAT_R16G16_SNORM = 78
VK_FORMAT_R16G16_USCALED = 79
VK_FORMAT_R16G16_SSCALED = 80
VK_FORMAT_R16G16_UINT = 81
VK_FORMAT_R16G16_SINT = 82
VK_FORMAT_R16G16_SFLOAT = 83
VK_FORMAT_R16G16B16_UNORM = 84
VK_FORMAT_R16G16B16_SNORM = 85
VK_FORMAT_R16G16B16_USCALED = 86
VK_FORMAT_R16G16B16_SSCALED = 87
VK_FORMAT_R16G16B16_UINT = 88
VK_FORMAT_R16G16B16_SINT = 89
VK_FORMAT_R16G16B16_SFLOAT = 90
VK_FORMAT_R16G16B16A16_UNORM = 91
VK_FORMAT_R16G16B16A16_SNORM = 92
VK_FORMAT_R16G16B16A16_USCALED = 93
VK_FORMAT_R16G16B16A16_SSCALED = 94
VK_FORMAT_R16G16B16A16_UINT = 95
VK_FORMAT_R16G16B16A16_SINT = 96
VK_FORMAT_R16G16B16A16_SFLOAT = 97
VK_FORMAT_R32_UINT = 98
VK_FORMAT_R32_SINT = 99
VK_FORMAT_R32_SFLOAT = 100
VK_FORMAT_R32G32_UINT = 101
VK_FORMAT_R32G32_SINT = 102
VK_FORMAT_R32G32_SFLOAT = 103
VK_FORMAT_R32G32B32_UINT = 104
VK_FORMAT_R32G32B32_SINT = 105
VK_FORMAT_R32G32B32_SFLOAT = 106
VK_FORMAT_R32G32B32A32_UINT = 107
VK_FORMAT_R32G32B32A32_SINT = 108
VK_FORMAT_R32G32B32A32_SFLOAT = 109
VK_FORMAT_R64_UINT = 110
VK_FORMAT_R64_SINT = 111
VK_FORMAT_R64_SFLOAT = 112
VK_FORMAT_R64G64_UINT = 113
VK_FORMAT_R64G64_SINT = 114
VK_FORMAT_R64G64_SFLOAT = 115
VK_FORMAT_R64G64B64_UINT = 116
VK_FORMAT_R64G64B64_SINT = 117
VK_FORMAT_R64G64B64_SFLOAT = 118
VK_FORMAT_R64G64B64A64_UINT = 119
VK_FORMAT_R64G64B64A64_SINT = 120
VK_FORMAT_R64G64B64A64_SFLOAT = 121
VK_FORMAT_B10G11R11_UFLOAT_PACK32 = 122
VK_FORMAT_E5B9G9R9_UFLOAT_PACK32 = 123
VK_FORMAT_D16_UNORM = 124
VK_FORMAT_X8_D24_UNORM_PACK32 = 125
VK_FORMAT_D32_SFLOAT = 126
VK_FORMAT_S8_UINT = 127
VK_FORMAT_D16_UNORM_S8_UINT = 128
VK_FORMAT_D24_UNORM_S8_UINT = 129
VK_FORMAT_D32_SFLOAT_S8_UINT = 130
VK_FORMAT_BC1_RGB_UNORM_BLOCK = 131
VK_FORMAT_BC1_RGB_SRGB_BLOCK = 132
VK_FORMAT_BC1_RGBA_UNORM_BLOCK = 133
VK_FORMAT_BC1_RGBA_SRGB_BLOCK = 134
VK_FORMAT_BC2_UNORM_BLOCK = 135
VK_FORMAT_BC2_SRGB_BLOCK = 136
VK_FORMAT_BC3_UNORM_BLOCK = 137
VK_FORMAT_BC3_SRGB_BLOCK = 138
VK_FORMAT_BC4_UNORM_BLOCK = 139
VK_FORMAT_BC4_SNORM_BLOCK = 140
VK_FORMAT_BC5_UNORM_BLOCK = 141
VK_FORMAT_BC5_SNORM_BLOCK = 142
VK_FORMAT_BC6H_UFLOAT_BLOCK = 143
VK_FORMAT_BC6H_SFLOAT_BLOCK = 144
VK_FORMAT_BC7_UNORM_BLOCK = 145
VK_FORMAT_BC7_SRGB_BLOCK = 146
VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK = 147
VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK = 148
VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK = 149
VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK = 150
VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK = 151
VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK = 152
VK_FORMAT_EAC_R11_UNORM_BLOCK = 153
VK_FORMAT_EAC_R11_SNORM_BLOCK = 154
VK_FORMAT_EAC_R11G11_UNORM_BLOCK = 155
VK_FORMAT_EAC_R11G11_SNORM_BLOCK = 156
VK_FORMAT_ASTC_4x4_UNORM_BLOCK = 157
VK_FORMAT_ASTC_4x4_SRGB_BLOCK = 158
VK_FORMAT_ASTC_5x4_UNORM_BLOCK = 159
VK_FORMAT_ASTC_5x4_SRGB_BLOCK = 160
VK_FORMAT_ASTC_5x5_UNORM_BLOCK = 161
VK_FORMAT_ASTC_5x5_SRGB_BLOCK = 162
VK_FORMAT_ASTC_6x5_UNORM_BLOCK = 163
VK_FORMAT_ASTC_6x5_SRGB_BLOCK = 164
VK_FORMAT_ASTC_6x6_UNORM_BLOCK = 165
VK_FORMAT_ASTC_6x6_SRGB_BLOCK = 166
VK_FORMAT_ASTC_8x5_UNORM_BLOCK = 167
VK_FORMAT_ASTC_8x5_SRGB_BLOCK = 168
VK_FORMAT_ASTC_8x6_UNORM_BLOCK = 169
VK_FORMAT_ASTC_8x6_SRGB_BLOCK = 170
VK_FORMAT_ASTC_8x8_UNORM_BLOCK = 171
VK_FORMAT_ASTC_8x8_SRGB_BLOCK = 172
VK_FORMAT_ASTC_10x5_UNORM_BLOCK = 173
VK_FORMAT_ASTC_10x5_SRGB_BLOCK = 174
VK_FORMAT_ASTC_10x6_UNORM_BLOCK = 175
VK_FORMAT_ASTC_10x6_SRGB_BLOCK = 176
VK_FORMAT_ASTC_10x8_UNORM_BLOCK = 177
VK_FORMAT_ASTC_10x8_SRGB_BLOCK = 178
VK_FORMAT_ASTC_10x10_UNORM_BLOCK = 179
VK_FORMAT_ASTC_10x10_SRGB_BLOCK = 180
VK_FORMAT_ASTC_12x10_UNORM_BLOCK = 181
VK_FORMAT_ASTC_12x10_SRGB_BLOCK = 182
VK_FORMAT_ASTC_12x12_UNORM_BLOCK = 183
VK_FORMAT_ASTC_12x12_SRGB_BLOCK = 184
VK_FORMAT_G8B8G8R8_422_UNORM = 1000156000
VK_FORMAT_B8G8R8G8_422_UNORM = 1000156001
VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM = 1000156002
VK_FORMAT_G8_B8R8_2PLANE_420_UNORM = 1000156003
VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM = 1000156004
VK_FORMAT_G8_B8R8_2PLANE_422_UNORM = 1000156005
VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM = 1000156006
VK_FORMAT_R10X6_UNORM_PACK16 = 1000156007
VK_FORMAT_R10X6G10X6_UNORM_2PACK16 = 1000156008
VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16 = 1000156009
VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16 = 1000156010
VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16 = 1000156011
VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16 = 1000156012
VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16 = 1000156013
VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16 = 1000156014
VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16 = 1000156015
VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16 = 1000156016
VK_FORMAT_R12X4_UNORM_PACK16 = 1000156017
VK_FORMAT_R12X4G12X4_UNORM_2PACK16 = 1000156018
VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16 = 1000156019
VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16 = 1000156020
VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16 = 1000156021
VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16 = 1000156022
VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16 = 1000156023
VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16 = 1000156024
VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16 = 1000156025
VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16 = 1000156026
VK_FORMAT_G16B16G16R16_422_UNORM = 1000156027
VK_FORMAT_B16G16R16G16_422_UNORM = 1000156028
VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM = 1000156029
VK_FORMAT_G16_B16R16_2PLANE_420_UNORM = 1000156030
VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM = 1000156031
VK_FORMAT_G16_B16R16_2PLANE_422_UNORM = 1000156032
VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM = 1000156033
VK_FORMAT_G8_B8R8_2PLANE_444_UNORM = 1000330000
VK_FORMAT_G10X6_B10X6R10X6_2PLANE_444_UNORM_3PACK16 = 1000330001
VK_FORMAT_G12X4_B12X4R12X4_2PLANE_444_UNORM_3PACK16 = 1000330002
VK_FORMAT_G16_B16R16_2PLANE_444_UNORM = 1000330003
VK_FORMAT_A4R4G4B4_UNORM_PACK16 = 1000340000
VK_FORMAT_A4B4G4R4_UNORM_PACK16 = 1000340001
VK_FORMAT_ASTC_4x4_SFLOAT_BLOCK = 1000066000
VK_FORMAT_ASTC_5x4_SFLOAT_BLOCK = 1000066001
VK_FORMAT_ASTC_5x5_SFLOAT_BLOCK = 1000066002
VK_FORMAT_ASTC_6x5_SFLOAT_BLOCK = 1000066003
VK_FORMAT_ASTC_6x6_SFLOAT_BLOCK = 1000066004
VK_FORMAT_ASTC_8x5_SFLOAT_BLOCK = 1000066005
VK_FORMAT_ASTC_8x6_SFLOAT_BLOCK = 1000066006
VK_FORMAT_ASTC_8x8_SFLOAT_BLOCK = 1000066007
VK_FORMAT_ASTC_10x5_SFLOAT_BLOCK = 1000066008
VK_FORMAT_ASTC_10x6_SFLOAT_BLOCK = 1000066009
VK_FORMAT_ASTC_10x8_SFLOAT_BLOCK = 1000066010
VK_FORMAT_ASTC_10x10_SFLOAT_BLOCK = 1000066011
VK_FORMAT_ASTC_12x10_SFLOAT_BLOCK = 1000066012
VK_FORMAT_ASTC_12x12_SFLOAT_BLOCK = 1000066013
VK_FORMAT_PVRTC1_2BPP_UNORM_BLOCK_IMG = 1000054000
VK_FORMAT_PVRTC1_4BPP_UNORM_BLOCK_IMG = 1000054001
VK_FORMAT_PVRTC2_2BPP_UNORM_BLOCK_IMG = 1000054002
VK_FORMAT_PVRTC2_4BPP_UNORM_BLOCK_IMG = 1000054003
VK_FORMAT_PVRTC1_2BPP_SRGB_BLOCK_IMG = 1000054004
VK_FORMAT_PVRTC1_4BPP_SRGB_BLOCK_IMG = 1000054005
VK_FORMAT_PVRTC2_2BPP_SRGB_BLOCK_IMG = 1000054006
VK_FORMAT_PVRTC2_4BPP_SRGB_BLOCK_IMG = 1000054007
VK_FORMAT_R16G16_S10_5_NV = 1000464000
VK_FORMAT_A1B5G5R5_UNORM_PACK16_KHR = 1000470000
VK_FORMAT_A8_UNORM_KHR = 1000470001
VK_FORMAT_ASTC_4x4_SFLOAT_BLOCK_EXT = 1000066000
VK_FORMAT_ASTC_5x4_SFLOAT_BLOCK_EXT = 1000066001
VK_FORMAT_ASTC_5x5_SFLOAT_BLOCK_EXT = 1000066002
VK_FORMAT_ASTC_6x5_SFLOAT_BLOCK_EXT = 1000066003
VK_FORMAT_ASTC_6x6_SFLOAT_BLOCK_EXT = 1000066004
VK_FORMAT_ASTC_8x5_SFLOAT_BLOCK_EXT = 1000066005
VK_FORMAT_ASTC_8x6_SFLOAT_BLOCK_EXT = 1000066006
VK_FORMAT_ASTC_8x8_SFLOAT_BLOCK_EXT = 1000066007
VK_FORMAT_ASTC_10x5_SFLOAT_BLOCK_EXT = 1000066008
VK_FORMAT_ASTC_10x6_SFLOAT_BLOCK_EXT = 1000066009
VK_FORMAT_ASTC_10x8_SFLOAT_BLOCK_EXT = 1000066010
VK_FORMAT_ASTC_10x10_SFLOAT_BLOCK_EXT = 1000066011
VK_FORMAT_ASTC_12x10_SFLOAT_BLOCK_EXT = 1000066012
VK_FORMAT_ASTC_12x12_SFLOAT_BLOCK_EXT = 1000066013
VK_FORMAT_G8B8G8R8_422_UNORM_KHR = 1000156000
VK_FORMAT_B8G8R8G8_422_UNORM_KHR = 1000156001
VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM_KHR = 1000156002
VK_FORMAT_G8_B8R8_2PLANE_420_UNORM_KHR = 1000156003
VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM_KHR = 1000156004
VK_FORMAT_G8_B8R8_2PLANE_422_UNORM_KHR = 1000156005
VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM_KHR = 1000156006
VK_FORMAT_R10X6_UNORM_PACK16_KHR = 1000156007
VK_FORMAT_R10X6G10X6_UNORM_2PACK16_KHR = 1000156008
VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16_KHR = 1000156009
VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16_KHR = 1000156010
VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16_KHR = 1000156011
VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16_KHR = 1000156012
VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16_KHR = 1000156013
VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16_KHR = 1000156014
VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16_KHR = 1000156015
VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16_KHR = 1000156016
VK_FORMAT_R12X4_UNORM_PACK16_KHR = 1000156017
VK_FORMAT_R12X4G12X4_UNORM_2PACK16_KHR = 1000156018
VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16_KHR = 1000156019
VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16_KHR = 1000156020
VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16_KHR = 1000156021
VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16_KHR = 1000156022
VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16_KHR = 1000156023
VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16_KHR = 1000156024
VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16_KHR = 1000156025
VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16_KHR = 1000156026
VK_FORMAT_G16B16G16R16_422_UNORM_KHR = 1000156027
VK_FORMAT_B16G16R16G16_422_UNORM_KHR = 1000156028
VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM_KHR = 1000156029
VK_FORMAT_G16_B16R16_2PLANE_420_UNORM_KHR = 1000156030
VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM_KHR = 1000156031
VK_FORMAT_G16_B16R16_2PLANE_422_UNORM_KHR = 1000156032
VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM_KHR = 1000156033
VK_FORMAT_G8_B8R8_2PLANE_444_UNORM_EXT = 1000330000
VK_FORMAT_G10X6_B10X6R10X6_2PLANE_444_UNORM_3PACK16_EXT = 1000330001
VK_FORMAT_G12X4_B12X4R12X4_2PLANE_444_UNORM_3PACK16_EXT = 1000330002
VK_FORMAT_G16_B16R16_2PLANE_444_UNORM_EXT = 1000330003
VK_FORMAT_A4R4G4B4_UNORM_PACK16_EXT = 1000340000
VK_FORMAT_A4B4G4R4_UNORM_PACK16_EXT = 1000340001
VK_FORMAT_MAX_ENUM = 2147483647
VkFormat = ctypes.c_uint32 # enum

# values for enumeration 'VkImageTiling'
VkImageTiling__enumvalues = {
    0: 'VK_IMAGE_TILING_OPTIMAL',
    1: 'VK_IMAGE_TILING_LINEAR',
    1000158000: 'VK_IMAGE_TILING_DRM_FORMAT_MODIFIER_EXT',
    2147483647: 'VK_IMAGE_TILING_MAX_ENUM',
}
VK_IMAGE_TILING_OPTIMAL = 0
VK_IMAGE_TILING_LINEAR = 1
VK_IMAGE_TILING_DRM_FORMAT_MODIFIER_EXT = 1000158000
VK_IMAGE_TILING_MAX_ENUM = 2147483647
VkImageTiling = ctypes.c_uint32 # enum

# values for enumeration 'VkImageType'
VkImageType__enumvalues = {
    0: 'VK_IMAGE_TYPE_1D',
    1: 'VK_IMAGE_TYPE_2D',
    2: 'VK_IMAGE_TYPE_3D',
    2147483647: 'VK_IMAGE_TYPE_MAX_ENUM',
}
VK_IMAGE_TYPE_1D = 0
VK_IMAGE_TYPE_2D = 1
VK_IMAGE_TYPE_3D = 2
VK_IMAGE_TYPE_MAX_ENUM = 2147483647
VkImageType = ctypes.c_uint32 # enum

# values for enumeration 'VkPhysicalDeviceType'
VkPhysicalDeviceType__enumvalues = {
    0: 'VK_PHYSICAL_DEVICE_TYPE_OTHER',
    1: 'VK_PHYSICAL_DEVICE_TYPE_INTEGRATED_GPU',
    2: 'VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU',
    3: 'VK_PHYSICAL_DEVICE_TYPE_VIRTUAL_GPU',
    4: 'VK_PHYSICAL_DEVICE_TYPE_CPU',
    2147483647: 'VK_PHYSICAL_DEVICE_TYPE_MAX_ENUM',
}
VK_PHYSICAL_DEVICE_TYPE_OTHER = 0
VK_PHYSICAL_DEVICE_TYPE_INTEGRATED_GPU = 1
VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU = 2
VK_PHYSICAL_DEVICE_TYPE_VIRTUAL_GPU = 3
VK_PHYSICAL_DEVICE_TYPE_CPU = 4
VK_PHYSICAL_DEVICE_TYPE_MAX_ENUM = 2147483647
VkPhysicalDeviceType = ctypes.c_uint32 # enum

# values for enumeration 'VkQueryType'
VkQueryType__enumvalues = {
    0: 'VK_QUERY_TYPE_OCCLUSION',
    1: 'VK_QUERY_TYPE_PIPELINE_STATISTICS',
    2: 'VK_QUERY_TYPE_TIMESTAMP',
    1000023000: 'VK_QUERY_TYPE_RESULT_STATUS_ONLY_KHR',
    1000028004: 'VK_QUERY_TYPE_TRANSFORM_FEEDBACK_STREAM_EXT',
    1000116000: 'VK_QUERY_TYPE_PERFORMANCE_QUERY_KHR',
    1000150000: 'VK_QUERY_TYPE_ACCELERATION_STRUCTURE_COMPACTED_SIZE_KHR',
    1000150001: 'VK_QUERY_TYPE_ACCELERATION_STRUCTURE_SERIALIZATION_SIZE_KHR',
    1000165000: 'VK_QUERY_TYPE_ACCELERATION_STRUCTURE_COMPACTED_SIZE_NV',
    1000210000: 'VK_QUERY_TYPE_PERFORMANCE_QUERY_INTEL',
    1000299000: 'VK_QUERY_TYPE_VIDEO_ENCODE_FEEDBACK_KHR',
    1000328000: 'VK_QUERY_TYPE_MESH_PRIMITIVES_GENERATED_EXT',
    1000382000: 'VK_QUERY_TYPE_PRIMITIVES_GENERATED_EXT',
    1000386000: 'VK_QUERY_TYPE_ACCELERATION_STRUCTURE_SERIALIZATION_BOTTOM_LEVEL_POINTERS_KHR',
    1000386001: 'VK_QUERY_TYPE_ACCELERATION_STRUCTURE_SIZE_KHR',
    1000396000: 'VK_QUERY_TYPE_MICROMAP_SERIALIZATION_SIZE_EXT',
    1000396001: 'VK_QUERY_TYPE_MICROMAP_COMPACTED_SIZE_EXT',
    2147483647: 'VK_QUERY_TYPE_MAX_ENUM',
}
VK_QUERY_TYPE_OCCLUSION = 0
VK_QUERY_TYPE_PIPELINE_STATISTICS = 1
VK_QUERY_TYPE_TIMESTAMP = 2
VK_QUERY_TYPE_RESULT_STATUS_ONLY_KHR = 1000023000
VK_QUERY_TYPE_TRANSFORM_FEEDBACK_STREAM_EXT = 1000028004
VK_QUERY_TYPE_PERFORMANCE_QUERY_KHR = 1000116000
VK_QUERY_TYPE_ACCELERATION_STRUCTURE_COMPACTED_SIZE_KHR = 1000150000
VK_QUERY_TYPE_ACCELERATION_STRUCTURE_SERIALIZATION_SIZE_KHR = 1000150001
VK_QUERY_TYPE_ACCELERATION_STRUCTURE_COMPACTED_SIZE_NV = 1000165000
VK_QUERY_TYPE_PERFORMANCE_QUERY_INTEL = 1000210000
VK_QUERY_TYPE_VIDEO_ENCODE_FEEDBACK_KHR = 1000299000
VK_QUERY_TYPE_MESH_PRIMITIVES_GENERATED_EXT = 1000328000
VK_QUERY_TYPE_PRIMITIVES_GENERATED_EXT = 1000382000
VK_QUERY_TYPE_ACCELERATION_STRUCTURE_SERIALIZATION_BOTTOM_LEVEL_POINTERS_KHR = 1000386000
VK_QUERY_TYPE_ACCELERATION_STRUCTURE_SIZE_KHR = 1000386001
VK_QUERY_TYPE_MICROMAP_SERIALIZATION_SIZE_EXT = 1000396000
VK_QUERY_TYPE_MICROMAP_COMPACTED_SIZE_EXT = 1000396001
VK_QUERY_TYPE_MAX_ENUM = 2147483647
VkQueryType = ctypes.c_uint32 # enum

# values for enumeration 'VkSharingMode'
VkSharingMode__enumvalues = {
    0: 'VK_SHARING_MODE_EXCLUSIVE',
    1: 'VK_SHARING_MODE_CONCURRENT',
    2147483647: 'VK_SHARING_MODE_MAX_ENUM',
}
VK_SHARING_MODE_EXCLUSIVE = 0
VK_SHARING_MODE_CONCURRENT = 1
VK_SHARING_MODE_MAX_ENUM = 2147483647
VkSharingMode = ctypes.c_uint32 # enum

# values for enumeration 'VkComponentSwizzle'
VkComponentSwizzle__enumvalues = {
    0: 'VK_COMPONENT_SWIZZLE_IDENTITY',
    1: 'VK_COMPONENT_SWIZZLE_ZERO',
    2: 'VK_COMPONENT_SWIZZLE_ONE',
    3: 'VK_COMPONENT_SWIZZLE_R',
    4: 'VK_COMPONENT_SWIZZLE_G',
    5: 'VK_COMPONENT_SWIZZLE_B',
    6: 'VK_COMPONENT_SWIZZLE_A',
    2147483647: 'VK_COMPONENT_SWIZZLE_MAX_ENUM',
}
VK_COMPONENT_SWIZZLE_IDENTITY = 0
VK_COMPONENT_SWIZZLE_ZERO = 1
VK_COMPONENT_SWIZZLE_ONE = 2
VK_COMPONENT_SWIZZLE_R = 3
VK_COMPONENT_SWIZZLE_G = 4
VK_COMPONENT_SWIZZLE_B = 5
VK_COMPONENT_SWIZZLE_A = 6
VK_COMPONENT_SWIZZLE_MAX_ENUM = 2147483647
VkComponentSwizzle = ctypes.c_uint32 # enum

# values for enumeration 'VkImageViewType'
VkImageViewType__enumvalues = {
    0: 'VK_IMAGE_VIEW_TYPE_1D',
    1: 'VK_IMAGE_VIEW_TYPE_2D',
    2: 'VK_IMAGE_VIEW_TYPE_3D',
    3: 'VK_IMAGE_VIEW_TYPE_CUBE',
    4: 'VK_IMAGE_VIEW_TYPE_1D_ARRAY',
    5: 'VK_IMAGE_VIEW_TYPE_2D_ARRAY',
    6: 'VK_IMAGE_VIEW_TYPE_CUBE_ARRAY',
    2147483647: 'VK_IMAGE_VIEW_TYPE_MAX_ENUM',
}
VK_IMAGE_VIEW_TYPE_1D = 0
VK_IMAGE_VIEW_TYPE_2D = 1
VK_IMAGE_VIEW_TYPE_3D = 2
VK_IMAGE_VIEW_TYPE_CUBE = 3
VK_IMAGE_VIEW_TYPE_1D_ARRAY = 4
VK_IMAGE_VIEW_TYPE_2D_ARRAY = 5
VK_IMAGE_VIEW_TYPE_CUBE_ARRAY = 6
VK_IMAGE_VIEW_TYPE_MAX_ENUM = 2147483647
VkImageViewType = ctypes.c_uint32 # enum

# values for enumeration 'VkBlendFactor'
VkBlendFactor__enumvalues = {
    0: 'VK_BLEND_FACTOR_ZERO',
    1: 'VK_BLEND_FACTOR_ONE',
    2: 'VK_BLEND_FACTOR_SRC_COLOR',
    3: 'VK_BLEND_FACTOR_ONE_MINUS_SRC_COLOR',
    4: 'VK_BLEND_FACTOR_DST_COLOR',
    5: 'VK_BLEND_FACTOR_ONE_MINUS_DST_COLOR',
    6: 'VK_BLEND_FACTOR_SRC_ALPHA',
    7: 'VK_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA',
    8: 'VK_BLEND_FACTOR_DST_ALPHA',
    9: 'VK_BLEND_FACTOR_ONE_MINUS_DST_ALPHA',
    10: 'VK_BLEND_FACTOR_CONSTANT_COLOR',
    11: 'VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_COLOR',
    12: 'VK_BLEND_FACTOR_CONSTANT_ALPHA',
    13: 'VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_ALPHA',
    14: 'VK_BLEND_FACTOR_SRC_ALPHA_SATURATE',
    15: 'VK_BLEND_FACTOR_SRC1_COLOR',
    16: 'VK_BLEND_FACTOR_ONE_MINUS_SRC1_COLOR',
    17: 'VK_BLEND_FACTOR_SRC1_ALPHA',
    18: 'VK_BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA',
    2147483647: 'VK_BLEND_FACTOR_MAX_ENUM',
}
VK_BLEND_FACTOR_ZERO = 0
VK_BLEND_FACTOR_ONE = 1
VK_BLEND_FACTOR_SRC_COLOR = 2
VK_BLEND_FACTOR_ONE_MINUS_SRC_COLOR = 3
VK_BLEND_FACTOR_DST_COLOR = 4
VK_BLEND_FACTOR_ONE_MINUS_DST_COLOR = 5
VK_BLEND_FACTOR_SRC_ALPHA = 6
VK_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA = 7
VK_BLEND_FACTOR_DST_ALPHA = 8
VK_BLEND_FACTOR_ONE_MINUS_DST_ALPHA = 9
VK_BLEND_FACTOR_CONSTANT_COLOR = 10
VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_COLOR = 11
VK_BLEND_FACTOR_CONSTANT_ALPHA = 12
VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_ALPHA = 13
VK_BLEND_FACTOR_SRC_ALPHA_SATURATE = 14
VK_BLEND_FACTOR_SRC1_COLOR = 15
VK_BLEND_FACTOR_ONE_MINUS_SRC1_COLOR = 16
VK_BLEND_FACTOR_SRC1_ALPHA = 17
VK_BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA = 18
VK_BLEND_FACTOR_MAX_ENUM = 2147483647
VkBlendFactor = ctypes.c_uint32 # enum

# values for enumeration 'VkBlendOp'
VkBlendOp__enumvalues = {
    0: 'VK_BLEND_OP_ADD',
    1: 'VK_BLEND_OP_SUBTRACT',
    2: 'VK_BLEND_OP_REVERSE_SUBTRACT',
    3: 'VK_BLEND_OP_MIN',
    4: 'VK_BLEND_OP_MAX',
    1000148000: 'VK_BLEND_OP_ZERO_EXT',
    1000148001: 'VK_BLEND_OP_SRC_EXT',
    1000148002: 'VK_BLEND_OP_DST_EXT',
    1000148003: 'VK_BLEND_OP_SRC_OVER_EXT',
    1000148004: 'VK_BLEND_OP_DST_OVER_EXT',
    1000148005: 'VK_BLEND_OP_SRC_IN_EXT',
    1000148006: 'VK_BLEND_OP_DST_IN_EXT',
    1000148007: 'VK_BLEND_OP_SRC_OUT_EXT',
    1000148008: 'VK_BLEND_OP_DST_OUT_EXT',
    1000148009: 'VK_BLEND_OP_SRC_ATOP_EXT',
    1000148010: 'VK_BLEND_OP_DST_ATOP_EXT',
    1000148011: 'VK_BLEND_OP_XOR_EXT',
    1000148012: 'VK_BLEND_OP_MULTIPLY_EXT',
    1000148013: 'VK_BLEND_OP_SCREEN_EXT',
    1000148014: 'VK_BLEND_OP_OVERLAY_EXT',
    1000148015: 'VK_BLEND_OP_DARKEN_EXT',
    1000148016: 'VK_BLEND_OP_LIGHTEN_EXT',
    1000148017: 'VK_BLEND_OP_COLORDODGE_EXT',
    1000148018: 'VK_BLEND_OP_COLORBURN_EXT',
    1000148019: 'VK_BLEND_OP_HARDLIGHT_EXT',
    1000148020: 'VK_BLEND_OP_SOFTLIGHT_EXT',
    1000148021: 'VK_BLEND_OP_DIFFERENCE_EXT',
    1000148022: 'VK_BLEND_OP_EXCLUSION_EXT',
    1000148023: 'VK_BLEND_OP_INVERT_EXT',
    1000148024: 'VK_BLEND_OP_INVERT_RGB_EXT',
    1000148025: 'VK_BLEND_OP_LINEARDODGE_EXT',
    1000148026: 'VK_BLEND_OP_LINEARBURN_EXT',
    1000148027: 'VK_BLEND_OP_VIVIDLIGHT_EXT',
    1000148028: 'VK_BLEND_OP_LINEARLIGHT_EXT',
    1000148029: 'VK_BLEND_OP_PINLIGHT_EXT',
    1000148030: 'VK_BLEND_OP_HARDMIX_EXT',
    1000148031: 'VK_BLEND_OP_HSL_HUE_EXT',
    1000148032: 'VK_BLEND_OP_HSL_SATURATION_EXT',
    1000148033: 'VK_BLEND_OP_HSL_COLOR_EXT',
    1000148034: 'VK_BLEND_OP_HSL_LUMINOSITY_EXT',
    1000148035: 'VK_BLEND_OP_PLUS_EXT',
    1000148036: 'VK_BLEND_OP_PLUS_CLAMPED_EXT',
    1000148037: 'VK_BLEND_OP_PLUS_CLAMPED_ALPHA_EXT',
    1000148038: 'VK_BLEND_OP_PLUS_DARKER_EXT',
    1000148039: 'VK_BLEND_OP_MINUS_EXT',
    1000148040: 'VK_BLEND_OP_MINUS_CLAMPED_EXT',
    1000148041: 'VK_BLEND_OP_CONTRAST_EXT',
    1000148042: 'VK_BLEND_OP_INVERT_OVG_EXT',
    1000148043: 'VK_BLEND_OP_RED_EXT',
    1000148044: 'VK_BLEND_OP_GREEN_EXT',
    1000148045: 'VK_BLEND_OP_BLUE_EXT',
    2147483647: 'VK_BLEND_OP_MAX_ENUM',
}
VK_BLEND_OP_ADD = 0
VK_BLEND_OP_SUBTRACT = 1
VK_BLEND_OP_REVERSE_SUBTRACT = 2
VK_BLEND_OP_MIN = 3
VK_BLEND_OP_MAX = 4
VK_BLEND_OP_ZERO_EXT = 1000148000
VK_BLEND_OP_SRC_EXT = 1000148001
VK_BLEND_OP_DST_EXT = 1000148002
VK_BLEND_OP_SRC_OVER_EXT = 1000148003
VK_BLEND_OP_DST_OVER_EXT = 1000148004
VK_BLEND_OP_SRC_IN_EXT = 1000148005
VK_BLEND_OP_DST_IN_EXT = 1000148006
VK_BLEND_OP_SRC_OUT_EXT = 1000148007
VK_BLEND_OP_DST_OUT_EXT = 1000148008
VK_BLEND_OP_SRC_ATOP_EXT = 1000148009
VK_BLEND_OP_DST_ATOP_EXT = 1000148010
VK_BLEND_OP_XOR_EXT = 1000148011
VK_BLEND_OP_MULTIPLY_EXT = 1000148012
VK_BLEND_OP_SCREEN_EXT = 1000148013
VK_BLEND_OP_OVERLAY_EXT = 1000148014
VK_BLEND_OP_DARKEN_EXT = 1000148015
VK_BLEND_OP_LIGHTEN_EXT = 1000148016
VK_BLEND_OP_COLORDODGE_EXT = 1000148017
VK_BLEND_OP_COLORBURN_EXT = 1000148018
VK_BLEND_OP_HARDLIGHT_EXT = 1000148019
VK_BLEND_OP_SOFTLIGHT_EXT = 1000148020
VK_BLEND_OP_DIFFERENCE_EXT = 1000148021
VK_BLEND_OP_EXCLUSION_EXT = 1000148022
VK_BLEND_OP_INVERT_EXT = 1000148023
VK_BLEND_OP_INVERT_RGB_EXT = 1000148024
VK_BLEND_OP_LINEARDODGE_EXT = 1000148025
VK_BLEND_OP_LINEARBURN_EXT = 1000148026
VK_BLEND_OP_VIVIDLIGHT_EXT = 1000148027
VK_BLEND_OP_LINEARLIGHT_EXT = 1000148028
VK_BLEND_OP_PINLIGHT_EXT = 1000148029
VK_BLEND_OP_HARDMIX_EXT = 1000148030
VK_BLEND_OP_HSL_HUE_EXT = 1000148031
VK_BLEND_OP_HSL_SATURATION_EXT = 1000148032
VK_BLEND_OP_HSL_COLOR_EXT = 1000148033
VK_BLEND_OP_HSL_LUMINOSITY_EXT = 1000148034
VK_BLEND_OP_PLUS_EXT = 1000148035
VK_BLEND_OP_PLUS_CLAMPED_EXT = 1000148036
VK_BLEND_OP_PLUS_CLAMPED_ALPHA_EXT = 1000148037
VK_BLEND_OP_PLUS_DARKER_EXT = 1000148038
VK_BLEND_OP_MINUS_EXT = 1000148039
VK_BLEND_OP_MINUS_CLAMPED_EXT = 1000148040
VK_BLEND_OP_CONTRAST_EXT = 1000148041
VK_BLEND_OP_INVERT_OVG_EXT = 1000148042
VK_BLEND_OP_RED_EXT = 1000148043
VK_BLEND_OP_GREEN_EXT = 1000148044
VK_BLEND_OP_BLUE_EXT = 1000148045
VK_BLEND_OP_MAX_ENUM = 2147483647
VkBlendOp = ctypes.c_uint32 # enum

# values for enumeration 'VkCompareOp'
VkCompareOp__enumvalues = {
    0: 'VK_COMPARE_OP_NEVER',
    1: 'VK_COMPARE_OP_LESS',
    2: 'VK_COMPARE_OP_EQUAL',
    3: 'VK_COMPARE_OP_LESS_OR_EQUAL',
    4: 'VK_COMPARE_OP_GREATER',
    5: 'VK_COMPARE_OP_NOT_EQUAL',
    6: 'VK_COMPARE_OP_GREATER_OR_EQUAL',
    7: 'VK_COMPARE_OP_ALWAYS',
    2147483647: 'VK_COMPARE_OP_MAX_ENUM',
}
VK_COMPARE_OP_NEVER = 0
VK_COMPARE_OP_LESS = 1
VK_COMPARE_OP_EQUAL = 2
VK_COMPARE_OP_LESS_OR_EQUAL = 3
VK_COMPARE_OP_GREATER = 4
VK_COMPARE_OP_NOT_EQUAL = 5
VK_COMPARE_OP_GREATER_OR_EQUAL = 6
VK_COMPARE_OP_ALWAYS = 7
VK_COMPARE_OP_MAX_ENUM = 2147483647
VkCompareOp = ctypes.c_uint32 # enum

# values for enumeration 'VkDynamicState'
VkDynamicState__enumvalues = {
    0: 'VK_DYNAMIC_STATE_VIEWPORT',
    1: 'VK_DYNAMIC_STATE_SCISSOR',
    2: 'VK_DYNAMIC_STATE_LINE_WIDTH',
    3: 'VK_DYNAMIC_STATE_DEPTH_BIAS',
    4: 'VK_DYNAMIC_STATE_BLEND_CONSTANTS',
    5: 'VK_DYNAMIC_STATE_DEPTH_BOUNDS',
    6: 'VK_DYNAMIC_STATE_STENCIL_COMPARE_MASK',
    7: 'VK_DYNAMIC_STATE_STENCIL_WRITE_MASK',
    8: 'VK_DYNAMIC_STATE_STENCIL_REFERENCE',
    1000267000: 'VK_DYNAMIC_STATE_CULL_MODE',
    1000267001: 'VK_DYNAMIC_STATE_FRONT_FACE',
    1000267002: 'VK_DYNAMIC_STATE_PRIMITIVE_TOPOLOGY',
    1000267003: 'VK_DYNAMIC_STATE_VIEWPORT_WITH_COUNT',
    1000267004: 'VK_DYNAMIC_STATE_SCISSOR_WITH_COUNT',
    1000267005: 'VK_DYNAMIC_STATE_VERTEX_INPUT_BINDING_STRIDE',
    1000267006: 'VK_DYNAMIC_STATE_DEPTH_TEST_ENABLE',
    1000267007: 'VK_DYNAMIC_STATE_DEPTH_WRITE_ENABLE',
    1000267008: 'VK_DYNAMIC_STATE_DEPTH_COMPARE_OP',
    1000267009: 'VK_DYNAMIC_STATE_DEPTH_BOUNDS_TEST_ENABLE',
    1000267010: 'VK_DYNAMIC_STATE_STENCIL_TEST_ENABLE',
    1000267011: 'VK_DYNAMIC_STATE_STENCIL_OP',
    1000377001: 'VK_DYNAMIC_STATE_RASTERIZER_DISCARD_ENABLE',
    1000377002: 'VK_DYNAMIC_STATE_DEPTH_BIAS_ENABLE',
    1000377004: 'VK_DYNAMIC_STATE_PRIMITIVE_RESTART_ENABLE',
    1000087000: 'VK_DYNAMIC_STATE_VIEWPORT_W_SCALING_NV',
    1000099000: 'VK_DYNAMIC_STATE_DISCARD_RECTANGLE_EXT',
    1000099001: 'VK_DYNAMIC_STATE_DISCARD_RECTANGLE_ENABLE_EXT',
    1000099002: 'VK_DYNAMIC_STATE_DISCARD_RECTANGLE_MODE_EXT',
    1000143000: 'VK_DYNAMIC_STATE_SAMPLE_LOCATIONS_EXT',
    1000347000: 'VK_DYNAMIC_STATE_RAY_TRACING_PIPELINE_STACK_SIZE_KHR',
    1000164004: 'VK_DYNAMIC_STATE_VIEWPORT_SHADING_RATE_PALETTE_NV',
    1000164006: 'VK_DYNAMIC_STATE_VIEWPORT_COARSE_SAMPLE_ORDER_NV',
    1000205000: 'VK_DYNAMIC_STATE_EXCLUSIVE_SCISSOR_ENABLE_NV',
    1000205001: 'VK_DYNAMIC_STATE_EXCLUSIVE_SCISSOR_NV',
    1000226000: 'VK_DYNAMIC_STATE_FRAGMENT_SHADING_RATE_KHR',
    1000259000: 'VK_DYNAMIC_STATE_LINE_STIPPLE_EXT',
    1000352000: 'VK_DYNAMIC_STATE_VERTEX_INPUT_EXT',
    1000377000: 'VK_DYNAMIC_STATE_PATCH_CONTROL_POINTS_EXT',
    1000377003: 'VK_DYNAMIC_STATE_LOGIC_OP_EXT',
    1000381000: 'VK_DYNAMIC_STATE_COLOR_WRITE_ENABLE_EXT',
    1000455002: 'VK_DYNAMIC_STATE_TESSELLATION_DOMAIN_ORIGIN_EXT',
    1000455003: 'VK_DYNAMIC_STATE_DEPTH_CLAMP_ENABLE_EXT',
    1000455004: 'VK_DYNAMIC_STATE_POLYGON_MODE_EXT',
    1000455005: 'VK_DYNAMIC_STATE_RASTERIZATION_SAMPLES_EXT',
    1000455006: 'VK_DYNAMIC_STATE_SAMPLE_MASK_EXT',
    1000455007: 'VK_DYNAMIC_STATE_ALPHA_TO_COVERAGE_ENABLE_EXT',
    1000455008: 'VK_DYNAMIC_STATE_ALPHA_TO_ONE_ENABLE_EXT',
    1000455009: 'VK_DYNAMIC_STATE_LOGIC_OP_ENABLE_EXT',
    1000455010: 'VK_DYNAMIC_STATE_COLOR_BLEND_ENABLE_EXT',
    1000455011: 'VK_DYNAMIC_STATE_COLOR_BLEND_EQUATION_EXT',
    1000455012: 'VK_DYNAMIC_STATE_COLOR_WRITE_MASK_EXT',
    1000455013: 'VK_DYNAMIC_STATE_RASTERIZATION_STREAM_EXT',
    1000455014: 'VK_DYNAMIC_STATE_CONSERVATIVE_RASTERIZATION_MODE_EXT',
    1000455015: 'VK_DYNAMIC_STATE_EXTRA_PRIMITIVE_OVERESTIMATION_SIZE_EXT',
    1000455016: 'VK_DYNAMIC_STATE_DEPTH_CLIP_ENABLE_EXT',
    1000455017: 'VK_DYNAMIC_STATE_SAMPLE_LOCATIONS_ENABLE_EXT',
    1000455018: 'VK_DYNAMIC_STATE_COLOR_BLEND_ADVANCED_EXT',
    1000455019: 'VK_DYNAMIC_STATE_PROVOKING_VERTEX_MODE_EXT',
    1000455020: 'VK_DYNAMIC_STATE_LINE_RASTERIZATION_MODE_EXT',
    1000455021: 'VK_DYNAMIC_STATE_LINE_STIPPLE_ENABLE_EXT',
    1000455022: 'VK_DYNAMIC_STATE_DEPTH_CLIP_NEGATIVE_ONE_TO_ONE_EXT',
    1000455023: 'VK_DYNAMIC_STATE_VIEWPORT_W_SCALING_ENABLE_NV',
    1000455024: 'VK_DYNAMIC_STATE_VIEWPORT_SWIZZLE_NV',
    1000455025: 'VK_DYNAMIC_STATE_COVERAGE_TO_COLOR_ENABLE_NV',
    1000455026: 'VK_DYNAMIC_STATE_COVERAGE_TO_COLOR_LOCATION_NV',
    1000455027: 'VK_DYNAMIC_STATE_COVERAGE_MODULATION_MODE_NV',
    1000455028: 'VK_DYNAMIC_STATE_COVERAGE_MODULATION_TABLE_ENABLE_NV',
    1000455029: 'VK_DYNAMIC_STATE_COVERAGE_MODULATION_TABLE_NV',
    1000455030: 'VK_DYNAMIC_STATE_SHADING_RATE_IMAGE_ENABLE_NV',
    1000455031: 'VK_DYNAMIC_STATE_REPRESENTATIVE_FRAGMENT_TEST_ENABLE_NV',
    1000455032: 'VK_DYNAMIC_STATE_COVERAGE_REDUCTION_MODE_NV',
    1000524000: 'VK_DYNAMIC_STATE_ATTACHMENT_FEEDBACK_LOOP_ENABLE_EXT',
    1000267000: 'VK_DYNAMIC_STATE_CULL_MODE_EXT',
    1000267001: 'VK_DYNAMIC_STATE_FRONT_FACE_EXT',
    1000267002: 'VK_DYNAMIC_STATE_PRIMITIVE_TOPOLOGY_EXT',
    1000267003: 'VK_DYNAMIC_STATE_VIEWPORT_WITH_COUNT_EXT',
    1000267004: 'VK_DYNAMIC_STATE_SCISSOR_WITH_COUNT_EXT',
    1000267005: 'VK_DYNAMIC_STATE_VERTEX_INPUT_BINDING_STRIDE_EXT',
    1000267006: 'VK_DYNAMIC_STATE_DEPTH_TEST_ENABLE_EXT',
    1000267007: 'VK_DYNAMIC_STATE_DEPTH_WRITE_ENABLE_EXT',
    1000267008: 'VK_DYNAMIC_STATE_DEPTH_COMPARE_OP_EXT',
    1000267009: 'VK_DYNAMIC_STATE_DEPTH_BOUNDS_TEST_ENABLE_EXT',
    1000267010: 'VK_DYNAMIC_STATE_STENCIL_TEST_ENABLE_EXT',
    1000267011: 'VK_DYNAMIC_STATE_STENCIL_OP_EXT',
    1000377001: 'VK_DYNAMIC_STATE_RASTERIZER_DISCARD_ENABLE_EXT',
    1000377002: 'VK_DYNAMIC_STATE_DEPTH_BIAS_ENABLE_EXT',
    1000377004: 'VK_DYNAMIC_STATE_PRIMITIVE_RESTART_ENABLE_EXT',
    2147483647: 'VK_DYNAMIC_STATE_MAX_ENUM',
}
VK_DYNAMIC_STATE_VIEWPORT = 0
VK_DYNAMIC_STATE_SCISSOR = 1
VK_DYNAMIC_STATE_LINE_WIDTH = 2
VK_DYNAMIC_STATE_DEPTH_BIAS = 3
VK_DYNAMIC_STATE_BLEND_CONSTANTS = 4
VK_DYNAMIC_STATE_DEPTH_BOUNDS = 5
VK_DYNAMIC_STATE_STENCIL_COMPARE_MASK = 6
VK_DYNAMIC_STATE_STENCIL_WRITE_MASK = 7
VK_DYNAMIC_STATE_STENCIL_REFERENCE = 8
VK_DYNAMIC_STATE_CULL_MODE = 1000267000
VK_DYNAMIC_STATE_FRONT_FACE = 1000267001
VK_DYNAMIC_STATE_PRIMITIVE_TOPOLOGY = 1000267002
VK_DYNAMIC_STATE_VIEWPORT_WITH_COUNT = 1000267003
VK_DYNAMIC_STATE_SCISSOR_WITH_COUNT = 1000267004
VK_DYNAMIC_STATE_VERTEX_INPUT_BINDING_STRIDE = 1000267005
VK_DYNAMIC_STATE_DEPTH_TEST_ENABLE = 1000267006
VK_DYNAMIC_STATE_DEPTH_WRITE_ENABLE = 1000267007
VK_DYNAMIC_STATE_DEPTH_COMPARE_OP = 1000267008
VK_DYNAMIC_STATE_DEPTH_BOUNDS_TEST_ENABLE = 1000267009
VK_DYNAMIC_STATE_STENCIL_TEST_ENABLE = 1000267010
VK_DYNAMIC_STATE_STENCIL_OP = 1000267011
VK_DYNAMIC_STATE_RASTERIZER_DISCARD_ENABLE = 1000377001
VK_DYNAMIC_STATE_DEPTH_BIAS_ENABLE = 1000377002
VK_DYNAMIC_STATE_PRIMITIVE_RESTART_ENABLE = 1000377004
VK_DYNAMIC_STATE_VIEWPORT_W_SCALING_NV = 1000087000
VK_DYNAMIC_STATE_DISCARD_RECTANGLE_EXT = 1000099000
VK_DYNAMIC_STATE_DISCARD_RECTANGLE_ENABLE_EXT = 1000099001
VK_DYNAMIC_STATE_DISCARD_RECTANGLE_MODE_EXT = 1000099002
VK_DYNAMIC_STATE_SAMPLE_LOCATIONS_EXT = 1000143000
VK_DYNAMIC_STATE_RAY_TRACING_PIPELINE_STACK_SIZE_KHR = 1000347000
VK_DYNAMIC_STATE_VIEWPORT_SHADING_RATE_PALETTE_NV = 1000164004
VK_DYNAMIC_STATE_VIEWPORT_COARSE_SAMPLE_ORDER_NV = 1000164006
VK_DYNAMIC_STATE_EXCLUSIVE_SCISSOR_ENABLE_NV = 1000205000
VK_DYNAMIC_STATE_EXCLUSIVE_SCISSOR_NV = 1000205001
VK_DYNAMIC_STATE_FRAGMENT_SHADING_RATE_KHR = 1000226000
VK_DYNAMIC_STATE_LINE_STIPPLE_EXT = 1000259000
VK_DYNAMIC_STATE_VERTEX_INPUT_EXT = 1000352000
VK_DYNAMIC_STATE_PATCH_CONTROL_POINTS_EXT = 1000377000
VK_DYNAMIC_STATE_LOGIC_OP_EXT = 1000377003
VK_DYNAMIC_STATE_COLOR_WRITE_ENABLE_EXT = 1000381000
VK_DYNAMIC_STATE_TESSELLATION_DOMAIN_ORIGIN_EXT = 1000455002
VK_DYNAMIC_STATE_DEPTH_CLAMP_ENABLE_EXT = 1000455003
VK_DYNAMIC_STATE_POLYGON_MODE_EXT = 1000455004
VK_DYNAMIC_STATE_RASTERIZATION_SAMPLES_EXT = 1000455005
VK_DYNAMIC_STATE_SAMPLE_MASK_EXT = 1000455006
VK_DYNAMIC_STATE_ALPHA_TO_COVERAGE_ENABLE_EXT = 1000455007
VK_DYNAMIC_STATE_ALPHA_TO_ONE_ENABLE_EXT = 1000455008
VK_DYNAMIC_STATE_LOGIC_OP_ENABLE_EXT = 1000455009
VK_DYNAMIC_STATE_COLOR_BLEND_ENABLE_EXT = 1000455010
VK_DYNAMIC_STATE_COLOR_BLEND_EQUATION_EXT = 1000455011
VK_DYNAMIC_STATE_COLOR_WRITE_MASK_EXT = 1000455012
VK_DYNAMIC_STATE_RASTERIZATION_STREAM_EXT = 1000455013
VK_DYNAMIC_STATE_CONSERVATIVE_RASTERIZATION_MODE_EXT = 1000455014
VK_DYNAMIC_STATE_EXTRA_PRIMITIVE_OVERESTIMATION_SIZE_EXT = 1000455015
VK_DYNAMIC_STATE_DEPTH_CLIP_ENABLE_EXT = 1000455016
VK_DYNAMIC_STATE_SAMPLE_LOCATIONS_ENABLE_EXT = 1000455017
VK_DYNAMIC_STATE_COLOR_BLEND_ADVANCED_EXT = 1000455018
VK_DYNAMIC_STATE_PROVOKING_VERTEX_MODE_EXT = 1000455019
VK_DYNAMIC_STATE_LINE_RASTERIZATION_MODE_EXT = 1000455020
VK_DYNAMIC_STATE_LINE_STIPPLE_ENABLE_EXT = 1000455021
VK_DYNAMIC_STATE_DEPTH_CLIP_NEGATIVE_ONE_TO_ONE_EXT = 1000455022
VK_DYNAMIC_STATE_VIEWPORT_W_SCALING_ENABLE_NV = 1000455023
VK_DYNAMIC_STATE_VIEWPORT_SWIZZLE_NV = 1000455024
VK_DYNAMIC_STATE_COVERAGE_TO_COLOR_ENABLE_NV = 1000455025
VK_DYNAMIC_STATE_COVERAGE_TO_COLOR_LOCATION_NV = 1000455026
VK_DYNAMIC_STATE_COVERAGE_MODULATION_MODE_NV = 1000455027
VK_DYNAMIC_STATE_COVERAGE_MODULATION_TABLE_ENABLE_NV = 1000455028
VK_DYNAMIC_STATE_COVERAGE_MODULATION_TABLE_NV = 1000455029
VK_DYNAMIC_STATE_SHADING_RATE_IMAGE_ENABLE_NV = 1000455030
VK_DYNAMIC_STATE_REPRESENTATIVE_FRAGMENT_TEST_ENABLE_NV = 1000455031
VK_DYNAMIC_STATE_COVERAGE_REDUCTION_MODE_NV = 1000455032
VK_DYNAMIC_STATE_ATTACHMENT_FEEDBACK_LOOP_ENABLE_EXT = 1000524000
VK_DYNAMIC_STATE_CULL_MODE_EXT = 1000267000
VK_DYNAMIC_STATE_FRONT_FACE_EXT = 1000267001
VK_DYNAMIC_STATE_PRIMITIVE_TOPOLOGY_EXT = 1000267002
VK_DYNAMIC_STATE_VIEWPORT_WITH_COUNT_EXT = 1000267003
VK_DYNAMIC_STATE_SCISSOR_WITH_COUNT_EXT = 1000267004
VK_DYNAMIC_STATE_VERTEX_INPUT_BINDING_STRIDE_EXT = 1000267005
VK_DYNAMIC_STATE_DEPTH_TEST_ENABLE_EXT = 1000267006
VK_DYNAMIC_STATE_DEPTH_WRITE_ENABLE_EXT = 1000267007
VK_DYNAMIC_STATE_DEPTH_COMPARE_OP_EXT = 1000267008
VK_DYNAMIC_STATE_DEPTH_BOUNDS_TEST_ENABLE_EXT = 1000267009
VK_DYNAMIC_STATE_STENCIL_TEST_ENABLE_EXT = 1000267010
VK_DYNAMIC_STATE_STENCIL_OP_EXT = 1000267011
VK_DYNAMIC_STATE_RASTERIZER_DISCARD_ENABLE_EXT = 1000377001
VK_DYNAMIC_STATE_DEPTH_BIAS_ENABLE_EXT = 1000377002
VK_DYNAMIC_STATE_PRIMITIVE_RESTART_ENABLE_EXT = 1000377004
VK_DYNAMIC_STATE_MAX_ENUM = 2147483647
VkDynamicState = ctypes.c_uint32 # enum

# values for enumeration 'VkFrontFace'
VkFrontFace__enumvalues = {
    0: 'VK_FRONT_FACE_COUNTER_CLOCKWISE',
    1: 'VK_FRONT_FACE_CLOCKWISE',
    2147483647: 'VK_FRONT_FACE_MAX_ENUM',
}
VK_FRONT_FACE_COUNTER_CLOCKWISE = 0
VK_FRONT_FACE_CLOCKWISE = 1
VK_FRONT_FACE_MAX_ENUM = 2147483647
VkFrontFace = ctypes.c_uint32 # enum

# values for enumeration 'VkVertexInputRate'
VkVertexInputRate__enumvalues = {
    0: 'VK_VERTEX_INPUT_RATE_VERTEX',
    1: 'VK_VERTEX_INPUT_RATE_INSTANCE',
    2147483647: 'VK_VERTEX_INPUT_RATE_MAX_ENUM',
}
VK_VERTEX_INPUT_RATE_VERTEX = 0
VK_VERTEX_INPUT_RATE_INSTANCE = 1
VK_VERTEX_INPUT_RATE_MAX_ENUM = 2147483647
VkVertexInputRate = ctypes.c_uint32 # enum

# values for enumeration 'VkPrimitiveTopology'
VkPrimitiveTopology__enumvalues = {
    0: 'VK_PRIMITIVE_TOPOLOGY_POINT_LIST',
    1: 'VK_PRIMITIVE_TOPOLOGY_LINE_LIST',
    2: 'VK_PRIMITIVE_TOPOLOGY_LINE_STRIP',
    3: 'VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST',
    4: 'VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP',
    5: 'VK_PRIMITIVE_TOPOLOGY_TRIANGLE_FAN',
    6: 'VK_PRIMITIVE_TOPOLOGY_LINE_LIST_WITH_ADJACENCY',
    7: 'VK_PRIMITIVE_TOPOLOGY_LINE_STRIP_WITH_ADJACENCY',
    8: 'VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST_WITH_ADJACENCY',
    9: 'VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP_WITH_ADJACENCY',
    10: 'VK_PRIMITIVE_TOPOLOGY_PATCH_LIST',
    2147483647: 'VK_PRIMITIVE_TOPOLOGY_MAX_ENUM',
}
VK_PRIMITIVE_TOPOLOGY_POINT_LIST = 0
VK_PRIMITIVE_TOPOLOGY_LINE_LIST = 1
VK_PRIMITIVE_TOPOLOGY_LINE_STRIP = 2
VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST = 3
VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP = 4
VK_PRIMITIVE_TOPOLOGY_TRIANGLE_FAN = 5
VK_PRIMITIVE_TOPOLOGY_LINE_LIST_WITH_ADJACENCY = 6
VK_PRIMITIVE_TOPOLOGY_LINE_STRIP_WITH_ADJACENCY = 7
VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST_WITH_ADJACENCY = 8
VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP_WITH_ADJACENCY = 9
VK_PRIMITIVE_TOPOLOGY_PATCH_LIST = 10
VK_PRIMITIVE_TOPOLOGY_MAX_ENUM = 2147483647
VkPrimitiveTopology = ctypes.c_uint32 # enum

# values for enumeration 'VkPolygonMode'
VkPolygonMode__enumvalues = {
    0: 'VK_POLYGON_MODE_FILL',
    1: 'VK_POLYGON_MODE_LINE',
    2: 'VK_POLYGON_MODE_POINT',
    1000153000: 'VK_POLYGON_MODE_FILL_RECTANGLE_NV',
    2147483647: 'VK_POLYGON_MODE_MAX_ENUM',
}
VK_POLYGON_MODE_FILL = 0
VK_POLYGON_MODE_LINE = 1
VK_POLYGON_MODE_POINT = 2
VK_POLYGON_MODE_FILL_RECTANGLE_NV = 1000153000
VK_POLYGON_MODE_MAX_ENUM = 2147483647
VkPolygonMode = ctypes.c_uint32 # enum

# values for enumeration 'VkStencilOp'
VkStencilOp__enumvalues = {
    0: 'VK_STENCIL_OP_KEEP',
    1: 'VK_STENCIL_OP_ZERO',
    2: 'VK_STENCIL_OP_REPLACE',
    3: 'VK_STENCIL_OP_INCREMENT_AND_CLAMP',
    4: 'VK_STENCIL_OP_DECREMENT_AND_CLAMP',
    5: 'VK_STENCIL_OP_INVERT',
    6: 'VK_STENCIL_OP_INCREMENT_AND_WRAP',
    7: 'VK_STENCIL_OP_DECREMENT_AND_WRAP',
    2147483647: 'VK_STENCIL_OP_MAX_ENUM',
}
VK_STENCIL_OP_KEEP = 0
VK_STENCIL_OP_ZERO = 1
VK_STENCIL_OP_REPLACE = 2
VK_STENCIL_OP_INCREMENT_AND_CLAMP = 3
VK_STENCIL_OP_DECREMENT_AND_CLAMP = 4
VK_STENCIL_OP_INVERT = 5
VK_STENCIL_OP_INCREMENT_AND_WRAP = 6
VK_STENCIL_OP_DECREMENT_AND_WRAP = 7
VK_STENCIL_OP_MAX_ENUM = 2147483647
VkStencilOp = ctypes.c_uint32 # enum

# values for enumeration 'VkLogicOp'
VkLogicOp__enumvalues = {
    0: 'VK_LOGIC_OP_CLEAR',
    1: 'VK_LOGIC_OP_AND',
    2: 'VK_LOGIC_OP_AND_REVERSE',
    3: 'VK_LOGIC_OP_COPY',
    4: 'VK_LOGIC_OP_AND_INVERTED',
    5: 'VK_LOGIC_OP_NO_OP',
    6: 'VK_LOGIC_OP_XOR',
    7: 'VK_LOGIC_OP_OR',
    8: 'VK_LOGIC_OP_NOR',
    9: 'VK_LOGIC_OP_EQUIVALENT',
    10: 'VK_LOGIC_OP_INVERT',
    11: 'VK_LOGIC_OP_OR_REVERSE',
    12: 'VK_LOGIC_OP_COPY_INVERTED',
    13: 'VK_LOGIC_OP_OR_INVERTED',
    14: 'VK_LOGIC_OP_NAND',
    15: 'VK_LOGIC_OP_SET',
    2147483647: 'VK_LOGIC_OP_MAX_ENUM',
}
VK_LOGIC_OP_CLEAR = 0
VK_LOGIC_OP_AND = 1
VK_LOGIC_OP_AND_REVERSE = 2
VK_LOGIC_OP_COPY = 3
VK_LOGIC_OP_AND_INVERTED = 4
VK_LOGIC_OP_NO_OP = 5
VK_LOGIC_OP_XOR = 6
VK_LOGIC_OP_OR = 7
VK_LOGIC_OP_NOR = 8
VK_LOGIC_OP_EQUIVALENT = 9
VK_LOGIC_OP_INVERT = 10
VK_LOGIC_OP_OR_REVERSE = 11
VK_LOGIC_OP_COPY_INVERTED = 12
VK_LOGIC_OP_OR_INVERTED = 13
VK_LOGIC_OP_NAND = 14
VK_LOGIC_OP_SET = 15
VK_LOGIC_OP_MAX_ENUM = 2147483647
VkLogicOp = ctypes.c_uint32 # enum

# values for enumeration 'VkBorderColor'
VkBorderColor__enumvalues = {
    0: 'VK_BORDER_COLOR_FLOAT_TRANSPARENT_BLACK',
    1: 'VK_BORDER_COLOR_INT_TRANSPARENT_BLACK',
    2: 'VK_BORDER_COLOR_FLOAT_OPAQUE_BLACK',
    3: 'VK_BORDER_COLOR_INT_OPAQUE_BLACK',
    4: 'VK_BORDER_COLOR_FLOAT_OPAQUE_WHITE',
    5: 'VK_BORDER_COLOR_INT_OPAQUE_WHITE',
    1000287003: 'VK_BORDER_COLOR_FLOAT_CUSTOM_EXT',
    1000287004: 'VK_BORDER_COLOR_INT_CUSTOM_EXT',
    2147483647: 'VK_BORDER_COLOR_MAX_ENUM',
}
VK_BORDER_COLOR_FLOAT_TRANSPARENT_BLACK = 0
VK_BORDER_COLOR_INT_TRANSPARENT_BLACK = 1
VK_BORDER_COLOR_FLOAT_OPAQUE_BLACK = 2
VK_BORDER_COLOR_INT_OPAQUE_BLACK = 3
VK_BORDER_COLOR_FLOAT_OPAQUE_WHITE = 4
VK_BORDER_COLOR_INT_OPAQUE_WHITE = 5
VK_BORDER_COLOR_FLOAT_CUSTOM_EXT = 1000287003
VK_BORDER_COLOR_INT_CUSTOM_EXT = 1000287004
VK_BORDER_COLOR_MAX_ENUM = 2147483647
VkBorderColor = ctypes.c_uint32 # enum

# values for enumeration 'VkFilter'
VkFilter__enumvalues = {
    0: 'VK_FILTER_NEAREST',
    1: 'VK_FILTER_LINEAR',
    1000015000: 'VK_FILTER_CUBIC_EXT',
    1000015000: 'VK_FILTER_CUBIC_IMG',
    2147483647: 'VK_FILTER_MAX_ENUM',
}
VK_FILTER_NEAREST = 0
VK_FILTER_LINEAR = 1
VK_FILTER_CUBIC_EXT = 1000015000
VK_FILTER_CUBIC_IMG = 1000015000
VK_FILTER_MAX_ENUM = 2147483647
VkFilter = ctypes.c_uint32 # enum

# values for enumeration 'VkSamplerAddressMode'
VkSamplerAddressMode__enumvalues = {
    0: 'VK_SAMPLER_ADDRESS_MODE_REPEAT',
    1: 'VK_SAMPLER_ADDRESS_MODE_MIRRORED_REPEAT',
    2: 'VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE',
    3: 'VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER',
    4: 'VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE',
    4: 'VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE_KHR',
    2147483647: 'VK_SAMPLER_ADDRESS_MODE_MAX_ENUM',
}
VK_SAMPLER_ADDRESS_MODE_REPEAT = 0
VK_SAMPLER_ADDRESS_MODE_MIRRORED_REPEAT = 1
VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE = 2
VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER = 3
VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE = 4
VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE_KHR = 4
VK_SAMPLER_ADDRESS_MODE_MAX_ENUM = 2147483647
VkSamplerAddressMode = ctypes.c_uint32 # enum

# values for enumeration 'VkSamplerMipmapMode'
VkSamplerMipmapMode__enumvalues = {
    0: 'VK_SAMPLER_MIPMAP_MODE_NEAREST',
    1: 'VK_SAMPLER_MIPMAP_MODE_LINEAR',
    2147483647: 'VK_SAMPLER_MIPMAP_MODE_MAX_ENUM',
}
VK_SAMPLER_MIPMAP_MODE_NEAREST = 0
VK_SAMPLER_MIPMAP_MODE_LINEAR = 1
VK_SAMPLER_MIPMAP_MODE_MAX_ENUM = 2147483647
VkSamplerMipmapMode = ctypes.c_uint32 # enum

# values for enumeration 'VkDescriptorType'
VkDescriptorType__enumvalues = {
    0: 'VK_DESCRIPTOR_TYPE_SAMPLER',
    1: 'VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER',
    2: 'VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE',
    3: 'VK_DESCRIPTOR_TYPE_STORAGE_IMAGE',
    4: 'VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER',
    5: 'VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER',
    6: 'VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER',
    7: 'VK_DESCRIPTOR_TYPE_STORAGE_BUFFER',
    8: 'VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC',
    9: 'VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC',
    10: 'VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT',
    1000138000: 'VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK',
    1000150000: 'VK_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_KHR',
    1000165000: 'VK_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_NV',
    1000440000: 'VK_DESCRIPTOR_TYPE_SAMPLE_WEIGHT_IMAGE_QCOM',
    1000440001: 'VK_DESCRIPTOR_TYPE_BLOCK_MATCH_IMAGE_QCOM',
    1000351000: 'VK_DESCRIPTOR_TYPE_MUTABLE_EXT',
    1000138000: 'VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK_EXT',
    1000351000: 'VK_DESCRIPTOR_TYPE_MUTABLE_VALVE',
    2147483647: 'VK_DESCRIPTOR_TYPE_MAX_ENUM',
}
VK_DESCRIPTOR_TYPE_SAMPLER = 0
VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER = 1
VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE = 2
VK_DESCRIPTOR_TYPE_STORAGE_IMAGE = 3
VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER = 4
VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER = 5
VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER = 6
VK_DESCRIPTOR_TYPE_STORAGE_BUFFER = 7
VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC = 8
VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC = 9
VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT = 10
VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK = 1000138000
VK_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_KHR = 1000150000
VK_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_NV = 1000165000
VK_DESCRIPTOR_TYPE_SAMPLE_WEIGHT_IMAGE_QCOM = 1000440000
VK_DESCRIPTOR_TYPE_BLOCK_MATCH_IMAGE_QCOM = 1000440001
VK_DESCRIPTOR_TYPE_MUTABLE_EXT = 1000351000
VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK_EXT = 1000138000
VK_DESCRIPTOR_TYPE_MUTABLE_VALVE = 1000351000
VK_DESCRIPTOR_TYPE_MAX_ENUM = 2147483647
VkDescriptorType = ctypes.c_uint32 # enum

# values for enumeration 'VkAttachmentLoadOp'
VkAttachmentLoadOp__enumvalues = {
    0: 'VK_ATTACHMENT_LOAD_OP_LOAD',
    1: 'VK_ATTACHMENT_LOAD_OP_CLEAR',
    2: 'VK_ATTACHMENT_LOAD_OP_DONT_CARE',
    1000400000: 'VK_ATTACHMENT_LOAD_OP_NONE_EXT',
    2147483647: 'VK_ATTACHMENT_LOAD_OP_MAX_ENUM',
}
VK_ATTACHMENT_LOAD_OP_LOAD = 0
VK_ATTACHMENT_LOAD_OP_CLEAR = 1
VK_ATTACHMENT_LOAD_OP_DONT_CARE = 2
VK_ATTACHMENT_LOAD_OP_NONE_EXT = 1000400000
VK_ATTACHMENT_LOAD_OP_MAX_ENUM = 2147483647
VkAttachmentLoadOp = ctypes.c_uint32 # enum

# values for enumeration 'VkAttachmentStoreOp'
VkAttachmentStoreOp__enumvalues = {
    0: 'VK_ATTACHMENT_STORE_OP_STORE',
    1: 'VK_ATTACHMENT_STORE_OP_DONT_CARE',
    1000301000: 'VK_ATTACHMENT_STORE_OP_NONE',
    1000301000: 'VK_ATTACHMENT_STORE_OP_NONE_KHR',
    1000301000: 'VK_ATTACHMENT_STORE_OP_NONE_QCOM',
    1000301000: 'VK_ATTACHMENT_STORE_OP_NONE_EXT',
    2147483647: 'VK_ATTACHMENT_STORE_OP_MAX_ENUM',
}
VK_ATTACHMENT_STORE_OP_STORE = 0
VK_ATTACHMENT_STORE_OP_DONT_CARE = 1
VK_ATTACHMENT_STORE_OP_NONE = 1000301000
VK_ATTACHMENT_STORE_OP_NONE_KHR = 1000301000
VK_ATTACHMENT_STORE_OP_NONE_QCOM = 1000301000
VK_ATTACHMENT_STORE_OP_NONE_EXT = 1000301000
VK_ATTACHMENT_STORE_OP_MAX_ENUM = 2147483647
VkAttachmentStoreOp = ctypes.c_uint32 # enum

# values for enumeration 'VkPipelineBindPoint'
VkPipelineBindPoint__enumvalues = {
    0: 'VK_PIPELINE_BIND_POINT_GRAPHICS',
    1: 'VK_PIPELINE_BIND_POINT_COMPUTE',
    1000165000: 'VK_PIPELINE_BIND_POINT_RAY_TRACING_KHR',
    1000369003: 'VK_PIPELINE_BIND_POINT_SUBPASS_SHADING_HUAWEI',
    1000165000: 'VK_PIPELINE_BIND_POINT_RAY_TRACING_NV',
    2147483647: 'VK_PIPELINE_BIND_POINT_MAX_ENUM',
}
VK_PIPELINE_BIND_POINT_GRAPHICS = 0
VK_PIPELINE_BIND_POINT_COMPUTE = 1
VK_PIPELINE_BIND_POINT_RAY_TRACING_KHR = 1000165000
VK_PIPELINE_BIND_POINT_SUBPASS_SHADING_HUAWEI = 1000369003
VK_PIPELINE_BIND_POINT_RAY_TRACING_NV = 1000165000
VK_PIPELINE_BIND_POINT_MAX_ENUM = 2147483647
VkPipelineBindPoint = ctypes.c_uint32 # enum

# values for enumeration 'VkCommandBufferLevel'
VkCommandBufferLevel__enumvalues = {
    0: 'VK_COMMAND_BUFFER_LEVEL_PRIMARY',
    1: 'VK_COMMAND_BUFFER_LEVEL_SECONDARY',
    2147483647: 'VK_COMMAND_BUFFER_LEVEL_MAX_ENUM',
}
VK_COMMAND_BUFFER_LEVEL_PRIMARY = 0
VK_COMMAND_BUFFER_LEVEL_SECONDARY = 1
VK_COMMAND_BUFFER_LEVEL_MAX_ENUM = 2147483647
VkCommandBufferLevel = ctypes.c_uint32 # enum

# values for enumeration 'VkIndexType'
VkIndexType__enumvalues = {
    0: 'VK_INDEX_TYPE_UINT16',
    1: 'VK_INDEX_TYPE_UINT32',
    1000165000: 'VK_INDEX_TYPE_NONE_KHR',
    1000265000: 'VK_INDEX_TYPE_UINT8_EXT',
    1000165000: 'VK_INDEX_TYPE_NONE_NV',
    2147483647: 'VK_INDEX_TYPE_MAX_ENUM',
}
VK_INDEX_TYPE_UINT16 = 0
VK_INDEX_TYPE_UINT32 = 1
VK_INDEX_TYPE_NONE_KHR = 1000165000
VK_INDEX_TYPE_UINT8_EXT = 1000265000
VK_INDEX_TYPE_NONE_NV = 1000165000
VK_INDEX_TYPE_MAX_ENUM = 2147483647
VkIndexType = ctypes.c_uint32 # enum

# values for enumeration 'VkSubpassContents'
VkSubpassContents__enumvalues = {
    0: 'VK_SUBPASS_CONTENTS_INLINE',
    1: 'VK_SUBPASS_CONTENTS_SECONDARY_COMMAND_BUFFERS',
    1000451000: 'VK_SUBPASS_CONTENTS_INLINE_AND_SECONDARY_COMMAND_BUFFERS_EXT',
    2147483647: 'VK_SUBPASS_CONTENTS_MAX_ENUM',
}
VK_SUBPASS_CONTENTS_INLINE = 0
VK_SUBPASS_CONTENTS_SECONDARY_COMMAND_BUFFERS = 1
VK_SUBPASS_CONTENTS_INLINE_AND_SECONDARY_COMMAND_BUFFERS_EXT = 1000451000
VK_SUBPASS_CONTENTS_MAX_ENUM = 2147483647
VkSubpassContents = ctypes.c_uint32 # enum

# values for enumeration 'VkAccessFlagBits'
VkAccessFlagBits__enumvalues = {
    1: 'VK_ACCESS_INDIRECT_COMMAND_READ_BIT',
    2: 'VK_ACCESS_INDEX_READ_BIT',
    4: 'VK_ACCESS_VERTEX_ATTRIBUTE_READ_BIT',
    8: 'VK_ACCESS_UNIFORM_READ_BIT',
    16: 'VK_ACCESS_INPUT_ATTACHMENT_READ_BIT',
    32: 'VK_ACCESS_SHADER_READ_BIT',
    64: 'VK_ACCESS_SHADER_WRITE_BIT',
    128: 'VK_ACCESS_COLOR_ATTACHMENT_READ_BIT',
    256: 'VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT',
    512: 'VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_READ_BIT',
    1024: 'VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT',
    2048: 'VK_ACCESS_TRANSFER_READ_BIT',
    4096: 'VK_ACCESS_TRANSFER_WRITE_BIT',
    8192: 'VK_ACCESS_HOST_READ_BIT',
    16384: 'VK_ACCESS_HOST_WRITE_BIT',
    32768: 'VK_ACCESS_MEMORY_READ_BIT',
    65536: 'VK_ACCESS_MEMORY_WRITE_BIT',
    0: 'VK_ACCESS_NONE',
    33554432: 'VK_ACCESS_TRANSFORM_FEEDBACK_WRITE_BIT_EXT',
    67108864: 'VK_ACCESS_TRANSFORM_FEEDBACK_COUNTER_READ_BIT_EXT',
    134217728: 'VK_ACCESS_TRANSFORM_FEEDBACK_COUNTER_WRITE_BIT_EXT',
    1048576: 'VK_ACCESS_CONDITIONAL_RENDERING_READ_BIT_EXT',
    524288: 'VK_ACCESS_COLOR_ATTACHMENT_READ_NONCOHERENT_BIT_EXT',
    2097152: 'VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_KHR',
    4194304: 'VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_KHR',
    16777216: 'VK_ACCESS_FRAGMENT_DENSITY_MAP_READ_BIT_EXT',
    8388608: 'VK_ACCESS_FRAGMENT_SHADING_RATE_ATTACHMENT_READ_BIT_KHR',
    131072: 'VK_ACCESS_COMMAND_PREPROCESS_READ_BIT_NV',
    262144: 'VK_ACCESS_COMMAND_PREPROCESS_WRITE_BIT_NV',
    8388608: 'VK_ACCESS_SHADING_RATE_IMAGE_READ_BIT_NV',
    2097152: 'VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_NV',
    4194304: 'VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_NV',
    0: 'VK_ACCESS_NONE_KHR',
    2147483647: 'VK_ACCESS_FLAG_BITS_MAX_ENUM',
}
VK_ACCESS_INDIRECT_COMMAND_READ_BIT = 1
VK_ACCESS_INDEX_READ_BIT = 2
VK_ACCESS_VERTEX_ATTRIBUTE_READ_BIT = 4
VK_ACCESS_UNIFORM_READ_BIT = 8
VK_ACCESS_INPUT_ATTACHMENT_READ_BIT = 16
VK_ACCESS_SHADER_READ_BIT = 32
VK_ACCESS_SHADER_WRITE_BIT = 64
VK_ACCESS_COLOR_ATTACHMENT_READ_BIT = 128
VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT = 256
VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_READ_BIT = 512
VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT = 1024
VK_ACCESS_TRANSFER_READ_BIT = 2048
VK_ACCESS_TRANSFER_WRITE_BIT = 4096
VK_ACCESS_HOST_READ_BIT = 8192
VK_ACCESS_HOST_WRITE_BIT = 16384
VK_ACCESS_MEMORY_READ_BIT = 32768
VK_ACCESS_MEMORY_WRITE_BIT = 65536
VK_ACCESS_NONE = 0
VK_ACCESS_TRANSFORM_FEEDBACK_WRITE_BIT_EXT = 33554432
VK_ACCESS_TRANSFORM_FEEDBACK_COUNTER_READ_BIT_EXT = 67108864
VK_ACCESS_TRANSFORM_FEEDBACK_COUNTER_WRITE_BIT_EXT = 134217728
VK_ACCESS_CONDITIONAL_RENDERING_READ_BIT_EXT = 1048576
VK_ACCESS_COLOR_ATTACHMENT_READ_NONCOHERENT_BIT_EXT = 524288
VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_KHR = 2097152
VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_KHR = 4194304
VK_ACCESS_FRAGMENT_DENSITY_MAP_READ_BIT_EXT = 16777216
VK_ACCESS_FRAGMENT_SHADING_RATE_ATTACHMENT_READ_BIT_KHR = 8388608
VK_ACCESS_COMMAND_PREPROCESS_READ_BIT_NV = 131072
VK_ACCESS_COMMAND_PREPROCESS_WRITE_BIT_NV = 262144
VK_ACCESS_SHADING_RATE_IMAGE_READ_BIT_NV = 8388608
VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_NV = 2097152
VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_NV = 4194304
VK_ACCESS_NONE_KHR = 0
VK_ACCESS_FLAG_BITS_MAX_ENUM = 2147483647
VkAccessFlagBits = ctypes.c_uint32 # enum
VkAccessFlags = ctypes.c_uint32

# values for enumeration 'VkImageAspectFlagBits'
VkImageAspectFlagBits__enumvalues = {
    1: 'VK_IMAGE_ASPECT_COLOR_BIT',
    2: 'VK_IMAGE_ASPECT_DEPTH_BIT',
    4: 'VK_IMAGE_ASPECT_STENCIL_BIT',
    8: 'VK_IMAGE_ASPECT_METADATA_BIT',
    16: 'VK_IMAGE_ASPECT_PLANE_0_BIT',
    32: 'VK_IMAGE_ASPECT_PLANE_1_BIT',
    64: 'VK_IMAGE_ASPECT_PLANE_2_BIT',
    0: 'VK_IMAGE_ASPECT_NONE',
    128: 'VK_IMAGE_ASPECT_MEMORY_PLANE_0_BIT_EXT',
    256: 'VK_IMAGE_ASPECT_MEMORY_PLANE_1_BIT_EXT',
    512: 'VK_IMAGE_ASPECT_MEMORY_PLANE_2_BIT_EXT',
    1024: 'VK_IMAGE_ASPECT_MEMORY_PLANE_3_BIT_EXT',
    16: 'VK_IMAGE_ASPECT_PLANE_0_BIT_KHR',
    32: 'VK_IMAGE_ASPECT_PLANE_1_BIT_KHR',
    64: 'VK_IMAGE_ASPECT_PLANE_2_BIT_KHR',
    0: 'VK_IMAGE_ASPECT_NONE_KHR',
    2147483647: 'VK_IMAGE_ASPECT_FLAG_BITS_MAX_ENUM',
}
VK_IMAGE_ASPECT_COLOR_BIT = 1
VK_IMAGE_ASPECT_DEPTH_BIT = 2
VK_IMAGE_ASPECT_STENCIL_BIT = 4
VK_IMAGE_ASPECT_METADATA_BIT = 8
VK_IMAGE_ASPECT_PLANE_0_BIT = 16
VK_IMAGE_ASPECT_PLANE_1_BIT = 32
VK_IMAGE_ASPECT_PLANE_2_BIT = 64
VK_IMAGE_ASPECT_NONE = 0
VK_IMAGE_ASPECT_MEMORY_PLANE_0_BIT_EXT = 128
VK_IMAGE_ASPECT_MEMORY_PLANE_1_BIT_EXT = 256
VK_IMAGE_ASPECT_MEMORY_PLANE_2_BIT_EXT = 512
VK_IMAGE_ASPECT_MEMORY_PLANE_3_BIT_EXT = 1024
VK_IMAGE_ASPECT_PLANE_0_BIT_KHR = 16
VK_IMAGE_ASPECT_PLANE_1_BIT_KHR = 32
VK_IMAGE_ASPECT_PLANE_2_BIT_KHR = 64
VK_IMAGE_ASPECT_NONE_KHR = 0
VK_IMAGE_ASPECT_FLAG_BITS_MAX_ENUM = 2147483647
VkImageAspectFlagBits = ctypes.c_uint32 # enum
VkImageAspectFlags = ctypes.c_uint32

# values for enumeration 'VkFormatFeatureFlagBits'
VkFormatFeatureFlagBits__enumvalues = {
    1: 'VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT',
    2: 'VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT',
    4: 'VK_FORMAT_FEATURE_STORAGE_IMAGE_ATOMIC_BIT',
    8: 'VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT',
    16: 'VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT',
    32: 'VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_ATOMIC_BIT',
    64: 'VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT',
    128: 'VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT',
    256: 'VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT',
    512: 'VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT',
    1024: 'VK_FORMAT_FEATURE_BLIT_SRC_BIT',
    2048: 'VK_FORMAT_FEATURE_BLIT_DST_BIT',
    4096: 'VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT',
    16384: 'VK_FORMAT_FEATURE_TRANSFER_SRC_BIT',
    32768: 'VK_FORMAT_FEATURE_TRANSFER_DST_BIT',
    131072: 'VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT',
    262144: 'VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT',
    524288: 'VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT',
    1048576: 'VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT',
    2097152: 'VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT',
    4194304: 'VK_FORMAT_FEATURE_DISJOINT_BIT',
    8388608: 'VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT',
    65536: 'VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT',
    33554432: 'VK_FORMAT_FEATURE_VIDEO_DECODE_OUTPUT_BIT_KHR',
    67108864: 'VK_FORMAT_FEATURE_VIDEO_DECODE_DPB_BIT_KHR',
    536870912: 'VK_FORMAT_FEATURE_ACCELERATION_STRUCTURE_VERTEX_BUFFER_BIT_KHR',
    8192: 'VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_EXT',
    16777216: 'VK_FORMAT_FEATURE_FRAGMENT_DENSITY_MAP_BIT_EXT',
    1073741824: 'VK_FORMAT_FEATURE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR',
    134217728: 'VK_FORMAT_FEATURE_VIDEO_ENCODE_INPUT_BIT_KHR',
    268435456: 'VK_FORMAT_FEATURE_VIDEO_ENCODE_DPB_BIT_KHR',
    8192: 'VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_IMG',
    16384: 'VK_FORMAT_FEATURE_TRANSFER_SRC_BIT_KHR',
    32768: 'VK_FORMAT_FEATURE_TRANSFER_DST_BIT_KHR',
    65536: 'VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT_EXT',
    131072: 'VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT_KHR',
    262144: 'VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT_KHR',
    524288: 'VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT_KHR',
    1048576: 'VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT_KHR',
    2097152: 'VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT_KHR',
    4194304: 'VK_FORMAT_FEATURE_DISJOINT_BIT_KHR',
    8388608: 'VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT_KHR',
    2147483647: 'VK_FORMAT_FEATURE_FLAG_BITS_MAX_ENUM',
}
VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT = 1
VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT = 2
VK_FORMAT_FEATURE_STORAGE_IMAGE_ATOMIC_BIT = 4
VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT = 8
VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT = 16
VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_ATOMIC_BIT = 32
VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT = 64
VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT = 128
VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT = 256
VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT = 512
VK_FORMAT_FEATURE_BLIT_SRC_BIT = 1024
VK_FORMAT_FEATURE_BLIT_DST_BIT = 2048
VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT = 4096
VK_FORMAT_FEATURE_TRANSFER_SRC_BIT = 16384
VK_FORMAT_FEATURE_TRANSFER_DST_BIT = 32768
VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT = 131072
VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT = 262144
VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT = 524288
VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT = 1048576
VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT = 2097152
VK_FORMAT_FEATURE_DISJOINT_BIT = 4194304
VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT = 8388608
VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT = 65536
VK_FORMAT_FEATURE_VIDEO_DECODE_OUTPUT_BIT_KHR = 33554432
VK_FORMAT_FEATURE_VIDEO_DECODE_DPB_BIT_KHR = 67108864
VK_FORMAT_FEATURE_ACCELERATION_STRUCTURE_VERTEX_BUFFER_BIT_KHR = 536870912
VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_EXT = 8192
VK_FORMAT_FEATURE_FRAGMENT_DENSITY_MAP_BIT_EXT = 16777216
VK_FORMAT_FEATURE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR = 1073741824
VK_FORMAT_FEATURE_VIDEO_ENCODE_INPUT_BIT_KHR = 134217728
VK_FORMAT_FEATURE_VIDEO_ENCODE_DPB_BIT_KHR = 268435456
VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_IMG = 8192
VK_FORMAT_FEATURE_TRANSFER_SRC_BIT_KHR = 16384
VK_FORMAT_FEATURE_TRANSFER_DST_BIT_KHR = 32768
VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT_EXT = 65536
VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT_KHR = 131072
VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT_KHR = 262144
VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT_KHR = 524288
VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT_KHR = 1048576
VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT_KHR = 2097152
VK_FORMAT_FEATURE_DISJOINT_BIT_KHR = 4194304
VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT_KHR = 8388608
VK_FORMAT_FEATURE_FLAG_BITS_MAX_ENUM = 2147483647
VkFormatFeatureFlagBits = ctypes.c_uint32 # enum
VkFormatFeatureFlags = ctypes.c_uint32

# values for enumeration 'VkImageCreateFlagBits'
VkImageCreateFlagBits__enumvalues = {
    1: 'VK_IMAGE_CREATE_SPARSE_BINDING_BIT',
    2: 'VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT',
    4: 'VK_IMAGE_CREATE_SPARSE_ALIASED_BIT',
    8: 'VK_IMAGE_CREATE_MUTABLE_FORMAT_BIT',
    16: 'VK_IMAGE_CREATE_CUBE_COMPATIBLE_BIT',
    1024: 'VK_IMAGE_CREATE_ALIAS_BIT',
    64: 'VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT',
    32: 'VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT',
    128: 'VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT',
    256: 'VK_IMAGE_CREATE_EXTENDED_USAGE_BIT',
    2048: 'VK_IMAGE_CREATE_PROTECTED_BIT',
    512: 'VK_IMAGE_CREATE_DISJOINT_BIT',
    8192: 'VK_IMAGE_CREATE_CORNER_SAMPLED_BIT_NV',
    4096: 'VK_IMAGE_CREATE_SAMPLE_LOCATIONS_COMPATIBLE_DEPTH_BIT_EXT',
    16384: 'VK_IMAGE_CREATE_SUBSAMPLED_BIT_EXT',
    65536: 'VK_IMAGE_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT',
    262144: 'VK_IMAGE_CREATE_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_BIT_EXT',
    131072: 'VK_IMAGE_CREATE_2D_VIEW_COMPATIBLE_BIT_EXT',
    32768: 'VK_IMAGE_CREATE_FRAGMENT_DENSITY_MAP_OFFSET_BIT_QCOM',
    1048576: 'VK_IMAGE_CREATE_VIDEO_PROFILE_INDEPENDENT_BIT_KHR',
    64: 'VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR',
    32: 'VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT_KHR',
    128: 'VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT_KHR',
    256: 'VK_IMAGE_CREATE_EXTENDED_USAGE_BIT_KHR',
    512: 'VK_IMAGE_CREATE_DISJOINT_BIT_KHR',
    1024: 'VK_IMAGE_CREATE_ALIAS_BIT_KHR',
    2147483647: 'VK_IMAGE_CREATE_FLAG_BITS_MAX_ENUM',
}
VK_IMAGE_CREATE_SPARSE_BINDING_BIT = 1
VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT = 2
VK_IMAGE_CREATE_SPARSE_ALIASED_BIT = 4
VK_IMAGE_CREATE_MUTABLE_FORMAT_BIT = 8
VK_IMAGE_CREATE_CUBE_COMPATIBLE_BIT = 16
VK_IMAGE_CREATE_ALIAS_BIT = 1024
VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT = 64
VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT = 32
VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT = 128
VK_IMAGE_CREATE_EXTENDED_USAGE_BIT = 256
VK_IMAGE_CREATE_PROTECTED_BIT = 2048
VK_IMAGE_CREATE_DISJOINT_BIT = 512
VK_IMAGE_CREATE_CORNER_SAMPLED_BIT_NV = 8192
VK_IMAGE_CREATE_SAMPLE_LOCATIONS_COMPATIBLE_DEPTH_BIT_EXT = 4096
VK_IMAGE_CREATE_SUBSAMPLED_BIT_EXT = 16384
VK_IMAGE_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT = 65536
VK_IMAGE_CREATE_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_BIT_EXT = 262144
VK_IMAGE_CREATE_2D_VIEW_COMPATIBLE_BIT_EXT = 131072
VK_IMAGE_CREATE_FRAGMENT_DENSITY_MAP_OFFSET_BIT_QCOM = 32768
VK_IMAGE_CREATE_VIDEO_PROFILE_INDEPENDENT_BIT_KHR = 1048576
VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR = 64
VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT_KHR = 32
VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT_KHR = 128
VK_IMAGE_CREATE_EXTENDED_USAGE_BIT_KHR = 256
VK_IMAGE_CREATE_DISJOINT_BIT_KHR = 512
VK_IMAGE_CREATE_ALIAS_BIT_KHR = 1024
VK_IMAGE_CREATE_FLAG_BITS_MAX_ENUM = 2147483647
VkImageCreateFlagBits = ctypes.c_uint32 # enum
VkImageCreateFlags = ctypes.c_uint32

# values for enumeration 'VkSampleCountFlagBits'
VkSampleCountFlagBits__enumvalues = {
    1: 'VK_SAMPLE_COUNT_1_BIT',
    2: 'VK_SAMPLE_COUNT_2_BIT',
    4: 'VK_SAMPLE_COUNT_4_BIT',
    8: 'VK_SAMPLE_COUNT_8_BIT',
    16: 'VK_SAMPLE_COUNT_16_BIT',
    32: 'VK_SAMPLE_COUNT_32_BIT',
    64: 'VK_SAMPLE_COUNT_64_BIT',
    2147483647: 'VK_SAMPLE_COUNT_FLAG_BITS_MAX_ENUM',
}
VK_SAMPLE_COUNT_1_BIT = 1
VK_SAMPLE_COUNT_2_BIT = 2
VK_SAMPLE_COUNT_4_BIT = 4
VK_SAMPLE_COUNT_8_BIT = 8
VK_SAMPLE_COUNT_16_BIT = 16
VK_SAMPLE_COUNT_32_BIT = 32
VK_SAMPLE_COUNT_64_BIT = 64
VK_SAMPLE_COUNT_FLAG_BITS_MAX_ENUM = 2147483647
VkSampleCountFlagBits = ctypes.c_uint32 # enum
VkSampleCountFlags = ctypes.c_uint32

# values for enumeration 'VkImageUsageFlagBits'
VkImageUsageFlagBits__enumvalues = {
    1: 'VK_IMAGE_USAGE_TRANSFER_SRC_BIT',
    2: 'VK_IMAGE_USAGE_TRANSFER_DST_BIT',
    4: 'VK_IMAGE_USAGE_SAMPLED_BIT',
    8: 'VK_IMAGE_USAGE_STORAGE_BIT',
    16: 'VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT',
    32: 'VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT',
    64: 'VK_IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT',
    128: 'VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT',
    1024: 'VK_IMAGE_USAGE_VIDEO_DECODE_DST_BIT_KHR',
    2048: 'VK_IMAGE_USAGE_VIDEO_DECODE_SRC_BIT_KHR',
    4096: 'VK_IMAGE_USAGE_VIDEO_DECODE_DPB_BIT_KHR',
    512: 'VK_IMAGE_USAGE_FRAGMENT_DENSITY_MAP_BIT_EXT',
    256: 'VK_IMAGE_USAGE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR',
    4194304: 'VK_IMAGE_USAGE_HOST_TRANSFER_BIT_EXT',
    8192: 'VK_IMAGE_USAGE_VIDEO_ENCODE_DST_BIT_KHR',
    16384: 'VK_IMAGE_USAGE_VIDEO_ENCODE_SRC_BIT_KHR',
    32768: 'VK_IMAGE_USAGE_VIDEO_ENCODE_DPB_BIT_KHR',
    524288: 'VK_IMAGE_USAGE_ATTACHMENT_FEEDBACK_LOOP_BIT_EXT',
    262144: 'VK_IMAGE_USAGE_INVOCATION_MASK_BIT_HUAWEI',
    1048576: 'VK_IMAGE_USAGE_SAMPLE_WEIGHT_BIT_QCOM',
    2097152: 'VK_IMAGE_USAGE_SAMPLE_BLOCK_MATCH_BIT_QCOM',
    256: 'VK_IMAGE_USAGE_SHADING_RATE_IMAGE_BIT_NV',
    2147483647: 'VK_IMAGE_USAGE_FLAG_BITS_MAX_ENUM',
}
VK_IMAGE_USAGE_TRANSFER_SRC_BIT = 1
VK_IMAGE_USAGE_TRANSFER_DST_BIT = 2
VK_IMAGE_USAGE_SAMPLED_BIT = 4
VK_IMAGE_USAGE_STORAGE_BIT = 8
VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT = 16
VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT = 32
VK_IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT = 64
VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT = 128
VK_IMAGE_USAGE_VIDEO_DECODE_DST_BIT_KHR = 1024
VK_IMAGE_USAGE_VIDEO_DECODE_SRC_BIT_KHR = 2048
VK_IMAGE_USAGE_VIDEO_DECODE_DPB_BIT_KHR = 4096
VK_IMAGE_USAGE_FRAGMENT_DENSITY_MAP_BIT_EXT = 512
VK_IMAGE_USAGE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR = 256
VK_IMAGE_USAGE_HOST_TRANSFER_BIT_EXT = 4194304
VK_IMAGE_USAGE_VIDEO_ENCODE_DST_BIT_KHR = 8192
VK_IMAGE_USAGE_VIDEO_ENCODE_SRC_BIT_KHR = 16384
VK_IMAGE_USAGE_VIDEO_ENCODE_DPB_BIT_KHR = 32768
VK_IMAGE_USAGE_ATTACHMENT_FEEDBACK_LOOP_BIT_EXT = 524288
VK_IMAGE_USAGE_INVOCATION_MASK_BIT_HUAWEI = 262144
VK_IMAGE_USAGE_SAMPLE_WEIGHT_BIT_QCOM = 1048576
VK_IMAGE_USAGE_SAMPLE_BLOCK_MATCH_BIT_QCOM = 2097152
VK_IMAGE_USAGE_SHADING_RATE_IMAGE_BIT_NV = 256
VK_IMAGE_USAGE_FLAG_BITS_MAX_ENUM = 2147483647
VkImageUsageFlagBits = ctypes.c_uint32 # enum
VkImageUsageFlags = ctypes.c_uint32

# values for enumeration 'VkInstanceCreateFlagBits'
VkInstanceCreateFlagBits__enumvalues = {
    1: 'VK_INSTANCE_CREATE_ENUMERATE_PORTABILITY_BIT_KHR',
    2147483647: 'VK_INSTANCE_CREATE_FLAG_BITS_MAX_ENUM',
}
VK_INSTANCE_CREATE_ENUMERATE_PORTABILITY_BIT_KHR = 1
VK_INSTANCE_CREATE_FLAG_BITS_MAX_ENUM = 2147483647
VkInstanceCreateFlagBits = ctypes.c_uint32 # enum
VkInstanceCreateFlags = ctypes.c_uint32

# values for enumeration 'VkMemoryHeapFlagBits'
VkMemoryHeapFlagBits__enumvalues = {
    1: 'VK_MEMORY_HEAP_DEVICE_LOCAL_BIT',
    2: 'VK_MEMORY_HEAP_MULTI_INSTANCE_BIT',
    2: 'VK_MEMORY_HEAP_MULTI_INSTANCE_BIT_KHR',
    2147483647: 'VK_MEMORY_HEAP_FLAG_BITS_MAX_ENUM',
}
VK_MEMORY_HEAP_DEVICE_LOCAL_BIT = 1
VK_MEMORY_HEAP_MULTI_INSTANCE_BIT = 2
VK_MEMORY_HEAP_MULTI_INSTANCE_BIT_KHR = 2
VK_MEMORY_HEAP_FLAG_BITS_MAX_ENUM = 2147483647
VkMemoryHeapFlagBits = ctypes.c_uint32 # enum
VkMemoryHeapFlags = ctypes.c_uint32

# values for enumeration 'VkMemoryPropertyFlagBits'
VkMemoryPropertyFlagBits__enumvalues = {
    1: 'VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT',
    2: 'VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT',
    4: 'VK_MEMORY_PROPERTY_HOST_COHERENT_BIT',
    8: 'VK_MEMORY_PROPERTY_HOST_CACHED_BIT',
    16: 'VK_MEMORY_PROPERTY_LAZILY_ALLOCATED_BIT',
    32: 'VK_MEMORY_PROPERTY_PROTECTED_BIT',
    64: 'VK_MEMORY_PROPERTY_DEVICE_COHERENT_BIT_AMD',
    128: 'VK_MEMORY_PROPERTY_DEVICE_UNCACHED_BIT_AMD',
    256: 'VK_MEMORY_PROPERTY_RDMA_CAPABLE_BIT_NV',
    2147483647: 'VK_MEMORY_PROPERTY_FLAG_BITS_MAX_ENUM',
}
VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT = 1
VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT = 2
VK_MEMORY_PROPERTY_HOST_COHERENT_BIT = 4
VK_MEMORY_PROPERTY_HOST_CACHED_BIT = 8
VK_MEMORY_PROPERTY_LAZILY_ALLOCATED_BIT = 16
VK_MEMORY_PROPERTY_PROTECTED_BIT = 32
VK_MEMORY_PROPERTY_DEVICE_COHERENT_BIT_AMD = 64
VK_MEMORY_PROPERTY_DEVICE_UNCACHED_BIT_AMD = 128
VK_MEMORY_PROPERTY_RDMA_CAPABLE_BIT_NV = 256
VK_MEMORY_PROPERTY_FLAG_BITS_MAX_ENUM = 2147483647
VkMemoryPropertyFlagBits = ctypes.c_uint32 # enum
VkMemoryPropertyFlags = ctypes.c_uint32

# values for enumeration 'VkQueueFlagBits'
VkQueueFlagBits__enumvalues = {
    1: 'VK_QUEUE_GRAPHICS_BIT',
    2: 'VK_QUEUE_COMPUTE_BIT',
    4: 'VK_QUEUE_TRANSFER_BIT',
    8: 'VK_QUEUE_SPARSE_BINDING_BIT',
    16: 'VK_QUEUE_PROTECTED_BIT',
    32: 'VK_QUEUE_VIDEO_DECODE_BIT_KHR',
    64: 'VK_QUEUE_VIDEO_ENCODE_BIT_KHR',
    256: 'VK_QUEUE_OPTICAL_FLOW_BIT_NV',
    2147483647: 'VK_QUEUE_FLAG_BITS_MAX_ENUM',
}
VK_QUEUE_GRAPHICS_BIT = 1
VK_QUEUE_COMPUTE_BIT = 2
VK_QUEUE_TRANSFER_BIT = 4
VK_QUEUE_SPARSE_BINDING_BIT = 8
VK_QUEUE_PROTECTED_BIT = 16
VK_QUEUE_VIDEO_DECODE_BIT_KHR = 32
VK_QUEUE_VIDEO_ENCODE_BIT_KHR = 64
VK_QUEUE_OPTICAL_FLOW_BIT_NV = 256
VK_QUEUE_FLAG_BITS_MAX_ENUM = 2147483647
VkQueueFlagBits = ctypes.c_uint32 # enum
VkQueueFlags = ctypes.c_uint32
VkDeviceCreateFlags = ctypes.c_uint32

# values for enumeration 'VkDeviceQueueCreateFlagBits'
VkDeviceQueueCreateFlagBits__enumvalues = {
    1: 'VK_DEVICE_QUEUE_CREATE_PROTECTED_BIT',
    2147483647: 'VK_DEVICE_QUEUE_CREATE_FLAG_BITS_MAX_ENUM',
}
VK_DEVICE_QUEUE_CREATE_PROTECTED_BIT = 1
VK_DEVICE_QUEUE_CREATE_FLAG_BITS_MAX_ENUM = 2147483647
VkDeviceQueueCreateFlagBits = ctypes.c_uint32 # enum
VkDeviceQueueCreateFlags = ctypes.c_uint32

# values for enumeration 'VkPipelineStageFlagBits'
VkPipelineStageFlagBits__enumvalues = {
    1: 'VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT',
    2: 'VK_PIPELINE_STAGE_DRAW_INDIRECT_BIT',
    4: 'VK_PIPELINE_STAGE_VERTEX_INPUT_BIT',
    8: 'VK_PIPELINE_STAGE_VERTEX_SHADER_BIT',
    16: 'VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT',
    32: 'VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT',
    64: 'VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT',
    128: 'VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT',
    256: 'VK_PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT',
    512: 'VK_PIPELINE_STAGE_LATE_FRAGMENT_TESTS_BIT',
    1024: 'VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT',
    2048: 'VK_PIPELINE_STAGE_COMPUTE_SHADER_BIT',
    4096: 'VK_PIPELINE_STAGE_TRANSFER_BIT',
    8192: 'VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT',
    16384: 'VK_PIPELINE_STAGE_HOST_BIT',
    32768: 'VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT',
    65536: 'VK_PIPELINE_STAGE_ALL_COMMANDS_BIT',
    0: 'VK_PIPELINE_STAGE_NONE',
    16777216: 'VK_PIPELINE_STAGE_TRANSFORM_FEEDBACK_BIT_EXT',
    262144: 'VK_PIPELINE_STAGE_CONDITIONAL_RENDERING_BIT_EXT',
    33554432: 'VK_PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_KHR',
    2097152: 'VK_PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_KHR',
    8388608: 'VK_PIPELINE_STAGE_FRAGMENT_DENSITY_PROCESS_BIT_EXT',
    4194304: 'VK_PIPELINE_STAGE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR',
    131072: 'VK_PIPELINE_STAGE_COMMAND_PREPROCESS_BIT_NV',
    524288: 'VK_PIPELINE_STAGE_TASK_SHADER_BIT_EXT',
    1048576: 'VK_PIPELINE_STAGE_MESH_SHADER_BIT_EXT',
    4194304: 'VK_PIPELINE_STAGE_SHADING_RATE_IMAGE_BIT_NV',
    2097152: 'VK_PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_NV',
    33554432: 'VK_PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_NV',
    524288: 'VK_PIPELINE_STAGE_TASK_SHADER_BIT_NV',
    1048576: 'VK_PIPELINE_STAGE_MESH_SHADER_BIT_NV',
    0: 'VK_PIPELINE_STAGE_NONE_KHR',
    2147483647: 'VK_PIPELINE_STAGE_FLAG_BITS_MAX_ENUM',
}
VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT = 1
VK_PIPELINE_STAGE_DRAW_INDIRECT_BIT = 2
VK_PIPELINE_STAGE_VERTEX_INPUT_BIT = 4
VK_PIPELINE_STAGE_VERTEX_SHADER_BIT = 8
VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT = 16
VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT = 32
VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT = 64
VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT = 128
VK_PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT = 256
VK_PIPELINE_STAGE_LATE_FRAGMENT_TESTS_BIT = 512
VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT = 1024
VK_PIPELINE_STAGE_COMPUTE_SHADER_BIT = 2048
VK_PIPELINE_STAGE_TRANSFER_BIT = 4096
VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT = 8192
VK_PIPELINE_STAGE_HOST_BIT = 16384
VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT = 32768
VK_PIPELINE_STAGE_ALL_COMMANDS_BIT = 65536
VK_PIPELINE_STAGE_NONE = 0
VK_PIPELINE_STAGE_TRANSFORM_FEEDBACK_BIT_EXT = 16777216
VK_PIPELINE_STAGE_CONDITIONAL_RENDERING_BIT_EXT = 262144
VK_PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_KHR = 33554432
VK_PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_KHR = 2097152
VK_PIPELINE_STAGE_FRAGMENT_DENSITY_PROCESS_BIT_EXT = 8388608
VK_PIPELINE_STAGE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR = 4194304
VK_PIPELINE_STAGE_COMMAND_PREPROCESS_BIT_NV = 131072
VK_PIPELINE_STAGE_TASK_SHADER_BIT_EXT = 524288
VK_PIPELINE_STAGE_MESH_SHADER_BIT_EXT = 1048576
VK_PIPELINE_STAGE_SHADING_RATE_IMAGE_BIT_NV = 4194304
VK_PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_NV = 2097152
VK_PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_NV = 33554432
VK_PIPELINE_STAGE_TASK_SHADER_BIT_NV = 524288
VK_PIPELINE_STAGE_MESH_SHADER_BIT_NV = 1048576
VK_PIPELINE_STAGE_NONE_KHR = 0
VK_PIPELINE_STAGE_FLAG_BITS_MAX_ENUM = 2147483647
VkPipelineStageFlagBits = ctypes.c_uint32 # enum
VkPipelineStageFlags = ctypes.c_uint32
VkMemoryMapFlags = ctypes.c_uint32

# values for enumeration 'VkSparseMemoryBindFlagBits'
VkSparseMemoryBindFlagBits__enumvalues = {
    1: 'VK_SPARSE_MEMORY_BIND_METADATA_BIT',
    2147483647: 'VK_SPARSE_MEMORY_BIND_FLAG_BITS_MAX_ENUM',
}
VK_SPARSE_MEMORY_BIND_METADATA_BIT = 1
VK_SPARSE_MEMORY_BIND_FLAG_BITS_MAX_ENUM = 2147483647
VkSparseMemoryBindFlagBits = ctypes.c_uint32 # enum
VkSparseMemoryBindFlags = ctypes.c_uint32

# values for enumeration 'VkSparseImageFormatFlagBits'
VkSparseImageFormatFlagBits__enumvalues = {
    1: 'VK_SPARSE_IMAGE_FORMAT_SINGLE_MIPTAIL_BIT',
    2: 'VK_SPARSE_IMAGE_FORMAT_ALIGNED_MIP_SIZE_BIT',
    4: 'VK_SPARSE_IMAGE_FORMAT_NONSTANDARD_BLOCK_SIZE_BIT',
    2147483647: 'VK_SPARSE_IMAGE_FORMAT_FLAG_BITS_MAX_ENUM',
}
VK_SPARSE_IMAGE_FORMAT_SINGLE_MIPTAIL_BIT = 1
VK_SPARSE_IMAGE_FORMAT_ALIGNED_MIP_SIZE_BIT = 2
VK_SPARSE_IMAGE_FORMAT_NONSTANDARD_BLOCK_SIZE_BIT = 4
VK_SPARSE_IMAGE_FORMAT_FLAG_BITS_MAX_ENUM = 2147483647
VkSparseImageFormatFlagBits = ctypes.c_uint32 # enum
VkSparseImageFormatFlags = ctypes.c_uint32

# values for enumeration 'VkFenceCreateFlagBits'
VkFenceCreateFlagBits__enumvalues = {
    1: 'VK_FENCE_CREATE_SIGNALED_BIT',
    2147483647: 'VK_FENCE_CREATE_FLAG_BITS_MAX_ENUM',
}
VK_FENCE_CREATE_SIGNALED_BIT = 1
VK_FENCE_CREATE_FLAG_BITS_MAX_ENUM = 2147483647
VkFenceCreateFlagBits = ctypes.c_uint32 # enum
VkFenceCreateFlags = ctypes.c_uint32
VkSemaphoreCreateFlags = ctypes.c_uint32

# values for enumeration 'VkEventCreateFlagBits'
VkEventCreateFlagBits__enumvalues = {
    1: 'VK_EVENT_CREATE_DEVICE_ONLY_BIT',
    1: 'VK_EVENT_CREATE_DEVICE_ONLY_BIT_KHR',
    2147483647: 'VK_EVENT_CREATE_FLAG_BITS_MAX_ENUM',
}
VK_EVENT_CREATE_DEVICE_ONLY_BIT = 1
VK_EVENT_CREATE_DEVICE_ONLY_BIT_KHR = 1
VK_EVENT_CREATE_FLAG_BITS_MAX_ENUM = 2147483647
VkEventCreateFlagBits = ctypes.c_uint32 # enum
VkEventCreateFlags = ctypes.c_uint32

# values for enumeration 'VkQueryPipelineStatisticFlagBits'
VkQueryPipelineStatisticFlagBits__enumvalues = {
    1: 'VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_VERTICES_BIT',
    2: 'VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_PRIMITIVES_BIT',
    4: 'VK_QUERY_PIPELINE_STATISTIC_VERTEX_SHADER_INVOCATIONS_BIT',
    8: 'VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_INVOCATIONS_BIT',
    16: 'VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_PRIMITIVES_BIT',
    32: 'VK_QUERY_PIPELINE_STATISTIC_CLIPPING_INVOCATIONS_BIT',
    64: 'VK_QUERY_PIPELINE_STATISTIC_CLIPPING_PRIMITIVES_BIT',
    128: 'VK_QUERY_PIPELINE_STATISTIC_FRAGMENT_SHADER_INVOCATIONS_BIT',
    256: 'VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_CONTROL_SHADER_PATCHES_BIT',
    512: 'VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_EVALUATION_SHADER_INVOCATIONS_BIT',
    1024: 'VK_QUERY_PIPELINE_STATISTIC_COMPUTE_SHADER_INVOCATIONS_BIT',
    2048: 'VK_QUERY_PIPELINE_STATISTIC_TASK_SHADER_INVOCATIONS_BIT_EXT',
    4096: 'VK_QUERY_PIPELINE_STATISTIC_MESH_SHADER_INVOCATIONS_BIT_EXT',
    8192: 'VK_QUERY_PIPELINE_STATISTIC_CLUSTER_CULLING_SHADER_INVOCATIONS_BIT_HUAWEI',
    2147483647: 'VK_QUERY_PIPELINE_STATISTIC_FLAG_BITS_MAX_ENUM',
}
VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_VERTICES_BIT = 1
VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_PRIMITIVES_BIT = 2
VK_QUERY_PIPELINE_STATISTIC_VERTEX_SHADER_INVOCATIONS_BIT = 4
VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_INVOCATIONS_BIT = 8
VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_PRIMITIVES_BIT = 16
VK_QUERY_PIPELINE_STATISTIC_CLIPPING_INVOCATIONS_BIT = 32
VK_QUERY_PIPELINE_STATISTIC_CLIPPING_PRIMITIVES_BIT = 64
VK_QUERY_PIPELINE_STATISTIC_FRAGMENT_SHADER_INVOCATIONS_BIT = 128
VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_CONTROL_SHADER_PATCHES_BIT = 256
VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_EVALUATION_SHADER_INVOCATIONS_BIT = 512
VK_QUERY_PIPELINE_STATISTIC_COMPUTE_SHADER_INVOCATIONS_BIT = 1024
VK_QUERY_PIPELINE_STATISTIC_TASK_SHADER_INVOCATIONS_BIT_EXT = 2048
VK_QUERY_PIPELINE_STATISTIC_MESH_SHADER_INVOCATIONS_BIT_EXT = 4096
VK_QUERY_PIPELINE_STATISTIC_CLUSTER_CULLING_SHADER_INVOCATIONS_BIT_HUAWEI = 8192
VK_QUERY_PIPELINE_STATISTIC_FLAG_BITS_MAX_ENUM = 2147483647
VkQueryPipelineStatisticFlagBits = ctypes.c_uint32 # enum
VkQueryPipelineStatisticFlags = ctypes.c_uint32
VkQueryPoolCreateFlags = ctypes.c_uint32

# values for enumeration 'VkQueryResultFlagBits'
VkQueryResultFlagBits__enumvalues = {
    1: 'VK_QUERY_RESULT_64_BIT',
    2: 'VK_QUERY_RESULT_WAIT_BIT',
    4: 'VK_QUERY_RESULT_WITH_AVAILABILITY_BIT',
    8: 'VK_QUERY_RESULT_PARTIAL_BIT',
    16: 'VK_QUERY_RESULT_WITH_STATUS_BIT_KHR',
    2147483647: 'VK_QUERY_RESULT_FLAG_BITS_MAX_ENUM',
}
VK_QUERY_RESULT_64_BIT = 1
VK_QUERY_RESULT_WAIT_BIT = 2
VK_QUERY_RESULT_WITH_AVAILABILITY_BIT = 4
VK_QUERY_RESULT_PARTIAL_BIT = 8
VK_QUERY_RESULT_WITH_STATUS_BIT_KHR = 16
VK_QUERY_RESULT_FLAG_BITS_MAX_ENUM = 2147483647
VkQueryResultFlagBits = ctypes.c_uint32 # enum
VkQueryResultFlags = ctypes.c_uint32

# values for enumeration 'VkBufferCreateFlagBits'
VkBufferCreateFlagBits__enumvalues = {
    1: 'VK_BUFFER_CREATE_SPARSE_BINDING_BIT',
    2: 'VK_BUFFER_CREATE_SPARSE_RESIDENCY_BIT',
    4: 'VK_BUFFER_CREATE_SPARSE_ALIASED_BIT',
    8: 'VK_BUFFER_CREATE_PROTECTED_BIT',
    16: 'VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT',
    32: 'VK_BUFFER_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT',
    64: 'VK_BUFFER_CREATE_VIDEO_PROFILE_INDEPENDENT_BIT_KHR',
    16: 'VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_EXT',
    16: 'VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR',
    2147483647: 'VK_BUFFER_CREATE_FLAG_BITS_MAX_ENUM',
}
VK_BUFFER_CREATE_SPARSE_BINDING_BIT = 1
VK_BUFFER_CREATE_SPARSE_RESIDENCY_BIT = 2
VK_BUFFER_CREATE_SPARSE_ALIASED_BIT = 4
VK_BUFFER_CREATE_PROTECTED_BIT = 8
VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT = 16
VK_BUFFER_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT = 32
VK_BUFFER_CREATE_VIDEO_PROFILE_INDEPENDENT_BIT_KHR = 64
VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_EXT = 16
VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR = 16
VK_BUFFER_CREATE_FLAG_BITS_MAX_ENUM = 2147483647
VkBufferCreateFlagBits = ctypes.c_uint32 # enum
VkBufferCreateFlags = ctypes.c_uint32

# values for enumeration 'VkBufferUsageFlagBits'
VkBufferUsageFlagBits__enumvalues = {
    1: 'VK_BUFFER_USAGE_TRANSFER_SRC_BIT',
    2: 'VK_BUFFER_USAGE_TRANSFER_DST_BIT',
    4: 'VK_BUFFER_USAGE_UNIFORM_TEXEL_BUFFER_BIT',
    8: 'VK_BUFFER_USAGE_STORAGE_TEXEL_BUFFER_BIT',
    16: 'VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT',
    32: 'VK_BUFFER_USAGE_STORAGE_BUFFER_BIT',
    64: 'VK_BUFFER_USAGE_INDEX_BUFFER_BIT',
    128: 'VK_BUFFER_USAGE_VERTEX_BUFFER_BIT',
    256: 'VK_BUFFER_USAGE_INDIRECT_BUFFER_BIT',
    131072: 'VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT',
    8192: 'VK_BUFFER_USAGE_VIDEO_DECODE_SRC_BIT_KHR',
    16384: 'VK_BUFFER_USAGE_VIDEO_DECODE_DST_BIT_KHR',
    2048: 'VK_BUFFER_USAGE_TRANSFORM_FEEDBACK_BUFFER_BIT_EXT',
    4096: 'VK_BUFFER_USAGE_TRANSFORM_FEEDBACK_COUNTER_BUFFER_BIT_EXT',
    512: 'VK_BUFFER_USAGE_CONDITIONAL_RENDERING_BIT_EXT',
    524288: 'VK_BUFFER_USAGE_ACCELERATION_STRUCTURE_BUILD_INPUT_READ_ONLY_BIT_KHR',
    1048576: 'VK_BUFFER_USAGE_ACCELERATION_STRUCTURE_STORAGE_BIT_KHR',
    1024: 'VK_BUFFER_USAGE_SHADER_BINDING_TABLE_BIT_KHR',
    32768: 'VK_BUFFER_USAGE_VIDEO_ENCODE_DST_BIT_KHR',
    65536: 'VK_BUFFER_USAGE_VIDEO_ENCODE_SRC_BIT_KHR',
    2097152: 'VK_BUFFER_USAGE_SAMPLER_DESCRIPTOR_BUFFER_BIT_EXT',
    4194304: 'VK_BUFFER_USAGE_RESOURCE_DESCRIPTOR_BUFFER_BIT_EXT',
    67108864: 'VK_BUFFER_USAGE_PUSH_DESCRIPTORS_DESCRIPTOR_BUFFER_BIT_EXT',
    8388608: 'VK_BUFFER_USAGE_MICROMAP_BUILD_INPUT_READ_ONLY_BIT_EXT',
    16777216: 'VK_BUFFER_USAGE_MICROMAP_STORAGE_BIT_EXT',
    1024: 'VK_BUFFER_USAGE_RAY_TRACING_BIT_NV',
    131072: 'VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT_EXT',
    131072: 'VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT_KHR',
    2147483647: 'VK_BUFFER_USAGE_FLAG_BITS_MAX_ENUM',
}
VK_BUFFER_USAGE_TRANSFER_SRC_BIT = 1
VK_BUFFER_USAGE_TRANSFER_DST_BIT = 2
VK_BUFFER_USAGE_UNIFORM_TEXEL_BUFFER_BIT = 4
VK_BUFFER_USAGE_STORAGE_TEXEL_BUFFER_BIT = 8
VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT = 16
VK_BUFFER_USAGE_STORAGE_BUFFER_BIT = 32
VK_BUFFER_USAGE_INDEX_BUFFER_BIT = 64
VK_BUFFER_USAGE_VERTEX_BUFFER_BIT = 128
VK_BUFFER_USAGE_INDIRECT_BUFFER_BIT = 256
VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT = 131072
VK_BUFFER_USAGE_VIDEO_DECODE_SRC_BIT_KHR = 8192
VK_BUFFER_USAGE_VIDEO_DECODE_DST_BIT_KHR = 16384
VK_BUFFER_USAGE_TRANSFORM_FEEDBACK_BUFFER_BIT_EXT = 2048
VK_BUFFER_USAGE_TRANSFORM_FEEDBACK_COUNTER_BUFFER_BIT_EXT = 4096
VK_BUFFER_USAGE_CONDITIONAL_RENDERING_BIT_EXT = 512
VK_BUFFER_USAGE_ACCELERATION_STRUCTURE_BUILD_INPUT_READ_ONLY_BIT_KHR = 524288
VK_BUFFER_USAGE_ACCELERATION_STRUCTURE_STORAGE_BIT_KHR = 1048576
VK_BUFFER_USAGE_SHADER_BINDING_TABLE_BIT_KHR = 1024
VK_BUFFER_USAGE_VIDEO_ENCODE_DST_BIT_KHR = 32768
VK_BUFFER_USAGE_VIDEO_ENCODE_SRC_BIT_KHR = 65536
VK_BUFFER_USAGE_SAMPLER_DESCRIPTOR_BUFFER_BIT_EXT = 2097152
VK_BUFFER_USAGE_RESOURCE_DESCRIPTOR_BUFFER_BIT_EXT = 4194304
VK_BUFFER_USAGE_PUSH_DESCRIPTORS_DESCRIPTOR_BUFFER_BIT_EXT = 67108864
VK_BUFFER_USAGE_MICROMAP_BUILD_INPUT_READ_ONLY_BIT_EXT = 8388608
VK_BUFFER_USAGE_MICROMAP_STORAGE_BIT_EXT = 16777216
VK_BUFFER_USAGE_RAY_TRACING_BIT_NV = 1024
VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT_EXT = 131072
VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT_KHR = 131072
VK_BUFFER_USAGE_FLAG_BITS_MAX_ENUM = 2147483647
VkBufferUsageFlagBits = ctypes.c_uint32 # enum
VkBufferUsageFlags = ctypes.c_uint32
VkBufferViewCreateFlags = ctypes.c_uint32

# values for enumeration 'VkImageViewCreateFlagBits'
VkImageViewCreateFlagBits__enumvalues = {
    1: 'VK_IMAGE_VIEW_CREATE_FRAGMENT_DENSITY_MAP_DYNAMIC_BIT_EXT',
    4: 'VK_IMAGE_VIEW_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT',
    2: 'VK_IMAGE_VIEW_CREATE_FRAGMENT_DENSITY_MAP_DEFERRED_BIT_EXT',
    2147483647: 'VK_IMAGE_VIEW_CREATE_FLAG_BITS_MAX_ENUM',
}
VK_IMAGE_VIEW_CREATE_FRAGMENT_DENSITY_MAP_DYNAMIC_BIT_EXT = 1
VK_IMAGE_VIEW_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT = 4
VK_IMAGE_VIEW_CREATE_FRAGMENT_DENSITY_MAP_DEFERRED_BIT_EXT = 2
VK_IMAGE_VIEW_CREATE_FLAG_BITS_MAX_ENUM = 2147483647
VkImageViewCreateFlagBits = ctypes.c_uint32 # enum
VkImageViewCreateFlags = ctypes.c_uint32
VkShaderModuleCreateFlags = ctypes.c_uint32

# values for enumeration 'VkPipelineCacheCreateFlagBits'
VkPipelineCacheCreateFlagBits__enumvalues = {
    1: 'VK_PIPELINE_CACHE_CREATE_EXTERNALLY_SYNCHRONIZED_BIT',
    1: 'VK_PIPELINE_CACHE_CREATE_EXTERNALLY_SYNCHRONIZED_BIT_EXT',
    2147483647: 'VK_PIPELINE_CACHE_CREATE_FLAG_BITS_MAX_ENUM',
}
VK_PIPELINE_CACHE_CREATE_EXTERNALLY_SYNCHRONIZED_BIT = 1
VK_PIPELINE_CACHE_CREATE_EXTERNALLY_SYNCHRONIZED_BIT_EXT = 1
VK_PIPELINE_CACHE_CREATE_FLAG_BITS_MAX_ENUM = 2147483647
VkPipelineCacheCreateFlagBits = ctypes.c_uint32 # enum
VkPipelineCacheCreateFlags = ctypes.c_uint32

# values for enumeration 'VkColorComponentFlagBits'
VkColorComponentFlagBits__enumvalues = {
    1: 'VK_COLOR_COMPONENT_R_BIT',
    2: 'VK_COLOR_COMPONENT_G_BIT',
    4: 'VK_COLOR_COMPONENT_B_BIT',
    8: 'VK_COLOR_COMPONENT_A_BIT',
    2147483647: 'VK_COLOR_COMPONENT_FLAG_BITS_MAX_ENUM',
}
VK_COLOR_COMPONENT_R_BIT = 1
VK_COLOR_COMPONENT_G_BIT = 2
VK_COLOR_COMPONENT_B_BIT = 4
VK_COLOR_COMPONENT_A_BIT = 8
VK_COLOR_COMPONENT_FLAG_BITS_MAX_ENUM = 2147483647
VkColorComponentFlagBits = ctypes.c_uint32 # enum
VkColorComponentFlags = ctypes.c_uint32

# values for enumeration 'VkPipelineCreateFlagBits'
VkPipelineCreateFlagBits__enumvalues = {
    1: 'VK_PIPELINE_CREATE_DISABLE_OPTIMIZATION_BIT',
    2: 'VK_PIPELINE_CREATE_ALLOW_DERIVATIVES_BIT',
    4: 'VK_PIPELINE_CREATE_DERIVATIVE_BIT',
    8: 'VK_PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT',
    16: 'VK_PIPELINE_CREATE_DISPATCH_BASE_BIT',
    256: 'VK_PIPELINE_CREATE_FAIL_ON_PIPELINE_COMPILE_REQUIRED_BIT',
    512: 'VK_PIPELINE_CREATE_EARLY_RETURN_ON_FAILURE_BIT',
    2097152: 'VK_PIPELINE_CREATE_RENDERING_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR',
    4194304: 'VK_PIPELINE_CREATE_RENDERING_FRAGMENT_DENSITY_MAP_ATTACHMENT_BIT_EXT',
    16384: 'VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_ANY_HIT_SHADERS_BIT_KHR',
    32768: 'VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_CLOSEST_HIT_SHADERS_BIT_KHR',
    65536: 'VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_MISS_SHADERS_BIT_KHR',
    131072: 'VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_INTERSECTION_SHADERS_BIT_KHR',
    4096: 'VK_PIPELINE_CREATE_RAY_TRACING_SKIP_TRIANGLES_BIT_KHR',
    8192: 'VK_PIPELINE_CREATE_RAY_TRACING_SKIP_AABBS_BIT_KHR',
    524288: 'VK_PIPELINE_CREATE_RAY_TRACING_SHADER_GROUP_HANDLE_CAPTURE_REPLAY_BIT_KHR',
    32: 'VK_PIPELINE_CREATE_DEFER_COMPILE_BIT_NV',
    64: 'VK_PIPELINE_CREATE_CAPTURE_STATISTICS_BIT_KHR',
    128: 'VK_PIPELINE_CREATE_CAPTURE_INTERNAL_REPRESENTATIONS_BIT_KHR',
    262144: 'VK_PIPELINE_CREATE_INDIRECT_BINDABLE_BIT_NV',
    2048: 'VK_PIPELINE_CREATE_LIBRARY_BIT_KHR',
    536870912: 'VK_PIPELINE_CREATE_DESCRIPTOR_BUFFER_BIT_EXT',
    8388608: 'VK_PIPELINE_CREATE_RETAIN_LINK_TIME_OPTIMIZATION_INFO_BIT_EXT',
    1024: 'VK_PIPELINE_CREATE_LINK_TIME_OPTIMIZATION_BIT_EXT',
    1048576: 'VK_PIPELINE_CREATE_RAY_TRACING_ALLOW_MOTION_BIT_NV',
    33554432: 'VK_PIPELINE_CREATE_COLOR_ATTACHMENT_FEEDBACK_LOOP_BIT_EXT',
    67108864: 'VK_PIPELINE_CREATE_DEPTH_STENCIL_ATTACHMENT_FEEDBACK_LOOP_BIT_EXT',
    16777216: 'VK_PIPELINE_CREATE_RAY_TRACING_OPACITY_MICROMAP_BIT_EXT',
    134217728: 'VK_PIPELINE_CREATE_NO_PROTECTED_ACCESS_BIT_EXT',
    1073741824: 'VK_PIPELINE_CREATE_PROTECTED_ACCESS_ONLY_BIT_EXT',
    16: 'VK_PIPELINE_CREATE_DISPATCH_BASE',
    2097152: 'VK_PIPELINE_RASTERIZATION_STATE_CREATE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR',
    4194304: 'VK_PIPELINE_RASTERIZATION_STATE_CREATE_FRAGMENT_DENSITY_MAP_ATTACHMENT_BIT_EXT',
    8: 'VK_PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT_KHR',
    16: 'VK_PIPELINE_CREATE_DISPATCH_BASE_KHR',
    256: 'VK_PIPELINE_CREATE_FAIL_ON_PIPELINE_COMPILE_REQUIRED_BIT_EXT',
    512: 'VK_PIPELINE_CREATE_EARLY_RETURN_ON_FAILURE_BIT_EXT',
    2147483647: 'VK_PIPELINE_CREATE_FLAG_BITS_MAX_ENUM',
}
VK_PIPELINE_CREATE_DISABLE_OPTIMIZATION_BIT = 1
VK_PIPELINE_CREATE_ALLOW_DERIVATIVES_BIT = 2
VK_PIPELINE_CREATE_DERIVATIVE_BIT = 4
VK_PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT = 8
VK_PIPELINE_CREATE_DISPATCH_BASE_BIT = 16
VK_PIPELINE_CREATE_FAIL_ON_PIPELINE_COMPILE_REQUIRED_BIT = 256
VK_PIPELINE_CREATE_EARLY_RETURN_ON_FAILURE_BIT = 512
VK_PIPELINE_CREATE_RENDERING_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR = 2097152
VK_PIPELINE_CREATE_RENDERING_FRAGMENT_DENSITY_MAP_ATTACHMENT_BIT_EXT = 4194304
VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_ANY_HIT_SHADERS_BIT_KHR = 16384
VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_CLOSEST_HIT_SHADERS_BIT_KHR = 32768
VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_MISS_SHADERS_BIT_KHR = 65536
VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_INTERSECTION_SHADERS_BIT_KHR = 131072
VK_PIPELINE_CREATE_RAY_TRACING_SKIP_TRIANGLES_BIT_KHR = 4096
VK_PIPELINE_CREATE_RAY_TRACING_SKIP_AABBS_BIT_KHR = 8192
VK_PIPELINE_CREATE_RAY_TRACING_SHADER_GROUP_HANDLE_CAPTURE_REPLAY_BIT_KHR = 524288
VK_PIPELINE_CREATE_DEFER_COMPILE_BIT_NV = 32
VK_PIPELINE_CREATE_CAPTURE_STATISTICS_BIT_KHR = 64
VK_PIPELINE_CREATE_CAPTURE_INTERNAL_REPRESENTATIONS_BIT_KHR = 128
VK_PIPELINE_CREATE_INDIRECT_BINDABLE_BIT_NV = 262144
VK_PIPELINE_CREATE_LIBRARY_BIT_KHR = 2048
VK_PIPELINE_CREATE_DESCRIPTOR_BUFFER_BIT_EXT = 536870912
VK_PIPELINE_CREATE_RETAIN_LINK_TIME_OPTIMIZATION_INFO_BIT_EXT = 8388608
VK_PIPELINE_CREATE_LINK_TIME_OPTIMIZATION_BIT_EXT = 1024
VK_PIPELINE_CREATE_RAY_TRACING_ALLOW_MOTION_BIT_NV = 1048576
VK_PIPELINE_CREATE_COLOR_ATTACHMENT_FEEDBACK_LOOP_BIT_EXT = 33554432
VK_PIPELINE_CREATE_DEPTH_STENCIL_ATTACHMENT_FEEDBACK_LOOP_BIT_EXT = 67108864
VK_PIPELINE_CREATE_RAY_TRACING_OPACITY_MICROMAP_BIT_EXT = 16777216
VK_PIPELINE_CREATE_NO_PROTECTED_ACCESS_BIT_EXT = 134217728
VK_PIPELINE_CREATE_PROTECTED_ACCESS_ONLY_BIT_EXT = 1073741824
VK_PIPELINE_CREATE_DISPATCH_BASE = 16
VK_PIPELINE_RASTERIZATION_STATE_CREATE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR = 2097152
VK_PIPELINE_RASTERIZATION_STATE_CREATE_FRAGMENT_DENSITY_MAP_ATTACHMENT_BIT_EXT = 4194304
VK_PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT_KHR = 8
VK_PIPELINE_CREATE_DISPATCH_BASE_KHR = 16
VK_PIPELINE_CREATE_FAIL_ON_PIPELINE_COMPILE_REQUIRED_BIT_EXT = 256
VK_PIPELINE_CREATE_EARLY_RETURN_ON_FAILURE_BIT_EXT = 512
VK_PIPELINE_CREATE_FLAG_BITS_MAX_ENUM = 2147483647
VkPipelineCreateFlagBits = ctypes.c_uint32 # enum
VkPipelineCreateFlags = ctypes.c_uint32

# values for enumeration 'VkPipelineShaderStageCreateFlagBits'
VkPipelineShaderStageCreateFlagBits__enumvalues = {
    1: 'VK_PIPELINE_SHADER_STAGE_CREATE_ALLOW_VARYING_SUBGROUP_SIZE_BIT',
    2: 'VK_PIPELINE_SHADER_STAGE_CREATE_REQUIRE_FULL_SUBGROUPS_BIT',
    1: 'VK_PIPELINE_SHADER_STAGE_CREATE_ALLOW_VARYING_SUBGROUP_SIZE_BIT_EXT',
    2: 'VK_PIPELINE_SHADER_STAGE_CREATE_REQUIRE_FULL_SUBGROUPS_BIT_EXT',
    2147483647: 'VK_PIPELINE_SHADER_STAGE_CREATE_FLAG_BITS_MAX_ENUM',
}
VK_PIPELINE_SHADER_STAGE_CREATE_ALLOW_VARYING_SUBGROUP_SIZE_BIT = 1
VK_PIPELINE_SHADER_STAGE_CREATE_REQUIRE_FULL_SUBGROUPS_BIT = 2
VK_PIPELINE_SHADER_STAGE_CREATE_ALLOW_VARYING_SUBGROUP_SIZE_BIT_EXT = 1
VK_PIPELINE_SHADER_STAGE_CREATE_REQUIRE_FULL_SUBGROUPS_BIT_EXT = 2
VK_PIPELINE_SHADER_STAGE_CREATE_FLAG_BITS_MAX_ENUM = 2147483647
VkPipelineShaderStageCreateFlagBits = ctypes.c_uint32 # enum
VkPipelineShaderStageCreateFlags = ctypes.c_uint32

# values for enumeration 'VkShaderStageFlagBits'
VkShaderStageFlagBits__enumvalues = {
    1: 'VK_SHADER_STAGE_VERTEX_BIT',
    2: 'VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT',
    4: 'VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT',
    8: 'VK_SHADER_STAGE_GEOMETRY_BIT',
    16: 'VK_SHADER_STAGE_FRAGMENT_BIT',
    32: 'VK_SHADER_STAGE_COMPUTE_BIT',
    31: 'VK_SHADER_STAGE_ALL_GRAPHICS',
    2147483647: 'VK_SHADER_STAGE_ALL',
    256: 'VK_SHADER_STAGE_RAYGEN_BIT_KHR',
    512: 'VK_SHADER_STAGE_ANY_HIT_BIT_KHR',
    1024: 'VK_SHADER_STAGE_CLOSEST_HIT_BIT_KHR',
    2048: 'VK_SHADER_STAGE_MISS_BIT_KHR',
    4096: 'VK_SHADER_STAGE_INTERSECTION_BIT_KHR',
    8192: 'VK_SHADER_STAGE_CALLABLE_BIT_KHR',
    64: 'VK_SHADER_STAGE_TASK_BIT_EXT',
    128: 'VK_SHADER_STAGE_MESH_BIT_EXT',
    16384: 'VK_SHADER_STAGE_SUBPASS_SHADING_BIT_HUAWEI',
    524288: 'VK_SHADER_STAGE_CLUSTER_CULLING_BIT_HUAWEI',
    256: 'VK_SHADER_STAGE_RAYGEN_BIT_NV',
    512: 'VK_SHADER_STAGE_ANY_HIT_BIT_NV',
    1024: 'VK_SHADER_STAGE_CLOSEST_HIT_BIT_NV',
    2048: 'VK_SHADER_STAGE_MISS_BIT_NV',
    4096: 'VK_SHADER_STAGE_INTERSECTION_BIT_NV',
    8192: 'VK_SHADER_STAGE_CALLABLE_BIT_NV',
    64: 'VK_SHADER_STAGE_TASK_BIT_NV',
    128: 'VK_SHADER_STAGE_MESH_BIT_NV',
    2147483647: 'VK_SHADER_STAGE_FLAG_BITS_MAX_ENUM',
}
VK_SHADER_STAGE_VERTEX_BIT = 1
VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT = 2
VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT = 4
VK_SHADER_STAGE_GEOMETRY_BIT = 8
VK_SHADER_STAGE_FRAGMENT_BIT = 16
VK_SHADER_STAGE_COMPUTE_BIT = 32
VK_SHADER_STAGE_ALL_GRAPHICS = 31
VK_SHADER_STAGE_ALL = 2147483647
VK_SHADER_STAGE_RAYGEN_BIT_KHR = 256
VK_SHADER_STAGE_ANY_HIT_BIT_KHR = 512
VK_SHADER_STAGE_CLOSEST_HIT_BIT_KHR = 1024
VK_SHADER_STAGE_MISS_BIT_KHR = 2048
VK_SHADER_STAGE_INTERSECTION_BIT_KHR = 4096
VK_SHADER_STAGE_CALLABLE_BIT_KHR = 8192
VK_SHADER_STAGE_TASK_BIT_EXT = 64
VK_SHADER_STAGE_MESH_BIT_EXT = 128
VK_SHADER_STAGE_SUBPASS_SHADING_BIT_HUAWEI = 16384
VK_SHADER_STAGE_CLUSTER_CULLING_BIT_HUAWEI = 524288
VK_SHADER_STAGE_RAYGEN_BIT_NV = 256
VK_SHADER_STAGE_ANY_HIT_BIT_NV = 512
VK_SHADER_STAGE_CLOSEST_HIT_BIT_NV = 1024
VK_SHADER_STAGE_MISS_BIT_NV = 2048
VK_SHADER_STAGE_INTERSECTION_BIT_NV = 4096
VK_SHADER_STAGE_CALLABLE_BIT_NV = 8192
VK_SHADER_STAGE_TASK_BIT_NV = 64
VK_SHADER_STAGE_MESH_BIT_NV = 128
VK_SHADER_STAGE_FLAG_BITS_MAX_ENUM = 2147483647
VkShaderStageFlagBits = ctypes.c_uint32 # enum

# values for enumeration 'VkCullModeFlagBits'
VkCullModeFlagBits__enumvalues = {
    0: 'VK_CULL_MODE_NONE',
    1: 'VK_CULL_MODE_FRONT_BIT',
    2: 'VK_CULL_MODE_BACK_BIT',
    3: 'VK_CULL_MODE_FRONT_AND_BACK',
    2147483647: 'VK_CULL_MODE_FLAG_BITS_MAX_ENUM',
}
VK_CULL_MODE_NONE = 0
VK_CULL_MODE_FRONT_BIT = 1
VK_CULL_MODE_BACK_BIT = 2
VK_CULL_MODE_FRONT_AND_BACK = 3
VK_CULL_MODE_FLAG_BITS_MAX_ENUM = 2147483647
VkCullModeFlagBits = ctypes.c_uint32 # enum
VkCullModeFlags = ctypes.c_uint32
VkPipelineVertexInputStateCreateFlags = ctypes.c_uint32
VkPipelineInputAssemblyStateCreateFlags = ctypes.c_uint32
VkPipelineTessellationStateCreateFlags = ctypes.c_uint32
VkPipelineViewportStateCreateFlags = ctypes.c_uint32
VkPipelineRasterizationStateCreateFlags = ctypes.c_uint32
VkPipelineMultisampleStateCreateFlags = ctypes.c_uint32

# values for enumeration 'VkPipelineDepthStencilStateCreateFlagBits'
VkPipelineDepthStencilStateCreateFlagBits__enumvalues = {
    1: 'VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_DEPTH_ACCESS_BIT_EXT',
    2: 'VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_STENCIL_ACCESS_BIT_EXT',
    1: 'VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_DEPTH_ACCESS_BIT_ARM',
    2: 'VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_STENCIL_ACCESS_BIT_ARM',
    2147483647: 'VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_FLAG_BITS_MAX_ENUM',
}
VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_DEPTH_ACCESS_BIT_EXT = 1
VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_STENCIL_ACCESS_BIT_EXT = 2
VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_DEPTH_ACCESS_BIT_ARM = 1
VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_STENCIL_ACCESS_BIT_ARM = 2
VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_FLAG_BITS_MAX_ENUM = 2147483647
VkPipelineDepthStencilStateCreateFlagBits = ctypes.c_uint32 # enum
VkPipelineDepthStencilStateCreateFlags = ctypes.c_uint32

# values for enumeration 'VkPipelineColorBlendStateCreateFlagBits'
VkPipelineColorBlendStateCreateFlagBits__enumvalues = {
    1: 'VK_PIPELINE_COLOR_BLEND_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_BIT_EXT',
    1: 'VK_PIPELINE_COLOR_BLEND_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_BIT_ARM',
    2147483647: 'VK_PIPELINE_COLOR_BLEND_STATE_CREATE_FLAG_BITS_MAX_ENUM',
}
VK_PIPELINE_COLOR_BLEND_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_BIT_EXT = 1
VK_PIPELINE_COLOR_BLEND_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_BIT_ARM = 1
VK_PIPELINE_COLOR_BLEND_STATE_CREATE_FLAG_BITS_MAX_ENUM = 2147483647
VkPipelineColorBlendStateCreateFlagBits = ctypes.c_uint32 # enum
VkPipelineColorBlendStateCreateFlags = ctypes.c_uint32
VkPipelineDynamicStateCreateFlags = ctypes.c_uint32

# values for enumeration 'VkPipelineLayoutCreateFlagBits'
VkPipelineLayoutCreateFlagBits__enumvalues = {
    2: 'VK_PIPELINE_LAYOUT_CREATE_INDEPENDENT_SETS_BIT_EXT',
    2147483647: 'VK_PIPELINE_LAYOUT_CREATE_FLAG_BITS_MAX_ENUM',
}
VK_PIPELINE_LAYOUT_CREATE_INDEPENDENT_SETS_BIT_EXT = 2
VK_PIPELINE_LAYOUT_CREATE_FLAG_BITS_MAX_ENUM = 2147483647
VkPipelineLayoutCreateFlagBits = ctypes.c_uint32 # enum
VkPipelineLayoutCreateFlags = ctypes.c_uint32
VkShaderStageFlags = ctypes.c_uint32

# values for enumeration 'VkSamplerCreateFlagBits'
VkSamplerCreateFlagBits__enumvalues = {
    1: 'VK_SAMPLER_CREATE_SUBSAMPLED_BIT_EXT',
    2: 'VK_SAMPLER_CREATE_SUBSAMPLED_COARSE_RECONSTRUCTION_BIT_EXT',
    8: 'VK_SAMPLER_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT',
    4: 'VK_SAMPLER_CREATE_NON_SEAMLESS_CUBE_MAP_BIT_EXT',
    16: 'VK_SAMPLER_CREATE_IMAGE_PROCESSING_BIT_QCOM',
    2147483647: 'VK_SAMPLER_CREATE_FLAG_BITS_MAX_ENUM',
}
VK_SAMPLER_CREATE_SUBSAMPLED_BIT_EXT = 1
VK_SAMPLER_CREATE_SUBSAMPLED_COARSE_RECONSTRUCTION_BIT_EXT = 2
VK_SAMPLER_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT = 8
VK_SAMPLER_CREATE_NON_SEAMLESS_CUBE_MAP_BIT_EXT = 4
VK_SAMPLER_CREATE_IMAGE_PROCESSING_BIT_QCOM = 16
VK_SAMPLER_CREATE_FLAG_BITS_MAX_ENUM = 2147483647
VkSamplerCreateFlagBits = ctypes.c_uint32 # enum
VkSamplerCreateFlags = ctypes.c_uint32

# values for enumeration 'VkDescriptorPoolCreateFlagBits'
VkDescriptorPoolCreateFlagBits__enumvalues = {
    1: 'VK_DESCRIPTOR_POOL_CREATE_FREE_DESCRIPTOR_SET_BIT',
    2: 'VK_DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT',
    4: 'VK_DESCRIPTOR_POOL_CREATE_HOST_ONLY_BIT_EXT',
    8: 'VK_DESCRIPTOR_POOL_CREATE_ALLOW_OVERALLOCATION_SETS_BIT_NV',
    16: 'VK_DESCRIPTOR_POOL_CREATE_ALLOW_OVERALLOCATION_POOLS_BIT_NV',
    2: 'VK_DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT_EXT',
    4: 'VK_DESCRIPTOR_POOL_CREATE_HOST_ONLY_BIT_VALVE',
    2147483647: 'VK_DESCRIPTOR_POOL_CREATE_FLAG_BITS_MAX_ENUM',
}
VK_DESCRIPTOR_POOL_CREATE_FREE_DESCRIPTOR_SET_BIT = 1
VK_DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT = 2
VK_DESCRIPTOR_POOL_CREATE_HOST_ONLY_BIT_EXT = 4
VK_DESCRIPTOR_POOL_CREATE_ALLOW_OVERALLOCATION_SETS_BIT_NV = 8
VK_DESCRIPTOR_POOL_CREATE_ALLOW_OVERALLOCATION_POOLS_BIT_NV = 16
VK_DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT_EXT = 2
VK_DESCRIPTOR_POOL_CREATE_HOST_ONLY_BIT_VALVE = 4
VK_DESCRIPTOR_POOL_CREATE_FLAG_BITS_MAX_ENUM = 2147483647
VkDescriptorPoolCreateFlagBits = ctypes.c_uint32 # enum
VkDescriptorPoolCreateFlags = ctypes.c_uint32
VkDescriptorPoolResetFlags = ctypes.c_uint32

# values for enumeration 'VkDescriptorSetLayoutCreateFlagBits'
VkDescriptorSetLayoutCreateFlagBits__enumvalues = {
    2: 'VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT',
    1: 'VK_DESCRIPTOR_SET_LAYOUT_CREATE_PUSH_DESCRIPTOR_BIT_KHR',
    16: 'VK_DESCRIPTOR_SET_LAYOUT_CREATE_DESCRIPTOR_BUFFER_BIT_EXT',
    32: 'VK_DESCRIPTOR_SET_LAYOUT_CREATE_EMBEDDED_IMMUTABLE_SAMPLERS_BIT_EXT',
    128: 'VK_DESCRIPTOR_SET_LAYOUT_CREATE_INDIRECT_BINDABLE_BIT_NV',
    4: 'VK_DESCRIPTOR_SET_LAYOUT_CREATE_HOST_ONLY_POOL_BIT_EXT',
    64: 'VK_DESCRIPTOR_SET_LAYOUT_CREATE_PER_STAGE_BIT_NV',
    2: 'VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT_EXT',
    4: 'VK_DESCRIPTOR_SET_LAYOUT_CREATE_HOST_ONLY_POOL_BIT_VALVE',
    2147483647: 'VK_DESCRIPTOR_SET_LAYOUT_CREATE_FLAG_BITS_MAX_ENUM',
}
VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT = 2
VK_DESCRIPTOR_SET_LAYOUT_CREATE_PUSH_DESCRIPTOR_BIT_KHR = 1
VK_DESCRIPTOR_SET_LAYOUT_CREATE_DESCRIPTOR_BUFFER_BIT_EXT = 16
VK_DESCRIPTOR_SET_LAYOUT_CREATE_EMBEDDED_IMMUTABLE_SAMPLERS_BIT_EXT = 32
VK_DESCRIPTOR_SET_LAYOUT_CREATE_INDIRECT_BINDABLE_BIT_NV = 128
VK_DESCRIPTOR_SET_LAYOUT_CREATE_HOST_ONLY_POOL_BIT_EXT = 4
VK_DESCRIPTOR_SET_LAYOUT_CREATE_PER_STAGE_BIT_NV = 64
VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT_EXT = 2
VK_DESCRIPTOR_SET_LAYOUT_CREATE_HOST_ONLY_POOL_BIT_VALVE = 4
VK_DESCRIPTOR_SET_LAYOUT_CREATE_FLAG_BITS_MAX_ENUM = 2147483647
VkDescriptorSetLayoutCreateFlagBits = ctypes.c_uint32 # enum
VkDescriptorSetLayoutCreateFlags = ctypes.c_uint32

# values for enumeration 'VkAttachmentDescriptionFlagBits'
VkAttachmentDescriptionFlagBits__enumvalues = {
    1: 'VK_ATTACHMENT_DESCRIPTION_MAY_ALIAS_BIT',
    2147483647: 'VK_ATTACHMENT_DESCRIPTION_FLAG_BITS_MAX_ENUM',
}
VK_ATTACHMENT_DESCRIPTION_MAY_ALIAS_BIT = 1
VK_ATTACHMENT_DESCRIPTION_FLAG_BITS_MAX_ENUM = 2147483647
VkAttachmentDescriptionFlagBits = ctypes.c_uint32 # enum
VkAttachmentDescriptionFlags = ctypes.c_uint32

# values for enumeration 'VkDependencyFlagBits'
VkDependencyFlagBits__enumvalues = {
    1: 'VK_DEPENDENCY_BY_REGION_BIT',
    4: 'VK_DEPENDENCY_DEVICE_GROUP_BIT',
    2: 'VK_DEPENDENCY_VIEW_LOCAL_BIT',
    8: 'VK_DEPENDENCY_FEEDBACK_LOOP_BIT_EXT',
    2: 'VK_DEPENDENCY_VIEW_LOCAL_BIT_KHR',
    4: 'VK_DEPENDENCY_DEVICE_GROUP_BIT_KHR',
    2147483647: 'VK_DEPENDENCY_FLAG_BITS_MAX_ENUM',
}
VK_DEPENDENCY_BY_REGION_BIT = 1
VK_DEPENDENCY_DEVICE_GROUP_BIT = 4
VK_DEPENDENCY_VIEW_LOCAL_BIT = 2
VK_DEPENDENCY_FEEDBACK_LOOP_BIT_EXT = 8
VK_DEPENDENCY_VIEW_LOCAL_BIT_KHR = 2
VK_DEPENDENCY_DEVICE_GROUP_BIT_KHR = 4
VK_DEPENDENCY_FLAG_BITS_MAX_ENUM = 2147483647
VkDependencyFlagBits = ctypes.c_uint32 # enum
VkDependencyFlags = ctypes.c_uint32

# values for enumeration 'VkFramebufferCreateFlagBits'
VkFramebufferCreateFlagBits__enumvalues = {
    1: 'VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT',
    1: 'VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT_KHR',
    2147483647: 'VK_FRAMEBUFFER_CREATE_FLAG_BITS_MAX_ENUM',
}
VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT = 1
VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT_KHR = 1
VK_FRAMEBUFFER_CREATE_FLAG_BITS_MAX_ENUM = 2147483647
VkFramebufferCreateFlagBits = ctypes.c_uint32 # enum
VkFramebufferCreateFlags = ctypes.c_uint32

# values for enumeration 'VkRenderPassCreateFlagBits'
VkRenderPassCreateFlagBits__enumvalues = {
    2: 'VK_RENDER_PASS_CREATE_TRANSFORM_BIT_QCOM',
    2147483647: 'VK_RENDER_PASS_CREATE_FLAG_BITS_MAX_ENUM',
}
VK_RENDER_PASS_CREATE_TRANSFORM_BIT_QCOM = 2
VK_RENDER_PASS_CREATE_FLAG_BITS_MAX_ENUM = 2147483647
VkRenderPassCreateFlagBits = ctypes.c_uint32 # enum
VkRenderPassCreateFlags = ctypes.c_uint32

# values for enumeration 'VkSubpassDescriptionFlagBits'
VkSubpassDescriptionFlagBits__enumvalues = {
    1: 'VK_SUBPASS_DESCRIPTION_PER_VIEW_ATTRIBUTES_BIT_NVX',
    2: 'VK_SUBPASS_DESCRIPTION_PER_VIEW_POSITION_X_ONLY_BIT_NVX',
    4: 'VK_SUBPASS_DESCRIPTION_FRAGMENT_REGION_BIT_QCOM',
    8: 'VK_SUBPASS_DESCRIPTION_SHADER_RESOLVE_BIT_QCOM',
    16: 'VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_COLOR_ACCESS_BIT_EXT',
    32: 'VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_DEPTH_ACCESS_BIT_EXT',
    64: 'VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_STENCIL_ACCESS_BIT_EXT',
    128: 'VK_SUBPASS_DESCRIPTION_ENABLE_LEGACY_DITHERING_BIT_EXT',
    16: 'VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_COLOR_ACCESS_BIT_ARM',
    32: 'VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_DEPTH_ACCESS_BIT_ARM',
    64: 'VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_STENCIL_ACCESS_BIT_ARM',
    2147483647: 'VK_SUBPASS_DESCRIPTION_FLAG_BITS_MAX_ENUM',
}
VK_SUBPASS_DESCRIPTION_PER_VIEW_ATTRIBUTES_BIT_NVX = 1
VK_SUBPASS_DESCRIPTION_PER_VIEW_POSITION_X_ONLY_BIT_NVX = 2
VK_SUBPASS_DESCRIPTION_FRAGMENT_REGION_BIT_QCOM = 4
VK_SUBPASS_DESCRIPTION_SHADER_RESOLVE_BIT_QCOM = 8
VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_COLOR_ACCESS_BIT_EXT = 16
VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_DEPTH_ACCESS_BIT_EXT = 32
VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_STENCIL_ACCESS_BIT_EXT = 64
VK_SUBPASS_DESCRIPTION_ENABLE_LEGACY_DITHERING_BIT_EXT = 128
VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_COLOR_ACCESS_BIT_ARM = 16
VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_DEPTH_ACCESS_BIT_ARM = 32
VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_STENCIL_ACCESS_BIT_ARM = 64
VK_SUBPASS_DESCRIPTION_FLAG_BITS_MAX_ENUM = 2147483647
VkSubpassDescriptionFlagBits = ctypes.c_uint32 # enum
VkSubpassDescriptionFlags = ctypes.c_uint32

# values for enumeration 'VkCommandPoolCreateFlagBits'
VkCommandPoolCreateFlagBits__enumvalues = {
    1: 'VK_COMMAND_POOL_CREATE_TRANSIENT_BIT',
    2: 'VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT',
    4: 'VK_COMMAND_POOL_CREATE_PROTECTED_BIT',
    2147483647: 'VK_COMMAND_POOL_CREATE_FLAG_BITS_MAX_ENUM',
}
VK_COMMAND_POOL_CREATE_TRANSIENT_BIT = 1
VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT = 2
VK_COMMAND_POOL_CREATE_PROTECTED_BIT = 4
VK_COMMAND_POOL_CREATE_FLAG_BITS_MAX_ENUM = 2147483647
VkCommandPoolCreateFlagBits = ctypes.c_uint32 # enum
VkCommandPoolCreateFlags = ctypes.c_uint32

# values for enumeration 'VkCommandPoolResetFlagBits'
VkCommandPoolResetFlagBits__enumvalues = {
    1: 'VK_COMMAND_POOL_RESET_RELEASE_RESOURCES_BIT',
    2147483647: 'VK_COMMAND_POOL_RESET_FLAG_BITS_MAX_ENUM',
}
VK_COMMAND_POOL_RESET_RELEASE_RESOURCES_BIT = 1
VK_COMMAND_POOL_RESET_FLAG_BITS_MAX_ENUM = 2147483647
VkCommandPoolResetFlagBits = ctypes.c_uint32 # enum
VkCommandPoolResetFlags = ctypes.c_uint32

# values for enumeration 'VkCommandBufferUsageFlagBits'
VkCommandBufferUsageFlagBits__enumvalues = {
    1: 'VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT',
    2: 'VK_COMMAND_BUFFER_USAGE_RENDER_PASS_CONTINUE_BIT',
    4: 'VK_COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT',
    2147483647: 'VK_COMMAND_BUFFER_USAGE_FLAG_BITS_MAX_ENUM',
}
VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT = 1
VK_COMMAND_BUFFER_USAGE_RENDER_PASS_CONTINUE_BIT = 2
VK_COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT = 4
VK_COMMAND_BUFFER_USAGE_FLAG_BITS_MAX_ENUM = 2147483647
VkCommandBufferUsageFlagBits = ctypes.c_uint32 # enum
VkCommandBufferUsageFlags = ctypes.c_uint32

# values for enumeration 'VkQueryControlFlagBits'
VkQueryControlFlagBits__enumvalues = {
    1: 'VK_QUERY_CONTROL_PRECISE_BIT',
    2147483647: 'VK_QUERY_CONTROL_FLAG_BITS_MAX_ENUM',
}
VK_QUERY_CONTROL_PRECISE_BIT = 1
VK_QUERY_CONTROL_FLAG_BITS_MAX_ENUM = 2147483647
VkQueryControlFlagBits = ctypes.c_uint32 # enum
VkQueryControlFlags = ctypes.c_uint32

# values for enumeration 'VkCommandBufferResetFlagBits'
VkCommandBufferResetFlagBits__enumvalues = {
    1: 'VK_COMMAND_BUFFER_RESET_RELEASE_RESOURCES_BIT',
    2147483647: 'VK_COMMAND_BUFFER_RESET_FLAG_BITS_MAX_ENUM',
}
VK_COMMAND_BUFFER_RESET_RELEASE_RESOURCES_BIT = 1
VK_COMMAND_BUFFER_RESET_FLAG_BITS_MAX_ENUM = 2147483647
VkCommandBufferResetFlagBits = ctypes.c_uint32 # enum
VkCommandBufferResetFlags = ctypes.c_uint32

# values for enumeration 'VkStencilFaceFlagBits'
VkStencilFaceFlagBits__enumvalues = {
    1: 'VK_STENCIL_FACE_FRONT_BIT',
    2: 'VK_STENCIL_FACE_BACK_BIT',
    3: 'VK_STENCIL_FACE_FRONT_AND_BACK',
    3: 'VK_STENCIL_FRONT_AND_BACK',
    2147483647: 'VK_STENCIL_FACE_FLAG_BITS_MAX_ENUM',
}
VK_STENCIL_FACE_FRONT_BIT = 1
VK_STENCIL_FACE_BACK_BIT = 2
VK_STENCIL_FACE_FRONT_AND_BACK = 3
VK_STENCIL_FRONT_AND_BACK = 3
VK_STENCIL_FACE_FLAG_BITS_MAX_ENUM = 2147483647
VkStencilFaceFlagBits = ctypes.c_uint32 # enum
VkStencilFaceFlags = ctypes.c_uint32
class struct_VkExtent2D(Structure):
    pass

struct_VkExtent2D._pack_ = 1 # source:False
struct_VkExtent2D._fields_ = [
    ('width', ctypes.c_uint32),
    ('height', ctypes.c_uint32),
]

VkExtent2D = struct_VkExtent2D
class struct_VkExtent3D(Structure):
    pass

struct_VkExtent3D._pack_ = 1 # source:False
struct_VkExtent3D._fields_ = [
    ('width', ctypes.c_uint32),
    ('height', ctypes.c_uint32),
    ('depth', ctypes.c_uint32),
]

VkExtent3D = struct_VkExtent3D
class struct_VkOffset2D(Structure):
    pass

struct_VkOffset2D._pack_ = 1 # source:False
struct_VkOffset2D._fields_ = [
    ('x', ctypes.c_int32),
    ('y', ctypes.c_int32),
]

VkOffset2D = struct_VkOffset2D
class struct_VkOffset3D(Structure):
    pass

struct_VkOffset3D._pack_ = 1 # source:False
struct_VkOffset3D._fields_ = [
    ('x', ctypes.c_int32),
    ('y', ctypes.c_int32),
    ('z', ctypes.c_int32),
]

VkOffset3D = struct_VkOffset3D
class struct_VkRect2D(Structure):
    _pack_ = 1 # source:False
    _fields_ = [
    ('offset', VkOffset2D),
    ('extent', VkExtent2D),
     ]

VkRect2D = struct_VkRect2D
class struct_VkBaseInStructure(Structure):
    pass

struct_VkBaseInStructure._pack_ = 1 # source:False
struct_VkBaseInStructure._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(struct_VkBaseInStructure)),
]

VkBaseInStructure = struct_VkBaseInStructure
class struct_VkBaseOutStructure(Structure):
    pass

struct_VkBaseOutStructure._pack_ = 1 # source:False
struct_VkBaseOutStructure._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(struct_VkBaseOutStructure)),
]

VkBaseOutStructure = struct_VkBaseOutStructure
class struct_VkBufferMemoryBarrier(Structure):
    pass

struct_VkBufferMemoryBarrier._pack_ = 1 # source:False
struct_VkBufferMemoryBarrier._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('srcAccessMask', ctypes.c_uint32),
    ('dstAccessMask', ctypes.c_uint32),
    ('srcQueueFamilyIndex', ctypes.c_uint32),
    ('dstQueueFamilyIndex', ctypes.c_uint32),
    ('buffer', ctypes.POINTER(struct_VkBuffer_T)),
    ('offset', ctypes.c_uint64),
    ('size', ctypes.c_uint64),
]

VkBufferMemoryBarrier = struct_VkBufferMemoryBarrier
class struct_VkDispatchIndirectCommand(Structure):
    pass

struct_VkDispatchIndirectCommand._pack_ = 1 # source:False
struct_VkDispatchIndirectCommand._fields_ = [
    ('x', ctypes.c_uint32),
    ('y', ctypes.c_uint32),
    ('z', ctypes.c_uint32),
]

VkDispatchIndirectCommand = struct_VkDispatchIndirectCommand
class struct_VkDrawIndexedIndirectCommand(Structure):
    pass

struct_VkDrawIndexedIndirectCommand._pack_ = 1 # source:False
struct_VkDrawIndexedIndirectCommand._fields_ = [
    ('indexCount', ctypes.c_uint32),
    ('instanceCount', ctypes.c_uint32),
    ('firstIndex', ctypes.c_uint32),
    ('vertexOffset', ctypes.c_int32),
    ('firstInstance', ctypes.c_uint32),
]

VkDrawIndexedIndirectCommand = struct_VkDrawIndexedIndirectCommand
class struct_VkDrawIndirectCommand(Structure):
    pass

struct_VkDrawIndirectCommand._pack_ = 1 # source:False
struct_VkDrawIndirectCommand._fields_ = [
    ('vertexCount', ctypes.c_uint32),
    ('instanceCount', ctypes.c_uint32),
    ('firstVertex', ctypes.c_uint32),
    ('firstInstance', ctypes.c_uint32),
]

VkDrawIndirectCommand = struct_VkDrawIndirectCommand
class struct_VkImageSubresourceRange(Structure):
    pass

struct_VkImageSubresourceRange._pack_ = 1 # source:False
struct_VkImageSubresourceRange._fields_ = [
    ('aspectMask', ctypes.c_uint32),
    ('baseMipLevel', ctypes.c_uint32),
    ('levelCount', ctypes.c_uint32),
    ('baseArrayLayer', ctypes.c_uint32),
    ('layerCount', ctypes.c_uint32),
]

VkImageSubresourceRange = struct_VkImageSubresourceRange
class struct_VkImageMemoryBarrier(Structure):
    pass

struct_VkImageMemoryBarrier._pack_ = 1 # source:False
struct_VkImageMemoryBarrier._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('srcAccessMask', ctypes.c_uint32),
    ('dstAccessMask', ctypes.c_uint32),
    ('oldLayout', VkImageLayout),
    ('newLayout', VkImageLayout),
    ('srcQueueFamilyIndex', ctypes.c_uint32),
    ('dstQueueFamilyIndex', ctypes.c_uint32),
    ('image', ctypes.POINTER(struct_VkImage_T)),
    ('subresourceRange', VkImageSubresourceRange),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkImageMemoryBarrier = struct_VkImageMemoryBarrier
class struct_VkMemoryBarrier(Structure):
    pass

struct_VkMemoryBarrier._pack_ = 1 # source:False
struct_VkMemoryBarrier._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('srcAccessMask', ctypes.c_uint32),
    ('dstAccessMask', ctypes.c_uint32),
]

VkMemoryBarrier = struct_VkMemoryBarrier
class struct_VkPipelineCacheHeaderVersionOne(Structure):
    pass

struct_VkPipelineCacheHeaderVersionOne._pack_ = 1 # source:False
struct_VkPipelineCacheHeaderVersionOne._fields_ = [
    ('headerSize', ctypes.c_uint32),
    ('headerVersion', VkPipelineCacheHeaderVersion),
    ('vendorID', ctypes.c_uint32),
    ('deviceID', ctypes.c_uint32),
    ('pipelineCacheUUID', ctypes.c_ubyte * 16),
]

VkPipelineCacheHeaderVersionOne = struct_VkPipelineCacheHeaderVersionOne
PFN_vkAllocationFunction = ctypes.CFUNCTYPE(ctypes.POINTER(None), ctypes.POINTER(None), ctypes.c_uint64, ctypes.c_uint64, VkSystemAllocationScope)
PFN_vkFreeFunction = ctypes.CFUNCTYPE(None, ctypes.POINTER(None), ctypes.POINTER(None))
PFN_vkInternalAllocationNotification = ctypes.CFUNCTYPE(None, ctypes.POINTER(None), ctypes.c_uint64, VkInternalAllocationType, VkSystemAllocationScope)
PFN_vkInternalFreeNotification = ctypes.CFUNCTYPE(None, ctypes.POINTER(None), ctypes.c_uint64, VkInternalAllocationType, VkSystemAllocationScope)
PFN_vkReallocationFunction = ctypes.CFUNCTYPE(ctypes.POINTER(None), ctypes.POINTER(None), ctypes.POINTER(None), ctypes.c_uint64, ctypes.c_uint64, VkSystemAllocationScope)
PFN_vkVoidFunction = ctypes.CFUNCTYPE(None)
class struct_VkAllocationCallbacks(Structure):
    pass

struct_VkAllocationCallbacks._pack_ = 1 # source:False
struct_VkAllocationCallbacks._fields_ = [
    ('pUserData', ctypes.POINTER(None)),
    ('pfnAllocation', ctypes.CFUNCTYPE(ctypes.POINTER(None), ctypes.POINTER(None), ctypes.c_uint64, ctypes.c_uint64, VkSystemAllocationScope)),
    ('pfnReallocation', ctypes.CFUNCTYPE(ctypes.POINTER(None), ctypes.POINTER(None), ctypes.POINTER(None), ctypes.c_uint64, ctypes.c_uint64, VkSystemAllocationScope)),
    ('pfnFree', ctypes.CFUNCTYPE(None, ctypes.POINTER(None), ctypes.POINTER(None))),
    ('pfnInternalAllocation', ctypes.CFUNCTYPE(None, ctypes.POINTER(None), ctypes.c_uint64, VkInternalAllocationType, VkSystemAllocationScope)),
    ('pfnInternalFree', ctypes.CFUNCTYPE(None, ctypes.POINTER(None), ctypes.c_uint64, VkInternalAllocationType, VkSystemAllocationScope)),
]

VkAllocationCallbacks = struct_VkAllocationCallbacks
class struct_VkApplicationInfo(Structure):
    pass

struct_VkApplicationInfo._pack_ = 1 # source:False
struct_VkApplicationInfo._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('pApplicationName', ctypes.POINTER(ctypes.c_char)),
    ('applicationVersion', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('pEngineName', ctypes.POINTER(ctypes.c_char)),
    ('engineVersion', ctypes.c_uint32),
    ('apiVersion', ctypes.c_uint32),
]

VkApplicationInfo = struct_VkApplicationInfo
class struct_VkFormatProperties(Structure):
    pass

struct_VkFormatProperties._pack_ = 1 # source:False
struct_VkFormatProperties._fields_ = [
    ('linearTilingFeatures', ctypes.c_uint32),
    ('optimalTilingFeatures', ctypes.c_uint32),
    ('bufferFeatures', ctypes.c_uint32),
]

VkFormatProperties = struct_VkFormatProperties
class struct_VkImageFormatProperties(Structure):
    pass

struct_VkImageFormatProperties._pack_ = 1 # source:False
struct_VkImageFormatProperties._fields_ = [
    ('maxExtent', VkExtent3D),
    ('maxMipLevels', ctypes.c_uint32),
    ('maxArrayLayers', ctypes.c_uint32),
    ('sampleCounts', ctypes.c_uint32),
    ('maxResourceSize', ctypes.c_uint64),
]

VkImageFormatProperties = struct_VkImageFormatProperties
class struct_VkInstanceCreateInfo(Structure):
    pass

struct_VkInstanceCreateInfo._pack_ = 1 # source:False
struct_VkInstanceCreateInfo._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('flags', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('pApplicationInfo', ctypes.POINTER(struct_VkApplicationInfo)),
    ('enabledLayerCount', ctypes.c_uint32),
    ('PADDING_2', ctypes.c_ubyte * 4),
    ('ppEnabledLayerNames', ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
    ('enabledExtensionCount', ctypes.c_uint32),
    ('PADDING_3', ctypes.c_ubyte * 4),
    ('ppEnabledExtensionNames', ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
]

VkInstanceCreateInfo = struct_VkInstanceCreateInfo
class struct_VkMemoryHeap(Structure):
    pass

struct_VkMemoryHeap._pack_ = 1 # source:False
struct_VkMemoryHeap._fields_ = [
    ('size', ctypes.c_uint64),
    ('flags', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
]

VkMemoryHeap = struct_VkMemoryHeap
class struct_VkMemoryType(Structure):
    pass

struct_VkMemoryType._pack_ = 1 # source:False
struct_VkMemoryType._fields_ = [
    ('propertyFlags', ctypes.c_uint32),
    ('heapIndex', ctypes.c_uint32),
]

VkMemoryType = struct_VkMemoryType
class struct_VkPhysicalDeviceFeatures(Structure):
    pass

struct_VkPhysicalDeviceFeatures._pack_ = 1 # source:False
struct_VkPhysicalDeviceFeatures._fields_ = [
    ('robustBufferAccess', ctypes.c_uint32),
    ('fullDrawIndexUint32', ctypes.c_uint32),
    ('imageCubeArray', ctypes.c_uint32),
    ('independentBlend', ctypes.c_uint32),
    ('geometryShader', ctypes.c_uint32),
    ('tessellationShader', ctypes.c_uint32),
    ('sampleRateShading', ctypes.c_uint32),
    ('dualSrcBlend', ctypes.c_uint32),
    ('logicOp', ctypes.c_uint32),
    ('multiDrawIndirect', ctypes.c_uint32),
    ('drawIndirectFirstInstance', ctypes.c_uint32),
    ('depthClamp', ctypes.c_uint32),
    ('depthBiasClamp', ctypes.c_uint32),
    ('fillModeNonSolid', ctypes.c_uint32),
    ('depthBounds', ctypes.c_uint32),
    ('wideLines', ctypes.c_uint32),
    ('largePoints', ctypes.c_uint32),
    ('alphaToOne', ctypes.c_uint32),
    ('multiViewport', ctypes.c_uint32),
    ('samplerAnisotropy', ctypes.c_uint32),
    ('textureCompressionETC2', ctypes.c_uint32),
    ('textureCompressionASTC_LDR', ctypes.c_uint32),
    ('textureCompressionBC', ctypes.c_uint32),
    ('occlusionQueryPrecise', ctypes.c_uint32),
    ('pipelineStatisticsQuery', ctypes.c_uint32),
    ('vertexPipelineStoresAndAtomics', ctypes.c_uint32),
    ('fragmentStoresAndAtomics', ctypes.c_uint32),
    ('shaderTessellationAndGeometryPointSize', ctypes.c_uint32),
    ('shaderImageGatherExtended', ctypes.c_uint32),
    ('shaderStorageImageExtendedFormats', ctypes.c_uint32),
    ('shaderStorageImageMultisample', ctypes.c_uint32),
    ('shaderStorageImageReadWithoutFormat', ctypes.c_uint32),
    ('shaderStorageImageWriteWithoutFormat', ctypes.c_uint32),
    ('shaderUniformBufferArrayDynamicIndexing', ctypes.c_uint32),
    ('shaderSampledImageArrayDynamicIndexing', ctypes.c_uint32),
    ('shaderStorageBufferArrayDynamicIndexing', ctypes.c_uint32),
    ('shaderStorageImageArrayDynamicIndexing', ctypes.c_uint32),
    ('shaderClipDistance', ctypes.c_uint32),
    ('shaderCullDistance', ctypes.c_uint32),
    ('shaderFloat64', ctypes.c_uint32),
    ('shaderInt64', ctypes.c_uint32),
    ('shaderInt16', ctypes.c_uint32),
    ('shaderResourceResidency', ctypes.c_uint32),
    ('shaderResourceMinLod', ctypes.c_uint32),
    ('sparseBinding', ctypes.c_uint32),
    ('sparseResidencyBuffer', ctypes.c_uint32),
    ('sparseResidencyImage2D', ctypes.c_uint32),
    ('sparseResidencyImage3D', ctypes.c_uint32),
    ('sparseResidency2Samples', ctypes.c_uint32),
    ('sparseResidency4Samples', ctypes.c_uint32),
    ('sparseResidency8Samples', ctypes.c_uint32),
    ('sparseResidency16Samples', ctypes.c_uint32),
    ('sparseResidencyAliased', ctypes.c_uint32),
    ('variableMultisampleRate', ctypes.c_uint32),
    ('inheritedQueries', ctypes.c_uint32),
]

VkPhysicalDeviceFeatures = struct_VkPhysicalDeviceFeatures
class struct_VkPhysicalDeviceLimits(Structure):
    pass

struct_VkPhysicalDeviceLimits._pack_ = 1 # source:False
struct_VkPhysicalDeviceLimits._fields_ = [
    ('maxImageDimension1D', ctypes.c_uint32),
    ('maxImageDimension2D', ctypes.c_uint32),
    ('maxImageDimension3D', ctypes.c_uint32),
    ('maxImageDimensionCube', ctypes.c_uint32),
    ('maxImageArrayLayers', ctypes.c_uint32),
    ('maxTexelBufferElements', ctypes.c_uint32),
    ('maxUniformBufferRange', ctypes.c_uint32),
    ('maxStorageBufferRange', ctypes.c_uint32),
    ('maxPushConstantsSize', ctypes.c_uint32),
    ('maxMemoryAllocationCount', ctypes.c_uint32),
    ('maxSamplerAllocationCount', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('bufferImageGranularity', ctypes.c_uint64),
    ('sparseAddressSpaceSize', ctypes.c_uint64),
    ('maxBoundDescriptorSets', ctypes.c_uint32),
    ('maxPerStageDescriptorSamplers', ctypes.c_uint32),
    ('maxPerStageDescriptorUniformBuffers', ctypes.c_uint32),
    ('maxPerStageDescriptorStorageBuffers', ctypes.c_uint32),
    ('maxPerStageDescriptorSampledImages', ctypes.c_uint32),
    ('maxPerStageDescriptorStorageImages', ctypes.c_uint32),
    ('maxPerStageDescriptorInputAttachments', ctypes.c_uint32),
    ('maxPerStageResources', ctypes.c_uint32),
    ('maxDescriptorSetSamplers', ctypes.c_uint32),
    ('maxDescriptorSetUniformBuffers', ctypes.c_uint32),
    ('maxDescriptorSetUniformBuffersDynamic', ctypes.c_uint32),
    ('maxDescriptorSetStorageBuffers', ctypes.c_uint32),
    ('maxDescriptorSetStorageBuffersDynamic', ctypes.c_uint32),
    ('maxDescriptorSetSampledImages', ctypes.c_uint32),
    ('maxDescriptorSetStorageImages', ctypes.c_uint32),
    ('maxDescriptorSetInputAttachments', ctypes.c_uint32),
    ('maxVertexInputAttributes', ctypes.c_uint32),
    ('maxVertexInputBindings', ctypes.c_uint32),
    ('maxVertexInputAttributeOffset', ctypes.c_uint32),
    ('maxVertexInputBindingStride', ctypes.c_uint32),
    ('maxVertexOutputComponents', ctypes.c_uint32),
    ('maxTessellationGenerationLevel', ctypes.c_uint32),
    ('maxTessellationPatchSize', ctypes.c_uint32),
    ('maxTessellationControlPerVertexInputComponents', ctypes.c_uint32),
    ('maxTessellationControlPerVertexOutputComponents', ctypes.c_uint32),
    ('maxTessellationControlPerPatchOutputComponents', ctypes.c_uint32),
    ('maxTessellationControlTotalOutputComponents', ctypes.c_uint32),
    ('maxTessellationEvaluationInputComponents', ctypes.c_uint32),
    ('maxTessellationEvaluationOutputComponents', ctypes.c_uint32),
    ('maxGeometryShaderInvocations', ctypes.c_uint32),
    ('maxGeometryInputComponents', ctypes.c_uint32),
    ('maxGeometryOutputComponents', ctypes.c_uint32),
    ('maxGeometryOutputVertices', ctypes.c_uint32),
    ('maxGeometryTotalOutputComponents', ctypes.c_uint32),
    ('maxFragmentInputComponents', ctypes.c_uint32),
    ('maxFragmentOutputAttachments', ctypes.c_uint32),
    ('maxFragmentDualSrcAttachments', ctypes.c_uint32),
    ('maxFragmentCombinedOutputResources', ctypes.c_uint32),
    ('maxComputeSharedMemorySize', ctypes.c_uint32),
    ('maxComputeWorkGroupCount', ctypes.c_uint32 * 3),
    ('maxComputeWorkGroupInvocations', ctypes.c_uint32),
    ('maxComputeWorkGroupSize', ctypes.c_uint32 * 3),
    ('subPixelPrecisionBits', ctypes.c_uint32),
    ('subTexelPrecisionBits', ctypes.c_uint32),
    ('mipmapPrecisionBits', ctypes.c_uint32),
    ('maxDrawIndexedIndexValue', ctypes.c_uint32),
    ('maxDrawIndirectCount', ctypes.c_uint32),
    ('maxSamplerLodBias', ctypes.c_float),
    ('maxSamplerAnisotropy', ctypes.c_float),
    ('maxViewports', ctypes.c_uint32),
    ('maxViewportDimensions', ctypes.c_uint32 * 2),
    ('viewportBoundsRange', ctypes.c_float * 2),
    ('viewportSubPixelBits', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('minMemoryMapAlignment', ctypes.c_uint64),
    ('minTexelBufferOffsetAlignment', ctypes.c_uint64),
    ('minUniformBufferOffsetAlignment', ctypes.c_uint64),
    ('minStorageBufferOffsetAlignment', ctypes.c_uint64),
    ('minTexelOffset', ctypes.c_int32),
    ('maxTexelOffset', ctypes.c_uint32),
    ('minTexelGatherOffset', ctypes.c_int32),
    ('maxTexelGatherOffset', ctypes.c_uint32),
    ('minInterpolationOffset', ctypes.c_float),
    ('maxInterpolationOffset', ctypes.c_float),
    ('subPixelInterpolationOffsetBits', ctypes.c_uint32),
    ('maxFramebufferWidth', ctypes.c_uint32),
    ('maxFramebufferHeight', ctypes.c_uint32),
    ('maxFramebufferLayers', ctypes.c_uint32),
    ('framebufferColorSampleCounts', ctypes.c_uint32),
    ('framebufferDepthSampleCounts', ctypes.c_uint32),
    ('framebufferStencilSampleCounts', ctypes.c_uint32),
    ('framebufferNoAttachmentsSampleCounts', ctypes.c_uint32),
    ('maxColorAttachments', ctypes.c_uint32),
    ('sampledImageColorSampleCounts', ctypes.c_uint32),
    ('sampledImageIntegerSampleCounts', ctypes.c_uint32),
    ('sampledImageDepthSampleCounts', ctypes.c_uint32),
    ('sampledImageStencilSampleCounts', ctypes.c_uint32),
    ('storageImageSampleCounts', ctypes.c_uint32),
    ('maxSampleMaskWords', ctypes.c_uint32),
    ('timestampComputeAndGraphics', ctypes.c_uint32),
    ('timestampPeriod', ctypes.c_float),
    ('maxClipDistances', ctypes.c_uint32),
    ('maxCullDistances', ctypes.c_uint32),
    ('maxCombinedClipAndCullDistances', ctypes.c_uint32),
    ('discreteQueuePriorities', ctypes.c_uint32),
    ('pointSizeRange', ctypes.c_float * 2),
    ('lineWidthRange', ctypes.c_float * 2),
    ('pointSizeGranularity', ctypes.c_float),
    ('lineWidthGranularity', ctypes.c_float),
    ('strictLines', ctypes.c_uint32),
    ('standardSampleLocations', ctypes.c_uint32),
    ('PADDING_2', ctypes.c_ubyte * 4),
    ('optimalBufferCopyOffsetAlignment', ctypes.c_uint64),
    ('optimalBufferCopyRowPitchAlignment', ctypes.c_uint64),
    ('nonCoherentAtomSize', ctypes.c_uint64),
]

VkPhysicalDeviceLimits = struct_VkPhysicalDeviceLimits
class struct_VkPhysicalDeviceMemoryProperties(Structure):
    pass

struct_VkPhysicalDeviceMemoryProperties._pack_ = 1 # source:False
struct_VkPhysicalDeviceMemoryProperties._fields_ = [
    ('memoryTypeCount', ctypes.c_uint32),
    ('memoryTypes', struct_VkMemoryType * 32),
    ('memoryHeapCount', ctypes.c_uint32),
    ('memoryHeaps', struct_VkMemoryHeap * 16),
]

VkPhysicalDeviceMemoryProperties = struct_VkPhysicalDeviceMemoryProperties
class struct_VkPhysicalDeviceSparseProperties(Structure):
    pass

struct_VkPhysicalDeviceSparseProperties._pack_ = 1 # source:False
struct_VkPhysicalDeviceSparseProperties._fields_ = [
    ('residencyStandard2DBlockShape', ctypes.c_uint32),
    ('residencyStandard2DMultisampleBlockShape', ctypes.c_uint32),
    ('residencyStandard3DBlockShape', ctypes.c_uint32),
    ('residencyAlignedMipSize', ctypes.c_uint32),
    ('residencyNonResidentStrict', ctypes.c_uint32),
]

VkPhysicalDeviceSparseProperties = struct_VkPhysicalDeviceSparseProperties
class struct_VkPhysicalDeviceProperties(Structure):
    pass

struct_VkPhysicalDeviceProperties._pack_ = 1 # source:False
struct_VkPhysicalDeviceProperties._fields_ = [
    ('apiVersion', ctypes.c_uint32),
    ('driverVersion', ctypes.c_uint32),
    ('vendorID', ctypes.c_uint32),
    ('deviceID', ctypes.c_uint32),
    ('deviceType', VkPhysicalDeviceType),
    ('deviceName', ctypes.c_char * 256),
    ('pipelineCacheUUID', ctypes.c_ubyte * 16),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('limits', VkPhysicalDeviceLimits),
    ('sparseProperties', VkPhysicalDeviceSparseProperties),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPhysicalDeviceProperties = struct_VkPhysicalDeviceProperties
class struct_VkQueueFamilyProperties(Structure):
    pass

struct_VkQueueFamilyProperties._pack_ = 1 # source:False
struct_VkQueueFamilyProperties._fields_ = [
    ('queueFlags', ctypes.c_uint32),
    ('queueCount', ctypes.c_uint32),
    ('timestampValidBits', ctypes.c_uint32),
    ('minImageTransferGranularity', VkExtent3D),
]

VkQueueFamilyProperties = struct_VkQueueFamilyProperties
class struct_VkDeviceQueueCreateInfo(Structure):
    pass

struct_VkDeviceQueueCreateInfo._pack_ = 1 # source:False
struct_VkDeviceQueueCreateInfo._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('flags', ctypes.c_uint32),
    ('queueFamilyIndex', ctypes.c_uint32),
    ('queueCount', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('pQueuePriorities', ctypes.POINTER(ctypes.c_float)),
]

VkDeviceQueueCreateInfo = struct_VkDeviceQueueCreateInfo
class struct_VkDeviceCreateInfo(Structure):
    pass

struct_VkDeviceCreateInfo._pack_ = 1 # source:False
struct_VkDeviceCreateInfo._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('flags', ctypes.c_uint32),
    ('queueCreateInfoCount', ctypes.c_uint32),
    ('pQueueCreateInfos', ctypes.POINTER(struct_VkDeviceQueueCreateInfo)),
    ('enabledLayerCount', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('ppEnabledLayerNames', ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
    ('enabledExtensionCount', ctypes.c_uint32),
    ('PADDING_2', ctypes.c_ubyte * 4),
    ('ppEnabledExtensionNames', ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
    ('pEnabledFeatures', ctypes.POINTER(struct_VkPhysicalDeviceFeatures)),
]

VkDeviceCreateInfo = struct_VkDeviceCreateInfo
class struct_VkExtensionProperties(Structure):
    pass

struct_VkExtensionProperties._pack_ = 1 # source:False
struct_VkExtensionProperties._fields_ = [
    ('extensionName', ctypes.c_char * 256),
    ('specVersion', ctypes.c_uint32),
]

VkExtensionProperties = struct_VkExtensionProperties
class struct_VkLayerProperties(Structure):
    pass

struct_VkLayerProperties._pack_ = 1 # source:False
struct_VkLayerProperties._fields_ = [
    ('layerName', ctypes.c_char * 256),
    ('specVersion', ctypes.c_uint32),
    ('implementationVersion', ctypes.c_uint32),
    ('description', ctypes.c_char * 256),
]

VkLayerProperties = struct_VkLayerProperties
class struct_VkSubmitInfo(Structure):
    pass

struct_VkSubmitInfo._pack_ = 1 # source:False
struct_VkSubmitInfo._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('waitSemaphoreCount', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('pWaitSemaphores', ctypes.POINTER(ctypes.POINTER(struct_VkSemaphore_T))),
    ('pWaitDstStageMask', ctypes.POINTER(ctypes.c_uint32)),
    ('commandBufferCount', ctypes.c_uint32),
    ('PADDING_2', ctypes.c_ubyte * 4),
    ('pCommandBuffers', ctypes.POINTER(ctypes.POINTER(struct_VkCommandBuffer_T))),
    ('signalSemaphoreCount', ctypes.c_uint32),
    ('PADDING_3', ctypes.c_ubyte * 4),
    ('pSignalSemaphores', ctypes.POINTER(ctypes.POINTER(struct_VkSemaphore_T))),
]

VkSubmitInfo = struct_VkSubmitInfo
class struct_VkMappedMemoryRange(Structure):
    pass

struct_VkMappedMemoryRange._pack_ = 1 # source:False
struct_VkMappedMemoryRange._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('memory', ctypes.POINTER(struct_VkDeviceMemory_T)),
    ('offset', ctypes.c_uint64),
    ('size', ctypes.c_uint64),
]

VkMappedMemoryRange = struct_VkMappedMemoryRange
class struct_VkMemoryAllocateInfo(Structure):
    pass

struct_VkMemoryAllocateInfo._pack_ = 1 # source:False
struct_VkMemoryAllocateInfo._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('allocationSize', ctypes.c_uint64),
    ('memoryTypeIndex', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkMemoryAllocateInfo = struct_VkMemoryAllocateInfo
class struct_VkMemoryRequirements(Structure):
    pass

struct_VkMemoryRequirements._pack_ = 1 # source:False
struct_VkMemoryRequirements._fields_ = [
    ('size', ctypes.c_uint64),
    ('alignment', ctypes.c_uint64),
    ('memoryTypeBits', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
]

VkMemoryRequirements = struct_VkMemoryRequirements
class struct_VkSparseMemoryBind(Structure):
    pass

struct_VkSparseMemoryBind._pack_ = 1 # source:False
struct_VkSparseMemoryBind._fields_ = [
    ('resourceOffset', ctypes.c_uint64),
    ('size', ctypes.c_uint64),
    ('memory', ctypes.POINTER(struct_VkDeviceMemory_T)),
    ('memoryOffset', ctypes.c_uint64),
    ('flags', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
]

VkSparseMemoryBind = struct_VkSparseMemoryBind
class struct_VkSparseBufferMemoryBindInfo(Structure):
    pass

struct_VkSparseBufferMemoryBindInfo._pack_ = 1 # source:False
struct_VkSparseBufferMemoryBindInfo._fields_ = [
    ('buffer', ctypes.POINTER(struct_VkBuffer_T)),
    ('bindCount', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pBinds', ctypes.POINTER(struct_VkSparseMemoryBind)),
]

VkSparseBufferMemoryBindInfo = struct_VkSparseBufferMemoryBindInfo
class struct_VkSparseImageOpaqueMemoryBindInfo(Structure):
    pass

struct_VkSparseImageOpaqueMemoryBindInfo._pack_ = 1 # source:False
struct_VkSparseImageOpaqueMemoryBindInfo._fields_ = [
    ('image', ctypes.POINTER(struct_VkImage_T)),
    ('bindCount', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pBinds', ctypes.POINTER(struct_VkSparseMemoryBind)),
]

VkSparseImageOpaqueMemoryBindInfo = struct_VkSparseImageOpaqueMemoryBindInfo
class struct_VkImageSubresource(Structure):
    pass

struct_VkImageSubresource._pack_ = 1 # source:False
struct_VkImageSubresource._fields_ = [
    ('aspectMask', ctypes.c_uint32),
    ('mipLevel', ctypes.c_uint32),
    ('arrayLayer', ctypes.c_uint32),
]

VkImageSubresource = struct_VkImageSubresource
class struct_VkSparseImageMemoryBind(Structure):
    pass

struct_VkSparseImageMemoryBind._pack_ = 1 # source:False
struct_VkSparseImageMemoryBind._fields_ = [
    ('subresource', VkImageSubresource),
    ('offset', VkOffset3D),
    ('extent', VkExtent3D),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('memory', ctypes.POINTER(struct_VkDeviceMemory_T)),
    ('memoryOffset', ctypes.c_uint64),
    ('flags', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkSparseImageMemoryBind = struct_VkSparseImageMemoryBind
class struct_VkSparseImageMemoryBindInfo(Structure):
    pass

struct_VkSparseImageMemoryBindInfo._pack_ = 1 # source:False
struct_VkSparseImageMemoryBindInfo._fields_ = [
    ('image', ctypes.POINTER(struct_VkImage_T)),
    ('bindCount', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pBinds', ctypes.POINTER(struct_VkSparseImageMemoryBind)),
]

VkSparseImageMemoryBindInfo = struct_VkSparseImageMemoryBindInfo
class struct_VkBindSparseInfo(Structure):
    pass

struct_VkBindSparseInfo._pack_ = 1 # source:False
struct_VkBindSparseInfo._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('waitSemaphoreCount', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('pWaitSemaphores', ctypes.POINTER(ctypes.POINTER(struct_VkSemaphore_T))),
    ('bufferBindCount', ctypes.c_uint32),
    ('PADDING_2', ctypes.c_ubyte * 4),
    ('pBufferBinds', ctypes.POINTER(struct_VkSparseBufferMemoryBindInfo)),
    ('imageOpaqueBindCount', ctypes.c_uint32),
    ('PADDING_3', ctypes.c_ubyte * 4),
    ('pImageOpaqueBinds', ctypes.POINTER(struct_VkSparseImageOpaqueMemoryBindInfo)),
    ('imageBindCount', ctypes.c_uint32),
    ('PADDING_4', ctypes.c_ubyte * 4),
    ('pImageBinds', ctypes.POINTER(struct_VkSparseImageMemoryBindInfo)),
    ('signalSemaphoreCount', ctypes.c_uint32),
    ('PADDING_5', ctypes.c_ubyte * 4),
    ('pSignalSemaphores', ctypes.POINTER(ctypes.POINTER(struct_VkSemaphore_T))),
]

VkBindSparseInfo = struct_VkBindSparseInfo
class struct_VkSparseImageFormatProperties(Structure):
    pass

struct_VkSparseImageFormatProperties._pack_ = 1 # source:False
struct_VkSparseImageFormatProperties._fields_ = [
    ('aspectMask', ctypes.c_uint32),
    ('imageGranularity', VkExtent3D),
    ('flags', ctypes.c_uint32),
]

VkSparseImageFormatProperties = struct_VkSparseImageFormatProperties
class struct_VkSparseImageMemoryRequirements(Structure):
    pass

struct_VkSparseImageMemoryRequirements._pack_ = 1 # source:False
struct_VkSparseImageMemoryRequirements._fields_ = [
    ('formatProperties', VkSparseImageFormatProperties),
    ('imageMipTailFirstLod', ctypes.c_uint32),
    ('imageMipTailSize', ctypes.c_uint64),
    ('imageMipTailOffset', ctypes.c_uint64),
    ('imageMipTailStride', ctypes.c_uint64),
]

VkSparseImageMemoryRequirements = struct_VkSparseImageMemoryRequirements
class struct_VkFenceCreateInfo(Structure):
    pass

struct_VkFenceCreateInfo._pack_ = 1 # source:False
struct_VkFenceCreateInfo._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('flags', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkFenceCreateInfo = struct_VkFenceCreateInfo
class struct_VkSemaphoreCreateInfo(Structure):
    pass

struct_VkSemaphoreCreateInfo._pack_ = 1 # source:False
struct_VkSemaphoreCreateInfo._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('flags', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkSemaphoreCreateInfo = struct_VkSemaphoreCreateInfo
class struct_VkEventCreateInfo(Structure):
    pass

struct_VkEventCreateInfo._pack_ = 1 # source:False
struct_VkEventCreateInfo._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('flags', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkEventCreateInfo = struct_VkEventCreateInfo
class struct_VkQueryPoolCreateInfo(Structure):
    pass

struct_VkQueryPoolCreateInfo._pack_ = 1 # source:False
struct_VkQueryPoolCreateInfo._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('flags', ctypes.c_uint32),
    ('queryType', VkQueryType),
    ('queryCount', ctypes.c_uint32),
    ('pipelineStatistics', ctypes.c_uint32),
]

VkQueryPoolCreateInfo = struct_VkQueryPoolCreateInfo
class struct_VkBufferCreateInfo(Structure):
    pass

struct_VkBufferCreateInfo._pack_ = 1 # source:False
struct_VkBufferCreateInfo._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('flags', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('size', ctypes.c_uint64),
    ('usage', ctypes.c_uint32),
    ('sharingMode', VkSharingMode),
    ('queueFamilyIndexCount', ctypes.c_uint32),
    ('PADDING_2', ctypes.c_ubyte * 4),
    ('pQueueFamilyIndices', ctypes.POINTER(ctypes.c_uint32)),
]

VkBufferCreateInfo = struct_VkBufferCreateInfo
class struct_VkBufferViewCreateInfo(Structure):
    pass

struct_VkBufferViewCreateInfo._pack_ = 1 # source:False
struct_VkBufferViewCreateInfo._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('flags', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('buffer', ctypes.POINTER(struct_VkBuffer_T)),
    ('format', VkFormat),
    ('PADDING_2', ctypes.c_ubyte * 4),
    ('offset', ctypes.c_uint64),
    ('range', ctypes.c_uint64),
]

VkBufferViewCreateInfo = struct_VkBufferViewCreateInfo
class struct_VkImageCreateInfo(Structure):
    pass

struct_VkImageCreateInfo._pack_ = 1 # source:False
struct_VkImageCreateInfo._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('flags', ctypes.c_uint32),
    ('imageType', VkImageType),
    ('format', VkFormat),
    ('extent', VkExtent3D),
    ('mipLevels', ctypes.c_uint32),
    ('arrayLayers', ctypes.c_uint32),
    ('samples', VkSampleCountFlagBits),
    ('tiling', VkImageTiling),
    ('usage', ctypes.c_uint32),
    ('sharingMode', VkSharingMode),
    ('queueFamilyIndexCount', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('pQueueFamilyIndices', ctypes.POINTER(ctypes.c_uint32)),
    ('initialLayout', VkImageLayout),
    ('PADDING_2', ctypes.c_ubyte * 4),
]

VkImageCreateInfo = struct_VkImageCreateInfo
class struct_VkSubresourceLayout(Structure):
    pass

struct_VkSubresourceLayout._pack_ = 1 # source:False
struct_VkSubresourceLayout._fields_ = [
    ('offset', ctypes.c_uint64),
    ('size', ctypes.c_uint64),
    ('rowPitch', ctypes.c_uint64),
    ('arrayPitch', ctypes.c_uint64),
    ('depthPitch', ctypes.c_uint64),
]

VkSubresourceLayout = struct_VkSubresourceLayout
class struct_VkComponentMapping(Structure):
    _pack_ = 1 # source:False
    _fields_ = [
    ('r', VkComponentSwizzle),
    ('g', VkComponentSwizzle),
    ('b', VkComponentSwizzle),
    ('a', VkComponentSwizzle),
     ]

VkComponentMapping = struct_VkComponentMapping
class struct_VkImageViewCreateInfo(Structure):
    pass

struct_VkImageViewCreateInfo._pack_ = 1 # source:False
struct_VkImageViewCreateInfo._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('flags', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('image', ctypes.POINTER(struct_VkImage_T)),
    ('viewType', VkImageViewType),
    ('format', VkFormat),
    ('components', VkComponentMapping),
    ('subresourceRange', VkImageSubresourceRange),
    ('PADDING_2', ctypes.c_ubyte * 4),
]

VkImageViewCreateInfo = struct_VkImageViewCreateInfo
class struct_VkShaderModuleCreateInfo(Structure):
    pass

struct_VkShaderModuleCreateInfo._pack_ = 1 # source:False
struct_VkShaderModuleCreateInfo._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('flags', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('codeSize', ctypes.c_uint64),
    ('pCode', ctypes.POINTER(ctypes.c_uint32)),
]

VkShaderModuleCreateInfo = struct_VkShaderModuleCreateInfo
class struct_VkPipelineCacheCreateInfo(Structure):
    pass

struct_VkPipelineCacheCreateInfo._pack_ = 1 # source:False
struct_VkPipelineCacheCreateInfo._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('flags', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('initialDataSize', ctypes.c_uint64),
    ('pInitialData', ctypes.POINTER(None)),
]

VkPipelineCacheCreateInfo = struct_VkPipelineCacheCreateInfo
class struct_VkSpecializationMapEntry(Structure):
    pass

struct_VkSpecializationMapEntry._pack_ = 1 # source:False
struct_VkSpecializationMapEntry._fields_ = [
    ('constantID', ctypes.c_uint32),
    ('offset', ctypes.c_uint32),
    ('size', ctypes.c_uint64),
]

VkSpecializationMapEntry = struct_VkSpecializationMapEntry
class struct_VkSpecializationInfo(Structure):
    pass

struct_VkSpecializationInfo._pack_ = 1 # source:False
struct_VkSpecializationInfo._fields_ = [
    ('mapEntryCount', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pMapEntries', ctypes.POINTER(struct_VkSpecializationMapEntry)),
    ('dataSize', ctypes.c_uint64),
    ('pData', ctypes.POINTER(None)),
]

VkSpecializationInfo = struct_VkSpecializationInfo
class struct_VkPipelineShaderStageCreateInfo(Structure):
    pass

struct_VkPipelineShaderStageCreateInfo._pack_ = 1 # source:False
struct_VkPipelineShaderStageCreateInfo._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('flags', ctypes.c_uint32),
    ('stage', VkShaderStageFlagBits),
    ('module', ctypes.POINTER(struct_VkShaderModule_T)),
    ('pName', ctypes.POINTER(ctypes.c_char)),
    ('pSpecializationInfo', ctypes.POINTER(struct_VkSpecializationInfo)),
]

VkPipelineShaderStageCreateInfo = struct_VkPipelineShaderStageCreateInfo
class struct_VkComputePipelineCreateInfo(Structure):
    pass

struct_VkComputePipelineCreateInfo._pack_ = 1 # source:False
struct_VkComputePipelineCreateInfo._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('flags', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('stage', VkPipelineShaderStageCreateInfo),
    ('layout', ctypes.POINTER(struct_VkPipelineLayout_T)),
    ('basePipelineHandle', ctypes.POINTER(struct_VkPipeline_T)),
    ('basePipelineIndex', ctypes.c_int32),
    ('PADDING_2', ctypes.c_ubyte * 4),
]

VkComputePipelineCreateInfo = struct_VkComputePipelineCreateInfo
class struct_VkVertexInputBindingDescription(Structure):
    pass

struct_VkVertexInputBindingDescription._pack_ = 1 # source:False
struct_VkVertexInputBindingDescription._fields_ = [
    ('binding', ctypes.c_uint32),
    ('stride', ctypes.c_uint32),
    ('inputRate', VkVertexInputRate),
]

VkVertexInputBindingDescription = struct_VkVertexInputBindingDescription
class struct_VkVertexInputAttributeDescription(Structure):
    pass

struct_VkVertexInputAttributeDescription._pack_ = 1 # source:False
struct_VkVertexInputAttributeDescription._fields_ = [
    ('location', ctypes.c_uint32),
    ('binding', ctypes.c_uint32),
    ('format', VkFormat),
    ('offset', ctypes.c_uint32),
]

VkVertexInputAttributeDescription = struct_VkVertexInputAttributeDescription
class struct_VkPipelineVertexInputStateCreateInfo(Structure):
    pass

struct_VkPipelineVertexInputStateCreateInfo._pack_ = 1 # source:False
struct_VkPipelineVertexInputStateCreateInfo._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('flags', ctypes.c_uint32),
    ('vertexBindingDescriptionCount', ctypes.c_uint32),
    ('pVertexBindingDescriptions', ctypes.POINTER(struct_VkVertexInputBindingDescription)),
    ('vertexAttributeDescriptionCount', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('pVertexAttributeDescriptions', ctypes.POINTER(struct_VkVertexInputAttributeDescription)),
]

VkPipelineVertexInputStateCreateInfo = struct_VkPipelineVertexInputStateCreateInfo
class struct_VkPipelineInputAssemblyStateCreateInfo(Structure):
    pass

struct_VkPipelineInputAssemblyStateCreateInfo._pack_ = 1 # source:False
struct_VkPipelineInputAssemblyStateCreateInfo._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('flags', ctypes.c_uint32),
    ('topology', VkPrimitiveTopology),
    ('primitiveRestartEnable', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPipelineInputAssemblyStateCreateInfo = struct_VkPipelineInputAssemblyStateCreateInfo
class struct_VkPipelineTessellationStateCreateInfo(Structure):
    pass

struct_VkPipelineTessellationStateCreateInfo._pack_ = 1 # source:False
struct_VkPipelineTessellationStateCreateInfo._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('flags', ctypes.c_uint32),
    ('patchControlPoints', ctypes.c_uint32),
]

VkPipelineTessellationStateCreateInfo = struct_VkPipelineTessellationStateCreateInfo
class struct_VkViewport(Structure):
    pass

struct_VkViewport._pack_ = 1 # source:False
struct_VkViewport._fields_ = [
    ('x', ctypes.c_float),
    ('y', ctypes.c_float),
    ('width', ctypes.c_float),
    ('height', ctypes.c_float),
    ('minDepth', ctypes.c_float),
    ('maxDepth', ctypes.c_float),
]

VkViewport = struct_VkViewport
class struct_VkPipelineViewportStateCreateInfo(Structure):
    pass

struct_VkPipelineViewportStateCreateInfo._pack_ = 1 # source:False
struct_VkPipelineViewportStateCreateInfo._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('flags', ctypes.c_uint32),
    ('viewportCount', ctypes.c_uint32),
    ('pViewports', ctypes.POINTER(struct_VkViewport)),
    ('scissorCount', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('pScissors', ctypes.POINTER(struct_VkRect2D)),
]

VkPipelineViewportStateCreateInfo = struct_VkPipelineViewportStateCreateInfo
class struct_VkPipelineRasterizationStateCreateInfo(Structure):
    pass

struct_VkPipelineRasterizationStateCreateInfo._pack_ = 1 # source:False
struct_VkPipelineRasterizationStateCreateInfo._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('flags', ctypes.c_uint32),
    ('depthClampEnable', ctypes.c_uint32),
    ('rasterizerDiscardEnable', ctypes.c_uint32),
    ('polygonMode', VkPolygonMode),
    ('cullMode', ctypes.c_uint32),
    ('frontFace', VkFrontFace),
    ('depthBiasEnable', ctypes.c_uint32),
    ('depthBiasConstantFactor', ctypes.c_float),
    ('depthBiasClamp', ctypes.c_float),
    ('depthBiasSlopeFactor', ctypes.c_float),
    ('lineWidth', ctypes.c_float),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPipelineRasterizationStateCreateInfo = struct_VkPipelineRasterizationStateCreateInfo
class struct_VkPipelineMultisampleStateCreateInfo(Structure):
    pass

struct_VkPipelineMultisampleStateCreateInfo._pack_ = 1 # source:False
struct_VkPipelineMultisampleStateCreateInfo._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('flags', ctypes.c_uint32),
    ('rasterizationSamples', VkSampleCountFlagBits),
    ('sampleShadingEnable', ctypes.c_uint32),
    ('minSampleShading', ctypes.c_float),
    ('pSampleMask', ctypes.POINTER(ctypes.c_uint32)),
    ('alphaToCoverageEnable', ctypes.c_uint32),
    ('alphaToOneEnable', ctypes.c_uint32),
]

VkPipelineMultisampleStateCreateInfo = struct_VkPipelineMultisampleStateCreateInfo
class struct_VkStencilOpState(Structure):
    pass

struct_VkStencilOpState._pack_ = 1 # source:False
struct_VkStencilOpState._fields_ = [
    ('failOp', VkStencilOp),
    ('passOp', VkStencilOp),
    ('depthFailOp', VkStencilOp),
    ('compareOp', VkCompareOp),
    ('compareMask', ctypes.c_uint32),
    ('writeMask', ctypes.c_uint32),
    ('reference', ctypes.c_uint32),
]

VkStencilOpState = struct_VkStencilOpState
class struct_VkPipelineDepthStencilStateCreateInfo(Structure):
    pass

struct_VkPipelineDepthStencilStateCreateInfo._pack_ = 1 # source:False
struct_VkPipelineDepthStencilStateCreateInfo._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('flags', ctypes.c_uint32),
    ('depthTestEnable', ctypes.c_uint32),
    ('depthWriteEnable', ctypes.c_uint32),
    ('depthCompareOp', VkCompareOp),
    ('depthBoundsTestEnable', ctypes.c_uint32),
    ('stencilTestEnable', ctypes.c_uint32),
    ('front', VkStencilOpState),
    ('back', VkStencilOpState),
    ('minDepthBounds', ctypes.c_float),
    ('maxDepthBounds', ctypes.c_float),
]

VkPipelineDepthStencilStateCreateInfo = struct_VkPipelineDepthStencilStateCreateInfo
class struct_VkPipelineColorBlendAttachmentState(Structure):
    pass

struct_VkPipelineColorBlendAttachmentState._pack_ = 1 # source:False
struct_VkPipelineColorBlendAttachmentState._fields_ = [
    ('blendEnable', ctypes.c_uint32),
    ('srcColorBlendFactor', VkBlendFactor),
    ('dstColorBlendFactor', VkBlendFactor),
    ('colorBlendOp', VkBlendOp),
    ('srcAlphaBlendFactor', VkBlendFactor),
    ('dstAlphaBlendFactor', VkBlendFactor),
    ('alphaBlendOp', VkBlendOp),
    ('colorWriteMask', ctypes.c_uint32),
]

VkPipelineColorBlendAttachmentState = struct_VkPipelineColorBlendAttachmentState
class struct_VkPipelineColorBlendStateCreateInfo(Structure):
    pass

struct_VkPipelineColorBlendStateCreateInfo._pack_ = 1 # source:False
struct_VkPipelineColorBlendStateCreateInfo._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('flags', ctypes.c_uint32),
    ('logicOpEnable', ctypes.c_uint32),
    ('logicOp', VkLogicOp),
    ('attachmentCount', ctypes.c_uint32),
    ('pAttachments', ctypes.POINTER(struct_VkPipelineColorBlendAttachmentState)),
    ('blendConstants', ctypes.c_float * 4),
]

VkPipelineColorBlendStateCreateInfo = struct_VkPipelineColorBlendStateCreateInfo
class struct_VkPipelineDynamicStateCreateInfo(Structure):
    pass

struct_VkPipelineDynamicStateCreateInfo._pack_ = 1 # source:False
struct_VkPipelineDynamicStateCreateInfo._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('flags', ctypes.c_uint32),
    ('dynamicStateCount', ctypes.c_uint32),
    ('pDynamicStates', ctypes.POINTER(VkDynamicState)),
]

VkPipelineDynamicStateCreateInfo = struct_VkPipelineDynamicStateCreateInfo
class struct_VkGraphicsPipelineCreateInfo(Structure):
    pass

struct_VkGraphicsPipelineCreateInfo._pack_ = 1 # source:False
struct_VkGraphicsPipelineCreateInfo._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('flags', ctypes.c_uint32),
    ('stageCount', ctypes.c_uint32),
    ('pStages', ctypes.POINTER(struct_VkPipelineShaderStageCreateInfo)),
    ('pVertexInputState', ctypes.POINTER(struct_VkPipelineVertexInputStateCreateInfo)),
    ('pInputAssemblyState', ctypes.POINTER(struct_VkPipelineInputAssemblyStateCreateInfo)),
    ('pTessellationState', ctypes.POINTER(struct_VkPipelineTessellationStateCreateInfo)),
    ('pViewportState', ctypes.POINTER(struct_VkPipelineViewportStateCreateInfo)),
    ('pRasterizationState', ctypes.POINTER(struct_VkPipelineRasterizationStateCreateInfo)),
    ('pMultisampleState', ctypes.POINTER(struct_VkPipelineMultisampleStateCreateInfo)),
    ('pDepthStencilState', ctypes.POINTER(struct_VkPipelineDepthStencilStateCreateInfo)),
    ('pColorBlendState', ctypes.POINTER(struct_VkPipelineColorBlendStateCreateInfo)),
    ('pDynamicState', ctypes.POINTER(struct_VkPipelineDynamicStateCreateInfo)),
    ('layout', ctypes.POINTER(struct_VkPipelineLayout_T)),
    ('renderPass', ctypes.POINTER(struct_VkRenderPass_T)),
    ('subpass', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('basePipelineHandle', ctypes.POINTER(struct_VkPipeline_T)),
    ('basePipelineIndex', ctypes.c_int32),
    ('PADDING_2', ctypes.c_ubyte * 4),
]

VkGraphicsPipelineCreateInfo = struct_VkGraphicsPipelineCreateInfo
class struct_VkPushConstantRange(Structure):
    pass

struct_VkPushConstantRange._pack_ = 1 # source:False
struct_VkPushConstantRange._fields_ = [
    ('stageFlags', ctypes.c_uint32),
    ('offset', ctypes.c_uint32),
    ('size', ctypes.c_uint32),
]

VkPushConstantRange = struct_VkPushConstantRange
class struct_VkPipelineLayoutCreateInfo(Structure):
    pass

struct_VkPipelineLayoutCreateInfo._pack_ = 1 # source:False
struct_VkPipelineLayoutCreateInfo._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('flags', ctypes.c_uint32),
    ('setLayoutCount', ctypes.c_uint32),
    ('pSetLayouts', ctypes.POINTER(ctypes.POINTER(struct_VkDescriptorSetLayout_T))),
    ('pushConstantRangeCount', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('pPushConstantRanges', ctypes.POINTER(struct_VkPushConstantRange)),
]

VkPipelineLayoutCreateInfo = struct_VkPipelineLayoutCreateInfo
class struct_VkSamplerCreateInfo(Structure):
    pass

struct_VkSamplerCreateInfo._pack_ = 1 # source:False
struct_VkSamplerCreateInfo._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('flags', ctypes.c_uint32),
    ('magFilter', VkFilter),
    ('minFilter', VkFilter),
    ('mipmapMode', VkSamplerMipmapMode),
    ('addressModeU', VkSamplerAddressMode),
    ('addressModeV', VkSamplerAddressMode),
    ('addressModeW', VkSamplerAddressMode),
    ('mipLodBias', ctypes.c_float),
    ('anisotropyEnable', ctypes.c_uint32),
    ('maxAnisotropy', ctypes.c_float),
    ('compareEnable', ctypes.c_uint32),
    ('compareOp', VkCompareOp),
    ('minLod', ctypes.c_float),
    ('maxLod', ctypes.c_float),
    ('borderColor', VkBorderColor),
    ('unnormalizedCoordinates', ctypes.c_uint32),
]

VkSamplerCreateInfo = struct_VkSamplerCreateInfo
class struct_VkCopyDescriptorSet(Structure):
    pass

struct_VkCopyDescriptorSet._pack_ = 1 # source:False
struct_VkCopyDescriptorSet._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('srcSet', ctypes.POINTER(struct_VkDescriptorSet_T)),
    ('srcBinding', ctypes.c_uint32),
    ('srcArrayElement', ctypes.c_uint32),
    ('dstSet', ctypes.POINTER(struct_VkDescriptorSet_T)),
    ('dstBinding', ctypes.c_uint32),
    ('dstArrayElement', ctypes.c_uint32),
    ('descriptorCount', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkCopyDescriptorSet = struct_VkCopyDescriptorSet
class struct_VkDescriptorBufferInfo(Structure):
    pass

struct_VkDescriptorBufferInfo._pack_ = 1 # source:False
struct_VkDescriptorBufferInfo._fields_ = [
    ('buffer', ctypes.POINTER(struct_VkBuffer_T)),
    ('offset', ctypes.c_uint64),
    ('range', ctypes.c_uint64),
]

VkDescriptorBufferInfo = struct_VkDescriptorBufferInfo
class struct_VkDescriptorImageInfo(Structure):
    pass

struct_VkDescriptorImageInfo._pack_ = 1 # source:False
struct_VkDescriptorImageInfo._fields_ = [
    ('sampler', ctypes.POINTER(struct_VkSampler_T)),
    ('imageView', ctypes.POINTER(struct_VkImageView_T)),
    ('imageLayout', VkImageLayout),
    ('PADDING_0', ctypes.c_ubyte * 4),
]

VkDescriptorImageInfo = struct_VkDescriptorImageInfo
class struct_VkDescriptorPoolSize(Structure):
    pass

struct_VkDescriptorPoolSize._pack_ = 1 # source:False
struct_VkDescriptorPoolSize._fields_ = [
    ('type', VkDescriptorType),
    ('descriptorCount', ctypes.c_uint32),
]

VkDescriptorPoolSize = struct_VkDescriptorPoolSize
class struct_VkDescriptorPoolCreateInfo(Structure):
    pass

struct_VkDescriptorPoolCreateInfo._pack_ = 1 # source:False
struct_VkDescriptorPoolCreateInfo._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('flags', ctypes.c_uint32),
    ('maxSets', ctypes.c_uint32),
    ('poolSizeCount', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('pPoolSizes', ctypes.POINTER(struct_VkDescriptorPoolSize)),
]

VkDescriptorPoolCreateInfo = struct_VkDescriptorPoolCreateInfo
class struct_VkDescriptorSetAllocateInfo(Structure):
    pass

struct_VkDescriptorSetAllocateInfo._pack_ = 1 # source:False
struct_VkDescriptorSetAllocateInfo._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('descriptorPool', ctypes.POINTER(struct_VkDescriptorPool_T)),
    ('descriptorSetCount', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('pSetLayouts', ctypes.POINTER(ctypes.POINTER(struct_VkDescriptorSetLayout_T))),
]

VkDescriptorSetAllocateInfo = struct_VkDescriptorSetAllocateInfo
class struct_VkDescriptorSetLayoutBinding(Structure):
    pass

struct_VkDescriptorSetLayoutBinding._pack_ = 1 # source:False
struct_VkDescriptorSetLayoutBinding._fields_ = [
    ('binding', ctypes.c_uint32),
    ('descriptorType', VkDescriptorType),
    ('descriptorCount', ctypes.c_uint32),
    ('stageFlags', ctypes.c_uint32),
    ('pImmutableSamplers', ctypes.POINTER(ctypes.POINTER(struct_VkSampler_T))),
]

VkDescriptorSetLayoutBinding = struct_VkDescriptorSetLayoutBinding
class struct_VkDescriptorSetLayoutCreateInfo(Structure):
    pass

struct_VkDescriptorSetLayoutCreateInfo._pack_ = 1 # source:False
struct_VkDescriptorSetLayoutCreateInfo._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('flags', ctypes.c_uint32),
    ('bindingCount', ctypes.c_uint32),
    ('pBindings', ctypes.POINTER(struct_VkDescriptorSetLayoutBinding)),
]

VkDescriptorSetLayoutCreateInfo = struct_VkDescriptorSetLayoutCreateInfo
class struct_VkWriteDescriptorSet(Structure):
    pass

struct_VkWriteDescriptorSet._pack_ = 1 # source:False
struct_VkWriteDescriptorSet._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('dstSet', ctypes.POINTER(struct_VkDescriptorSet_T)),
    ('dstBinding', ctypes.c_uint32),
    ('dstArrayElement', ctypes.c_uint32),
    ('descriptorCount', ctypes.c_uint32),
    ('descriptorType', VkDescriptorType),
    ('pImageInfo', ctypes.POINTER(struct_VkDescriptorImageInfo)),
    ('pBufferInfo', ctypes.POINTER(struct_VkDescriptorBufferInfo)),
    ('pTexelBufferView', ctypes.POINTER(ctypes.POINTER(struct_VkBufferView_T))),
]

VkWriteDescriptorSet = struct_VkWriteDescriptorSet
class struct_VkAttachmentDescription(Structure):
    pass

struct_VkAttachmentDescription._pack_ = 1 # source:False
struct_VkAttachmentDescription._fields_ = [
    ('flags', ctypes.c_uint32),
    ('format', VkFormat),
    ('samples', VkSampleCountFlagBits),
    ('loadOp', VkAttachmentLoadOp),
    ('storeOp', VkAttachmentStoreOp),
    ('stencilLoadOp', VkAttachmentLoadOp),
    ('stencilStoreOp', VkAttachmentStoreOp),
    ('initialLayout', VkImageLayout),
    ('finalLayout', VkImageLayout),
]

VkAttachmentDescription = struct_VkAttachmentDescription
class struct_VkAttachmentReference(Structure):
    pass

struct_VkAttachmentReference._pack_ = 1 # source:False
struct_VkAttachmentReference._fields_ = [
    ('attachment', ctypes.c_uint32),
    ('layout', VkImageLayout),
]

VkAttachmentReference = struct_VkAttachmentReference
class struct_VkFramebufferCreateInfo(Structure):
    pass

struct_VkFramebufferCreateInfo._pack_ = 1 # source:False
struct_VkFramebufferCreateInfo._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('flags', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('renderPass', ctypes.POINTER(struct_VkRenderPass_T)),
    ('attachmentCount', ctypes.c_uint32),
    ('PADDING_2', ctypes.c_ubyte * 4),
    ('pAttachments', ctypes.POINTER(ctypes.POINTER(struct_VkImageView_T))),
    ('width', ctypes.c_uint32),
    ('height', ctypes.c_uint32),
    ('layers', ctypes.c_uint32),
    ('PADDING_3', ctypes.c_ubyte * 4),
]

VkFramebufferCreateInfo = struct_VkFramebufferCreateInfo
class struct_VkSubpassDescription(Structure):
    pass

struct_VkSubpassDescription._pack_ = 1 # source:False
struct_VkSubpassDescription._fields_ = [
    ('flags', ctypes.c_uint32),
    ('pipelineBindPoint', VkPipelineBindPoint),
    ('inputAttachmentCount', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pInputAttachments', ctypes.POINTER(struct_VkAttachmentReference)),
    ('colorAttachmentCount', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('pColorAttachments', ctypes.POINTER(struct_VkAttachmentReference)),
    ('pResolveAttachments', ctypes.POINTER(struct_VkAttachmentReference)),
    ('pDepthStencilAttachment', ctypes.POINTER(struct_VkAttachmentReference)),
    ('preserveAttachmentCount', ctypes.c_uint32),
    ('PADDING_2', ctypes.c_ubyte * 4),
    ('pPreserveAttachments', ctypes.POINTER(ctypes.c_uint32)),
]

VkSubpassDescription = struct_VkSubpassDescription
class struct_VkSubpassDependency(Structure):
    pass

struct_VkSubpassDependency._pack_ = 1 # source:False
struct_VkSubpassDependency._fields_ = [
    ('srcSubpass', ctypes.c_uint32),
    ('dstSubpass', ctypes.c_uint32),
    ('srcStageMask', ctypes.c_uint32),
    ('dstStageMask', ctypes.c_uint32),
    ('srcAccessMask', ctypes.c_uint32),
    ('dstAccessMask', ctypes.c_uint32),
    ('dependencyFlags', ctypes.c_uint32),
]

VkSubpassDependency = struct_VkSubpassDependency
class struct_VkRenderPassCreateInfo(Structure):
    pass

struct_VkRenderPassCreateInfo._pack_ = 1 # source:False
struct_VkRenderPassCreateInfo._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('flags', ctypes.c_uint32),
    ('attachmentCount', ctypes.c_uint32),
    ('pAttachments', ctypes.POINTER(struct_VkAttachmentDescription)),
    ('subpassCount', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('pSubpasses', ctypes.POINTER(struct_VkSubpassDescription)),
    ('dependencyCount', ctypes.c_uint32),
    ('PADDING_2', ctypes.c_ubyte * 4),
    ('pDependencies', ctypes.POINTER(struct_VkSubpassDependency)),
]

VkRenderPassCreateInfo = struct_VkRenderPassCreateInfo
class struct_VkCommandPoolCreateInfo(Structure):
    pass

struct_VkCommandPoolCreateInfo._pack_ = 1 # source:False
struct_VkCommandPoolCreateInfo._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('flags', ctypes.c_uint32),
    ('queueFamilyIndex', ctypes.c_uint32),
]

VkCommandPoolCreateInfo = struct_VkCommandPoolCreateInfo
class struct_VkCommandBufferAllocateInfo(Structure):
    pass

struct_VkCommandBufferAllocateInfo._pack_ = 1 # source:False
struct_VkCommandBufferAllocateInfo._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('commandPool', ctypes.POINTER(struct_VkCommandPool_T)),
    ('level', VkCommandBufferLevel),
    ('commandBufferCount', ctypes.c_uint32),
]

VkCommandBufferAllocateInfo = struct_VkCommandBufferAllocateInfo
class struct_VkCommandBufferInheritanceInfo(Structure):
    pass

struct_VkCommandBufferInheritanceInfo._pack_ = 1 # source:False
struct_VkCommandBufferInheritanceInfo._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('renderPass', ctypes.POINTER(struct_VkRenderPass_T)),
    ('subpass', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('framebuffer', ctypes.POINTER(struct_VkFramebuffer_T)),
    ('occlusionQueryEnable', ctypes.c_uint32),
    ('queryFlags', ctypes.c_uint32),
    ('pipelineStatistics', ctypes.c_uint32),
    ('PADDING_2', ctypes.c_ubyte * 4),
]

VkCommandBufferInheritanceInfo = struct_VkCommandBufferInheritanceInfo
class struct_VkCommandBufferBeginInfo(Structure):
    pass

struct_VkCommandBufferBeginInfo._pack_ = 1 # source:False
struct_VkCommandBufferBeginInfo._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('flags', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('pInheritanceInfo', ctypes.POINTER(struct_VkCommandBufferInheritanceInfo)),
]

VkCommandBufferBeginInfo = struct_VkCommandBufferBeginInfo
class struct_VkBufferCopy(Structure):
    pass

struct_VkBufferCopy._pack_ = 1 # source:False
struct_VkBufferCopy._fields_ = [
    ('srcOffset', ctypes.c_uint64),
    ('dstOffset', ctypes.c_uint64),
    ('size', ctypes.c_uint64),
]

VkBufferCopy = struct_VkBufferCopy
class struct_VkImageSubresourceLayers(Structure):
    pass

struct_VkImageSubresourceLayers._pack_ = 1 # source:False
struct_VkImageSubresourceLayers._fields_ = [
    ('aspectMask', ctypes.c_uint32),
    ('mipLevel', ctypes.c_uint32),
    ('baseArrayLayer', ctypes.c_uint32),
    ('layerCount', ctypes.c_uint32),
]

VkImageSubresourceLayers = struct_VkImageSubresourceLayers
class struct_VkBufferImageCopy(Structure):
    pass

struct_VkBufferImageCopy._pack_ = 1 # source:False
struct_VkBufferImageCopy._fields_ = [
    ('bufferOffset', ctypes.c_uint64),
    ('bufferRowLength', ctypes.c_uint32),
    ('bufferImageHeight', ctypes.c_uint32),
    ('imageSubresource', VkImageSubresourceLayers),
    ('imageOffset', VkOffset3D),
    ('imageExtent', VkExtent3D),
]

VkBufferImageCopy = struct_VkBufferImageCopy
class union_VkClearColorValue(Union):
    pass

union_VkClearColorValue._pack_ = 1 # source:False
union_VkClearColorValue._fields_ = [
    ('float32', ctypes.c_float * 4),
    ('int32', ctypes.c_int32 * 4),
    ('uint32', ctypes.c_uint32 * 4),
]

VkClearColorValue = union_VkClearColorValue
class struct_VkClearDepthStencilValue(Structure):
    pass

struct_VkClearDepthStencilValue._pack_ = 1 # source:False
struct_VkClearDepthStencilValue._fields_ = [
    ('depth', ctypes.c_float),
    ('stencil', ctypes.c_uint32),
]

VkClearDepthStencilValue = struct_VkClearDepthStencilValue
class union_VkClearValue(Union):
    pass

union_VkClearValue._pack_ = 1 # source:False
union_VkClearValue._fields_ = [
    ('color', VkClearColorValue),
    ('depthStencil', VkClearDepthStencilValue),
    ('PADDING_0', ctypes.c_ubyte * 8),
]

VkClearValue = union_VkClearValue
class struct_VkClearAttachment(Structure):
    pass

struct_VkClearAttachment._pack_ = 1 # source:False
struct_VkClearAttachment._fields_ = [
    ('aspectMask', ctypes.c_uint32),
    ('colorAttachment', ctypes.c_uint32),
    ('clearValue', VkClearValue),
]

VkClearAttachment = struct_VkClearAttachment
class struct_VkClearRect(Structure):
    pass

struct_VkClearRect._pack_ = 1 # source:False
struct_VkClearRect._fields_ = [
    ('rect', VkRect2D),
    ('baseArrayLayer', ctypes.c_uint32),
    ('layerCount', ctypes.c_uint32),
]

VkClearRect = struct_VkClearRect
class struct_VkImageBlit(Structure):
    _pack_ = 1 # source:False
    _fields_ = [
    ('srcSubresource', VkImageSubresourceLayers),
    ('srcOffsets', struct_VkOffset3D * 2),
    ('dstSubresource', VkImageSubresourceLayers),
    ('dstOffsets', struct_VkOffset3D * 2),
     ]

VkImageBlit = struct_VkImageBlit
class struct_VkImageCopy(Structure):
    _pack_ = 1 # source:False
    _fields_ = [
    ('srcSubresource', VkImageSubresourceLayers),
    ('srcOffset', VkOffset3D),
    ('dstSubresource', VkImageSubresourceLayers),
    ('dstOffset', VkOffset3D),
    ('extent', VkExtent3D),
     ]

VkImageCopy = struct_VkImageCopy
class struct_VkImageResolve(Structure):
    _pack_ = 1 # source:False
    _fields_ = [
    ('srcSubresource', VkImageSubresourceLayers),
    ('srcOffset', VkOffset3D),
    ('dstSubresource', VkImageSubresourceLayers),
    ('dstOffset', VkOffset3D),
    ('extent', VkExtent3D),
     ]

VkImageResolve = struct_VkImageResolve
class struct_VkRenderPassBeginInfo(Structure):
    pass

struct_VkRenderPassBeginInfo._pack_ = 1 # source:False
struct_VkRenderPassBeginInfo._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('renderPass', ctypes.POINTER(struct_VkRenderPass_T)),
    ('framebuffer', ctypes.POINTER(struct_VkFramebuffer_T)),
    ('renderArea', VkRect2D),
    ('clearValueCount', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('pClearValues', ctypes.POINTER(union_VkClearValue)),
]

VkRenderPassBeginInfo = struct_VkRenderPassBeginInfo
PFN_vkCreateInstance = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkInstanceCreateInfo), ctypes.POINTER(struct_VkAllocationCallbacks), ctypes.POINTER(ctypes.POINTER(struct_VkInstance_T)))
PFN_vkDestroyInstance = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkInstance_T), ctypes.POINTER(struct_VkAllocationCallbacks))
PFN_vkEnumeratePhysicalDevices = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkInstance_T), ctypes.POINTER(ctypes.c_uint32), ctypes.POINTER(ctypes.POINTER(struct_VkPhysicalDevice_T)))
PFN_vkGetPhysicalDeviceFeatures = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkPhysicalDevice_T), ctypes.POINTER(struct_VkPhysicalDeviceFeatures))
PFN_vkGetPhysicalDeviceFormatProperties = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkPhysicalDevice_T), VkFormat, ctypes.POINTER(struct_VkFormatProperties))
PFN_vkGetPhysicalDeviceImageFormatProperties = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkPhysicalDevice_T), VkFormat, VkImageType, VkImageTiling, ctypes.c_uint32, ctypes.c_uint32, ctypes.POINTER(struct_VkImageFormatProperties))
PFN_vkGetPhysicalDeviceProperties = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkPhysicalDevice_T), ctypes.POINTER(struct_VkPhysicalDeviceProperties))
PFN_vkGetPhysicalDeviceQueueFamilyProperties = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkPhysicalDevice_T), ctypes.POINTER(ctypes.c_uint32), ctypes.POINTER(struct_VkQueueFamilyProperties))
PFN_vkGetPhysicalDeviceMemoryProperties = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkPhysicalDevice_T), ctypes.POINTER(struct_VkPhysicalDeviceMemoryProperties))
PFN_vkGetInstanceProcAddr = ctypes.CFUNCTYPE(ctypes.CFUNCTYPE(None), ctypes.POINTER(struct_VkInstance_T), ctypes.POINTER(ctypes.c_char))
PFN_vkGetDeviceProcAddr = ctypes.CFUNCTYPE(ctypes.CFUNCTYPE(None), ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(ctypes.c_char))
PFN_vkCreateDevice = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkPhysicalDevice_T), ctypes.POINTER(struct_VkDeviceCreateInfo), ctypes.POINTER(struct_VkAllocationCallbacks), ctypes.POINTER(ctypes.POINTER(struct_VkDevice_T)))
PFN_vkDestroyDevice = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkAllocationCallbacks))
PFN_vkEnumerateInstanceExtensionProperties = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(ctypes.c_char), ctypes.POINTER(ctypes.c_uint32), ctypes.POINTER(struct_VkExtensionProperties))
PFN_vkEnumerateDeviceExtensionProperties = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkPhysicalDevice_T), ctypes.POINTER(ctypes.c_char), ctypes.POINTER(ctypes.c_uint32), ctypes.POINTER(struct_VkExtensionProperties))
PFN_vkEnumerateInstanceLayerProperties = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(ctypes.c_uint32), ctypes.POINTER(struct_VkLayerProperties))
PFN_vkEnumerateDeviceLayerProperties = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkPhysicalDevice_T), ctypes.POINTER(ctypes.c_uint32), ctypes.POINTER(struct_VkLayerProperties))
PFN_vkGetDeviceQueue = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkDevice_T), ctypes.c_uint32, ctypes.c_uint32, ctypes.POINTER(ctypes.POINTER(struct_VkQueue_T)))
PFN_vkQueueSubmit = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkQueue_T), ctypes.c_uint32, ctypes.POINTER(struct_VkSubmitInfo), ctypes.POINTER(struct_VkFence_T))
PFN_vkQueueWaitIdle = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkQueue_T))
PFN_vkDeviceWaitIdle = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkDevice_T))
PFN_vkAllocateMemory = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkMemoryAllocateInfo), ctypes.POINTER(struct_VkAllocationCallbacks), ctypes.POINTER(ctypes.POINTER(struct_VkDeviceMemory_T)))
PFN_vkFreeMemory = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkDeviceMemory_T), ctypes.POINTER(struct_VkAllocationCallbacks))
PFN_vkMapMemory = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkDeviceMemory_T), ctypes.c_uint64, ctypes.c_uint64, ctypes.c_uint32, ctypes.POINTER(ctypes.POINTER(None)))
PFN_vkUnmapMemory = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkDeviceMemory_T))
PFN_vkFlushMappedMemoryRanges = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkDevice_T), ctypes.c_uint32, ctypes.POINTER(struct_VkMappedMemoryRange))
PFN_vkInvalidateMappedMemoryRanges = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkDevice_T), ctypes.c_uint32, ctypes.POINTER(struct_VkMappedMemoryRange))
PFN_vkGetDeviceMemoryCommitment = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkDeviceMemory_T), ctypes.POINTER(ctypes.c_uint64))
PFN_vkBindBufferMemory = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkBuffer_T), ctypes.POINTER(struct_VkDeviceMemory_T), ctypes.c_uint64)
PFN_vkBindImageMemory = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkImage_T), ctypes.POINTER(struct_VkDeviceMemory_T), ctypes.c_uint64)
PFN_vkGetBufferMemoryRequirements = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkBuffer_T), ctypes.POINTER(struct_VkMemoryRequirements))
PFN_vkGetImageMemoryRequirements = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkImage_T), ctypes.POINTER(struct_VkMemoryRequirements))
PFN_vkGetImageSparseMemoryRequirements = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkImage_T), ctypes.POINTER(ctypes.c_uint32), ctypes.POINTER(struct_VkSparseImageMemoryRequirements))
PFN_vkGetPhysicalDeviceSparseImageFormatProperties = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkPhysicalDevice_T), VkFormat, VkImageType, VkSampleCountFlagBits, ctypes.c_uint32, VkImageTiling, ctypes.POINTER(ctypes.c_uint32), ctypes.POINTER(struct_VkSparseImageFormatProperties))
PFN_vkQueueBindSparse = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkQueue_T), ctypes.c_uint32, ctypes.POINTER(struct_VkBindSparseInfo), ctypes.POINTER(struct_VkFence_T))
PFN_vkCreateFence = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkFenceCreateInfo), ctypes.POINTER(struct_VkAllocationCallbacks), ctypes.POINTER(ctypes.POINTER(struct_VkFence_T)))
PFN_vkDestroyFence = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkFence_T), ctypes.POINTER(struct_VkAllocationCallbacks))
PFN_vkResetFences = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkDevice_T), ctypes.c_uint32, ctypes.POINTER(ctypes.POINTER(struct_VkFence_T)))
PFN_vkGetFenceStatus = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkFence_T))
PFN_vkWaitForFences = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkDevice_T), ctypes.c_uint32, ctypes.POINTER(ctypes.POINTER(struct_VkFence_T)), ctypes.c_uint32, ctypes.c_uint64)
PFN_vkCreateSemaphore = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkSemaphoreCreateInfo), ctypes.POINTER(struct_VkAllocationCallbacks), ctypes.POINTER(ctypes.POINTER(struct_VkSemaphore_T)))
PFN_vkDestroySemaphore = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkSemaphore_T), ctypes.POINTER(struct_VkAllocationCallbacks))
PFN_vkCreateEvent = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkEventCreateInfo), ctypes.POINTER(struct_VkAllocationCallbacks), ctypes.POINTER(ctypes.POINTER(struct_VkEvent_T)))
PFN_vkDestroyEvent = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkEvent_T), ctypes.POINTER(struct_VkAllocationCallbacks))
PFN_vkGetEventStatus = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkEvent_T))
PFN_vkSetEvent = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkEvent_T))
PFN_vkResetEvent = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkEvent_T))
PFN_vkCreateQueryPool = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkQueryPoolCreateInfo), ctypes.POINTER(struct_VkAllocationCallbacks), ctypes.POINTER(ctypes.POINTER(struct_VkQueryPool_T)))
PFN_vkDestroyQueryPool = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkQueryPool_T), ctypes.POINTER(struct_VkAllocationCallbacks))
PFN_vkGetQueryPoolResults = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkQueryPool_T), ctypes.c_uint32, ctypes.c_uint32, ctypes.c_uint64, ctypes.POINTER(None), ctypes.c_uint64, ctypes.c_uint32)
PFN_vkCreateBuffer = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkBufferCreateInfo), ctypes.POINTER(struct_VkAllocationCallbacks), ctypes.POINTER(ctypes.POINTER(struct_VkBuffer_T)))
PFN_vkDestroyBuffer = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkBuffer_T), ctypes.POINTER(struct_VkAllocationCallbacks))
PFN_vkCreateBufferView = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkBufferViewCreateInfo), ctypes.POINTER(struct_VkAllocationCallbacks), ctypes.POINTER(ctypes.POINTER(struct_VkBufferView_T)))
PFN_vkDestroyBufferView = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkBufferView_T), ctypes.POINTER(struct_VkAllocationCallbacks))
PFN_vkCreateImage = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkImageCreateInfo), ctypes.POINTER(struct_VkAllocationCallbacks), ctypes.POINTER(ctypes.POINTER(struct_VkImage_T)))
PFN_vkDestroyImage = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkImage_T), ctypes.POINTER(struct_VkAllocationCallbacks))
PFN_vkGetImageSubresourceLayout = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkImage_T), ctypes.POINTER(struct_VkImageSubresource), ctypes.POINTER(struct_VkSubresourceLayout))
PFN_vkCreateImageView = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkImageViewCreateInfo), ctypes.POINTER(struct_VkAllocationCallbacks), ctypes.POINTER(ctypes.POINTER(struct_VkImageView_T)))
PFN_vkDestroyImageView = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkImageView_T), ctypes.POINTER(struct_VkAllocationCallbacks))
PFN_vkCreateShaderModule = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkShaderModuleCreateInfo), ctypes.POINTER(struct_VkAllocationCallbacks), ctypes.POINTER(ctypes.POINTER(struct_VkShaderModule_T)))
PFN_vkDestroyShaderModule = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkShaderModule_T), ctypes.POINTER(struct_VkAllocationCallbacks))
PFN_vkCreatePipelineCache = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkPipelineCacheCreateInfo), ctypes.POINTER(struct_VkAllocationCallbacks), ctypes.POINTER(ctypes.POINTER(struct_VkPipelineCache_T)))
PFN_vkDestroyPipelineCache = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkPipelineCache_T), ctypes.POINTER(struct_VkAllocationCallbacks))
PFN_vkGetPipelineCacheData = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkPipelineCache_T), ctypes.POINTER(ctypes.c_uint64), ctypes.POINTER(None))
PFN_vkMergePipelineCaches = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkPipelineCache_T), ctypes.c_uint32, ctypes.POINTER(ctypes.POINTER(struct_VkPipelineCache_T)))
PFN_vkCreateGraphicsPipelines = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkPipelineCache_T), ctypes.c_uint32, ctypes.POINTER(struct_VkGraphicsPipelineCreateInfo), ctypes.POINTER(struct_VkAllocationCallbacks), ctypes.POINTER(ctypes.POINTER(struct_VkPipeline_T)))
PFN_vkCreateComputePipelines = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkPipelineCache_T), ctypes.c_uint32, ctypes.POINTER(struct_VkComputePipelineCreateInfo), ctypes.POINTER(struct_VkAllocationCallbacks), ctypes.POINTER(ctypes.POINTER(struct_VkPipeline_T)))
PFN_vkDestroyPipeline = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkPipeline_T), ctypes.POINTER(struct_VkAllocationCallbacks))
PFN_vkCreatePipelineLayout = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkPipelineLayoutCreateInfo), ctypes.POINTER(struct_VkAllocationCallbacks), ctypes.POINTER(ctypes.POINTER(struct_VkPipelineLayout_T)))
PFN_vkDestroyPipelineLayout = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkPipelineLayout_T), ctypes.POINTER(struct_VkAllocationCallbacks))
PFN_vkCreateSampler = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkSamplerCreateInfo), ctypes.POINTER(struct_VkAllocationCallbacks), ctypes.POINTER(ctypes.POINTER(struct_VkSampler_T)))
PFN_vkDestroySampler = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkSampler_T), ctypes.POINTER(struct_VkAllocationCallbacks))
PFN_vkCreateDescriptorSetLayout = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkDescriptorSetLayoutCreateInfo), ctypes.POINTER(struct_VkAllocationCallbacks), ctypes.POINTER(ctypes.POINTER(struct_VkDescriptorSetLayout_T)))
PFN_vkDestroyDescriptorSetLayout = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkDescriptorSetLayout_T), ctypes.POINTER(struct_VkAllocationCallbacks))
PFN_vkCreateDescriptorPool = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkDescriptorPoolCreateInfo), ctypes.POINTER(struct_VkAllocationCallbacks), ctypes.POINTER(ctypes.POINTER(struct_VkDescriptorPool_T)))
PFN_vkDestroyDescriptorPool = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkDescriptorPool_T), ctypes.POINTER(struct_VkAllocationCallbacks))
PFN_vkResetDescriptorPool = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkDescriptorPool_T), ctypes.c_uint32)
PFN_vkAllocateDescriptorSets = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkDescriptorSetAllocateInfo), ctypes.POINTER(ctypes.POINTER(struct_VkDescriptorSet_T)))
PFN_vkFreeDescriptorSets = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkDescriptorPool_T), ctypes.c_uint32, ctypes.POINTER(ctypes.POINTER(struct_VkDescriptorSet_T)))
PFN_vkUpdateDescriptorSets = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkDevice_T), ctypes.c_uint32, ctypes.POINTER(struct_VkWriteDescriptorSet), ctypes.c_uint32, ctypes.POINTER(struct_VkCopyDescriptorSet))
PFN_vkCreateFramebuffer = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkFramebufferCreateInfo), ctypes.POINTER(struct_VkAllocationCallbacks), ctypes.POINTER(ctypes.POINTER(struct_VkFramebuffer_T)))
PFN_vkDestroyFramebuffer = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkFramebuffer_T), ctypes.POINTER(struct_VkAllocationCallbacks))
PFN_vkCreateRenderPass = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkRenderPassCreateInfo), ctypes.POINTER(struct_VkAllocationCallbacks), ctypes.POINTER(ctypes.POINTER(struct_VkRenderPass_T)))
PFN_vkDestroyRenderPass = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkRenderPass_T), ctypes.POINTER(struct_VkAllocationCallbacks))
PFN_vkGetRenderAreaGranularity = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkRenderPass_T), ctypes.POINTER(struct_VkExtent2D))
PFN_vkCreateCommandPool = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkCommandPoolCreateInfo), ctypes.POINTER(struct_VkAllocationCallbacks), ctypes.POINTER(ctypes.POINTER(struct_VkCommandPool_T)))
PFN_vkDestroyCommandPool = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkCommandPool_T), ctypes.POINTER(struct_VkAllocationCallbacks))
PFN_vkResetCommandPool = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkCommandPool_T), ctypes.c_uint32)
PFN_vkAllocateCommandBuffers = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkCommandBufferAllocateInfo), ctypes.POINTER(ctypes.POINTER(struct_VkCommandBuffer_T)))
PFN_vkFreeCommandBuffers = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkCommandPool_T), ctypes.c_uint32, ctypes.POINTER(ctypes.POINTER(struct_VkCommandBuffer_T)))
PFN_vkBeginCommandBuffer = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.POINTER(struct_VkCommandBufferBeginInfo))
PFN_vkEndCommandBuffer = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkCommandBuffer_T))
PFN_vkResetCommandBuffer = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.c_uint32)
PFN_vkCmdBindPipeline = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), VkPipelineBindPoint, ctypes.POINTER(struct_VkPipeline_T))
PFN_vkCmdSetViewport = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.c_uint32, ctypes.c_uint32, ctypes.POINTER(struct_VkViewport))
PFN_vkCmdSetScissor = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.c_uint32, ctypes.c_uint32, ctypes.POINTER(struct_VkRect2D))
PFN_vkCmdSetLineWidth = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.c_float)
PFN_vkCmdSetDepthBias = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.c_float, ctypes.c_float, ctypes.c_float)
PFN_vkCmdSetBlendConstants = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.POINTER(ctypes.c_float))
PFN_vkCmdSetDepthBounds = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.c_float, ctypes.c_float)
PFN_vkCmdSetStencilCompareMask = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.c_uint32, ctypes.c_uint32)
PFN_vkCmdSetStencilWriteMask = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.c_uint32, ctypes.c_uint32)
PFN_vkCmdSetStencilReference = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.c_uint32, ctypes.c_uint32)
PFN_vkCmdBindDescriptorSets = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), VkPipelineBindPoint, ctypes.POINTER(struct_VkPipelineLayout_T), ctypes.c_uint32, ctypes.c_uint32, ctypes.POINTER(ctypes.POINTER(struct_VkDescriptorSet_T)), ctypes.c_uint32, ctypes.POINTER(ctypes.c_uint32))
PFN_vkCmdBindIndexBuffer = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.POINTER(struct_VkBuffer_T), ctypes.c_uint64, VkIndexType)
PFN_vkCmdBindVertexBuffers = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.c_uint32, ctypes.c_uint32, ctypes.POINTER(ctypes.POINTER(struct_VkBuffer_T)), ctypes.POINTER(ctypes.c_uint64))
PFN_vkCmdDraw = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.c_uint32, ctypes.c_uint32, ctypes.c_uint32, ctypes.c_uint32)
PFN_vkCmdDrawIndexed = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.c_uint32, ctypes.c_uint32, ctypes.c_uint32, ctypes.c_int32, ctypes.c_uint32)
PFN_vkCmdDrawIndirect = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.POINTER(struct_VkBuffer_T), ctypes.c_uint64, ctypes.c_uint32, ctypes.c_uint32)
PFN_vkCmdDrawIndexedIndirect = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.POINTER(struct_VkBuffer_T), ctypes.c_uint64, ctypes.c_uint32, ctypes.c_uint32)
PFN_vkCmdDispatch = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.c_uint32, ctypes.c_uint32, ctypes.c_uint32)
PFN_vkCmdDispatchIndirect = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.POINTER(struct_VkBuffer_T), ctypes.c_uint64)
PFN_vkCmdCopyBuffer = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.POINTER(struct_VkBuffer_T), ctypes.POINTER(struct_VkBuffer_T), ctypes.c_uint32, ctypes.POINTER(struct_VkBufferCopy))
PFN_vkCmdCopyImage = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.POINTER(struct_VkImage_T), VkImageLayout, ctypes.POINTER(struct_VkImage_T), VkImageLayout, ctypes.c_uint32, ctypes.POINTER(struct_VkImageCopy))
PFN_vkCmdBlitImage = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.POINTER(struct_VkImage_T), VkImageLayout, ctypes.POINTER(struct_VkImage_T), VkImageLayout, ctypes.c_uint32, ctypes.POINTER(struct_VkImageBlit), VkFilter)
PFN_vkCmdCopyBufferToImage = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.POINTER(struct_VkBuffer_T), ctypes.POINTER(struct_VkImage_T), VkImageLayout, ctypes.c_uint32, ctypes.POINTER(struct_VkBufferImageCopy))
PFN_vkCmdCopyImageToBuffer = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.POINTER(struct_VkImage_T), VkImageLayout, ctypes.POINTER(struct_VkBuffer_T), ctypes.c_uint32, ctypes.POINTER(struct_VkBufferImageCopy))
PFN_vkCmdUpdateBuffer = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.POINTER(struct_VkBuffer_T), ctypes.c_uint64, ctypes.c_uint64, ctypes.POINTER(None))
PFN_vkCmdFillBuffer = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.POINTER(struct_VkBuffer_T), ctypes.c_uint64, ctypes.c_uint64, ctypes.c_uint32)
PFN_vkCmdClearColorImage = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.POINTER(struct_VkImage_T), VkImageLayout, ctypes.POINTER(union_VkClearColorValue), ctypes.c_uint32, ctypes.POINTER(struct_VkImageSubresourceRange))
PFN_vkCmdClearDepthStencilImage = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.POINTER(struct_VkImage_T), VkImageLayout, ctypes.POINTER(struct_VkClearDepthStencilValue), ctypes.c_uint32, ctypes.POINTER(struct_VkImageSubresourceRange))
PFN_vkCmdClearAttachments = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.c_uint32, ctypes.POINTER(struct_VkClearAttachment), ctypes.c_uint32, ctypes.POINTER(struct_VkClearRect))
PFN_vkCmdResolveImage = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.POINTER(struct_VkImage_T), VkImageLayout, ctypes.POINTER(struct_VkImage_T), VkImageLayout, ctypes.c_uint32, ctypes.POINTER(struct_VkImageResolve))
PFN_vkCmdSetEvent = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.POINTER(struct_VkEvent_T), ctypes.c_uint32)
PFN_vkCmdResetEvent = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.POINTER(struct_VkEvent_T), ctypes.c_uint32)
PFN_vkCmdWaitEvents = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.c_uint32, ctypes.POINTER(ctypes.POINTER(struct_VkEvent_T)), ctypes.c_uint32, ctypes.c_uint32, ctypes.c_uint32, ctypes.POINTER(struct_VkMemoryBarrier), ctypes.c_uint32, ctypes.POINTER(struct_VkBufferMemoryBarrier), ctypes.c_uint32, ctypes.POINTER(struct_VkImageMemoryBarrier))
PFN_vkCmdPipelineBarrier = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.c_uint32, ctypes.c_uint32, ctypes.c_uint32, ctypes.c_uint32, ctypes.POINTER(struct_VkMemoryBarrier), ctypes.c_uint32, ctypes.POINTER(struct_VkBufferMemoryBarrier), ctypes.c_uint32, ctypes.POINTER(struct_VkImageMemoryBarrier))
PFN_vkCmdBeginQuery = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.POINTER(struct_VkQueryPool_T), ctypes.c_uint32, ctypes.c_uint32)
PFN_vkCmdEndQuery = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.POINTER(struct_VkQueryPool_T), ctypes.c_uint32)
PFN_vkCmdResetQueryPool = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.POINTER(struct_VkQueryPool_T), ctypes.c_uint32, ctypes.c_uint32)
PFN_vkCmdWriteTimestamp = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), VkPipelineStageFlagBits, ctypes.POINTER(struct_VkQueryPool_T), ctypes.c_uint32)
PFN_vkCmdCopyQueryPoolResults = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.POINTER(struct_VkQueryPool_T), ctypes.c_uint32, ctypes.c_uint32, ctypes.POINTER(struct_VkBuffer_T), ctypes.c_uint64, ctypes.c_uint64, ctypes.c_uint32)
PFN_vkCmdPushConstants = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.POINTER(struct_VkPipelineLayout_T), ctypes.c_uint32, ctypes.c_uint32, ctypes.c_uint32, ctypes.POINTER(None))
PFN_vkCmdBeginRenderPass = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.POINTER(struct_VkRenderPassBeginInfo), VkSubpassContents)
PFN_vkCmdNextSubpass = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), VkSubpassContents)
PFN_vkCmdEndRenderPass = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T))
PFN_vkCmdExecuteCommands = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.c_uint32, ctypes.POINTER(ctypes.POINTER(struct_VkCommandBuffer_T)))
try:
    vkCreateInstance = _libraries['libvulkan.so.1'].vkCreateInstance
    vkCreateInstance.restype = VkResult
    vkCreateInstance.argtypes = [ctypes.POINTER(struct_VkInstanceCreateInfo), ctypes.POINTER(struct_VkAllocationCallbacks), ctypes.POINTER(ctypes.POINTER(struct_VkInstance_T))]
except AttributeError:
    pass
try:
    vkDestroyInstance = _libraries['libvulkan.so.1'].vkDestroyInstance
    vkDestroyInstance.restype = None
    vkDestroyInstance.argtypes = [VkInstance, ctypes.POINTER(struct_VkAllocationCallbacks)]
except AttributeError:
    pass
try:
    vkEnumeratePhysicalDevices = _libraries['libvulkan.so.1'].vkEnumeratePhysicalDevices
    vkEnumeratePhysicalDevices.restype = VkResult
    vkEnumeratePhysicalDevices.argtypes = [VkInstance, ctypes.POINTER(ctypes.c_uint32), ctypes.POINTER(ctypes.POINTER(struct_VkPhysicalDevice_T))]
except AttributeError:
    pass
try:
    vkGetPhysicalDeviceFeatures = _libraries['libvulkan.so.1'].vkGetPhysicalDeviceFeatures
    vkGetPhysicalDeviceFeatures.restype = None
    vkGetPhysicalDeviceFeatures.argtypes = [VkPhysicalDevice, ctypes.POINTER(struct_VkPhysicalDeviceFeatures)]
except AttributeError:
    pass
try:
    vkGetPhysicalDeviceFormatProperties = _libraries['libvulkan.so.1'].vkGetPhysicalDeviceFormatProperties
    vkGetPhysicalDeviceFormatProperties.restype = None
    vkGetPhysicalDeviceFormatProperties.argtypes = [VkPhysicalDevice, VkFormat, ctypes.POINTER(struct_VkFormatProperties)]
except AttributeError:
    pass
try:
    vkGetPhysicalDeviceImageFormatProperties = _libraries['libvulkan.so.1'].vkGetPhysicalDeviceImageFormatProperties
    vkGetPhysicalDeviceImageFormatProperties.restype = VkResult
    vkGetPhysicalDeviceImageFormatProperties.argtypes = [VkPhysicalDevice, VkFormat, VkImageType, VkImageTiling, VkImageUsageFlags, VkImageCreateFlags, ctypes.POINTER(struct_VkImageFormatProperties)]
except AttributeError:
    pass
try:
    vkGetPhysicalDeviceProperties = _libraries['libvulkan.so.1'].vkGetPhysicalDeviceProperties
    vkGetPhysicalDeviceProperties.restype = None
    vkGetPhysicalDeviceProperties.argtypes = [VkPhysicalDevice, ctypes.POINTER(struct_VkPhysicalDeviceProperties)]
except AttributeError:
    pass
try:
    vkGetPhysicalDeviceQueueFamilyProperties = _libraries['libvulkan.so.1'].vkGetPhysicalDeviceQueueFamilyProperties
    vkGetPhysicalDeviceQueueFamilyProperties.restype = None
    vkGetPhysicalDeviceQueueFamilyProperties.argtypes = [VkPhysicalDevice, ctypes.POINTER(ctypes.c_uint32), ctypes.POINTER(struct_VkQueueFamilyProperties)]
except AttributeError:
    pass
try:
    vkGetPhysicalDeviceMemoryProperties = _libraries['libvulkan.so.1'].vkGetPhysicalDeviceMemoryProperties
    vkGetPhysicalDeviceMemoryProperties.restype = None
    vkGetPhysicalDeviceMemoryProperties.argtypes = [VkPhysicalDevice, ctypes.POINTER(struct_VkPhysicalDeviceMemoryProperties)]
except AttributeError:
    pass
try:
    vkGetInstanceProcAddr = _libraries['libvulkan.so.1'].vkGetInstanceProcAddr
    vkGetInstanceProcAddr.restype = PFN_vkVoidFunction
    vkGetInstanceProcAddr.argtypes = [VkInstance, ctypes.POINTER(ctypes.c_char)]
except AttributeError:
    pass
try:
    vkGetDeviceProcAddr = _libraries['libvulkan.so.1'].vkGetDeviceProcAddr
    vkGetDeviceProcAddr.restype = PFN_vkVoidFunction
    vkGetDeviceProcAddr.argtypes = [VkDevice, ctypes.POINTER(ctypes.c_char)]
except AttributeError:
    pass
try:
    vkCreateDevice = _libraries['libvulkan.so.1'].vkCreateDevice
    vkCreateDevice.restype = VkResult
    vkCreateDevice.argtypes = [VkPhysicalDevice, ctypes.POINTER(struct_VkDeviceCreateInfo), ctypes.POINTER(struct_VkAllocationCallbacks), ctypes.POINTER(ctypes.POINTER(struct_VkDevice_T))]
except AttributeError:
    pass
try:
    vkDestroyDevice = _libraries['libvulkan.so.1'].vkDestroyDevice
    vkDestroyDevice.restype = None
    vkDestroyDevice.argtypes = [VkDevice, ctypes.POINTER(struct_VkAllocationCallbacks)]
except AttributeError:
    pass
try:
    vkEnumerateInstanceExtensionProperties = _libraries['libvulkan.so.1'].vkEnumerateInstanceExtensionProperties
    vkEnumerateInstanceExtensionProperties.restype = VkResult
    vkEnumerateInstanceExtensionProperties.argtypes = [ctypes.POINTER(ctypes.c_char), ctypes.POINTER(ctypes.c_uint32), ctypes.POINTER(struct_VkExtensionProperties)]
except AttributeError:
    pass
try:
    vkEnumerateDeviceExtensionProperties = _libraries['libvulkan.so.1'].vkEnumerateDeviceExtensionProperties
    vkEnumerateDeviceExtensionProperties.restype = VkResult
    vkEnumerateDeviceExtensionProperties.argtypes = [VkPhysicalDevice, ctypes.POINTER(ctypes.c_char), ctypes.POINTER(ctypes.c_uint32), ctypes.POINTER(struct_VkExtensionProperties)]
except AttributeError:
    pass
try:
    vkEnumerateInstanceLayerProperties = _libraries['libvulkan.so.1'].vkEnumerateInstanceLayerProperties
    vkEnumerateInstanceLayerProperties.restype = VkResult
    vkEnumerateInstanceLayerProperties.argtypes = [ctypes.POINTER(ctypes.c_uint32), ctypes.POINTER(struct_VkLayerProperties)]
except AttributeError:
    pass
try:
    vkEnumerateDeviceLayerProperties = _libraries['libvulkan.so.1'].vkEnumerateDeviceLayerProperties
    vkEnumerateDeviceLayerProperties.restype = VkResult
    vkEnumerateDeviceLayerProperties.argtypes = [VkPhysicalDevice, ctypes.POINTER(ctypes.c_uint32), ctypes.POINTER(struct_VkLayerProperties)]
except AttributeError:
    pass
uint32_t = ctypes.c_uint32
try:
    vkGetDeviceQueue = _libraries['libvulkan.so.1'].vkGetDeviceQueue
    vkGetDeviceQueue.restype = None
    vkGetDeviceQueue.argtypes = [VkDevice, uint32_t, uint32_t, ctypes.POINTER(ctypes.POINTER(struct_VkQueue_T))]
except AttributeError:
    pass
try:
    vkQueueSubmit = _libraries['libvulkan.so.1'].vkQueueSubmit
    vkQueueSubmit.restype = VkResult
    vkQueueSubmit.argtypes = [VkQueue, uint32_t, ctypes.POINTER(struct_VkSubmitInfo), VkFence]
except AttributeError:
    pass
try:
    vkQueueWaitIdle = _libraries['libvulkan.so.1'].vkQueueWaitIdle
    vkQueueWaitIdle.restype = VkResult
    vkQueueWaitIdle.argtypes = [VkQueue]
except AttributeError:
    pass
try:
    vkDeviceWaitIdle = _libraries['libvulkan.so.1'].vkDeviceWaitIdle
    vkDeviceWaitIdle.restype = VkResult
    vkDeviceWaitIdle.argtypes = [VkDevice]
except AttributeError:
    pass
try:
    vkAllocateMemory = _libraries['libvulkan.so.1'].vkAllocateMemory
    vkAllocateMemory.restype = VkResult
    vkAllocateMemory.argtypes = [VkDevice, ctypes.POINTER(struct_VkMemoryAllocateInfo), ctypes.POINTER(struct_VkAllocationCallbacks), ctypes.POINTER(ctypes.POINTER(struct_VkDeviceMemory_T))]
except AttributeError:
    pass
try:
    vkFreeMemory = _libraries['libvulkan.so.1'].vkFreeMemory
    vkFreeMemory.restype = None
    vkFreeMemory.argtypes = [VkDevice, VkDeviceMemory, ctypes.POINTER(struct_VkAllocationCallbacks)]
except AttributeError:
    pass
try:
    vkMapMemory = _libraries['libvulkan.so.1'].vkMapMemory
    vkMapMemory.restype = VkResult
    vkMapMemory.argtypes = [VkDevice, VkDeviceMemory, VkDeviceSize, VkDeviceSize, VkMemoryMapFlags, ctypes.POINTER(ctypes.POINTER(None))]
except AttributeError:
    pass
try:
    vkUnmapMemory = _libraries['libvulkan.so.1'].vkUnmapMemory
    vkUnmapMemory.restype = None
    vkUnmapMemory.argtypes = [VkDevice, VkDeviceMemory]
except AttributeError:
    pass
try:
    vkFlushMappedMemoryRanges = _libraries['libvulkan.so.1'].vkFlushMappedMemoryRanges
    vkFlushMappedMemoryRanges.restype = VkResult
    vkFlushMappedMemoryRanges.argtypes = [VkDevice, uint32_t, ctypes.POINTER(struct_VkMappedMemoryRange)]
except AttributeError:
    pass
try:
    vkInvalidateMappedMemoryRanges = _libraries['libvulkan.so.1'].vkInvalidateMappedMemoryRanges
    vkInvalidateMappedMemoryRanges.restype = VkResult
    vkInvalidateMappedMemoryRanges.argtypes = [VkDevice, uint32_t, ctypes.POINTER(struct_VkMappedMemoryRange)]
except AttributeError:
    pass
try:
    vkGetDeviceMemoryCommitment = _libraries['libvulkan.so.1'].vkGetDeviceMemoryCommitment
    vkGetDeviceMemoryCommitment.restype = None
    vkGetDeviceMemoryCommitment.argtypes = [VkDevice, VkDeviceMemory, ctypes.POINTER(ctypes.c_uint64)]
except AttributeError:
    pass
try:
    vkBindBufferMemory = _libraries['libvulkan.so.1'].vkBindBufferMemory
    vkBindBufferMemory.restype = VkResult
    vkBindBufferMemory.argtypes = [VkDevice, VkBuffer, VkDeviceMemory, VkDeviceSize]
except AttributeError:
    pass
try:
    vkBindImageMemory = _libraries['libvulkan.so.1'].vkBindImageMemory
    vkBindImageMemory.restype = VkResult
    vkBindImageMemory.argtypes = [VkDevice, VkImage, VkDeviceMemory, VkDeviceSize]
except AttributeError:
    pass
try:
    vkGetBufferMemoryRequirements = _libraries['libvulkan.so.1'].vkGetBufferMemoryRequirements
    vkGetBufferMemoryRequirements.restype = None
    vkGetBufferMemoryRequirements.argtypes = [VkDevice, VkBuffer, ctypes.POINTER(struct_VkMemoryRequirements)]
except AttributeError:
    pass
try:
    vkGetImageMemoryRequirements = _libraries['libvulkan.so.1'].vkGetImageMemoryRequirements
    vkGetImageMemoryRequirements.restype = None
    vkGetImageMemoryRequirements.argtypes = [VkDevice, VkImage, ctypes.POINTER(struct_VkMemoryRequirements)]
except AttributeError:
    pass
try:
    vkGetImageSparseMemoryRequirements = _libraries['libvulkan.so.1'].vkGetImageSparseMemoryRequirements
    vkGetImageSparseMemoryRequirements.restype = None
    vkGetImageSparseMemoryRequirements.argtypes = [VkDevice, VkImage, ctypes.POINTER(ctypes.c_uint32), ctypes.POINTER(struct_VkSparseImageMemoryRequirements)]
except AttributeError:
    pass
try:
    vkGetPhysicalDeviceSparseImageFormatProperties = _libraries['libvulkan.so.1'].vkGetPhysicalDeviceSparseImageFormatProperties
    vkGetPhysicalDeviceSparseImageFormatProperties.restype = None
    vkGetPhysicalDeviceSparseImageFormatProperties.argtypes = [VkPhysicalDevice, VkFormat, VkImageType, VkSampleCountFlagBits, VkImageUsageFlags, VkImageTiling, ctypes.POINTER(ctypes.c_uint32), ctypes.POINTER(struct_VkSparseImageFormatProperties)]
except AttributeError:
    pass
try:
    vkQueueBindSparse = _libraries['libvulkan.so.1'].vkQueueBindSparse
    vkQueueBindSparse.restype = VkResult
    vkQueueBindSparse.argtypes = [VkQueue, uint32_t, ctypes.POINTER(struct_VkBindSparseInfo), VkFence]
except AttributeError:
    pass
try:
    vkCreateFence = _libraries['libvulkan.so.1'].vkCreateFence
    vkCreateFence.restype = VkResult
    vkCreateFence.argtypes = [VkDevice, ctypes.POINTER(struct_VkFenceCreateInfo), ctypes.POINTER(struct_VkAllocationCallbacks), ctypes.POINTER(ctypes.POINTER(struct_VkFence_T))]
except AttributeError:
    pass
try:
    vkDestroyFence = _libraries['libvulkan.so.1'].vkDestroyFence
    vkDestroyFence.restype = None
    vkDestroyFence.argtypes = [VkDevice, VkFence, ctypes.POINTER(struct_VkAllocationCallbacks)]
except AttributeError:
    pass
try:
    vkResetFences = _libraries['libvulkan.so.1'].vkResetFences
    vkResetFences.restype = VkResult
    vkResetFences.argtypes = [VkDevice, uint32_t, ctypes.POINTER(ctypes.POINTER(struct_VkFence_T))]
except AttributeError:
    pass
try:
    vkGetFenceStatus = _libraries['libvulkan.so.1'].vkGetFenceStatus
    vkGetFenceStatus.restype = VkResult
    vkGetFenceStatus.argtypes = [VkDevice, VkFence]
except AttributeError:
    pass
uint64_t = ctypes.c_uint64
try:
    vkWaitForFences = _libraries['libvulkan.so.1'].vkWaitForFences
    vkWaitForFences.restype = VkResult
    vkWaitForFences.argtypes = [VkDevice, uint32_t, ctypes.POINTER(ctypes.POINTER(struct_VkFence_T)), VkBool32, uint64_t]
except AttributeError:
    pass
try:
    vkCreateSemaphore = _libraries['libvulkan.so.1'].vkCreateSemaphore
    vkCreateSemaphore.restype = VkResult
    vkCreateSemaphore.argtypes = [VkDevice, ctypes.POINTER(struct_VkSemaphoreCreateInfo), ctypes.POINTER(struct_VkAllocationCallbacks), ctypes.POINTER(ctypes.POINTER(struct_VkSemaphore_T))]
except AttributeError:
    pass
try:
    vkDestroySemaphore = _libraries['libvulkan.so.1'].vkDestroySemaphore
    vkDestroySemaphore.restype = None
    vkDestroySemaphore.argtypes = [VkDevice, VkSemaphore, ctypes.POINTER(struct_VkAllocationCallbacks)]
except AttributeError:
    pass
try:
    vkCreateEvent = _libraries['libvulkan.so.1'].vkCreateEvent
    vkCreateEvent.restype = VkResult
    vkCreateEvent.argtypes = [VkDevice, ctypes.POINTER(struct_VkEventCreateInfo), ctypes.POINTER(struct_VkAllocationCallbacks), ctypes.POINTER(ctypes.POINTER(struct_VkEvent_T))]
except AttributeError:
    pass
try:
    vkDestroyEvent = _libraries['libvulkan.so.1'].vkDestroyEvent
    vkDestroyEvent.restype = None
    vkDestroyEvent.argtypes = [VkDevice, VkEvent, ctypes.POINTER(struct_VkAllocationCallbacks)]
except AttributeError:
    pass
try:
    vkGetEventStatus = _libraries['libvulkan.so.1'].vkGetEventStatus
    vkGetEventStatus.restype = VkResult
    vkGetEventStatus.argtypes = [VkDevice, VkEvent]
except AttributeError:
    pass
try:
    vkSetEvent = _libraries['libvulkan.so.1'].vkSetEvent
    vkSetEvent.restype = VkResult
    vkSetEvent.argtypes = [VkDevice, VkEvent]
except AttributeError:
    pass
try:
    vkResetEvent = _libraries['libvulkan.so.1'].vkResetEvent
    vkResetEvent.restype = VkResult
    vkResetEvent.argtypes = [VkDevice, VkEvent]
except AttributeError:
    pass
try:
    vkCreateQueryPool = _libraries['libvulkan.so.1'].vkCreateQueryPool
    vkCreateQueryPool.restype = VkResult
    vkCreateQueryPool.argtypes = [VkDevice, ctypes.POINTER(struct_VkQueryPoolCreateInfo), ctypes.POINTER(struct_VkAllocationCallbacks), ctypes.POINTER(ctypes.POINTER(struct_VkQueryPool_T))]
except AttributeError:
    pass
try:
    vkDestroyQueryPool = _libraries['libvulkan.so.1'].vkDestroyQueryPool
    vkDestroyQueryPool.restype = None
    vkDestroyQueryPool.argtypes = [VkDevice, VkQueryPool, ctypes.POINTER(struct_VkAllocationCallbacks)]
except AttributeError:
    pass
size_t = ctypes.c_uint64
try:
    vkGetQueryPoolResults = _libraries['libvulkan.so.1'].vkGetQueryPoolResults
    vkGetQueryPoolResults.restype = VkResult
    vkGetQueryPoolResults.argtypes = [VkDevice, VkQueryPool, uint32_t, uint32_t, size_t, ctypes.POINTER(None), VkDeviceSize, VkQueryResultFlags]
except AttributeError:
    pass
try:
    vkCreateBuffer = _libraries['libvulkan.so.1'].vkCreateBuffer
    vkCreateBuffer.restype = VkResult
    vkCreateBuffer.argtypes = [VkDevice, ctypes.POINTER(struct_VkBufferCreateInfo), ctypes.POINTER(struct_VkAllocationCallbacks), ctypes.POINTER(ctypes.POINTER(struct_VkBuffer_T))]
except AttributeError:
    pass
try:
    vkDestroyBuffer = _libraries['libvulkan.so.1'].vkDestroyBuffer
    vkDestroyBuffer.restype = None
    vkDestroyBuffer.argtypes = [VkDevice, VkBuffer, ctypes.POINTER(struct_VkAllocationCallbacks)]
except AttributeError:
    pass
try:
    vkCreateBufferView = _libraries['libvulkan.so.1'].vkCreateBufferView
    vkCreateBufferView.restype = VkResult
    vkCreateBufferView.argtypes = [VkDevice, ctypes.POINTER(struct_VkBufferViewCreateInfo), ctypes.POINTER(struct_VkAllocationCallbacks), ctypes.POINTER(ctypes.POINTER(struct_VkBufferView_T))]
except AttributeError:
    pass
try:
    vkDestroyBufferView = _libraries['libvulkan.so.1'].vkDestroyBufferView
    vkDestroyBufferView.restype = None
    vkDestroyBufferView.argtypes = [VkDevice, VkBufferView, ctypes.POINTER(struct_VkAllocationCallbacks)]
except AttributeError:
    pass
try:
    vkCreateImage = _libraries['libvulkan.so.1'].vkCreateImage
    vkCreateImage.restype = VkResult
    vkCreateImage.argtypes = [VkDevice, ctypes.POINTER(struct_VkImageCreateInfo), ctypes.POINTER(struct_VkAllocationCallbacks), ctypes.POINTER(ctypes.POINTER(struct_VkImage_T))]
except AttributeError:
    pass
try:
    vkDestroyImage = _libraries['libvulkan.so.1'].vkDestroyImage
    vkDestroyImage.restype = None
    vkDestroyImage.argtypes = [VkDevice, VkImage, ctypes.POINTER(struct_VkAllocationCallbacks)]
except AttributeError:
    pass
try:
    vkGetImageSubresourceLayout = _libraries['libvulkan.so.1'].vkGetImageSubresourceLayout
    vkGetImageSubresourceLayout.restype = None
    vkGetImageSubresourceLayout.argtypes = [VkDevice, VkImage, ctypes.POINTER(struct_VkImageSubresource), ctypes.POINTER(struct_VkSubresourceLayout)]
except AttributeError:
    pass
try:
    vkCreateImageView = _libraries['libvulkan.so.1'].vkCreateImageView
    vkCreateImageView.restype = VkResult
    vkCreateImageView.argtypes = [VkDevice, ctypes.POINTER(struct_VkImageViewCreateInfo), ctypes.POINTER(struct_VkAllocationCallbacks), ctypes.POINTER(ctypes.POINTER(struct_VkImageView_T))]
except AttributeError:
    pass
try:
    vkDestroyImageView = _libraries['libvulkan.so.1'].vkDestroyImageView
    vkDestroyImageView.restype = None
    vkDestroyImageView.argtypes = [VkDevice, VkImageView, ctypes.POINTER(struct_VkAllocationCallbacks)]
except AttributeError:
    pass
try:
    vkCreateShaderModule = _libraries['libvulkan.so.1'].vkCreateShaderModule
    vkCreateShaderModule.restype = VkResult
    vkCreateShaderModule.argtypes = [VkDevice, ctypes.POINTER(struct_VkShaderModuleCreateInfo), ctypes.POINTER(struct_VkAllocationCallbacks), ctypes.POINTER(ctypes.POINTER(struct_VkShaderModule_T))]
except AttributeError:
    pass
try:
    vkDestroyShaderModule = _libraries['libvulkan.so.1'].vkDestroyShaderModule
    vkDestroyShaderModule.restype = None
    vkDestroyShaderModule.argtypes = [VkDevice, VkShaderModule, ctypes.POINTER(struct_VkAllocationCallbacks)]
except AttributeError:
    pass
try:
    vkCreatePipelineCache = _libraries['libvulkan.so.1'].vkCreatePipelineCache
    vkCreatePipelineCache.restype = VkResult
    vkCreatePipelineCache.argtypes = [VkDevice, ctypes.POINTER(struct_VkPipelineCacheCreateInfo), ctypes.POINTER(struct_VkAllocationCallbacks), ctypes.POINTER(ctypes.POINTER(struct_VkPipelineCache_T))]
except AttributeError:
    pass
try:
    vkDestroyPipelineCache = _libraries['libvulkan.so.1'].vkDestroyPipelineCache
    vkDestroyPipelineCache.restype = None
    vkDestroyPipelineCache.argtypes = [VkDevice, VkPipelineCache, ctypes.POINTER(struct_VkAllocationCallbacks)]
except AttributeError:
    pass
try:
    vkGetPipelineCacheData = _libraries['libvulkan.so.1'].vkGetPipelineCacheData
    vkGetPipelineCacheData.restype = VkResult
    vkGetPipelineCacheData.argtypes = [VkDevice, VkPipelineCache, ctypes.POINTER(ctypes.c_uint64), ctypes.POINTER(None)]
except AttributeError:
    pass
try:
    vkMergePipelineCaches = _libraries['libvulkan.so.1'].vkMergePipelineCaches
    vkMergePipelineCaches.restype = VkResult
    vkMergePipelineCaches.argtypes = [VkDevice, VkPipelineCache, uint32_t, ctypes.POINTER(ctypes.POINTER(struct_VkPipelineCache_T))]
except AttributeError:
    pass
try:
    vkCreateGraphicsPipelines = _libraries['libvulkan.so.1'].vkCreateGraphicsPipelines
    vkCreateGraphicsPipelines.restype = VkResult
    vkCreateGraphicsPipelines.argtypes = [VkDevice, VkPipelineCache, uint32_t, ctypes.POINTER(struct_VkGraphicsPipelineCreateInfo), ctypes.POINTER(struct_VkAllocationCallbacks), ctypes.POINTER(ctypes.POINTER(struct_VkPipeline_T))]
except AttributeError:
    pass
try:
    vkCreateComputePipelines = _libraries['libvulkan.so.1'].vkCreateComputePipelines
    vkCreateComputePipelines.restype = VkResult
    vkCreateComputePipelines.argtypes = [VkDevice, VkPipelineCache, uint32_t, ctypes.POINTER(struct_VkComputePipelineCreateInfo), ctypes.POINTER(struct_VkAllocationCallbacks), ctypes.POINTER(ctypes.POINTER(struct_VkPipeline_T))]
except AttributeError:
    pass
try:
    vkDestroyPipeline = _libraries['libvulkan.so.1'].vkDestroyPipeline
    vkDestroyPipeline.restype = None
    vkDestroyPipeline.argtypes = [VkDevice, VkPipeline, ctypes.POINTER(struct_VkAllocationCallbacks)]
except AttributeError:
    pass
try:
    vkCreatePipelineLayout = _libraries['libvulkan.so.1'].vkCreatePipelineLayout
    vkCreatePipelineLayout.restype = VkResult
    vkCreatePipelineLayout.argtypes = [VkDevice, ctypes.POINTER(struct_VkPipelineLayoutCreateInfo), ctypes.POINTER(struct_VkAllocationCallbacks), ctypes.POINTER(ctypes.POINTER(struct_VkPipelineLayout_T))]
except AttributeError:
    pass
try:
    vkDestroyPipelineLayout = _libraries['libvulkan.so.1'].vkDestroyPipelineLayout
    vkDestroyPipelineLayout.restype = None
    vkDestroyPipelineLayout.argtypes = [VkDevice, VkPipelineLayout, ctypes.POINTER(struct_VkAllocationCallbacks)]
except AttributeError:
    pass
try:
    vkCreateSampler = _libraries['libvulkan.so.1'].vkCreateSampler
    vkCreateSampler.restype = VkResult
    vkCreateSampler.argtypes = [VkDevice, ctypes.POINTER(struct_VkSamplerCreateInfo), ctypes.POINTER(struct_VkAllocationCallbacks), ctypes.POINTER(ctypes.POINTER(struct_VkSampler_T))]
except AttributeError:
    pass
try:
    vkDestroySampler = _libraries['libvulkan.so.1'].vkDestroySampler
    vkDestroySampler.restype = None
    vkDestroySampler.argtypes = [VkDevice, VkSampler, ctypes.POINTER(struct_VkAllocationCallbacks)]
except AttributeError:
    pass
try:
    vkCreateDescriptorSetLayout = _libraries['libvulkan.so.1'].vkCreateDescriptorSetLayout
    vkCreateDescriptorSetLayout.restype = VkResult
    vkCreateDescriptorSetLayout.argtypes = [VkDevice, ctypes.POINTER(struct_VkDescriptorSetLayoutCreateInfo), ctypes.POINTER(struct_VkAllocationCallbacks), ctypes.POINTER(ctypes.POINTER(struct_VkDescriptorSetLayout_T))]
except AttributeError:
    pass
try:
    vkDestroyDescriptorSetLayout = _libraries['libvulkan.so.1'].vkDestroyDescriptorSetLayout
    vkDestroyDescriptorSetLayout.restype = None
    vkDestroyDescriptorSetLayout.argtypes = [VkDevice, VkDescriptorSetLayout, ctypes.POINTER(struct_VkAllocationCallbacks)]
except AttributeError:
    pass
try:
    vkCreateDescriptorPool = _libraries['libvulkan.so.1'].vkCreateDescriptorPool
    vkCreateDescriptorPool.restype = VkResult
    vkCreateDescriptorPool.argtypes = [VkDevice, ctypes.POINTER(struct_VkDescriptorPoolCreateInfo), ctypes.POINTER(struct_VkAllocationCallbacks), ctypes.POINTER(ctypes.POINTER(struct_VkDescriptorPool_T))]
except AttributeError:
    pass
try:
    vkDestroyDescriptorPool = _libraries['libvulkan.so.1'].vkDestroyDescriptorPool
    vkDestroyDescriptorPool.restype = None
    vkDestroyDescriptorPool.argtypes = [VkDevice, VkDescriptorPool, ctypes.POINTER(struct_VkAllocationCallbacks)]
except AttributeError:
    pass
try:
    vkResetDescriptorPool = _libraries['libvulkan.so.1'].vkResetDescriptorPool
    vkResetDescriptorPool.restype = VkResult
    vkResetDescriptorPool.argtypes = [VkDevice, VkDescriptorPool, VkDescriptorPoolResetFlags]
except AttributeError:
    pass
try:
    vkAllocateDescriptorSets = _libraries['libvulkan.so.1'].vkAllocateDescriptorSets
    vkAllocateDescriptorSets.restype = VkResult
    vkAllocateDescriptorSets.argtypes = [VkDevice, ctypes.POINTER(struct_VkDescriptorSetAllocateInfo), ctypes.POINTER(ctypes.POINTER(struct_VkDescriptorSet_T))]
except AttributeError:
    pass
try:
    vkFreeDescriptorSets = _libraries['libvulkan.so.1'].vkFreeDescriptorSets
    vkFreeDescriptorSets.restype = VkResult
    vkFreeDescriptorSets.argtypes = [VkDevice, VkDescriptorPool, uint32_t, ctypes.POINTER(ctypes.POINTER(struct_VkDescriptorSet_T))]
except AttributeError:
    pass
try:
    vkUpdateDescriptorSets = _libraries['libvulkan.so.1'].vkUpdateDescriptorSets
    vkUpdateDescriptorSets.restype = None
    vkUpdateDescriptorSets.argtypes = [VkDevice, uint32_t, ctypes.POINTER(struct_VkWriteDescriptorSet), uint32_t, ctypes.POINTER(struct_VkCopyDescriptorSet)]
except AttributeError:
    pass
try:
    vkCreateFramebuffer = _libraries['libvulkan.so.1'].vkCreateFramebuffer
    vkCreateFramebuffer.restype = VkResult
    vkCreateFramebuffer.argtypes = [VkDevice, ctypes.POINTER(struct_VkFramebufferCreateInfo), ctypes.POINTER(struct_VkAllocationCallbacks), ctypes.POINTER(ctypes.POINTER(struct_VkFramebuffer_T))]
except AttributeError:
    pass
try:
    vkDestroyFramebuffer = _libraries['libvulkan.so.1'].vkDestroyFramebuffer
    vkDestroyFramebuffer.restype = None
    vkDestroyFramebuffer.argtypes = [VkDevice, VkFramebuffer, ctypes.POINTER(struct_VkAllocationCallbacks)]
except AttributeError:
    pass
try:
    vkCreateRenderPass = _libraries['libvulkan.so.1'].vkCreateRenderPass
    vkCreateRenderPass.restype = VkResult
    vkCreateRenderPass.argtypes = [VkDevice, ctypes.POINTER(struct_VkRenderPassCreateInfo), ctypes.POINTER(struct_VkAllocationCallbacks), ctypes.POINTER(ctypes.POINTER(struct_VkRenderPass_T))]
except AttributeError:
    pass
try:
    vkDestroyRenderPass = _libraries['libvulkan.so.1'].vkDestroyRenderPass
    vkDestroyRenderPass.restype = None
    vkDestroyRenderPass.argtypes = [VkDevice, VkRenderPass, ctypes.POINTER(struct_VkAllocationCallbacks)]
except AttributeError:
    pass
try:
    vkGetRenderAreaGranularity = _libraries['libvulkan.so.1'].vkGetRenderAreaGranularity
    vkGetRenderAreaGranularity.restype = None
    vkGetRenderAreaGranularity.argtypes = [VkDevice, VkRenderPass, ctypes.POINTER(struct_VkExtent2D)]
except AttributeError:
    pass
try:
    vkCreateCommandPool = _libraries['libvulkan.so.1'].vkCreateCommandPool
    vkCreateCommandPool.restype = VkResult
    vkCreateCommandPool.argtypes = [VkDevice, ctypes.POINTER(struct_VkCommandPoolCreateInfo), ctypes.POINTER(struct_VkAllocationCallbacks), ctypes.POINTER(ctypes.POINTER(struct_VkCommandPool_T))]
except AttributeError:
    pass
try:
    vkDestroyCommandPool = _libraries['libvulkan.so.1'].vkDestroyCommandPool
    vkDestroyCommandPool.restype = None
    vkDestroyCommandPool.argtypes = [VkDevice, VkCommandPool, ctypes.POINTER(struct_VkAllocationCallbacks)]
except AttributeError:
    pass
try:
    vkResetCommandPool = _libraries['libvulkan.so.1'].vkResetCommandPool
    vkResetCommandPool.restype = VkResult
    vkResetCommandPool.argtypes = [VkDevice, VkCommandPool, VkCommandPoolResetFlags]
except AttributeError:
    pass
try:
    vkAllocateCommandBuffers = _libraries['libvulkan.so.1'].vkAllocateCommandBuffers
    vkAllocateCommandBuffers.restype = VkResult
    vkAllocateCommandBuffers.argtypes = [VkDevice, ctypes.POINTER(struct_VkCommandBufferAllocateInfo), ctypes.POINTER(ctypes.POINTER(struct_VkCommandBuffer_T))]
except AttributeError:
    pass
try:
    vkFreeCommandBuffers = _libraries['libvulkan.so.1'].vkFreeCommandBuffers
    vkFreeCommandBuffers.restype = None
    vkFreeCommandBuffers.argtypes = [VkDevice, VkCommandPool, uint32_t, ctypes.POINTER(ctypes.POINTER(struct_VkCommandBuffer_T))]
except AttributeError:
    pass
try:
    vkBeginCommandBuffer = _libraries['libvulkan.so.1'].vkBeginCommandBuffer
    vkBeginCommandBuffer.restype = VkResult
    vkBeginCommandBuffer.argtypes = [VkCommandBuffer, ctypes.POINTER(struct_VkCommandBufferBeginInfo)]
except AttributeError:
    pass
try:
    vkEndCommandBuffer = _libraries['libvulkan.so.1'].vkEndCommandBuffer
    vkEndCommandBuffer.restype = VkResult
    vkEndCommandBuffer.argtypes = [VkCommandBuffer]
except AttributeError:
    pass
try:
    vkResetCommandBuffer = _libraries['libvulkan.so.1'].vkResetCommandBuffer
    vkResetCommandBuffer.restype = VkResult
    vkResetCommandBuffer.argtypes = [VkCommandBuffer, VkCommandBufferResetFlags]
except AttributeError:
    pass
try:
    vkCmdBindPipeline = _libraries['libvulkan.so.1'].vkCmdBindPipeline
    vkCmdBindPipeline.restype = None
    vkCmdBindPipeline.argtypes = [VkCommandBuffer, VkPipelineBindPoint, VkPipeline]
except AttributeError:
    pass
try:
    vkCmdSetViewport = _libraries['libvulkan.so.1'].vkCmdSetViewport
    vkCmdSetViewport.restype = None
    vkCmdSetViewport.argtypes = [VkCommandBuffer, uint32_t, uint32_t, ctypes.POINTER(struct_VkViewport)]
except AttributeError:
    pass
try:
    vkCmdSetScissor = _libraries['libvulkan.so.1'].vkCmdSetScissor
    vkCmdSetScissor.restype = None
    vkCmdSetScissor.argtypes = [VkCommandBuffer, uint32_t, uint32_t, ctypes.POINTER(struct_VkRect2D)]
except AttributeError:
    pass
try:
    vkCmdSetLineWidth = _libraries['libvulkan.so.1'].vkCmdSetLineWidth
    vkCmdSetLineWidth.restype = None
    vkCmdSetLineWidth.argtypes = [VkCommandBuffer, ctypes.c_float]
except AttributeError:
    pass
try:
    vkCmdSetDepthBias = _libraries['libvulkan.so.1'].vkCmdSetDepthBias
    vkCmdSetDepthBias.restype = None
    vkCmdSetDepthBias.argtypes = [VkCommandBuffer, ctypes.c_float, ctypes.c_float, ctypes.c_float]
except AttributeError:
    pass
try:
    vkCmdSetBlendConstants = _libraries['libvulkan.so.1'].vkCmdSetBlendConstants
    vkCmdSetBlendConstants.restype = None
    vkCmdSetBlendConstants.argtypes = [VkCommandBuffer, ctypes.c_float * 4]
except AttributeError:
    pass
try:
    vkCmdSetDepthBounds = _libraries['libvulkan.so.1'].vkCmdSetDepthBounds
    vkCmdSetDepthBounds.restype = None
    vkCmdSetDepthBounds.argtypes = [VkCommandBuffer, ctypes.c_float, ctypes.c_float]
except AttributeError:
    pass
try:
    vkCmdSetStencilCompareMask = _libraries['libvulkan.so.1'].vkCmdSetStencilCompareMask
    vkCmdSetStencilCompareMask.restype = None
    vkCmdSetStencilCompareMask.argtypes = [VkCommandBuffer, VkStencilFaceFlags, uint32_t]
except AttributeError:
    pass
try:
    vkCmdSetStencilWriteMask = _libraries['libvulkan.so.1'].vkCmdSetStencilWriteMask
    vkCmdSetStencilWriteMask.restype = None
    vkCmdSetStencilWriteMask.argtypes = [VkCommandBuffer, VkStencilFaceFlags, uint32_t]
except AttributeError:
    pass
try:
    vkCmdSetStencilReference = _libraries['libvulkan.so.1'].vkCmdSetStencilReference
    vkCmdSetStencilReference.restype = None
    vkCmdSetStencilReference.argtypes = [VkCommandBuffer, VkStencilFaceFlags, uint32_t]
except AttributeError:
    pass
try:
    vkCmdBindDescriptorSets = _libraries['libvulkan.so.1'].vkCmdBindDescriptorSets
    vkCmdBindDescriptorSets.restype = None
    vkCmdBindDescriptorSets.argtypes = [VkCommandBuffer, VkPipelineBindPoint, VkPipelineLayout, uint32_t, uint32_t, ctypes.POINTER(ctypes.POINTER(struct_VkDescriptorSet_T)), uint32_t, ctypes.POINTER(ctypes.c_uint32)]
except AttributeError:
    pass
try:
    vkCmdBindIndexBuffer = _libraries['libvulkan.so.1'].vkCmdBindIndexBuffer
    vkCmdBindIndexBuffer.restype = None
    vkCmdBindIndexBuffer.argtypes = [VkCommandBuffer, VkBuffer, VkDeviceSize, VkIndexType]
except AttributeError:
    pass
try:
    vkCmdBindVertexBuffers = _libraries['libvulkan.so.1'].vkCmdBindVertexBuffers
    vkCmdBindVertexBuffers.restype = None
    vkCmdBindVertexBuffers.argtypes = [VkCommandBuffer, uint32_t, uint32_t, ctypes.POINTER(ctypes.POINTER(struct_VkBuffer_T)), ctypes.POINTER(ctypes.c_uint64)]
except AttributeError:
    pass
try:
    vkCmdDraw = _libraries['libvulkan.so.1'].vkCmdDraw
    vkCmdDraw.restype = None
    vkCmdDraw.argtypes = [VkCommandBuffer, uint32_t, uint32_t, uint32_t, uint32_t]
except AttributeError:
    pass
int32_t = ctypes.c_int32
try:
    vkCmdDrawIndexed = _libraries['libvulkan.so.1'].vkCmdDrawIndexed
    vkCmdDrawIndexed.restype = None
    vkCmdDrawIndexed.argtypes = [VkCommandBuffer, uint32_t, uint32_t, uint32_t, int32_t, uint32_t]
except AttributeError:
    pass
try:
    vkCmdDrawIndirect = _libraries['libvulkan.so.1'].vkCmdDrawIndirect
    vkCmdDrawIndirect.restype = None
    vkCmdDrawIndirect.argtypes = [VkCommandBuffer, VkBuffer, VkDeviceSize, uint32_t, uint32_t]
except AttributeError:
    pass
try:
    vkCmdDrawIndexedIndirect = _libraries['libvulkan.so.1'].vkCmdDrawIndexedIndirect
    vkCmdDrawIndexedIndirect.restype = None
    vkCmdDrawIndexedIndirect.argtypes = [VkCommandBuffer, VkBuffer, VkDeviceSize, uint32_t, uint32_t]
except AttributeError:
    pass
try:
    vkCmdDispatch = _libraries['libvulkan.so.1'].vkCmdDispatch
    vkCmdDispatch.restype = None
    vkCmdDispatch.argtypes = [VkCommandBuffer, uint32_t, uint32_t, uint32_t]
except AttributeError:
    pass
try:
    vkCmdDispatchIndirect = _libraries['libvulkan.so.1'].vkCmdDispatchIndirect
    vkCmdDispatchIndirect.restype = None
    vkCmdDispatchIndirect.argtypes = [VkCommandBuffer, VkBuffer, VkDeviceSize]
except AttributeError:
    pass
try:
    vkCmdCopyBuffer = _libraries['libvulkan.so.1'].vkCmdCopyBuffer
    vkCmdCopyBuffer.restype = None
    vkCmdCopyBuffer.argtypes = [VkCommandBuffer, VkBuffer, VkBuffer, uint32_t, ctypes.POINTER(struct_VkBufferCopy)]
except AttributeError:
    pass
try:
    vkCmdCopyImage = _libraries['libvulkan.so.1'].vkCmdCopyImage
    vkCmdCopyImage.restype = None
    vkCmdCopyImage.argtypes = [VkCommandBuffer, VkImage, VkImageLayout, VkImage, VkImageLayout, uint32_t, ctypes.POINTER(struct_VkImageCopy)]
except AttributeError:
    pass
try:
    vkCmdBlitImage = _libraries['libvulkan.so.1'].vkCmdBlitImage
    vkCmdBlitImage.restype = None
    vkCmdBlitImage.argtypes = [VkCommandBuffer, VkImage, VkImageLayout, VkImage, VkImageLayout, uint32_t, ctypes.POINTER(struct_VkImageBlit), VkFilter]
except AttributeError:
    pass
try:
    vkCmdCopyBufferToImage = _libraries['libvulkan.so.1'].vkCmdCopyBufferToImage
    vkCmdCopyBufferToImage.restype = None
    vkCmdCopyBufferToImage.argtypes = [VkCommandBuffer, VkBuffer, VkImage, VkImageLayout, uint32_t, ctypes.POINTER(struct_VkBufferImageCopy)]
except AttributeError:
    pass
try:
    vkCmdCopyImageToBuffer = _libraries['libvulkan.so.1'].vkCmdCopyImageToBuffer
    vkCmdCopyImageToBuffer.restype = None
    vkCmdCopyImageToBuffer.argtypes = [VkCommandBuffer, VkImage, VkImageLayout, VkBuffer, uint32_t, ctypes.POINTER(struct_VkBufferImageCopy)]
except AttributeError:
    pass
try:
    vkCmdUpdateBuffer = _libraries['libvulkan.so.1'].vkCmdUpdateBuffer
    vkCmdUpdateBuffer.restype = None
    vkCmdUpdateBuffer.argtypes = [VkCommandBuffer, VkBuffer, VkDeviceSize, VkDeviceSize, ctypes.POINTER(None)]
except AttributeError:
    pass
try:
    vkCmdFillBuffer = _libraries['libvulkan.so.1'].vkCmdFillBuffer
    vkCmdFillBuffer.restype = None
    vkCmdFillBuffer.argtypes = [VkCommandBuffer, VkBuffer, VkDeviceSize, VkDeviceSize, uint32_t]
except AttributeError:
    pass
try:
    vkCmdClearColorImage = _libraries['libvulkan.so.1'].vkCmdClearColorImage
    vkCmdClearColorImage.restype = None
    vkCmdClearColorImage.argtypes = [VkCommandBuffer, VkImage, VkImageLayout, ctypes.POINTER(union_VkClearColorValue), uint32_t, ctypes.POINTER(struct_VkImageSubresourceRange)]
except AttributeError:
    pass
try:
    vkCmdClearDepthStencilImage = _libraries['libvulkan.so.1'].vkCmdClearDepthStencilImage
    vkCmdClearDepthStencilImage.restype = None
    vkCmdClearDepthStencilImage.argtypes = [VkCommandBuffer, VkImage, VkImageLayout, ctypes.POINTER(struct_VkClearDepthStencilValue), uint32_t, ctypes.POINTER(struct_VkImageSubresourceRange)]
except AttributeError:
    pass
try:
    vkCmdClearAttachments = _libraries['libvulkan.so.1'].vkCmdClearAttachments
    vkCmdClearAttachments.restype = None
    vkCmdClearAttachments.argtypes = [VkCommandBuffer, uint32_t, ctypes.POINTER(struct_VkClearAttachment), uint32_t, ctypes.POINTER(struct_VkClearRect)]
except AttributeError:
    pass
try:
    vkCmdResolveImage = _libraries['libvulkan.so.1'].vkCmdResolveImage
    vkCmdResolveImage.restype = None
    vkCmdResolveImage.argtypes = [VkCommandBuffer, VkImage, VkImageLayout, VkImage, VkImageLayout, uint32_t, ctypes.POINTER(struct_VkImageResolve)]
except AttributeError:
    pass
try:
    vkCmdSetEvent = _libraries['libvulkan.so.1'].vkCmdSetEvent
    vkCmdSetEvent.restype = None
    vkCmdSetEvent.argtypes = [VkCommandBuffer, VkEvent, VkPipelineStageFlags]
except AttributeError:
    pass
try:
    vkCmdResetEvent = _libraries['libvulkan.so.1'].vkCmdResetEvent
    vkCmdResetEvent.restype = None
    vkCmdResetEvent.argtypes = [VkCommandBuffer, VkEvent, VkPipelineStageFlags]
except AttributeError:
    pass
try:
    vkCmdWaitEvents = _libraries['libvulkan.so.1'].vkCmdWaitEvents
    vkCmdWaitEvents.restype = None
    vkCmdWaitEvents.argtypes = [VkCommandBuffer, uint32_t, ctypes.POINTER(ctypes.POINTER(struct_VkEvent_T)), VkPipelineStageFlags, VkPipelineStageFlags, uint32_t, ctypes.POINTER(struct_VkMemoryBarrier), uint32_t, ctypes.POINTER(struct_VkBufferMemoryBarrier), uint32_t, ctypes.POINTER(struct_VkImageMemoryBarrier)]
except AttributeError:
    pass
try:
    vkCmdPipelineBarrier = _libraries['libvulkan.so.1'].vkCmdPipelineBarrier
    vkCmdPipelineBarrier.restype = None
    vkCmdPipelineBarrier.argtypes = [VkCommandBuffer, VkPipelineStageFlags, VkPipelineStageFlags, VkDependencyFlags, uint32_t, ctypes.POINTER(struct_VkMemoryBarrier), uint32_t, ctypes.POINTER(struct_VkBufferMemoryBarrier), uint32_t, ctypes.POINTER(struct_VkImageMemoryBarrier)]
except AttributeError:
    pass
try:
    vkCmdBeginQuery = _libraries['libvulkan.so.1'].vkCmdBeginQuery
    vkCmdBeginQuery.restype = None
    vkCmdBeginQuery.argtypes = [VkCommandBuffer, VkQueryPool, uint32_t, VkQueryControlFlags]
except AttributeError:
    pass
try:
    vkCmdEndQuery = _libraries['libvulkan.so.1'].vkCmdEndQuery
    vkCmdEndQuery.restype = None
    vkCmdEndQuery.argtypes = [VkCommandBuffer, VkQueryPool, uint32_t]
except AttributeError:
    pass
try:
    vkCmdResetQueryPool = _libraries['libvulkan.so.1'].vkCmdResetQueryPool
    vkCmdResetQueryPool.restype = None
    vkCmdResetQueryPool.argtypes = [VkCommandBuffer, VkQueryPool, uint32_t, uint32_t]
except AttributeError:
    pass
try:
    vkCmdWriteTimestamp = _libraries['libvulkan.so.1'].vkCmdWriteTimestamp
    vkCmdWriteTimestamp.restype = None
    vkCmdWriteTimestamp.argtypes = [VkCommandBuffer, VkPipelineStageFlagBits, VkQueryPool, uint32_t]
except AttributeError:
    pass
try:
    vkCmdCopyQueryPoolResults = _libraries['libvulkan.so.1'].vkCmdCopyQueryPoolResults
    vkCmdCopyQueryPoolResults.restype = None
    vkCmdCopyQueryPoolResults.argtypes = [VkCommandBuffer, VkQueryPool, uint32_t, uint32_t, VkBuffer, VkDeviceSize, VkDeviceSize, VkQueryResultFlags]
except AttributeError:
    pass
try:
    vkCmdPushConstants = _libraries['libvulkan.so.1'].vkCmdPushConstants
    vkCmdPushConstants.restype = None
    vkCmdPushConstants.argtypes = [VkCommandBuffer, VkPipelineLayout, VkShaderStageFlags, uint32_t, uint32_t, ctypes.POINTER(None)]
except AttributeError:
    pass
try:
    vkCmdBeginRenderPass = _libraries['libvulkan.so.1'].vkCmdBeginRenderPass
    vkCmdBeginRenderPass.restype = None
    vkCmdBeginRenderPass.argtypes = [VkCommandBuffer, ctypes.POINTER(struct_VkRenderPassBeginInfo), VkSubpassContents]
except AttributeError:
    pass
try:
    vkCmdNextSubpass = _libraries['libvulkan.so.1'].vkCmdNextSubpass
    vkCmdNextSubpass.restype = None
    vkCmdNextSubpass.argtypes = [VkCommandBuffer, VkSubpassContents]
except AttributeError:
    pass
try:
    vkCmdEndRenderPass = _libraries['libvulkan.so.1'].vkCmdEndRenderPass
    vkCmdEndRenderPass.restype = None
    vkCmdEndRenderPass.argtypes = [VkCommandBuffer]
except AttributeError:
    pass
try:
    vkCmdExecuteCommands = _libraries['libvulkan.so.1'].vkCmdExecuteCommands
    vkCmdExecuteCommands.restype = None
    vkCmdExecuteCommands.argtypes = [VkCommandBuffer, uint32_t, ctypes.POINTER(ctypes.POINTER(struct_VkCommandBuffer_T))]
except AttributeError:
    pass
class struct_VkSamplerYcbcrConversion_T(Structure):
    pass

VkSamplerYcbcrConversion = ctypes.POINTER(struct_VkSamplerYcbcrConversion_T)
class struct_VkDescriptorUpdateTemplate_T(Structure):
    pass

VkDescriptorUpdateTemplate = ctypes.POINTER(struct_VkDescriptorUpdateTemplate_T)

# values for enumeration 'VkPointClippingBehavior'
VkPointClippingBehavior__enumvalues = {
    0: 'VK_POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES',
    1: 'VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY',
    0: 'VK_POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES_KHR',
    1: 'VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY_KHR',
    2147483647: 'VK_POINT_CLIPPING_BEHAVIOR_MAX_ENUM',
}
VK_POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES = 0
VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY = 1
VK_POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES_KHR = 0
VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY_KHR = 1
VK_POINT_CLIPPING_BEHAVIOR_MAX_ENUM = 2147483647
VkPointClippingBehavior = ctypes.c_uint32 # enum

# values for enumeration 'VkTessellationDomainOrigin'
VkTessellationDomainOrigin__enumvalues = {
    0: 'VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT',
    1: 'VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT',
    0: 'VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT_KHR',
    1: 'VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT_KHR',
    2147483647: 'VK_TESSELLATION_DOMAIN_ORIGIN_MAX_ENUM',
}
VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT = 0
VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT = 1
VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT_KHR = 0
VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT_KHR = 1
VK_TESSELLATION_DOMAIN_ORIGIN_MAX_ENUM = 2147483647
VkTessellationDomainOrigin = ctypes.c_uint32 # enum

# values for enumeration 'VkSamplerYcbcrModelConversion'
VkSamplerYcbcrModelConversion__enumvalues = {
    0: 'VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY',
    1: 'VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY',
    2: 'VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709',
    3: 'VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601',
    4: 'VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020',
    0: 'VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY_KHR',
    1: 'VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY_KHR',
    2: 'VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709_KHR',
    3: 'VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601_KHR',
    4: 'VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020_KHR',
    2147483647: 'VK_SAMPLER_YCBCR_MODEL_CONVERSION_MAX_ENUM',
}
VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY = 0
VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY = 1
VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709 = 2
VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601 = 3
VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020 = 4
VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY_KHR = 0
VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY_KHR = 1
VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709_KHR = 2
VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601_KHR = 3
VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020_KHR = 4
VK_SAMPLER_YCBCR_MODEL_CONVERSION_MAX_ENUM = 2147483647
VkSamplerYcbcrModelConversion = ctypes.c_uint32 # enum

# values for enumeration 'VkSamplerYcbcrRange'
VkSamplerYcbcrRange__enumvalues = {
    0: 'VK_SAMPLER_YCBCR_RANGE_ITU_FULL',
    1: 'VK_SAMPLER_YCBCR_RANGE_ITU_NARROW',
    0: 'VK_SAMPLER_YCBCR_RANGE_ITU_FULL_KHR',
    1: 'VK_SAMPLER_YCBCR_RANGE_ITU_NARROW_KHR',
    2147483647: 'VK_SAMPLER_YCBCR_RANGE_MAX_ENUM',
}
VK_SAMPLER_YCBCR_RANGE_ITU_FULL = 0
VK_SAMPLER_YCBCR_RANGE_ITU_NARROW = 1
VK_SAMPLER_YCBCR_RANGE_ITU_FULL_KHR = 0
VK_SAMPLER_YCBCR_RANGE_ITU_NARROW_KHR = 1
VK_SAMPLER_YCBCR_RANGE_MAX_ENUM = 2147483647
VkSamplerYcbcrRange = ctypes.c_uint32 # enum

# values for enumeration 'VkChromaLocation'
VkChromaLocation__enumvalues = {
    0: 'VK_CHROMA_LOCATION_COSITED_EVEN',
    1: 'VK_CHROMA_LOCATION_MIDPOINT',
    0: 'VK_CHROMA_LOCATION_COSITED_EVEN_KHR',
    1: 'VK_CHROMA_LOCATION_MIDPOINT_KHR',
    2147483647: 'VK_CHROMA_LOCATION_MAX_ENUM',
}
VK_CHROMA_LOCATION_COSITED_EVEN = 0
VK_CHROMA_LOCATION_MIDPOINT = 1
VK_CHROMA_LOCATION_COSITED_EVEN_KHR = 0
VK_CHROMA_LOCATION_MIDPOINT_KHR = 1
VK_CHROMA_LOCATION_MAX_ENUM = 2147483647
VkChromaLocation = ctypes.c_uint32 # enum

# values for enumeration 'VkDescriptorUpdateTemplateType'
VkDescriptorUpdateTemplateType__enumvalues = {
    0: 'VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET',
    1: 'VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_PUSH_DESCRIPTORS_KHR',
    0: 'VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET_KHR',
    2147483647: 'VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_MAX_ENUM',
}
VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET = 0
VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_PUSH_DESCRIPTORS_KHR = 1
VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET_KHR = 0
VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_MAX_ENUM = 2147483647
VkDescriptorUpdateTemplateType = ctypes.c_uint32 # enum

# values for enumeration 'VkSubgroupFeatureFlagBits'
VkSubgroupFeatureFlagBits__enumvalues = {
    1: 'VK_SUBGROUP_FEATURE_BASIC_BIT',
    2: 'VK_SUBGROUP_FEATURE_VOTE_BIT',
    4: 'VK_SUBGROUP_FEATURE_ARITHMETIC_BIT',
    8: 'VK_SUBGROUP_FEATURE_BALLOT_BIT',
    16: 'VK_SUBGROUP_FEATURE_SHUFFLE_BIT',
    32: 'VK_SUBGROUP_FEATURE_SHUFFLE_RELATIVE_BIT',
    64: 'VK_SUBGROUP_FEATURE_CLUSTERED_BIT',
    128: 'VK_SUBGROUP_FEATURE_QUAD_BIT',
    256: 'VK_SUBGROUP_FEATURE_PARTITIONED_BIT_NV',
    2147483647: 'VK_SUBGROUP_FEATURE_FLAG_BITS_MAX_ENUM',
}
VK_SUBGROUP_FEATURE_BASIC_BIT = 1
VK_SUBGROUP_FEATURE_VOTE_BIT = 2
VK_SUBGROUP_FEATURE_ARITHMETIC_BIT = 4
VK_SUBGROUP_FEATURE_BALLOT_BIT = 8
VK_SUBGROUP_FEATURE_SHUFFLE_BIT = 16
VK_SUBGROUP_FEATURE_SHUFFLE_RELATIVE_BIT = 32
VK_SUBGROUP_FEATURE_CLUSTERED_BIT = 64
VK_SUBGROUP_FEATURE_QUAD_BIT = 128
VK_SUBGROUP_FEATURE_PARTITIONED_BIT_NV = 256
VK_SUBGROUP_FEATURE_FLAG_BITS_MAX_ENUM = 2147483647
VkSubgroupFeatureFlagBits = ctypes.c_uint32 # enum
VkSubgroupFeatureFlags = ctypes.c_uint32

# values for enumeration 'VkPeerMemoryFeatureFlagBits'
VkPeerMemoryFeatureFlagBits__enumvalues = {
    1: 'VK_PEER_MEMORY_FEATURE_COPY_SRC_BIT',
    2: 'VK_PEER_MEMORY_FEATURE_COPY_DST_BIT',
    4: 'VK_PEER_MEMORY_FEATURE_GENERIC_SRC_BIT',
    8: 'VK_PEER_MEMORY_FEATURE_GENERIC_DST_BIT',
    1: 'VK_PEER_MEMORY_FEATURE_COPY_SRC_BIT_KHR',
    2: 'VK_PEER_MEMORY_FEATURE_COPY_DST_BIT_KHR',
    4: 'VK_PEER_MEMORY_FEATURE_GENERIC_SRC_BIT_KHR',
    8: 'VK_PEER_MEMORY_FEATURE_GENERIC_DST_BIT_KHR',
    2147483647: 'VK_PEER_MEMORY_FEATURE_FLAG_BITS_MAX_ENUM',
}
VK_PEER_MEMORY_FEATURE_COPY_SRC_BIT = 1
VK_PEER_MEMORY_FEATURE_COPY_DST_BIT = 2
VK_PEER_MEMORY_FEATURE_GENERIC_SRC_BIT = 4
VK_PEER_MEMORY_FEATURE_GENERIC_DST_BIT = 8
VK_PEER_MEMORY_FEATURE_COPY_SRC_BIT_KHR = 1
VK_PEER_MEMORY_FEATURE_COPY_DST_BIT_KHR = 2
VK_PEER_MEMORY_FEATURE_GENERIC_SRC_BIT_KHR = 4
VK_PEER_MEMORY_FEATURE_GENERIC_DST_BIT_KHR = 8
VK_PEER_MEMORY_FEATURE_FLAG_BITS_MAX_ENUM = 2147483647
VkPeerMemoryFeatureFlagBits = ctypes.c_uint32 # enum
VkPeerMemoryFeatureFlags = ctypes.c_uint32

# values for enumeration 'VkMemoryAllocateFlagBits'
VkMemoryAllocateFlagBits__enumvalues = {
    1: 'VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT',
    2: 'VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT',
    4: 'VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT',
    1: 'VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT_KHR',
    2: 'VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT_KHR',
    4: 'VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR',
    2147483647: 'VK_MEMORY_ALLOCATE_FLAG_BITS_MAX_ENUM',
}
VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT = 1
VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT = 2
VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT = 4
VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT_KHR = 1
VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT_KHR = 2
VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR = 4
VK_MEMORY_ALLOCATE_FLAG_BITS_MAX_ENUM = 2147483647
VkMemoryAllocateFlagBits = ctypes.c_uint32 # enum
VkMemoryAllocateFlags = ctypes.c_uint32
VkCommandPoolTrimFlags = ctypes.c_uint32
VkDescriptorUpdateTemplateCreateFlags = ctypes.c_uint32

# values for enumeration 'VkExternalMemoryHandleTypeFlagBits'
VkExternalMemoryHandleTypeFlagBits__enumvalues = {
    1: 'VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT',
    2: 'VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT',
    4: 'VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT',
    8: 'VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT',
    16: 'VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT',
    32: 'VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT',
    64: 'VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT',
    512: 'VK_EXTERNAL_MEMORY_HANDLE_TYPE_DMA_BUF_BIT_EXT',
    1024: 'VK_EXTERNAL_MEMORY_HANDLE_TYPE_ANDROID_HARDWARE_BUFFER_BIT_ANDROID',
    128: 'VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_ALLOCATION_BIT_EXT',
    256: 'VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_MAPPED_FOREIGN_MEMORY_BIT_EXT',
    2048: 'VK_EXTERNAL_MEMORY_HANDLE_TYPE_ZIRCON_VMO_BIT_FUCHSIA',
    4096: 'VK_EXTERNAL_MEMORY_HANDLE_TYPE_RDMA_ADDRESS_BIT_NV',
    16384: 'VK_EXTERNAL_MEMORY_HANDLE_TYPE_SCREEN_BUFFER_BIT_QNX',
    1: 'VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT_KHR',
    2: 'VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR',
    4: 'VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR',
    8: 'VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT_KHR',
    16: 'VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT_KHR',
    32: 'VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT_KHR',
    64: 'VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT_KHR',
    2147483647: 'VK_EXTERNAL_MEMORY_HANDLE_TYPE_FLAG_BITS_MAX_ENUM',
}
VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT = 1
VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT = 2
VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT = 4
VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT = 8
VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT = 16
VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT = 32
VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT = 64
VK_EXTERNAL_MEMORY_HANDLE_TYPE_DMA_BUF_BIT_EXT = 512
VK_EXTERNAL_MEMORY_HANDLE_TYPE_ANDROID_HARDWARE_BUFFER_BIT_ANDROID = 1024
VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_ALLOCATION_BIT_EXT = 128
VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_MAPPED_FOREIGN_MEMORY_BIT_EXT = 256
VK_EXTERNAL_MEMORY_HANDLE_TYPE_ZIRCON_VMO_BIT_FUCHSIA = 2048
VK_EXTERNAL_MEMORY_HANDLE_TYPE_RDMA_ADDRESS_BIT_NV = 4096
VK_EXTERNAL_MEMORY_HANDLE_TYPE_SCREEN_BUFFER_BIT_QNX = 16384
VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT_KHR = 1
VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR = 2
VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR = 4
VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT_KHR = 8
VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT_KHR = 16
VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT_KHR = 32
VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT_KHR = 64
VK_EXTERNAL_MEMORY_HANDLE_TYPE_FLAG_BITS_MAX_ENUM = 2147483647
VkExternalMemoryHandleTypeFlagBits = ctypes.c_uint32 # enum
VkExternalMemoryHandleTypeFlags = ctypes.c_uint32

# values for enumeration 'VkExternalMemoryFeatureFlagBits'
VkExternalMemoryFeatureFlagBits__enumvalues = {
    1: 'VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT',
    2: 'VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT',
    4: 'VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT',
    1: 'VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT_KHR',
    2: 'VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT_KHR',
    4: 'VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT_KHR',
    2147483647: 'VK_EXTERNAL_MEMORY_FEATURE_FLAG_BITS_MAX_ENUM',
}
VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT = 1
VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT = 2
VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT = 4
VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT_KHR = 1
VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT_KHR = 2
VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT_KHR = 4
VK_EXTERNAL_MEMORY_FEATURE_FLAG_BITS_MAX_ENUM = 2147483647
VkExternalMemoryFeatureFlagBits = ctypes.c_uint32 # enum
VkExternalMemoryFeatureFlags = ctypes.c_uint32

# values for enumeration 'VkExternalFenceHandleTypeFlagBits'
VkExternalFenceHandleTypeFlagBits__enumvalues = {
    1: 'VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT',
    2: 'VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT',
    4: 'VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT',
    8: 'VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT',
    1: 'VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT_KHR',
    2: 'VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR',
    4: 'VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR',
    8: 'VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT_KHR',
    2147483647: 'VK_EXTERNAL_FENCE_HANDLE_TYPE_FLAG_BITS_MAX_ENUM',
}
VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT = 1
VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT = 2
VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT = 4
VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT = 8
VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT_KHR = 1
VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR = 2
VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR = 4
VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT_KHR = 8
VK_EXTERNAL_FENCE_HANDLE_TYPE_FLAG_BITS_MAX_ENUM = 2147483647
VkExternalFenceHandleTypeFlagBits = ctypes.c_uint32 # enum
VkExternalFenceHandleTypeFlags = ctypes.c_uint32

# values for enumeration 'VkExternalFenceFeatureFlagBits'
VkExternalFenceFeatureFlagBits__enumvalues = {
    1: 'VK_EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT',
    2: 'VK_EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT',
    1: 'VK_EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT_KHR',
    2: 'VK_EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT_KHR',
    2147483647: 'VK_EXTERNAL_FENCE_FEATURE_FLAG_BITS_MAX_ENUM',
}
VK_EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT = 1
VK_EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT = 2
VK_EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT_KHR = 1
VK_EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT_KHR = 2
VK_EXTERNAL_FENCE_FEATURE_FLAG_BITS_MAX_ENUM = 2147483647
VkExternalFenceFeatureFlagBits = ctypes.c_uint32 # enum
VkExternalFenceFeatureFlags = ctypes.c_uint32

# values for enumeration 'VkFenceImportFlagBits'
VkFenceImportFlagBits__enumvalues = {
    1: 'VK_FENCE_IMPORT_TEMPORARY_BIT',
    1: 'VK_FENCE_IMPORT_TEMPORARY_BIT_KHR',
    2147483647: 'VK_FENCE_IMPORT_FLAG_BITS_MAX_ENUM',
}
VK_FENCE_IMPORT_TEMPORARY_BIT = 1
VK_FENCE_IMPORT_TEMPORARY_BIT_KHR = 1
VK_FENCE_IMPORT_FLAG_BITS_MAX_ENUM = 2147483647
VkFenceImportFlagBits = ctypes.c_uint32 # enum
VkFenceImportFlags = ctypes.c_uint32

# values for enumeration 'VkSemaphoreImportFlagBits'
VkSemaphoreImportFlagBits__enumvalues = {
    1: 'VK_SEMAPHORE_IMPORT_TEMPORARY_BIT',
    1: 'VK_SEMAPHORE_IMPORT_TEMPORARY_BIT_KHR',
    2147483647: 'VK_SEMAPHORE_IMPORT_FLAG_BITS_MAX_ENUM',
}
VK_SEMAPHORE_IMPORT_TEMPORARY_BIT = 1
VK_SEMAPHORE_IMPORT_TEMPORARY_BIT_KHR = 1
VK_SEMAPHORE_IMPORT_FLAG_BITS_MAX_ENUM = 2147483647
VkSemaphoreImportFlagBits = ctypes.c_uint32 # enum
VkSemaphoreImportFlags = ctypes.c_uint32

# values for enumeration 'VkExternalSemaphoreHandleTypeFlagBits'
VkExternalSemaphoreHandleTypeFlagBits__enumvalues = {
    1: 'VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT',
    2: 'VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT',
    4: 'VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT',
    8: 'VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT',
    16: 'VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT',
    128: 'VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_ZIRCON_EVENT_BIT_FUCHSIA',
    8: 'VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D11_FENCE_BIT',
    1: 'VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT_KHR',
    2: 'VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR',
    4: 'VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR',
    8: 'VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT_KHR',
    16: 'VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT_KHR',
    2147483647: 'VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_FLAG_BITS_MAX_ENUM',
}
VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT = 1
VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT = 2
VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT = 4
VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT = 8
VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT = 16
VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_ZIRCON_EVENT_BIT_FUCHSIA = 128
VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D11_FENCE_BIT = 8
VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT_KHR = 1
VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR = 2
VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR = 4
VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT_KHR = 8
VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT_KHR = 16
VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_FLAG_BITS_MAX_ENUM = 2147483647
VkExternalSemaphoreHandleTypeFlagBits = ctypes.c_uint32 # enum
VkExternalSemaphoreHandleTypeFlags = ctypes.c_uint32

# values for enumeration 'VkExternalSemaphoreFeatureFlagBits'
VkExternalSemaphoreFeatureFlagBits__enumvalues = {
    1: 'VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT',
    2: 'VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT',
    1: 'VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT_KHR',
    2: 'VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT_KHR',
    2147483647: 'VK_EXTERNAL_SEMAPHORE_FEATURE_FLAG_BITS_MAX_ENUM',
}
VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT = 1
VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT = 2
VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT_KHR = 1
VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT_KHR = 2
VK_EXTERNAL_SEMAPHORE_FEATURE_FLAG_BITS_MAX_ENUM = 2147483647
VkExternalSemaphoreFeatureFlagBits = ctypes.c_uint32 # enum
VkExternalSemaphoreFeatureFlags = ctypes.c_uint32
class struct_VkPhysicalDeviceSubgroupProperties(Structure):
    pass

struct_VkPhysicalDeviceSubgroupProperties._pack_ = 1 # source:False
struct_VkPhysicalDeviceSubgroupProperties._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('subgroupSize', ctypes.c_uint32),
    ('supportedStages', ctypes.c_uint32),
    ('supportedOperations', ctypes.c_uint32),
    ('quadOperationsInAllStages', ctypes.c_uint32),
]

VkPhysicalDeviceSubgroupProperties = struct_VkPhysicalDeviceSubgroupProperties
class struct_VkBindBufferMemoryInfo(Structure):
    pass

struct_VkBindBufferMemoryInfo._pack_ = 1 # source:False
struct_VkBindBufferMemoryInfo._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('buffer', ctypes.POINTER(struct_VkBuffer_T)),
    ('memory', ctypes.POINTER(struct_VkDeviceMemory_T)),
    ('memoryOffset', ctypes.c_uint64),
]

VkBindBufferMemoryInfo = struct_VkBindBufferMemoryInfo
class struct_VkBindImageMemoryInfo(Structure):
    pass

struct_VkBindImageMemoryInfo._pack_ = 1 # source:False
struct_VkBindImageMemoryInfo._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('image', ctypes.POINTER(struct_VkImage_T)),
    ('memory', ctypes.POINTER(struct_VkDeviceMemory_T)),
    ('memoryOffset', ctypes.c_uint64),
]

VkBindImageMemoryInfo = struct_VkBindImageMemoryInfo
class struct_VkPhysicalDevice16BitStorageFeatures(Structure):
    pass

struct_VkPhysicalDevice16BitStorageFeatures._pack_ = 1 # source:False
struct_VkPhysicalDevice16BitStorageFeatures._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('storageBuffer16BitAccess', ctypes.c_uint32),
    ('uniformAndStorageBuffer16BitAccess', ctypes.c_uint32),
    ('storagePushConstant16', ctypes.c_uint32),
    ('storageInputOutput16', ctypes.c_uint32),
]

VkPhysicalDevice16BitStorageFeatures = struct_VkPhysicalDevice16BitStorageFeatures
class struct_VkMemoryDedicatedRequirements(Structure):
    pass

struct_VkMemoryDedicatedRequirements._pack_ = 1 # source:False
struct_VkMemoryDedicatedRequirements._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('prefersDedicatedAllocation', ctypes.c_uint32),
    ('requiresDedicatedAllocation', ctypes.c_uint32),
]

VkMemoryDedicatedRequirements = struct_VkMemoryDedicatedRequirements
class struct_VkMemoryDedicatedAllocateInfo(Structure):
    pass

struct_VkMemoryDedicatedAllocateInfo._pack_ = 1 # source:False
struct_VkMemoryDedicatedAllocateInfo._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('image', ctypes.POINTER(struct_VkImage_T)),
    ('buffer', ctypes.POINTER(struct_VkBuffer_T)),
]

VkMemoryDedicatedAllocateInfo = struct_VkMemoryDedicatedAllocateInfo
class struct_VkMemoryAllocateFlagsInfo(Structure):
    pass

struct_VkMemoryAllocateFlagsInfo._pack_ = 1 # source:False
struct_VkMemoryAllocateFlagsInfo._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('flags', ctypes.c_uint32),
    ('deviceMask', ctypes.c_uint32),
]

VkMemoryAllocateFlagsInfo = struct_VkMemoryAllocateFlagsInfo
class struct_VkDeviceGroupRenderPassBeginInfo(Structure):
    pass

struct_VkDeviceGroupRenderPassBeginInfo._pack_ = 1 # source:False
struct_VkDeviceGroupRenderPassBeginInfo._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('deviceMask', ctypes.c_uint32),
    ('deviceRenderAreaCount', ctypes.c_uint32),
    ('pDeviceRenderAreas', ctypes.POINTER(struct_VkRect2D)),
]

VkDeviceGroupRenderPassBeginInfo = struct_VkDeviceGroupRenderPassBeginInfo
class struct_VkDeviceGroupCommandBufferBeginInfo(Structure):
    pass

struct_VkDeviceGroupCommandBufferBeginInfo._pack_ = 1 # source:False
struct_VkDeviceGroupCommandBufferBeginInfo._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('deviceMask', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkDeviceGroupCommandBufferBeginInfo = struct_VkDeviceGroupCommandBufferBeginInfo
class struct_VkDeviceGroupSubmitInfo(Structure):
    pass

struct_VkDeviceGroupSubmitInfo._pack_ = 1 # source:False
struct_VkDeviceGroupSubmitInfo._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('waitSemaphoreCount', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('pWaitSemaphoreDeviceIndices', ctypes.POINTER(ctypes.c_uint32)),
    ('commandBufferCount', ctypes.c_uint32),
    ('PADDING_2', ctypes.c_ubyte * 4),
    ('pCommandBufferDeviceMasks', ctypes.POINTER(ctypes.c_uint32)),
    ('signalSemaphoreCount', ctypes.c_uint32),
    ('PADDING_3', ctypes.c_ubyte * 4),
    ('pSignalSemaphoreDeviceIndices', ctypes.POINTER(ctypes.c_uint32)),
]

VkDeviceGroupSubmitInfo = struct_VkDeviceGroupSubmitInfo
class struct_VkDeviceGroupBindSparseInfo(Structure):
    pass

struct_VkDeviceGroupBindSparseInfo._pack_ = 1 # source:False
struct_VkDeviceGroupBindSparseInfo._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('resourceDeviceIndex', ctypes.c_uint32),
    ('memoryDeviceIndex', ctypes.c_uint32),
]

VkDeviceGroupBindSparseInfo = struct_VkDeviceGroupBindSparseInfo
class struct_VkBindBufferMemoryDeviceGroupInfo(Structure):
    pass

struct_VkBindBufferMemoryDeviceGroupInfo._pack_ = 1 # source:False
struct_VkBindBufferMemoryDeviceGroupInfo._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('deviceIndexCount', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('pDeviceIndices', ctypes.POINTER(ctypes.c_uint32)),
]

VkBindBufferMemoryDeviceGroupInfo = struct_VkBindBufferMemoryDeviceGroupInfo
class struct_VkBindImageMemoryDeviceGroupInfo(Structure):
    pass

struct_VkBindImageMemoryDeviceGroupInfo._pack_ = 1 # source:False
struct_VkBindImageMemoryDeviceGroupInfo._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('deviceIndexCount', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('pDeviceIndices', ctypes.POINTER(ctypes.c_uint32)),
    ('splitInstanceBindRegionCount', ctypes.c_uint32),
    ('PADDING_2', ctypes.c_ubyte * 4),
    ('pSplitInstanceBindRegions', ctypes.POINTER(struct_VkRect2D)),
]

VkBindImageMemoryDeviceGroupInfo = struct_VkBindImageMemoryDeviceGroupInfo
class struct_VkPhysicalDeviceGroupProperties(Structure):
    pass

struct_VkPhysicalDeviceGroupProperties._pack_ = 1 # source:False
struct_VkPhysicalDeviceGroupProperties._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('physicalDeviceCount', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('physicalDevices', ctypes.POINTER(struct_VkPhysicalDevice_T) * 32),
    ('subsetAllocation', ctypes.c_uint32),
    ('PADDING_2', ctypes.c_ubyte * 4),
]

VkPhysicalDeviceGroupProperties = struct_VkPhysicalDeviceGroupProperties
class struct_VkDeviceGroupDeviceCreateInfo(Structure):
    pass

struct_VkDeviceGroupDeviceCreateInfo._pack_ = 1 # source:False
struct_VkDeviceGroupDeviceCreateInfo._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('physicalDeviceCount', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('pPhysicalDevices', ctypes.POINTER(ctypes.POINTER(struct_VkPhysicalDevice_T))),
]

VkDeviceGroupDeviceCreateInfo = struct_VkDeviceGroupDeviceCreateInfo
class struct_VkBufferMemoryRequirementsInfo2(Structure):
    pass

struct_VkBufferMemoryRequirementsInfo2._pack_ = 1 # source:False
struct_VkBufferMemoryRequirementsInfo2._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('buffer', ctypes.POINTER(struct_VkBuffer_T)),
]

VkBufferMemoryRequirementsInfo2 = struct_VkBufferMemoryRequirementsInfo2
class struct_VkImageMemoryRequirementsInfo2(Structure):
    pass

struct_VkImageMemoryRequirementsInfo2._pack_ = 1 # source:False
struct_VkImageMemoryRequirementsInfo2._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('image', ctypes.POINTER(struct_VkImage_T)),
]

VkImageMemoryRequirementsInfo2 = struct_VkImageMemoryRequirementsInfo2
class struct_VkImageSparseMemoryRequirementsInfo2(Structure):
    pass

struct_VkImageSparseMemoryRequirementsInfo2._pack_ = 1 # source:False
struct_VkImageSparseMemoryRequirementsInfo2._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('image', ctypes.POINTER(struct_VkImage_T)),
]

VkImageSparseMemoryRequirementsInfo2 = struct_VkImageSparseMemoryRequirementsInfo2
class struct_VkMemoryRequirements2(Structure):
    pass

struct_VkMemoryRequirements2._pack_ = 1 # source:False
struct_VkMemoryRequirements2._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('memoryRequirements', VkMemoryRequirements),
]

VkMemoryRequirements2 = struct_VkMemoryRequirements2
class struct_VkSparseImageMemoryRequirements2(Structure):
    pass

struct_VkSparseImageMemoryRequirements2._pack_ = 1 # source:False
struct_VkSparseImageMemoryRequirements2._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('memoryRequirements', VkSparseImageMemoryRequirements),
]

VkSparseImageMemoryRequirements2 = struct_VkSparseImageMemoryRequirements2
class struct_VkPhysicalDeviceFeatures2(Structure):
    pass

struct_VkPhysicalDeviceFeatures2._pack_ = 1 # source:False
struct_VkPhysicalDeviceFeatures2._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('features', VkPhysicalDeviceFeatures),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPhysicalDeviceFeatures2 = struct_VkPhysicalDeviceFeatures2
class struct_VkPhysicalDeviceProperties2(Structure):
    pass

struct_VkPhysicalDeviceProperties2._pack_ = 1 # source:False
struct_VkPhysicalDeviceProperties2._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('properties', VkPhysicalDeviceProperties),
]

VkPhysicalDeviceProperties2 = struct_VkPhysicalDeviceProperties2
class struct_VkFormatProperties2(Structure):
    pass

struct_VkFormatProperties2._pack_ = 1 # source:False
struct_VkFormatProperties2._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('formatProperties', VkFormatProperties),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkFormatProperties2 = struct_VkFormatProperties2
class struct_VkImageFormatProperties2(Structure):
    pass

struct_VkImageFormatProperties2._pack_ = 1 # source:False
struct_VkImageFormatProperties2._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('imageFormatProperties', VkImageFormatProperties),
]

VkImageFormatProperties2 = struct_VkImageFormatProperties2
class struct_VkPhysicalDeviceImageFormatInfo2(Structure):
    pass

struct_VkPhysicalDeviceImageFormatInfo2._pack_ = 1 # source:False
struct_VkPhysicalDeviceImageFormatInfo2._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('format', VkFormat),
    ('type', VkImageType),
    ('tiling', VkImageTiling),
    ('usage', ctypes.c_uint32),
    ('flags', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPhysicalDeviceImageFormatInfo2 = struct_VkPhysicalDeviceImageFormatInfo2
class struct_VkQueueFamilyProperties2(Structure):
    pass

struct_VkQueueFamilyProperties2._pack_ = 1 # source:False
struct_VkQueueFamilyProperties2._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('queueFamilyProperties', VkQueueFamilyProperties),
]

VkQueueFamilyProperties2 = struct_VkQueueFamilyProperties2
class struct_VkPhysicalDeviceMemoryProperties2(Structure):
    pass

struct_VkPhysicalDeviceMemoryProperties2._pack_ = 1 # source:False
struct_VkPhysicalDeviceMemoryProperties2._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('memoryProperties', VkPhysicalDeviceMemoryProperties),
]

VkPhysicalDeviceMemoryProperties2 = struct_VkPhysicalDeviceMemoryProperties2
class struct_VkSparseImageFormatProperties2(Structure):
    pass

struct_VkSparseImageFormatProperties2._pack_ = 1 # source:False
struct_VkSparseImageFormatProperties2._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('properties', VkSparseImageFormatProperties),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkSparseImageFormatProperties2 = struct_VkSparseImageFormatProperties2
class struct_VkPhysicalDeviceSparseImageFormatInfo2(Structure):
    pass

struct_VkPhysicalDeviceSparseImageFormatInfo2._pack_ = 1 # source:False
struct_VkPhysicalDeviceSparseImageFormatInfo2._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('format', VkFormat),
    ('type', VkImageType),
    ('samples', VkSampleCountFlagBits),
    ('usage', ctypes.c_uint32),
    ('tiling', VkImageTiling),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPhysicalDeviceSparseImageFormatInfo2 = struct_VkPhysicalDeviceSparseImageFormatInfo2
class struct_VkPhysicalDevicePointClippingProperties(Structure):
    pass

struct_VkPhysicalDevicePointClippingProperties._pack_ = 1 # source:False
struct_VkPhysicalDevicePointClippingProperties._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('pointClippingBehavior', VkPointClippingBehavior),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPhysicalDevicePointClippingProperties = struct_VkPhysicalDevicePointClippingProperties
class struct_VkInputAttachmentAspectReference(Structure):
    pass

struct_VkInputAttachmentAspectReference._pack_ = 1 # source:False
struct_VkInputAttachmentAspectReference._fields_ = [
    ('subpass', ctypes.c_uint32),
    ('inputAttachmentIndex', ctypes.c_uint32),
    ('aspectMask', ctypes.c_uint32),
]

VkInputAttachmentAspectReference = struct_VkInputAttachmentAspectReference
class struct_VkRenderPassInputAttachmentAspectCreateInfo(Structure):
    pass

struct_VkRenderPassInputAttachmentAspectCreateInfo._pack_ = 1 # source:False
struct_VkRenderPassInputAttachmentAspectCreateInfo._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('aspectReferenceCount', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('pAspectReferences', ctypes.POINTER(struct_VkInputAttachmentAspectReference)),
]

VkRenderPassInputAttachmentAspectCreateInfo = struct_VkRenderPassInputAttachmentAspectCreateInfo
class struct_VkImageViewUsageCreateInfo(Structure):
    pass

struct_VkImageViewUsageCreateInfo._pack_ = 1 # source:False
struct_VkImageViewUsageCreateInfo._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('usage', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkImageViewUsageCreateInfo = struct_VkImageViewUsageCreateInfo
class struct_VkPipelineTessellationDomainOriginStateCreateInfo(Structure):
    pass

struct_VkPipelineTessellationDomainOriginStateCreateInfo._pack_ = 1 # source:False
struct_VkPipelineTessellationDomainOriginStateCreateInfo._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('domainOrigin', VkTessellationDomainOrigin),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPipelineTessellationDomainOriginStateCreateInfo = struct_VkPipelineTessellationDomainOriginStateCreateInfo
class struct_VkRenderPassMultiviewCreateInfo(Structure):
    pass

struct_VkRenderPassMultiviewCreateInfo._pack_ = 1 # source:False
struct_VkRenderPassMultiviewCreateInfo._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('subpassCount', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('pViewMasks', ctypes.POINTER(ctypes.c_uint32)),
    ('dependencyCount', ctypes.c_uint32),
    ('PADDING_2', ctypes.c_ubyte * 4),
    ('pViewOffsets', ctypes.POINTER(ctypes.c_int32)),
    ('correlationMaskCount', ctypes.c_uint32),
    ('PADDING_3', ctypes.c_ubyte * 4),
    ('pCorrelationMasks', ctypes.POINTER(ctypes.c_uint32)),
]

VkRenderPassMultiviewCreateInfo = struct_VkRenderPassMultiviewCreateInfo
class struct_VkPhysicalDeviceMultiviewFeatures(Structure):
    pass

struct_VkPhysicalDeviceMultiviewFeatures._pack_ = 1 # source:False
struct_VkPhysicalDeviceMultiviewFeatures._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('multiview', ctypes.c_uint32),
    ('multiviewGeometryShader', ctypes.c_uint32),
    ('multiviewTessellationShader', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPhysicalDeviceMultiviewFeatures = struct_VkPhysicalDeviceMultiviewFeatures
class struct_VkPhysicalDeviceMultiviewProperties(Structure):
    pass

struct_VkPhysicalDeviceMultiviewProperties._pack_ = 1 # source:False
struct_VkPhysicalDeviceMultiviewProperties._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('maxMultiviewViewCount', ctypes.c_uint32),
    ('maxMultiviewInstanceIndex', ctypes.c_uint32),
]

VkPhysicalDeviceMultiviewProperties = struct_VkPhysicalDeviceMultiviewProperties
class struct_VkPhysicalDeviceVariablePointersFeatures(Structure):
    pass

struct_VkPhysicalDeviceVariablePointersFeatures._pack_ = 1 # source:False
struct_VkPhysicalDeviceVariablePointersFeatures._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('variablePointersStorageBuffer', ctypes.c_uint32),
    ('variablePointers', ctypes.c_uint32),
]

VkPhysicalDeviceVariablePointersFeatures = struct_VkPhysicalDeviceVariablePointersFeatures
VkPhysicalDeviceVariablePointerFeatures = struct_VkPhysicalDeviceVariablePointersFeatures
class struct_VkPhysicalDeviceProtectedMemoryFeatures(Structure):
    pass

struct_VkPhysicalDeviceProtectedMemoryFeatures._pack_ = 1 # source:False
struct_VkPhysicalDeviceProtectedMemoryFeatures._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('protectedMemory', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPhysicalDeviceProtectedMemoryFeatures = struct_VkPhysicalDeviceProtectedMemoryFeatures
class struct_VkPhysicalDeviceProtectedMemoryProperties(Structure):
    pass

struct_VkPhysicalDeviceProtectedMemoryProperties._pack_ = 1 # source:False
struct_VkPhysicalDeviceProtectedMemoryProperties._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('protectedNoFault', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPhysicalDeviceProtectedMemoryProperties = struct_VkPhysicalDeviceProtectedMemoryProperties
class struct_VkDeviceQueueInfo2(Structure):
    pass

struct_VkDeviceQueueInfo2._pack_ = 1 # source:False
struct_VkDeviceQueueInfo2._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('flags', ctypes.c_uint32),
    ('queueFamilyIndex', ctypes.c_uint32),
    ('queueIndex', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkDeviceQueueInfo2 = struct_VkDeviceQueueInfo2
class struct_VkProtectedSubmitInfo(Structure):
    pass

struct_VkProtectedSubmitInfo._pack_ = 1 # source:False
struct_VkProtectedSubmitInfo._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('protectedSubmit', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkProtectedSubmitInfo = struct_VkProtectedSubmitInfo
class struct_VkSamplerYcbcrConversionCreateInfo(Structure):
    pass

struct_VkSamplerYcbcrConversionCreateInfo._pack_ = 1 # source:False
struct_VkSamplerYcbcrConversionCreateInfo._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('format', VkFormat),
    ('ycbcrModel', VkSamplerYcbcrModelConversion),
    ('ycbcrRange', VkSamplerYcbcrRange),
    ('components', VkComponentMapping),
    ('xChromaOffset', VkChromaLocation),
    ('yChromaOffset', VkChromaLocation),
    ('chromaFilter', VkFilter),
    ('forceExplicitReconstruction', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkSamplerYcbcrConversionCreateInfo = struct_VkSamplerYcbcrConversionCreateInfo
class struct_VkSamplerYcbcrConversionInfo(Structure):
    pass

struct_VkSamplerYcbcrConversionInfo._pack_ = 1 # source:False
struct_VkSamplerYcbcrConversionInfo._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('conversion', ctypes.POINTER(struct_VkSamplerYcbcrConversion_T)),
]

VkSamplerYcbcrConversionInfo = struct_VkSamplerYcbcrConversionInfo
class struct_VkBindImagePlaneMemoryInfo(Structure):
    pass

struct_VkBindImagePlaneMemoryInfo._pack_ = 1 # source:False
struct_VkBindImagePlaneMemoryInfo._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('planeAspect', VkImageAspectFlagBits),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkBindImagePlaneMemoryInfo = struct_VkBindImagePlaneMemoryInfo
class struct_VkImagePlaneMemoryRequirementsInfo(Structure):
    pass

struct_VkImagePlaneMemoryRequirementsInfo._pack_ = 1 # source:False
struct_VkImagePlaneMemoryRequirementsInfo._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('planeAspect', VkImageAspectFlagBits),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkImagePlaneMemoryRequirementsInfo = struct_VkImagePlaneMemoryRequirementsInfo
class struct_VkPhysicalDeviceSamplerYcbcrConversionFeatures(Structure):
    pass

struct_VkPhysicalDeviceSamplerYcbcrConversionFeatures._pack_ = 1 # source:False
struct_VkPhysicalDeviceSamplerYcbcrConversionFeatures._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('samplerYcbcrConversion', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPhysicalDeviceSamplerYcbcrConversionFeatures = struct_VkPhysicalDeviceSamplerYcbcrConversionFeatures
class struct_VkSamplerYcbcrConversionImageFormatProperties(Structure):
    pass

struct_VkSamplerYcbcrConversionImageFormatProperties._pack_ = 1 # source:False
struct_VkSamplerYcbcrConversionImageFormatProperties._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('combinedImageSamplerDescriptorCount', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkSamplerYcbcrConversionImageFormatProperties = struct_VkSamplerYcbcrConversionImageFormatProperties
class struct_VkDescriptorUpdateTemplateEntry(Structure):
    pass

struct_VkDescriptorUpdateTemplateEntry._pack_ = 1 # source:False
struct_VkDescriptorUpdateTemplateEntry._fields_ = [
    ('dstBinding', ctypes.c_uint32),
    ('dstArrayElement', ctypes.c_uint32),
    ('descriptorCount', ctypes.c_uint32),
    ('descriptorType', VkDescriptorType),
    ('offset', ctypes.c_uint64),
    ('stride', ctypes.c_uint64),
]

VkDescriptorUpdateTemplateEntry = struct_VkDescriptorUpdateTemplateEntry
class struct_VkDescriptorUpdateTemplateCreateInfo(Structure):
    pass

struct_VkDescriptorUpdateTemplateCreateInfo._pack_ = 1 # source:False
struct_VkDescriptorUpdateTemplateCreateInfo._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('flags', ctypes.c_uint32),
    ('descriptorUpdateEntryCount', ctypes.c_uint32),
    ('pDescriptorUpdateEntries', ctypes.POINTER(struct_VkDescriptorUpdateTemplateEntry)),
    ('templateType', VkDescriptorUpdateTemplateType),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('descriptorSetLayout', ctypes.POINTER(struct_VkDescriptorSetLayout_T)),
    ('pipelineBindPoint', VkPipelineBindPoint),
    ('PADDING_2', ctypes.c_ubyte * 4),
    ('pipelineLayout', ctypes.POINTER(struct_VkPipelineLayout_T)),
    ('set', ctypes.c_uint32),
    ('PADDING_3', ctypes.c_ubyte * 4),
]

VkDescriptorUpdateTemplateCreateInfo = struct_VkDescriptorUpdateTemplateCreateInfo
class struct_VkExternalMemoryProperties(Structure):
    pass

struct_VkExternalMemoryProperties._pack_ = 1 # source:False
struct_VkExternalMemoryProperties._fields_ = [
    ('externalMemoryFeatures', ctypes.c_uint32),
    ('exportFromImportedHandleTypes', ctypes.c_uint32),
    ('compatibleHandleTypes', ctypes.c_uint32),
]

VkExternalMemoryProperties = struct_VkExternalMemoryProperties
class struct_VkPhysicalDeviceExternalImageFormatInfo(Structure):
    pass

struct_VkPhysicalDeviceExternalImageFormatInfo._pack_ = 1 # source:False
struct_VkPhysicalDeviceExternalImageFormatInfo._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('handleType', VkExternalMemoryHandleTypeFlagBits),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPhysicalDeviceExternalImageFormatInfo = struct_VkPhysicalDeviceExternalImageFormatInfo
class struct_VkExternalImageFormatProperties(Structure):
    pass

struct_VkExternalImageFormatProperties._pack_ = 1 # source:False
struct_VkExternalImageFormatProperties._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('externalMemoryProperties', VkExternalMemoryProperties),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkExternalImageFormatProperties = struct_VkExternalImageFormatProperties
class struct_VkPhysicalDeviceExternalBufferInfo(Structure):
    pass

struct_VkPhysicalDeviceExternalBufferInfo._pack_ = 1 # source:False
struct_VkPhysicalDeviceExternalBufferInfo._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('flags', ctypes.c_uint32),
    ('usage', ctypes.c_uint32),
    ('handleType', VkExternalMemoryHandleTypeFlagBits),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPhysicalDeviceExternalBufferInfo = struct_VkPhysicalDeviceExternalBufferInfo
class struct_VkExternalBufferProperties(Structure):
    pass

struct_VkExternalBufferProperties._pack_ = 1 # source:False
struct_VkExternalBufferProperties._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('externalMemoryProperties', VkExternalMemoryProperties),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkExternalBufferProperties = struct_VkExternalBufferProperties
class struct_VkPhysicalDeviceIDProperties(Structure):
    pass

struct_VkPhysicalDeviceIDProperties._pack_ = 1 # source:False
struct_VkPhysicalDeviceIDProperties._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('deviceUUID', ctypes.c_ubyte * 16),
    ('driverUUID', ctypes.c_ubyte * 16),
    ('deviceLUID', ctypes.c_ubyte * 8),
    ('deviceNodeMask', ctypes.c_uint32),
    ('deviceLUIDValid', ctypes.c_uint32),
]

VkPhysicalDeviceIDProperties = struct_VkPhysicalDeviceIDProperties
class struct_VkExternalMemoryImageCreateInfo(Structure):
    pass

struct_VkExternalMemoryImageCreateInfo._pack_ = 1 # source:False
struct_VkExternalMemoryImageCreateInfo._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('handleTypes', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkExternalMemoryImageCreateInfo = struct_VkExternalMemoryImageCreateInfo
class struct_VkExternalMemoryBufferCreateInfo(Structure):
    pass

struct_VkExternalMemoryBufferCreateInfo._pack_ = 1 # source:False
struct_VkExternalMemoryBufferCreateInfo._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('handleTypes', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkExternalMemoryBufferCreateInfo = struct_VkExternalMemoryBufferCreateInfo
class struct_VkExportMemoryAllocateInfo(Structure):
    pass

struct_VkExportMemoryAllocateInfo._pack_ = 1 # source:False
struct_VkExportMemoryAllocateInfo._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('handleTypes', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkExportMemoryAllocateInfo = struct_VkExportMemoryAllocateInfo
class struct_VkPhysicalDeviceExternalFenceInfo(Structure):
    pass

struct_VkPhysicalDeviceExternalFenceInfo._pack_ = 1 # source:False
struct_VkPhysicalDeviceExternalFenceInfo._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('handleType', VkExternalFenceHandleTypeFlagBits),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPhysicalDeviceExternalFenceInfo = struct_VkPhysicalDeviceExternalFenceInfo
class struct_VkExternalFenceProperties(Structure):
    pass

struct_VkExternalFenceProperties._pack_ = 1 # source:False
struct_VkExternalFenceProperties._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('exportFromImportedHandleTypes', ctypes.c_uint32),
    ('compatibleHandleTypes', ctypes.c_uint32),
    ('externalFenceFeatures', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkExternalFenceProperties = struct_VkExternalFenceProperties
class struct_VkExportFenceCreateInfo(Structure):
    pass

struct_VkExportFenceCreateInfo._pack_ = 1 # source:False
struct_VkExportFenceCreateInfo._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('handleTypes', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkExportFenceCreateInfo = struct_VkExportFenceCreateInfo
class struct_VkExportSemaphoreCreateInfo(Structure):
    pass

struct_VkExportSemaphoreCreateInfo._pack_ = 1 # source:False
struct_VkExportSemaphoreCreateInfo._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('handleTypes', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkExportSemaphoreCreateInfo = struct_VkExportSemaphoreCreateInfo
class struct_VkPhysicalDeviceExternalSemaphoreInfo(Structure):
    pass

struct_VkPhysicalDeviceExternalSemaphoreInfo._pack_ = 1 # source:False
struct_VkPhysicalDeviceExternalSemaphoreInfo._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('handleType', VkExternalSemaphoreHandleTypeFlagBits),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPhysicalDeviceExternalSemaphoreInfo = struct_VkPhysicalDeviceExternalSemaphoreInfo
class struct_VkExternalSemaphoreProperties(Structure):
    pass

struct_VkExternalSemaphoreProperties._pack_ = 1 # source:False
struct_VkExternalSemaphoreProperties._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('exportFromImportedHandleTypes', ctypes.c_uint32),
    ('compatibleHandleTypes', ctypes.c_uint32),
    ('externalSemaphoreFeatures', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkExternalSemaphoreProperties = struct_VkExternalSemaphoreProperties
class struct_VkPhysicalDeviceMaintenance3Properties(Structure):
    pass

struct_VkPhysicalDeviceMaintenance3Properties._pack_ = 1 # source:False
struct_VkPhysicalDeviceMaintenance3Properties._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('maxPerSetDescriptors', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('maxMemoryAllocationSize', ctypes.c_uint64),
]

VkPhysicalDeviceMaintenance3Properties = struct_VkPhysicalDeviceMaintenance3Properties
class struct_VkDescriptorSetLayoutSupport(Structure):
    pass

struct_VkDescriptorSetLayoutSupport._pack_ = 1 # source:False
struct_VkDescriptorSetLayoutSupport._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('supported', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkDescriptorSetLayoutSupport = struct_VkDescriptorSetLayoutSupport
class struct_VkPhysicalDeviceShaderDrawParametersFeatures(Structure):
    pass

struct_VkPhysicalDeviceShaderDrawParametersFeatures._pack_ = 1 # source:False
struct_VkPhysicalDeviceShaderDrawParametersFeatures._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('shaderDrawParameters', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPhysicalDeviceShaderDrawParametersFeatures = struct_VkPhysicalDeviceShaderDrawParametersFeatures
VkPhysicalDeviceShaderDrawParameterFeatures = struct_VkPhysicalDeviceShaderDrawParametersFeatures
PFN_vkEnumerateInstanceVersion = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(ctypes.c_uint32))
PFN_vkBindBufferMemory2 = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkDevice_T), ctypes.c_uint32, ctypes.POINTER(struct_VkBindBufferMemoryInfo))
PFN_vkBindImageMemory2 = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkDevice_T), ctypes.c_uint32, ctypes.POINTER(struct_VkBindImageMemoryInfo))
PFN_vkGetDeviceGroupPeerMemoryFeatures = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkDevice_T), ctypes.c_uint32, ctypes.c_uint32, ctypes.c_uint32, ctypes.POINTER(ctypes.c_uint32))
PFN_vkCmdSetDeviceMask = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.c_uint32)
PFN_vkCmdDispatchBase = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.c_uint32, ctypes.c_uint32, ctypes.c_uint32, ctypes.c_uint32, ctypes.c_uint32, ctypes.c_uint32)
PFN_vkEnumeratePhysicalDeviceGroups = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkInstance_T), ctypes.POINTER(ctypes.c_uint32), ctypes.POINTER(struct_VkPhysicalDeviceGroupProperties))
PFN_vkGetImageMemoryRequirements2 = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkImageMemoryRequirementsInfo2), ctypes.POINTER(struct_VkMemoryRequirements2))
PFN_vkGetBufferMemoryRequirements2 = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkBufferMemoryRequirementsInfo2), ctypes.POINTER(struct_VkMemoryRequirements2))
PFN_vkGetImageSparseMemoryRequirements2 = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkImageSparseMemoryRequirementsInfo2), ctypes.POINTER(ctypes.c_uint32), ctypes.POINTER(struct_VkSparseImageMemoryRequirements2))
PFN_vkGetPhysicalDeviceFeatures2 = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkPhysicalDevice_T), ctypes.POINTER(struct_VkPhysicalDeviceFeatures2))
PFN_vkGetPhysicalDeviceProperties2 = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkPhysicalDevice_T), ctypes.POINTER(struct_VkPhysicalDeviceProperties2))
PFN_vkGetPhysicalDeviceFormatProperties2 = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkPhysicalDevice_T), VkFormat, ctypes.POINTER(struct_VkFormatProperties2))
PFN_vkGetPhysicalDeviceImageFormatProperties2 = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkPhysicalDevice_T), ctypes.POINTER(struct_VkPhysicalDeviceImageFormatInfo2), ctypes.POINTER(struct_VkImageFormatProperties2))
PFN_vkGetPhysicalDeviceQueueFamilyProperties2 = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkPhysicalDevice_T), ctypes.POINTER(ctypes.c_uint32), ctypes.POINTER(struct_VkQueueFamilyProperties2))
PFN_vkGetPhysicalDeviceMemoryProperties2 = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkPhysicalDevice_T), ctypes.POINTER(struct_VkPhysicalDeviceMemoryProperties2))
PFN_vkGetPhysicalDeviceSparseImageFormatProperties2 = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkPhysicalDevice_T), ctypes.POINTER(struct_VkPhysicalDeviceSparseImageFormatInfo2), ctypes.POINTER(ctypes.c_uint32), ctypes.POINTER(struct_VkSparseImageFormatProperties2))
PFN_vkTrimCommandPool = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkCommandPool_T), ctypes.c_uint32)
PFN_vkGetDeviceQueue2 = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkDeviceQueueInfo2), ctypes.POINTER(ctypes.POINTER(struct_VkQueue_T)))
PFN_vkCreateSamplerYcbcrConversion = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkSamplerYcbcrConversionCreateInfo), ctypes.POINTER(struct_VkAllocationCallbacks), ctypes.POINTER(ctypes.POINTER(struct_VkSamplerYcbcrConversion_T)))
PFN_vkDestroySamplerYcbcrConversion = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkSamplerYcbcrConversion_T), ctypes.POINTER(struct_VkAllocationCallbacks))
PFN_vkCreateDescriptorUpdateTemplate = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkDescriptorUpdateTemplateCreateInfo), ctypes.POINTER(struct_VkAllocationCallbacks), ctypes.POINTER(ctypes.POINTER(struct_VkDescriptorUpdateTemplate_T)))
PFN_vkDestroyDescriptorUpdateTemplate = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkDescriptorUpdateTemplate_T), ctypes.POINTER(struct_VkAllocationCallbacks))
PFN_vkUpdateDescriptorSetWithTemplate = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkDescriptorSet_T), ctypes.POINTER(struct_VkDescriptorUpdateTemplate_T), ctypes.POINTER(None))
PFN_vkGetPhysicalDeviceExternalBufferProperties = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkPhysicalDevice_T), ctypes.POINTER(struct_VkPhysicalDeviceExternalBufferInfo), ctypes.POINTER(struct_VkExternalBufferProperties))
PFN_vkGetPhysicalDeviceExternalFenceProperties = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkPhysicalDevice_T), ctypes.POINTER(struct_VkPhysicalDeviceExternalFenceInfo), ctypes.POINTER(struct_VkExternalFenceProperties))
PFN_vkGetPhysicalDeviceExternalSemaphoreProperties = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkPhysicalDevice_T), ctypes.POINTER(struct_VkPhysicalDeviceExternalSemaphoreInfo), ctypes.POINTER(struct_VkExternalSemaphoreProperties))
PFN_vkGetDescriptorSetLayoutSupport = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkDescriptorSetLayoutCreateInfo), ctypes.POINTER(struct_VkDescriptorSetLayoutSupport))
try:
    vkEnumerateInstanceVersion = _libraries['libvulkan.so.1'].vkEnumerateInstanceVersion
    vkEnumerateInstanceVersion.restype = VkResult
    vkEnumerateInstanceVersion.argtypes = [ctypes.POINTER(ctypes.c_uint32)]
except AttributeError:
    pass
try:
    vkBindBufferMemory2 = _libraries['libvulkan.so.1'].vkBindBufferMemory2
    vkBindBufferMemory2.restype = VkResult
    vkBindBufferMemory2.argtypes = [VkDevice, uint32_t, ctypes.POINTER(struct_VkBindBufferMemoryInfo)]
except AttributeError:
    pass
try:
    vkBindImageMemory2 = _libraries['libvulkan.so.1'].vkBindImageMemory2
    vkBindImageMemory2.restype = VkResult
    vkBindImageMemory2.argtypes = [VkDevice, uint32_t, ctypes.POINTER(struct_VkBindImageMemoryInfo)]
except AttributeError:
    pass
try:
    vkGetDeviceGroupPeerMemoryFeatures = _libraries['libvulkan.so.1'].vkGetDeviceGroupPeerMemoryFeatures
    vkGetDeviceGroupPeerMemoryFeatures.restype = None
    vkGetDeviceGroupPeerMemoryFeatures.argtypes = [VkDevice, uint32_t, uint32_t, uint32_t, ctypes.POINTER(ctypes.c_uint32)]
except AttributeError:
    pass
try:
    vkCmdSetDeviceMask = _libraries['libvulkan.so.1'].vkCmdSetDeviceMask
    vkCmdSetDeviceMask.restype = None
    vkCmdSetDeviceMask.argtypes = [VkCommandBuffer, uint32_t]
except AttributeError:
    pass
try:
    vkCmdDispatchBase = _libraries['libvulkan.so.1'].vkCmdDispatchBase
    vkCmdDispatchBase.restype = None
    vkCmdDispatchBase.argtypes = [VkCommandBuffer, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t]
except AttributeError:
    pass
try:
    vkEnumeratePhysicalDeviceGroups = _libraries['libvulkan.so.1'].vkEnumeratePhysicalDeviceGroups
    vkEnumeratePhysicalDeviceGroups.restype = VkResult
    vkEnumeratePhysicalDeviceGroups.argtypes = [VkInstance, ctypes.POINTER(ctypes.c_uint32), ctypes.POINTER(struct_VkPhysicalDeviceGroupProperties)]
except AttributeError:
    pass
try:
    vkGetImageMemoryRequirements2 = _libraries['libvulkan.so.1'].vkGetImageMemoryRequirements2
    vkGetImageMemoryRequirements2.restype = None
    vkGetImageMemoryRequirements2.argtypes = [VkDevice, ctypes.POINTER(struct_VkImageMemoryRequirementsInfo2), ctypes.POINTER(struct_VkMemoryRequirements2)]
except AttributeError:
    pass
try:
    vkGetBufferMemoryRequirements2 = _libraries['libvulkan.so.1'].vkGetBufferMemoryRequirements2
    vkGetBufferMemoryRequirements2.restype = None
    vkGetBufferMemoryRequirements2.argtypes = [VkDevice, ctypes.POINTER(struct_VkBufferMemoryRequirementsInfo2), ctypes.POINTER(struct_VkMemoryRequirements2)]
except AttributeError:
    pass
try:
    vkGetImageSparseMemoryRequirements2 = _libraries['libvulkan.so.1'].vkGetImageSparseMemoryRequirements2
    vkGetImageSparseMemoryRequirements2.restype = None
    vkGetImageSparseMemoryRequirements2.argtypes = [VkDevice, ctypes.POINTER(struct_VkImageSparseMemoryRequirementsInfo2), ctypes.POINTER(ctypes.c_uint32), ctypes.POINTER(struct_VkSparseImageMemoryRequirements2)]
except AttributeError:
    pass
try:
    vkGetPhysicalDeviceFeatures2 = _libraries['libvulkan.so.1'].vkGetPhysicalDeviceFeatures2
    vkGetPhysicalDeviceFeatures2.restype = None
    vkGetPhysicalDeviceFeatures2.argtypes = [VkPhysicalDevice, ctypes.POINTER(struct_VkPhysicalDeviceFeatures2)]
except AttributeError:
    pass
try:
    vkGetPhysicalDeviceProperties2 = _libraries['libvulkan.so.1'].vkGetPhysicalDeviceProperties2
    vkGetPhysicalDeviceProperties2.restype = None
    vkGetPhysicalDeviceProperties2.argtypes = [VkPhysicalDevice, ctypes.POINTER(struct_VkPhysicalDeviceProperties2)]
except AttributeError:
    pass
try:
    vkGetPhysicalDeviceFormatProperties2 = _libraries['libvulkan.so.1'].vkGetPhysicalDeviceFormatProperties2
    vkGetPhysicalDeviceFormatProperties2.restype = None
    vkGetPhysicalDeviceFormatProperties2.argtypes = [VkPhysicalDevice, VkFormat, ctypes.POINTER(struct_VkFormatProperties2)]
except AttributeError:
    pass
try:
    vkGetPhysicalDeviceImageFormatProperties2 = _libraries['libvulkan.so.1'].vkGetPhysicalDeviceImageFormatProperties2
    vkGetPhysicalDeviceImageFormatProperties2.restype = VkResult
    vkGetPhysicalDeviceImageFormatProperties2.argtypes = [VkPhysicalDevice, ctypes.POINTER(struct_VkPhysicalDeviceImageFormatInfo2), ctypes.POINTER(struct_VkImageFormatProperties2)]
except AttributeError:
    pass
try:
    vkGetPhysicalDeviceQueueFamilyProperties2 = _libraries['libvulkan.so.1'].vkGetPhysicalDeviceQueueFamilyProperties2
    vkGetPhysicalDeviceQueueFamilyProperties2.restype = None
    vkGetPhysicalDeviceQueueFamilyProperties2.argtypes = [VkPhysicalDevice, ctypes.POINTER(ctypes.c_uint32), ctypes.POINTER(struct_VkQueueFamilyProperties2)]
except AttributeError:
    pass
try:
    vkGetPhysicalDeviceMemoryProperties2 = _libraries['libvulkan.so.1'].vkGetPhysicalDeviceMemoryProperties2
    vkGetPhysicalDeviceMemoryProperties2.restype = None
    vkGetPhysicalDeviceMemoryProperties2.argtypes = [VkPhysicalDevice, ctypes.POINTER(struct_VkPhysicalDeviceMemoryProperties2)]
except AttributeError:
    pass
try:
    vkGetPhysicalDeviceSparseImageFormatProperties2 = _libraries['libvulkan.so.1'].vkGetPhysicalDeviceSparseImageFormatProperties2
    vkGetPhysicalDeviceSparseImageFormatProperties2.restype = None
    vkGetPhysicalDeviceSparseImageFormatProperties2.argtypes = [VkPhysicalDevice, ctypes.POINTER(struct_VkPhysicalDeviceSparseImageFormatInfo2), ctypes.POINTER(ctypes.c_uint32), ctypes.POINTER(struct_VkSparseImageFormatProperties2)]
except AttributeError:
    pass
try:
    vkTrimCommandPool = _libraries['libvulkan.so.1'].vkTrimCommandPool
    vkTrimCommandPool.restype = None
    vkTrimCommandPool.argtypes = [VkDevice, VkCommandPool, VkCommandPoolTrimFlags]
except AttributeError:
    pass
try:
    vkGetDeviceQueue2 = _libraries['libvulkan.so.1'].vkGetDeviceQueue2
    vkGetDeviceQueue2.restype = None
    vkGetDeviceQueue2.argtypes = [VkDevice, ctypes.POINTER(struct_VkDeviceQueueInfo2), ctypes.POINTER(ctypes.POINTER(struct_VkQueue_T))]
except AttributeError:
    pass
try:
    vkCreateSamplerYcbcrConversion = _libraries['libvulkan.so.1'].vkCreateSamplerYcbcrConversion
    vkCreateSamplerYcbcrConversion.restype = VkResult
    vkCreateSamplerYcbcrConversion.argtypes = [VkDevice, ctypes.POINTER(struct_VkSamplerYcbcrConversionCreateInfo), ctypes.POINTER(struct_VkAllocationCallbacks), ctypes.POINTER(ctypes.POINTER(struct_VkSamplerYcbcrConversion_T))]
except AttributeError:
    pass
try:
    vkDestroySamplerYcbcrConversion = _libraries['libvulkan.so.1'].vkDestroySamplerYcbcrConversion
    vkDestroySamplerYcbcrConversion.restype = None
    vkDestroySamplerYcbcrConversion.argtypes = [VkDevice, VkSamplerYcbcrConversion, ctypes.POINTER(struct_VkAllocationCallbacks)]
except AttributeError:
    pass
try:
    vkCreateDescriptorUpdateTemplate = _libraries['libvulkan.so.1'].vkCreateDescriptorUpdateTemplate
    vkCreateDescriptorUpdateTemplate.restype = VkResult
    vkCreateDescriptorUpdateTemplate.argtypes = [VkDevice, ctypes.POINTER(struct_VkDescriptorUpdateTemplateCreateInfo), ctypes.POINTER(struct_VkAllocationCallbacks), ctypes.POINTER(ctypes.POINTER(struct_VkDescriptorUpdateTemplate_T))]
except AttributeError:
    pass
try:
    vkDestroyDescriptorUpdateTemplate = _libraries['libvulkan.so.1'].vkDestroyDescriptorUpdateTemplate
    vkDestroyDescriptorUpdateTemplate.restype = None
    vkDestroyDescriptorUpdateTemplate.argtypes = [VkDevice, VkDescriptorUpdateTemplate, ctypes.POINTER(struct_VkAllocationCallbacks)]
except AttributeError:
    pass
try:
    vkUpdateDescriptorSetWithTemplate = _libraries['libvulkan.so.1'].vkUpdateDescriptorSetWithTemplate
    vkUpdateDescriptorSetWithTemplate.restype = None
    vkUpdateDescriptorSetWithTemplate.argtypes = [VkDevice, VkDescriptorSet, VkDescriptorUpdateTemplate, ctypes.POINTER(None)]
except AttributeError:
    pass
try:
    vkGetPhysicalDeviceExternalBufferProperties = _libraries['libvulkan.so.1'].vkGetPhysicalDeviceExternalBufferProperties
    vkGetPhysicalDeviceExternalBufferProperties.restype = None
    vkGetPhysicalDeviceExternalBufferProperties.argtypes = [VkPhysicalDevice, ctypes.POINTER(struct_VkPhysicalDeviceExternalBufferInfo), ctypes.POINTER(struct_VkExternalBufferProperties)]
except AttributeError:
    pass
try:
    vkGetPhysicalDeviceExternalFenceProperties = _libraries['libvulkan.so.1'].vkGetPhysicalDeviceExternalFenceProperties
    vkGetPhysicalDeviceExternalFenceProperties.restype = None
    vkGetPhysicalDeviceExternalFenceProperties.argtypes = [VkPhysicalDevice, ctypes.POINTER(struct_VkPhysicalDeviceExternalFenceInfo), ctypes.POINTER(struct_VkExternalFenceProperties)]
except AttributeError:
    pass
try:
    vkGetPhysicalDeviceExternalSemaphoreProperties = _libraries['libvulkan.so.1'].vkGetPhysicalDeviceExternalSemaphoreProperties
    vkGetPhysicalDeviceExternalSemaphoreProperties.restype = None
    vkGetPhysicalDeviceExternalSemaphoreProperties.argtypes = [VkPhysicalDevice, ctypes.POINTER(struct_VkPhysicalDeviceExternalSemaphoreInfo), ctypes.POINTER(struct_VkExternalSemaphoreProperties)]
except AttributeError:
    pass
try:
    vkGetDescriptorSetLayoutSupport = _libraries['libvulkan.so.1'].vkGetDescriptorSetLayoutSupport
    vkGetDescriptorSetLayoutSupport.restype = None
    vkGetDescriptorSetLayoutSupport.argtypes = [VkDevice, ctypes.POINTER(struct_VkDescriptorSetLayoutCreateInfo), ctypes.POINTER(struct_VkDescriptorSetLayoutSupport)]
except AttributeError:
    pass

# values for enumeration 'VkDriverId'
VkDriverId__enumvalues = {
    1: 'VK_DRIVER_ID_AMD_PROPRIETARY',
    2: 'VK_DRIVER_ID_AMD_OPEN_SOURCE',
    3: 'VK_DRIVER_ID_MESA_RADV',
    4: 'VK_DRIVER_ID_NVIDIA_PROPRIETARY',
    5: 'VK_DRIVER_ID_INTEL_PROPRIETARY_WINDOWS',
    6: 'VK_DRIVER_ID_INTEL_OPEN_SOURCE_MESA',
    7: 'VK_DRIVER_ID_IMAGINATION_PROPRIETARY',
    8: 'VK_DRIVER_ID_QUALCOMM_PROPRIETARY',
    9: 'VK_DRIVER_ID_ARM_PROPRIETARY',
    10: 'VK_DRIVER_ID_GOOGLE_SWIFTSHADER',
    11: 'VK_DRIVER_ID_GGP_PROPRIETARY',
    12: 'VK_DRIVER_ID_BROADCOM_PROPRIETARY',
    13: 'VK_DRIVER_ID_MESA_LLVMPIPE',
    14: 'VK_DRIVER_ID_MOLTENVK',
    15: 'VK_DRIVER_ID_COREAVI_PROPRIETARY',
    16: 'VK_DRIVER_ID_JUICE_PROPRIETARY',
    17: 'VK_DRIVER_ID_VERISILICON_PROPRIETARY',
    18: 'VK_DRIVER_ID_MESA_TURNIP',
    19: 'VK_DRIVER_ID_MESA_V3DV',
    20: 'VK_DRIVER_ID_MESA_PANVK',
    21: 'VK_DRIVER_ID_SAMSUNG_PROPRIETARY',
    22: 'VK_DRIVER_ID_MESA_VENUS',
    23: 'VK_DRIVER_ID_MESA_DOZEN',
    24: 'VK_DRIVER_ID_MESA_NVK',
    25: 'VK_DRIVER_ID_IMAGINATION_OPEN_SOURCE_MESA',
    26: 'VK_DRIVER_ID_MESA_AGXV',
    1: 'VK_DRIVER_ID_AMD_PROPRIETARY_KHR',
    2: 'VK_DRIVER_ID_AMD_OPEN_SOURCE_KHR',
    3: 'VK_DRIVER_ID_MESA_RADV_KHR',
    4: 'VK_DRIVER_ID_NVIDIA_PROPRIETARY_KHR',
    5: 'VK_DRIVER_ID_INTEL_PROPRIETARY_WINDOWS_KHR',
    6: 'VK_DRIVER_ID_INTEL_OPEN_SOURCE_MESA_KHR',
    7: 'VK_DRIVER_ID_IMAGINATION_PROPRIETARY_KHR',
    8: 'VK_DRIVER_ID_QUALCOMM_PROPRIETARY_KHR',
    9: 'VK_DRIVER_ID_ARM_PROPRIETARY_KHR',
    10: 'VK_DRIVER_ID_GOOGLE_SWIFTSHADER_KHR',
    11: 'VK_DRIVER_ID_GGP_PROPRIETARY_KHR',
    12: 'VK_DRIVER_ID_BROADCOM_PROPRIETARY_KHR',
    2147483647: 'VK_DRIVER_ID_MAX_ENUM',
}
VK_DRIVER_ID_AMD_PROPRIETARY = 1
VK_DRIVER_ID_AMD_OPEN_SOURCE = 2
VK_DRIVER_ID_MESA_RADV = 3
VK_DRIVER_ID_NVIDIA_PROPRIETARY = 4
VK_DRIVER_ID_INTEL_PROPRIETARY_WINDOWS = 5
VK_DRIVER_ID_INTEL_OPEN_SOURCE_MESA = 6
VK_DRIVER_ID_IMAGINATION_PROPRIETARY = 7
VK_DRIVER_ID_QUALCOMM_PROPRIETARY = 8
VK_DRIVER_ID_ARM_PROPRIETARY = 9
VK_DRIVER_ID_GOOGLE_SWIFTSHADER = 10
VK_DRIVER_ID_GGP_PROPRIETARY = 11
VK_DRIVER_ID_BROADCOM_PROPRIETARY = 12
VK_DRIVER_ID_MESA_LLVMPIPE = 13
VK_DRIVER_ID_MOLTENVK = 14
VK_DRIVER_ID_COREAVI_PROPRIETARY = 15
VK_DRIVER_ID_JUICE_PROPRIETARY = 16
VK_DRIVER_ID_VERISILICON_PROPRIETARY = 17
VK_DRIVER_ID_MESA_TURNIP = 18
VK_DRIVER_ID_MESA_V3DV = 19
VK_DRIVER_ID_MESA_PANVK = 20
VK_DRIVER_ID_SAMSUNG_PROPRIETARY = 21
VK_DRIVER_ID_MESA_VENUS = 22
VK_DRIVER_ID_MESA_DOZEN = 23
VK_DRIVER_ID_MESA_NVK = 24
VK_DRIVER_ID_IMAGINATION_OPEN_SOURCE_MESA = 25
VK_DRIVER_ID_MESA_AGXV = 26
VK_DRIVER_ID_AMD_PROPRIETARY_KHR = 1
VK_DRIVER_ID_AMD_OPEN_SOURCE_KHR = 2
VK_DRIVER_ID_MESA_RADV_KHR = 3
VK_DRIVER_ID_NVIDIA_PROPRIETARY_KHR = 4
VK_DRIVER_ID_INTEL_PROPRIETARY_WINDOWS_KHR = 5
VK_DRIVER_ID_INTEL_OPEN_SOURCE_MESA_KHR = 6
VK_DRIVER_ID_IMAGINATION_PROPRIETARY_KHR = 7
VK_DRIVER_ID_QUALCOMM_PROPRIETARY_KHR = 8
VK_DRIVER_ID_ARM_PROPRIETARY_KHR = 9
VK_DRIVER_ID_GOOGLE_SWIFTSHADER_KHR = 10
VK_DRIVER_ID_GGP_PROPRIETARY_KHR = 11
VK_DRIVER_ID_BROADCOM_PROPRIETARY_KHR = 12
VK_DRIVER_ID_MAX_ENUM = 2147483647
VkDriverId = ctypes.c_uint32 # enum

# values for enumeration 'VkShaderFloatControlsIndependence'
VkShaderFloatControlsIndependence__enumvalues = {
    0: 'VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_32_BIT_ONLY',
    1: 'VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_ALL',
    2: 'VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_NONE',
    0: 'VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_32_BIT_ONLY_KHR',
    1: 'VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_ALL_KHR',
    2: 'VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_NONE_KHR',
    2147483647: 'VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_MAX_ENUM',
}
VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_32_BIT_ONLY = 0
VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_ALL = 1
VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_NONE = 2
VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_32_BIT_ONLY_KHR = 0
VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_ALL_KHR = 1
VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_NONE_KHR = 2
VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_MAX_ENUM = 2147483647
VkShaderFloatControlsIndependence = ctypes.c_uint32 # enum

# values for enumeration 'VkSamplerReductionMode'
VkSamplerReductionMode__enumvalues = {
    0: 'VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE',
    1: 'VK_SAMPLER_REDUCTION_MODE_MIN',
    2: 'VK_SAMPLER_REDUCTION_MODE_MAX',
    1000521000: 'VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE_RANGECLAMP_QCOM',
    0: 'VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE_EXT',
    1: 'VK_SAMPLER_REDUCTION_MODE_MIN_EXT',
    2: 'VK_SAMPLER_REDUCTION_MODE_MAX_EXT',
    2147483647: 'VK_SAMPLER_REDUCTION_MODE_MAX_ENUM',
}
VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE = 0
VK_SAMPLER_REDUCTION_MODE_MIN = 1
VK_SAMPLER_REDUCTION_MODE_MAX = 2
VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE_RANGECLAMP_QCOM = 1000521000
VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE_EXT = 0
VK_SAMPLER_REDUCTION_MODE_MIN_EXT = 1
VK_SAMPLER_REDUCTION_MODE_MAX_EXT = 2
VK_SAMPLER_REDUCTION_MODE_MAX_ENUM = 2147483647
VkSamplerReductionMode = ctypes.c_uint32 # enum

# values for enumeration 'VkSemaphoreType'
VkSemaphoreType__enumvalues = {
    0: 'VK_SEMAPHORE_TYPE_BINARY',
    1: 'VK_SEMAPHORE_TYPE_TIMELINE',
    0: 'VK_SEMAPHORE_TYPE_BINARY_KHR',
    1: 'VK_SEMAPHORE_TYPE_TIMELINE_KHR',
    2147483647: 'VK_SEMAPHORE_TYPE_MAX_ENUM',
}
VK_SEMAPHORE_TYPE_BINARY = 0
VK_SEMAPHORE_TYPE_TIMELINE = 1
VK_SEMAPHORE_TYPE_BINARY_KHR = 0
VK_SEMAPHORE_TYPE_TIMELINE_KHR = 1
VK_SEMAPHORE_TYPE_MAX_ENUM = 2147483647
VkSemaphoreType = ctypes.c_uint32 # enum

# values for enumeration 'VkResolveModeFlagBits'
VkResolveModeFlagBits__enumvalues = {
    0: 'VK_RESOLVE_MODE_NONE',
    1: 'VK_RESOLVE_MODE_SAMPLE_ZERO_BIT',
    2: 'VK_RESOLVE_MODE_AVERAGE_BIT',
    4: 'VK_RESOLVE_MODE_MIN_BIT',
    8: 'VK_RESOLVE_MODE_MAX_BIT',
    16: 'VK_RESOLVE_MODE_EXTERNAL_FORMAT_DOWNSAMPLE_ANDROID',
    0: 'VK_RESOLVE_MODE_NONE_KHR',
    1: 'VK_RESOLVE_MODE_SAMPLE_ZERO_BIT_KHR',
    2: 'VK_RESOLVE_MODE_AVERAGE_BIT_KHR',
    4: 'VK_RESOLVE_MODE_MIN_BIT_KHR',
    8: 'VK_RESOLVE_MODE_MAX_BIT_KHR',
    2147483647: 'VK_RESOLVE_MODE_FLAG_BITS_MAX_ENUM',
}
VK_RESOLVE_MODE_NONE = 0
VK_RESOLVE_MODE_SAMPLE_ZERO_BIT = 1
VK_RESOLVE_MODE_AVERAGE_BIT = 2
VK_RESOLVE_MODE_MIN_BIT = 4
VK_RESOLVE_MODE_MAX_BIT = 8
VK_RESOLVE_MODE_EXTERNAL_FORMAT_DOWNSAMPLE_ANDROID = 16
VK_RESOLVE_MODE_NONE_KHR = 0
VK_RESOLVE_MODE_SAMPLE_ZERO_BIT_KHR = 1
VK_RESOLVE_MODE_AVERAGE_BIT_KHR = 2
VK_RESOLVE_MODE_MIN_BIT_KHR = 4
VK_RESOLVE_MODE_MAX_BIT_KHR = 8
VK_RESOLVE_MODE_FLAG_BITS_MAX_ENUM = 2147483647
VkResolveModeFlagBits = ctypes.c_uint32 # enum
VkResolveModeFlags = ctypes.c_uint32

# values for enumeration 'VkDescriptorBindingFlagBits'
VkDescriptorBindingFlagBits__enumvalues = {
    1: 'VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT',
    2: 'VK_DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT',
    4: 'VK_DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT',
    8: 'VK_DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT',
    1: 'VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT_EXT',
    2: 'VK_DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT_EXT',
    4: 'VK_DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT_EXT',
    8: 'VK_DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT_EXT',
    2147483647: 'VK_DESCRIPTOR_BINDING_FLAG_BITS_MAX_ENUM',
}
VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT = 1
VK_DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT = 2
VK_DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT = 4
VK_DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT = 8
VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT_EXT = 1
VK_DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT_EXT = 2
VK_DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT_EXT = 4
VK_DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT_EXT = 8
VK_DESCRIPTOR_BINDING_FLAG_BITS_MAX_ENUM = 2147483647
VkDescriptorBindingFlagBits = ctypes.c_uint32 # enum
VkDescriptorBindingFlags = ctypes.c_uint32

# values for enumeration 'VkSemaphoreWaitFlagBits'
VkSemaphoreWaitFlagBits__enumvalues = {
    1: 'VK_SEMAPHORE_WAIT_ANY_BIT',
    1: 'VK_SEMAPHORE_WAIT_ANY_BIT_KHR',
    2147483647: 'VK_SEMAPHORE_WAIT_FLAG_BITS_MAX_ENUM',
}
VK_SEMAPHORE_WAIT_ANY_BIT = 1
VK_SEMAPHORE_WAIT_ANY_BIT_KHR = 1
VK_SEMAPHORE_WAIT_FLAG_BITS_MAX_ENUM = 2147483647
VkSemaphoreWaitFlagBits = ctypes.c_uint32 # enum
VkSemaphoreWaitFlags = ctypes.c_uint32
class struct_VkPhysicalDeviceVulkan11Features(Structure):
    pass

struct_VkPhysicalDeviceVulkan11Features._pack_ = 1 # source:False
struct_VkPhysicalDeviceVulkan11Features._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('storageBuffer16BitAccess', ctypes.c_uint32),
    ('uniformAndStorageBuffer16BitAccess', ctypes.c_uint32),
    ('storagePushConstant16', ctypes.c_uint32),
    ('storageInputOutput16', ctypes.c_uint32),
    ('multiview', ctypes.c_uint32),
    ('multiviewGeometryShader', ctypes.c_uint32),
    ('multiviewTessellationShader', ctypes.c_uint32),
    ('variablePointersStorageBuffer', ctypes.c_uint32),
    ('variablePointers', ctypes.c_uint32),
    ('protectedMemory', ctypes.c_uint32),
    ('samplerYcbcrConversion', ctypes.c_uint32),
    ('shaderDrawParameters', ctypes.c_uint32),
]

VkPhysicalDeviceVulkan11Features = struct_VkPhysicalDeviceVulkan11Features
class struct_VkPhysicalDeviceVulkan11Properties(Structure):
    pass

struct_VkPhysicalDeviceVulkan11Properties._pack_ = 1 # source:False
struct_VkPhysicalDeviceVulkan11Properties._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('deviceUUID', ctypes.c_ubyte * 16),
    ('driverUUID', ctypes.c_ubyte * 16),
    ('deviceLUID', ctypes.c_ubyte * 8),
    ('deviceNodeMask', ctypes.c_uint32),
    ('deviceLUIDValid', ctypes.c_uint32),
    ('subgroupSize', ctypes.c_uint32),
    ('subgroupSupportedStages', ctypes.c_uint32),
    ('subgroupSupportedOperations', ctypes.c_uint32),
    ('subgroupQuadOperationsInAllStages', ctypes.c_uint32),
    ('pointClippingBehavior', VkPointClippingBehavior),
    ('maxMultiviewViewCount', ctypes.c_uint32),
    ('maxMultiviewInstanceIndex', ctypes.c_uint32),
    ('protectedNoFault', ctypes.c_uint32),
    ('maxPerSetDescriptors', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('maxMemoryAllocationSize', ctypes.c_uint64),
]

VkPhysicalDeviceVulkan11Properties = struct_VkPhysicalDeviceVulkan11Properties
class struct_VkPhysicalDeviceVulkan12Features(Structure):
    pass

struct_VkPhysicalDeviceVulkan12Features._pack_ = 1 # source:False
struct_VkPhysicalDeviceVulkan12Features._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('samplerMirrorClampToEdge', ctypes.c_uint32),
    ('drawIndirectCount', ctypes.c_uint32),
    ('storageBuffer8BitAccess', ctypes.c_uint32),
    ('uniformAndStorageBuffer8BitAccess', ctypes.c_uint32),
    ('storagePushConstant8', ctypes.c_uint32),
    ('shaderBufferInt64Atomics', ctypes.c_uint32),
    ('shaderSharedInt64Atomics', ctypes.c_uint32),
    ('shaderFloat16', ctypes.c_uint32),
    ('shaderInt8', ctypes.c_uint32),
    ('descriptorIndexing', ctypes.c_uint32),
    ('shaderInputAttachmentArrayDynamicIndexing', ctypes.c_uint32),
    ('shaderUniformTexelBufferArrayDynamicIndexing', ctypes.c_uint32),
    ('shaderStorageTexelBufferArrayDynamicIndexing', ctypes.c_uint32),
    ('shaderUniformBufferArrayNonUniformIndexing', ctypes.c_uint32),
    ('shaderSampledImageArrayNonUniformIndexing', ctypes.c_uint32),
    ('shaderStorageBufferArrayNonUniformIndexing', ctypes.c_uint32),
    ('shaderStorageImageArrayNonUniformIndexing', ctypes.c_uint32),
    ('shaderInputAttachmentArrayNonUniformIndexing', ctypes.c_uint32),
    ('shaderUniformTexelBufferArrayNonUniformIndexing', ctypes.c_uint32),
    ('shaderStorageTexelBufferArrayNonUniformIndexing', ctypes.c_uint32),
    ('descriptorBindingUniformBufferUpdateAfterBind', ctypes.c_uint32),
    ('descriptorBindingSampledImageUpdateAfterBind', ctypes.c_uint32),
    ('descriptorBindingStorageImageUpdateAfterBind', ctypes.c_uint32),
    ('descriptorBindingStorageBufferUpdateAfterBind', ctypes.c_uint32),
    ('descriptorBindingUniformTexelBufferUpdateAfterBind', ctypes.c_uint32),
    ('descriptorBindingStorageTexelBufferUpdateAfterBind', ctypes.c_uint32),
    ('descriptorBindingUpdateUnusedWhilePending', ctypes.c_uint32),
    ('descriptorBindingPartiallyBound', ctypes.c_uint32),
    ('descriptorBindingVariableDescriptorCount', ctypes.c_uint32),
    ('runtimeDescriptorArray', ctypes.c_uint32),
    ('samplerFilterMinmax', ctypes.c_uint32),
    ('scalarBlockLayout', ctypes.c_uint32),
    ('imagelessFramebuffer', ctypes.c_uint32),
    ('uniformBufferStandardLayout', ctypes.c_uint32),
    ('shaderSubgroupExtendedTypes', ctypes.c_uint32),
    ('separateDepthStencilLayouts', ctypes.c_uint32),
    ('hostQueryReset', ctypes.c_uint32),
    ('timelineSemaphore', ctypes.c_uint32),
    ('bufferDeviceAddress', ctypes.c_uint32),
    ('bufferDeviceAddressCaptureReplay', ctypes.c_uint32),
    ('bufferDeviceAddressMultiDevice', ctypes.c_uint32),
    ('vulkanMemoryModel', ctypes.c_uint32),
    ('vulkanMemoryModelDeviceScope', ctypes.c_uint32),
    ('vulkanMemoryModelAvailabilityVisibilityChains', ctypes.c_uint32),
    ('shaderOutputViewportIndex', ctypes.c_uint32),
    ('shaderOutputLayer', ctypes.c_uint32),
    ('subgroupBroadcastDynamicId', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPhysicalDeviceVulkan12Features = struct_VkPhysicalDeviceVulkan12Features
class struct_VkConformanceVersion(Structure):
    pass

struct_VkConformanceVersion._pack_ = 1 # source:False
struct_VkConformanceVersion._fields_ = [
    ('major', ctypes.c_ubyte),
    ('minor', ctypes.c_ubyte),
    ('subminor', ctypes.c_ubyte),
    ('patch', ctypes.c_ubyte),
]

VkConformanceVersion = struct_VkConformanceVersion
class struct_VkPhysicalDeviceVulkan12Properties(Structure):
    pass

struct_VkPhysicalDeviceVulkan12Properties._pack_ = 1 # source:False
struct_VkPhysicalDeviceVulkan12Properties._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('driverID', VkDriverId),
    ('driverName', ctypes.c_char * 256),
    ('driverInfo', ctypes.c_char * 256),
    ('conformanceVersion', VkConformanceVersion),
    ('denormBehaviorIndependence', VkShaderFloatControlsIndependence),
    ('roundingModeIndependence', VkShaderFloatControlsIndependence),
    ('shaderSignedZeroInfNanPreserveFloat16', ctypes.c_uint32),
    ('shaderSignedZeroInfNanPreserveFloat32', ctypes.c_uint32),
    ('shaderSignedZeroInfNanPreserveFloat64', ctypes.c_uint32),
    ('shaderDenormPreserveFloat16', ctypes.c_uint32),
    ('shaderDenormPreserveFloat32', ctypes.c_uint32),
    ('shaderDenormPreserveFloat64', ctypes.c_uint32),
    ('shaderDenormFlushToZeroFloat16', ctypes.c_uint32),
    ('shaderDenormFlushToZeroFloat32', ctypes.c_uint32),
    ('shaderDenormFlushToZeroFloat64', ctypes.c_uint32),
    ('shaderRoundingModeRTEFloat16', ctypes.c_uint32),
    ('shaderRoundingModeRTEFloat32', ctypes.c_uint32),
    ('shaderRoundingModeRTEFloat64', ctypes.c_uint32),
    ('shaderRoundingModeRTZFloat16', ctypes.c_uint32),
    ('shaderRoundingModeRTZFloat32', ctypes.c_uint32),
    ('shaderRoundingModeRTZFloat64', ctypes.c_uint32),
    ('maxUpdateAfterBindDescriptorsInAllPools', ctypes.c_uint32),
    ('shaderUniformBufferArrayNonUniformIndexingNative', ctypes.c_uint32),
    ('shaderSampledImageArrayNonUniformIndexingNative', ctypes.c_uint32),
    ('shaderStorageBufferArrayNonUniformIndexingNative', ctypes.c_uint32),
    ('shaderStorageImageArrayNonUniformIndexingNative', ctypes.c_uint32),
    ('shaderInputAttachmentArrayNonUniformIndexingNative', ctypes.c_uint32),
    ('robustBufferAccessUpdateAfterBind', ctypes.c_uint32),
    ('quadDivergentImplicitLod', ctypes.c_uint32),
    ('maxPerStageDescriptorUpdateAfterBindSamplers', ctypes.c_uint32),
    ('maxPerStageDescriptorUpdateAfterBindUniformBuffers', ctypes.c_uint32),
    ('maxPerStageDescriptorUpdateAfterBindStorageBuffers', ctypes.c_uint32),
    ('maxPerStageDescriptorUpdateAfterBindSampledImages', ctypes.c_uint32),
    ('maxPerStageDescriptorUpdateAfterBindStorageImages', ctypes.c_uint32),
    ('maxPerStageDescriptorUpdateAfterBindInputAttachments', ctypes.c_uint32),
    ('maxPerStageUpdateAfterBindResources', ctypes.c_uint32),
    ('maxDescriptorSetUpdateAfterBindSamplers', ctypes.c_uint32),
    ('maxDescriptorSetUpdateAfterBindUniformBuffers', ctypes.c_uint32),
    ('maxDescriptorSetUpdateAfterBindUniformBuffersDynamic', ctypes.c_uint32),
    ('maxDescriptorSetUpdateAfterBindStorageBuffers', ctypes.c_uint32),
    ('maxDescriptorSetUpdateAfterBindStorageBuffersDynamic', ctypes.c_uint32),
    ('maxDescriptorSetUpdateAfterBindSampledImages', ctypes.c_uint32),
    ('maxDescriptorSetUpdateAfterBindStorageImages', ctypes.c_uint32),
    ('maxDescriptorSetUpdateAfterBindInputAttachments', ctypes.c_uint32),
    ('supportedDepthResolveModes', ctypes.c_uint32),
    ('supportedStencilResolveModes', ctypes.c_uint32),
    ('independentResolveNone', ctypes.c_uint32),
    ('independentResolve', ctypes.c_uint32),
    ('filterMinmaxSingleComponentFormats', ctypes.c_uint32),
    ('filterMinmaxImageComponentMapping', ctypes.c_uint32),
    ('maxTimelineSemaphoreValueDifference', ctypes.c_uint64),
    ('framebufferIntegerColorSampleCounts', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPhysicalDeviceVulkan12Properties = struct_VkPhysicalDeviceVulkan12Properties
class struct_VkImageFormatListCreateInfo(Structure):
    pass

struct_VkImageFormatListCreateInfo._pack_ = 1 # source:False
struct_VkImageFormatListCreateInfo._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('viewFormatCount', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('pViewFormats', ctypes.POINTER(VkFormat)),
]

VkImageFormatListCreateInfo = struct_VkImageFormatListCreateInfo
class struct_VkAttachmentDescription2(Structure):
    pass

struct_VkAttachmentDescription2._pack_ = 1 # source:False
struct_VkAttachmentDescription2._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('flags', ctypes.c_uint32),
    ('format', VkFormat),
    ('samples', VkSampleCountFlagBits),
    ('loadOp', VkAttachmentLoadOp),
    ('storeOp', VkAttachmentStoreOp),
    ('stencilLoadOp', VkAttachmentLoadOp),
    ('stencilStoreOp', VkAttachmentStoreOp),
    ('initialLayout', VkImageLayout),
    ('finalLayout', VkImageLayout),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkAttachmentDescription2 = struct_VkAttachmentDescription2
class struct_VkAttachmentReference2(Structure):
    pass

struct_VkAttachmentReference2._pack_ = 1 # source:False
struct_VkAttachmentReference2._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('attachment', ctypes.c_uint32),
    ('layout', VkImageLayout),
    ('aspectMask', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkAttachmentReference2 = struct_VkAttachmentReference2
class struct_VkSubpassDescription2(Structure):
    pass

struct_VkSubpassDescription2._pack_ = 1 # source:False
struct_VkSubpassDescription2._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('flags', ctypes.c_uint32),
    ('pipelineBindPoint', VkPipelineBindPoint),
    ('viewMask', ctypes.c_uint32),
    ('inputAttachmentCount', ctypes.c_uint32),
    ('pInputAttachments', ctypes.POINTER(struct_VkAttachmentReference2)),
    ('colorAttachmentCount', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('pColorAttachments', ctypes.POINTER(struct_VkAttachmentReference2)),
    ('pResolveAttachments', ctypes.POINTER(struct_VkAttachmentReference2)),
    ('pDepthStencilAttachment', ctypes.POINTER(struct_VkAttachmentReference2)),
    ('preserveAttachmentCount', ctypes.c_uint32),
    ('PADDING_2', ctypes.c_ubyte * 4),
    ('pPreserveAttachments', ctypes.POINTER(ctypes.c_uint32)),
]

VkSubpassDescription2 = struct_VkSubpassDescription2
class struct_VkSubpassDependency2(Structure):
    pass

struct_VkSubpassDependency2._pack_ = 1 # source:False
struct_VkSubpassDependency2._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('srcSubpass', ctypes.c_uint32),
    ('dstSubpass', ctypes.c_uint32),
    ('srcStageMask', ctypes.c_uint32),
    ('dstStageMask', ctypes.c_uint32),
    ('srcAccessMask', ctypes.c_uint32),
    ('dstAccessMask', ctypes.c_uint32),
    ('dependencyFlags', ctypes.c_uint32),
    ('viewOffset', ctypes.c_int32),
]

VkSubpassDependency2 = struct_VkSubpassDependency2
class struct_VkRenderPassCreateInfo2(Structure):
    pass

struct_VkRenderPassCreateInfo2._pack_ = 1 # source:False
struct_VkRenderPassCreateInfo2._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('flags', ctypes.c_uint32),
    ('attachmentCount', ctypes.c_uint32),
    ('pAttachments', ctypes.POINTER(struct_VkAttachmentDescription2)),
    ('subpassCount', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('pSubpasses', ctypes.POINTER(struct_VkSubpassDescription2)),
    ('dependencyCount', ctypes.c_uint32),
    ('PADDING_2', ctypes.c_ubyte * 4),
    ('pDependencies', ctypes.POINTER(struct_VkSubpassDependency2)),
    ('correlatedViewMaskCount', ctypes.c_uint32),
    ('PADDING_3', ctypes.c_ubyte * 4),
    ('pCorrelatedViewMasks', ctypes.POINTER(ctypes.c_uint32)),
]

VkRenderPassCreateInfo2 = struct_VkRenderPassCreateInfo2
class struct_VkSubpassBeginInfo(Structure):
    pass

struct_VkSubpassBeginInfo._pack_ = 1 # source:False
struct_VkSubpassBeginInfo._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('contents', VkSubpassContents),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkSubpassBeginInfo = struct_VkSubpassBeginInfo
class struct_VkSubpassEndInfo(Structure):
    pass

struct_VkSubpassEndInfo._pack_ = 1 # source:False
struct_VkSubpassEndInfo._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
]

VkSubpassEndInfo = struct_VkSubpassEndInfo
class struct_VkPhysicalDevice8BitStorageFeatures(Structure):
    pass

struct_VkPhysicalDevice8BitStorageFeatures._pack_ = 1 # source:False
struct_VkPhysicalDevice8BitStorageFeatures._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('storageBuffer8BitAccess', ctypes.c_uint32),
    ('uniformAndStorageBuffer8BitAccess', ctypes.c_uint32),
    ('storagePushConstant8', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPhysicalDevice8BitStorageFeatures = struct_VkPhysicalDevice8BitStorageFeatures
class struct_VkPhysicalDeviceDriverProperties(Structure):
    pass

struct_VkPhysicalDeviceDriverProperties._pack_ = 1 # source:False
struct_VkPhysicalDeviceDriverProperties._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('driverID', VkDriverId),
    ('driverName', ctypes.c_char * 256),
    ('driverInfo', ctypes.c_char * 256),
    ('conformanceVersion', VkConformanceVersion),
]

VkPhysicalDeviceDriverProperties = struct_VkPhysicalDeviceDriverProperties
class struct_VkPhysicalDeviceShaderAtomicInt64Features(Structure):
    pass

struct_VkPhysicalDeviceShaderAtomicInt64Features._pack_ = 1 # source:False
struct_VkPhysicalDeviceShaderAtomicInt64Features._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('shaderBufferInt64Atomics', ctypes.c_uint32),
    ('shaderSharedInt64Atomics', ctypes.c_uint32),
]

VkPhysicalDeviceShaderAtomicInt64Features = struct_VkPhysicalDeviceShaderAtomicInt64Features
class struct_VkPhysicalDeviceShaderFloat16Int8Features(Structure):
    pass

struct_VkPhysicalDeviceShaderFloat16Int8Features._pack_ = 1 # source:False
struct_VkPhysicalDeviceShaderFloat16Int8Features._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('shaderFloat16', ctypes.c_uint32),
    ('shaderInt8', ctypes.c_uint32),
]

VkPhysicalDeviceShaderFloat16Int8Features = struct_VkPhysicalDeviceShaderFloat16Int8Features
class struct_VkPhysicalDeviceFloatControlsProperties(Structure):
    pass

struct_VkPhysicalDeviceFloatControlsProperties._pack_ = 1 # source:False
struct_VkPhysicalDeviceFloatControlsProperties._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('denormBehaviorIndependence', VkShaderFloatControlsIndependence),
    ('roundingModeIndependence', VkShaderFloatControlsIndependence),
    ('shaderSignedZeroInfNanPreserveFloat16', ctypes.c_uint32),
    ('shaderSignedZeroInfNanPreserveFloat32', ctypes.c_uint32),
    ('shaderSignedZeroInfNanPreserveFloat64', ctypes.c_uint32),
    ('shaderDenormPreserveFloat16', ctypes.c_uint32),
    ('shaderDenormPreserveFloat32', ctypes.c_uint32),
    ('shaderDenormPreserveFloat64', ctypes.c_uint32),
    ('shaderDenormFlushToZeroFloat16', ctypes.c_uint32),
    ('shaderDenormFlushToZeroFloat32', ctypes.c_uint32),
    ('shaderDenormFlushToZeroFloat64', ctypes.c_uint32),
    ('shaderRoundingModeRTEFloat16', ctypes.c_uint32),
    ('shaderRoundingModeRTEFloat32', ctypes.c_uint32),
    ('shaderRoundingModeRTEFloat64', ctypes.c_uint32),
    ('shaderRoundingModeRTZFloat16', ctypes.c_uint32),
    ('shaderRoundingModeRTZFloat32', ctypes.c_uint32),
    ('shaderRoundingModeRTZFloat64', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPhysicalDeviceFloatControlsProperties = struct_VkPhysicalDeviceFloatControlsProperties
class struct_VkDescriptorSetLayoutBindingFlagsCreateInfo(Structure):
    pass

struct_VkDescriptorSetLayoutBindingFlagsCreateInfo._pack_ = 1 # source:False
struct_VkDescriptorSetLayoutBindingFlagsCreateInfo._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('bindingCount', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('pBindingFlags', ctypes.POINTER(ctypes.c_uint32)),
]

VkDescriptorSetLayoutBindingFlagsCreateInfo = struct_VkDescriptorSetLayoutBindingFlagsCreateInfo
class struct_VkPhysicalDeviceDescriptorIndexingFeatures(Structure):
    pass

struct_VkPhysicalDeviceDescriptorIndexingFeatures._pack_ = 1 # source:False
struct_VkPhysicalDeviceDescriptorIndexingFeatures._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('shaderInputAttachmentArrayDynamicIndexing', ctypes.c_uint32),
    ('shaderUniformTexelBufferArrayDynamicIndexing', ctypes.c_uint32),
    ('shaderStorageTexelBufferArrayDynamicIndexing', ctypes.c_uint32),
    ('shaderUniformBufferArrayNonUniformIndexing', ctypes.c_uint32),
    ('shaderSampledImageArrayNonUniformIndexing', ctypes.c_uint32),
    ('shaderStorageBufferArrayNonUniformIndexing', ctypes.c_uint32),
    ('shaderStorageImageArrayNonUniformIndexing', ctypes.c_uint32),
    ('shaderInputAttachmentArrayNonUniformIndexing', ctypes.c_uint32),
    ('shaderUniformTexelBufferArrayNonUniformIndexing', ctypes.c_uint32),
    ('shaderStorageTexelBufferArrayNonUniformIndexing', ctypes.c_uint32),
    ('descriptorBindingUniformBufferUpdateAfterBind', ctypes.c_uint32),
    ('descriptorBindingSampledImageUpdateAfterBind', ctypes.c_uint32),
    ('descriptorBindingStorageImageUpdateAfterBind', ctypes.c_uint32),
    ('descriptorBindingStorageBufferUpdateAfterBind', ctypes.c_uint32),
    ('descriptorBindingUniformTexelBufferUpdateAfterBind', ctypes.c_uint32),
    ('descriptorBindingStorageTexelBufferUpdateAfterBind', ctypes.c_uint32),
    ('descriptorBindingUpdateUnusedWhilePending', ctypes.c_uint32),
    ('descriptorBindingPartiallyBound', ctypes.c_uint32),
    ('descriptorBindingVariableDescriptorCount', ctypes.c_uint32),
    ('runtimeDescriptorArray', ctypes.c_uint32),
]

VkPhysicalDeviceDescriptorIndexingFeatures = struct_VkPhysicalDeviceDescriptorIndexingFeatures
class struct_VkPhysicalDeviceDescriptorIndexingProperties(Structure):
    pass

struct_VkPhysicalDeviceDescriptorIndexingProperties._pack_ = 1 # source:False
struct_VkPhysicalDeviceDescriptorIndexingProperties._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('maxUpdateAfterBindDescriptorsInAllPools', ctypes.c_uint32),
    ('shaderUniformBufferArrayNonUniformIndexingNative', ctypes.c_uint32),
    ('shaderSampledImageArrayNonUniformIndexingNative', ctypes.c_uint32),
    ('shaderStorageBufferArrayNonUniformIndexingNative', ctypes.c_uint32),
    ('shaderStorageImageArrayNonUniformIndexingNative', ctypes.c_uint32),
    ('shaderInputAttachmentArrayNonUniformIndexingNative', ctypes.c_uint32),
    ('robustBufferAccessUpdateAfterBind', ctypes.c_uint32),
    ('quadDivergentImplicitLod', ctypes.c_uint32),
    ('maxPerStageDescriptorUpdateAfterBindSamplers', ctypes.c_uint32),
    ('maxPerStageDescriptorUpdateAfterBindUniformBuffers', ctypes.c_uint32),
    ('maxPerStageDescriptorUpdateAfterBindStorageBuffers', ctypes.c_uint32),
    ('maxPerStageDescriptorUpdateAfterBindSampledImages', ctypes.c_uint32),
    ('maxPerStageDescriptorUpdateAfterBindStorageImages', ctypes.c_uint32),
    ('maxPerStageDescriptorUpdateAfterBindInputAttachments', ctypes.c_uint32),
    ('maxPerStageUpdateAfterBindResources', ctypes.c_uint32),
    ('maxDescriptorSetUpdateAfterBindSamplers', ctypes.c_uint32),
    ('maxDescriptorSetUpdateAfterBindUniformBuffers', ctypes.c_uint32),
    ('maxDescriptorSetUpdateAfterBindUniformBuffersDynamic', ctypes.c_uint32),
    ('maxDescriptorSetUpdateAfterBindStorageBuffers', ctypes.c_uint32),
    ('maxDescriptorSetUpdateAfterBindStorageBuffersDynamic', ctypes.c_uint32),
    ('maxDescriptorSetUpdateAfterBindSampledImages', ctypes.c_uint32),
    ('maxDescriptorSetUpdateAfterBindStorageImages', ctypes.c_uint32),
    ('maxDescriptorSetUpdateAfterBindInputAttachments', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPhysicalDeviceDescriptorIndexingProperties = struct_VkPhysicalDeviceDescriptorIndexingProperties
class struct_VkDescriptorSetVariableDescriptorCountAllocateInfo(Structure):
    pass

struct_VkDescriptorSetVariableDescriptorCountAllocateInfo._pack_ = 1 # source:False
struct_VkDescriptorSetVariableDescriptorCountAllocateInfo._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('descriptorSetCount', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('pDescriptorCounts', ctypes.POINTER(ctypes.c_uint32)),
]

VkDescriptorSetVariableDescriptorCountAllocateInfo = struct_VkDescriptorSetVariableDescriptorCountAllocateInfo
class struct_VkDescriptorSetVariableDescriptorCountLayoutSupport(Structure):
    pass

struct_VkDescriptorSetVariableDescriptorCountLayoutSupport._pack_ = 1 # source:False
struct_VkDescriptorSetVariableDescriptorCountLayoutSupport._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('maxVariableDescriptorCount', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkDescriptorSetVariableDescriptorCountLayoutSupport = struct_VkDescriptorSetVariableDescriptorCountLayoutSupport
class struct_VkSubpassDescriptionDepthStencilResolve(Structure):
    pass

struct_VkSubpassDescriptionDepthStencilResolve._pack_ = 1 # source:False
struct_VkSubpassDescriptionDepthStencilResolve._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('depthResolveMode', VkResolveModeFlagBits),
    ('stencilResolveMode', VkResolveModeFlagBits),
    ('pDepthStencilResolveAttachment', ctypes.POINTER(struct_VkAttachmentReference2)),
]

VkSubpassDescriptionDepthStencilResolve = struct_VkSubpassDescriptionDepthStencilResolve
class struct_VkPhysicalDeviceDepthStencilResolveProperties(Structure):
    pass

struct_VkPhysicalDeviceDepthStencilResolveProperties._pack_ = 1 # source:False
struct_VkPhysicalDeviceDepthStencilResolveProperties._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('supportedDepthResolveModes', ctypes.c_uint32),
    ('supportedStencilResolveModes', ctypes.c_uint32),
    ('independentResolveNone', ctypes.c_uint32),
    ('independentResolve', ctypes.c_uint32),
]

VkPhysicalDeviceDepthStencilResolveProperties = struct_VkPhysicalDeviceDepthStencilResolveProperties
class struct_VkPhysicalDeviceScalarBlockLayoutFeatures(Structure):
    pass

struct_VkPhysicalDeviceScalarBlockLayoutFeatures._pack_ = 1 # source:False
struct_VkPhysicalDeviceScalarBlockLayoutFeatures._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('scalarBlockLayout', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPhysicalDeviceScalarBlockLayoutFeatures = struct_VkPhysicalDeviceScalarBlockLayoutFeatures
class struct_VkImageStencilUsageCreateInfo(Structure):
    pass

struct_VkImageStencilUsageCreateInfo._pack_ = 1 # source:False
struct_VkImageStencilUsageCreateInfo._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('stencilUsage', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkImageStencilUsageCreateInfo = struct_VkImageStencilUsageCreateInfo
class struct_VkSamplerReductionModeCreateInfo(Structure):
    pass

struct_VkSamplerReductionModeCreateInfo._pack_ = 1 # source:False
struct_VkSamplerReductionModeCreateInfo._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('reductionMode', VkSamplerReductionMode),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkSamplerReductionModeCreateInfo = struct_VkSamplerReductionModeCreateInfo
class struct_VkPhysicalDeviceSamplerFilterMinmaxProperties(Structure):
    pass

struct_VkPhysicalDeviceSamplerFilterMinmaxProperties._pack_ = 1 # source:False
struct_VkPhysicalDeviceSamplerFilterMinmaxProperties._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('filterMinmaxSingleComponentFormats', ctypes.c_uint32),
    ('filterMinmaxImageComponentMapping', ctypes.c_uint32),
]

VkPhysicalDeviceSamplerFilterMinmaxProperties = struct_VkPhysicalDeviceSamplerFilterMinmaxProperties
class struct_VkPhysicalDeviceVulkanMemoryModelFeatures(Structure):
    pass

struct_VkPhysicalDeviceVulkanMemoryModelFeatures._pack_ = 1 # source:False
struct_VkPhysicalDeviceVulkanMemoryModelFeatures._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('vulkanMemoryModel', ctypes.c_uint32),
    ('vulkanMemoryModelDeviceScope', ctypes.c_uint32),
    ('vulkanMemoryModelAvailabilityVisibilityChains', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPhysicalDeviceVulkanMemoryModelFeatures = struct_VkPhysicalDeviceVulkanMemoryModelFeatures
class struct_VkPhysicalDeviceImagelessFramebufferFeatures(Structure):
    pass

struct_VkPhysicalDeviceImagelessFramebufferFeatures._pack_ = 1 # source:False
struct_VkPhysicalDeviceImagelessFramebufferFeatures._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('imagelessFramebuffer', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPhysicalDeviceImagelessFramebufferFeatures = struct_VkPhysicalDeviceImagelessFramebufferFeatures
class struct_VkFramebufferAttachmentImageInfo(Structure):
    pass

struct_VkFramebufferAttachmentImageInfo._pack_ = 1 # source:False
struct_VkFramebufferAttachmentImageInfo._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('flags', ctypes.c_uint32),
    ('usage', ctypes.c_uint32),
    ('width', ctypes.c_uint32),
    ('height', ctypes.c_uint32),
    ('layerCount', ctypes.c_uint32),
    ('viewFormatCount', ctypes.c_uint32),
    ('pViewFormats', ctypes.POINTER(VkFormat)),
]

VkFramebufferAttachmentImageInfo = struct_VkFramebufferAttachmentImageInfo
class struct_VkFramebufferAttachmentsCreateInfo(Structure):
    pass

struct_VkFramebufferAttachmentsCreateInfo._pack_ = 1 # source:False
struct_VkFramebufferAttachmentsCreateInfo._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('attachmentImageInfoCount', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('pAttachmentImageInfos', ctypes.POINTER(struct_VkFramebufferAttachmentImageInfo)),
]

VkFramebufferAttachmentsCreateInfo = struct_VkFramebufferAttachmentsCreateInfo
class struct_VkRenderPassAttachmentBeginInfo(Structure):
    pass

struct_VkRenderPassAttachmentBeginInfo._pack_ = 1 # source:False
struct_VkRenderPassAttachmentBeginInfo._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('attachmentCount', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('pAttachments', ctypes.POINTER(ctypes.POINTER(struct_VkImageView_T))),
]

VkRenderPassAttachmentBeginInfo = struct_VkRenderPassAttachmentBeginInfo
class struct_VkPhysicalDeviceUniformBufferStandardLayoutFeatures(Structure):
    pass

struct_VkPhysicalDeviceUniformBufferStandardLayoutFeatures._pack_ = 1 # source:False
struct_VkPhysicalDeviceUniformBufferStandardLayoutFeatures._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('uniformBufferStandardLayout', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPhysicalDeviceUniformBufferStandardLayoutFeatures = struct_VkPhysicalDeviceUniformBufferStandardLayoutFeatures
class struct_VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures(Structure):
    pass

struct_VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures._pack_ = 1 # source:False
struct_VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('shaderSubgroupExtendedTypes', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures = struct_VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures
class struct_VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures(Structure):
    pass

struct_VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures._pack_ = 1 # source:False
struct_VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('separateDepthStencilLayouts', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures = struct_VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures
class struct_VkAttachmentReferenceStencilLayout(Structure):
    pass

struct_VkAttachmentReferenceStencilLayout._pack_ = 1 # source:False
struct_VkAttachmentReferenceStencilLayout._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('stencilLayout', VkImageLayout),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkAttachmentReferenceStencilLayout = struct_VkAttachmentReferenceStencilLayout
class struct_VkAttachmentDescriptionStencilLayout(Structure):
    pass

struct_VkAttachmentDescriptionStencilLayout._pack_ = 1 # source:False
struct_VkAttachmentDescriptionStencilLayout._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('stencilInitialLayout', VkImageLayout),
    ('stencilFinalLayout', VkImageLayout),
]

VkAttachmentDescriptionStencilLayout = struct_VkAttachmentDescriptionStencilLayout
class struct_VkPhysicalDeviceHostQueryResetFeatures(Structure):
    pass

struct_VkPhysicalDeviceHostQueryResetFeatures._pack_ = 1 # source:False
struct_VkPhysicalDeviceHostQueryResetFeatures._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('hostQueryReset', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPhysicalDeviceHostQueryResetFeatures = struct_VkPhysicalDeviceHostQueryResetFeatures
class struct_VkPhysicalDeviceTimelineSemaphoreFeatures(Structure):
    pass

struct_VkPhysicalDeviceTimelineSemaphoreFeatures._pack_ = 1 # source:False
struct_VkPhysicalDeviceTimelineSemaphoreFeatures._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('timelineSemaphore', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPhysicalDeviceTimelineSemaphoreFeatures = struct_VkPhysicalDeviceTimelineSemaphoreFeatures
class struct_VkPhysicalDeviceTimelineSemaphoreProperties(Structure):
    pass

struct_VkPhysicalDeviceTimelineSemaphoreProperties._pack_ = 1 # source:False
struct_VkPhysicalDeviceTimelineSemaphoreProperties._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('maxTimelineSemaphoreValueDifference', ctypes.c_uint64),
]

VkPhysicalDeviceTimelineSemaphoreProperties = struct_VkPhysicalDeviceTimelineSemaphoreProperties
class struct_VkSemaphoreTypeCreateInfo(Structure):
    pass

struct_VkSemaphoreTypeCreateInfo._pack_ = 1 # source:False
struct_VkSemaphoreTypeCreateInfo._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('semaphoreType', VkSemaphoreType),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('initialValue', ctypes.c_uint64),
]

VkSemaphoreTypeCreateInfo = struct_VkSemaphoreTypeCreateInfo
class struct_VkTimelineSemaphoreSubmitInfo(Structure):
    pass

struct_VkTimelineSemaphoreSubmitInfo._pack_ = 1 # source:False
struct_VkTimelineSemaphoreSubmitInfo._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('waitSemaphoreValueCount', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('pWaitSemaphoreValues', ctypes.POINTER(ctypes.c_uint64)),
    ('signalSemaphoreValueCount', ctypes.c_uint32),
    ('PADDING_2', ctypes.c_ubyte * 4),
    ('pSignalSemaphoreValues', ctypes.POINTER(ctypes.c_uint64)),
]

VkTimelineSemaphoreSubmitInfo = struct_VkTimelineSemaphoreSubmitInfo
class struct_VkSemaphoreWaitInfo(Structure):
    pass

struct_VkSemaphoreWaitInfo._pack_ = 1 # source:False
struct_VkSemaphoreWaitInfo._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('flags', ctypes.c_uint32),
    ('semaphoreCount', ctypes.c_uint32),
    ('pSemaphores', ctypes.POINTER(ctypes.POINTER(struct_VkSemaphore_T))),
    ('pValues', ctypes.POINTER(ctypes.c_uint64)),
]

VkSemaphoreWaitInfo = struct_VkSemaphoreWaitInfo
class struct_VkSemaphoreSignalInfo(Structure):
    pass

struct_VkSemaphoreSignalInfo._pack_ = 1 # source:False
struct_VkSemaphoreSignalInfo._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('semaphore', ctypes.POINTER(struct_VkSemaphore_T)),
    ('value', ctypes.c_uint64),
]

VkSemaphoreSignalInfo = struct_VkSemaphoreSignalInfo
class struct_VkPhysicalDeviceBufferDeviceAddressFeatures(Structure):
    pass

struct_VkPhysicalDeviceBufferDeviceAddressFeatures._pack_ = 1 # source:False
struct_VkPhysicalDeviceBufferDeviceAddressFeatures._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('bufferDeviceAddress', ctypes.c_uint32),
    ('bufferDeviceAddressCaptureReplay', ctypes.c_uint32),
    ('bufferDeviceAddressMultiDevice', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPhysicalDeviceBufferDeviceAddressFeatures = struct_VkPhysicalDeviceBufferDeviceAddressFeatures
class struct_VkBufferDeviceAddressInfo(Structure):
    pass

struct_VkBufferDeviceAddressInfo._pack_ = 1 # source:False
struct_VkBufferDeviceAddressInfo._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('buffer', ctypes.POINTER(struct_VkBuffer_T)),
]

VkBufferDeviceAddressInfo = struct_VkBufferDeviceAddressInfo
class struct_VkBufferOpaqueCaptureAddressCreateInfo(Structure):
    pass

struct_VkBufferOpaqueCaptureAddressCreateInfo._pack_ = 1 # source:False
struct_VkBufferOpaqueCaptureAddressCreateInfo._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('opaqueCaptureAddress', ctypes.c_uint64),
]

VkBufferOpaqueCaptureAddressCreateInfo = struct_VkBufferOpaqueCaptureAddressCreateInfo
class struct_VkMemoryOpaqueCaptureAddressAllocateInfo(Structure):
    pass

struct_VkMemoryOpaqueCaptureAddressAllocateInfo._pack_ = 1 # source:False
struct_VkMemoryOpaqueCaptureAddressAllocateInfo._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('opaqueCaptureAddress', ctypes.c_uint64),
]

VkMemoryOpaqueCaptureAddressAllocateInfo = struct_VkMemoryOpaqueCaptureAddressAllocateInfo
class struct_VkDeviceMemoryOpaqueCaptureAddressInfo(Structure):
    pass

struct_VkDeviceMemoryOpaqueCaptureAddressInfo._pack_ = 1 # source:False
struct_VkDeviceMemoryOpaqueCaptureAddressInfo._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('memory', ctypes.POINTER(struct_VkDeviceMemory_T)),
]

VkDeviceMemoryOpaqueCaptureAddressInfo = struct_VkDeviceMemoryOpaqueCaptureAddressInfo
PFN_vkCmdDrawIndirectCount = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.POINTER(struct_VkBuffer_T), ctypes.c_uint64, ctypes.POINTER(struct_VkBuffer_T), ctypes.c_uint64, ctypes.c_uint32, ctypes.c_uint32)
PFN_vkCmdDrawIndexedIndirectCount = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.POINTER(struct_VkBuffer_T), ctypes.c_uint64, ctypes.POINTER(struct_VkBuffer_T), ctypes.c_uint64, ctypes.c_uint32, ctypes.c_uint32)
PFN_vkCreateRenderPass2 = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkRenderPassCreateInfo2), ctypes.POINTER(struct_VkAllocationCallbacks), ctypes.POINTER(ctypes.POINTER(struct_VkRenderPass_T)))
PFN_vkCmdBeginRenderPass2 = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.POINTER(struct_VkRenderPassBeginInfo), ctypes.POINTER(struct_VkSubpassBeginInfo))
PFN_vkCmdNextSubpass2 = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.POINTER(struct_VkSubpassBeginInfo), ctypes.POINTER(struct_VkSubpassEndInfo))
PFN_vkCmdEndRenderPass2 = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.POINTER(struct_VkSubpassEndInfo))
PFN_vkResetQueryPool = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkQueryPool_T), ctypes.c_uint32, ctypes.c_uint32)
PFN_vkGetSemaphoreCounterValue = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkSemaphore_T), ctypes.POINTER(ctypes.c_uint64))
PFN_vkWaitSemaphores = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkSemaphoreWaitInfo), ctypes.c_uint64)
PFN_vkSignalSemaphore = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkSemaphoreSignalInfo))
PFN_vkGetBufferDeviceAddress = ctypes.CFUNCTYPE(ctypes.c_uint64, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkBufferDeviceAddressInfo))
PFN_vkGetBufferOpaqueCaptureAddress = ctypes.CFUNCTYPE(ctypes.c_uint64, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkBufferDeviceAddressInfo))
PFN_vkGetDeviceMemoryOpaqueCaptureAddress = ctypes.CFUNCTYPE(ctypes.c_uint64, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkDeviceMemoryOpaqueCaptureAddressInfo))
try:
    vkCmdDrawIndirectCount = _libraries['libvulkan.so.1'].vkCmdDrawIndirectCount
    vkCmdDrawIndirectCount.restype = None
    vkCmdDrawIndirectCount.argtypes = [VkCommandBuffer, VkBuffer, VkDeviceSize, VkBuffer, VkDeviceSize, uint32_t, uint32_t]
except AttributeError:
    pass
try:
    vkCmdDrawIndexedIndirectCount = _libraries['libvulkan.so.1'].vkCmdDrawIndexedIndirectCount
    vkCmdDrawIndexedIndirectCount.restype = None
    vkCmdDrawIndexedIndirectCount.argtypes = [VkCommandBuffer, VkBuffer, VkDeviceSize, VkBuffer, VkDeviceSize, uint32_t, uint32_t]
except AttributeError:
    pass
try:
    vkCreateRenderPass2 = _libraries['libvulkan.so.1'].vkCreateRenderPass2
    vkCreateRenderPass2.restype = VkResult
    vkCreateRenderPass2.argtypes = [VkDevice, ctypes.POINTER(struct_VkRenderPassCreateInfo2), ctypes.POINTER(struct_VkAllocationCallbacks), ctypes.POINTER(ctypes.POINTER(struct_VkRenderPass_T))]
except AttributeError:
    pass
try:
    vkCmdBeginRenderPass2 = _libraries['libvulkan.so.1'].vkCmdBeginRenderPass2
    vkCmdBeginRenderPass2.restype = None
    vkCmdBeginRenderPass2.argtypes = [VkCommandBuffer, ctypes.POINTER(struct_VkRenderPassBeginInfo), ctypes.POINTER(struct_VkSubpassBeginInfo)]
except AttributeError:
    pass
try:
    vkCmdNextSubpass2 = _libraries['libvulkan.so.1'].vkCmdNextSubpass2
    vkCmdNextSubpass2.restype = None
    vkCmdNextSubpass2.argtypes = [VkCommandBuffer, ctypes.POINTER(struct_VkSubpassBeginInfo), ctypes.POINTER(struct_VkSubpassEndInfo)]
except AttributeError:
    pass
try:
    vkCmdEndRenderPass2 = _libraries['libvulkan.so.1'].vkCmdEndRenderPass2
    vkCmdEndRenderPass2.restype = None
    vkCmdEndRenderPass2.argtypes = [VkCommandBuffer, ctypes.POINTER(struct_VkSubpassEndInfo)]
except AttributeError:
    pass
try:
    vkResetQueryPool = _libraries['libvulkan.so.1'].vkResetQueryPool
    vkResetQueryPool.restype = None
    vkResetQueryPool.argtypes = [VkDevice, VkQueryPool, uint32_t, uint32_t]
except AttributeError:
    pass
try:
    vkGetSemaphoreCounterValue = _libraries['libvulkan.so.1'].vkGetSemaphoreCounterValue
    vkGetSemaphoreCounterValue.restype = VkResult
    vkGetSemaphoreCounterValue.argtypes = [VkDevice, VkSemaphore, ctypes.POINTER(ctypes.c_uint64)]
except AttributeError:
    pass
try:
    vkWaitSemaphores = _libraries['libvulkan.so.1'].vkWaitSemaphores
    vkWaitSemaphores.restype = VkResult
    vkWaitSemaphores.argtypes = [VkDevice, ctypes.POINTER(struct_VkSemaphoreWaitInfo), uint64_t]
except AttributeError:
    pass
try:
    vkSignalSemaphore = _libraries['libvulkan.so.1'].vkSignalSemaphore
    vkSignalSemaphore.restype = VkResult
    vkSignalSemaphore.argtypes = [VkDevice, ctypes.POINTER(struct_VkSemaphoreSignalInfo)]
except AttributeError:
    pass
try:
    vkGetBufferDeviceAddress = _libraries['libvulkan.so.1'].vkGetBufferDeviceAddress
    vkGetBufferDeviceAddress.restype = VkDeviceAddress
    vkGetBufferDeviceAddress.argtypes = [VkDevice, ctypes.POINTER(struct_VkBufferDeviceAddressInfo)]
except AttributeError:
    pass
try:
    vkGetBufferOpaqueCaptureAddress = _libraries['libvulkan.so.1'].vkGetBufferOpaqueCaptureAddress
    vkGetBufferOpaqueCaptureAddress.restype = uint64_t
    vkGetBufferOpaqueCaptureAddress.argtypes = [VkDevice, ctypes.POINTER(struct_VkBufferDeviceAddressInfo)]
except AttributeError:
    pass
try:
    vkGetDeviceMemoryOpaqueCaptureAddress = _libraries['libvulkan.so.1'].vkGetDeviceMemoryOpaqueCaptureAddress
    vkGetDeviceMemoryOpaqueCaptureAddress.restype = uint64_t
    vkGetDeviceMemoryOpaqueCaptureAddress.argtypes = [VkDevice, ctypes.POINTER(struct_VkDeviceMemoryOpaqueCaptureAddressInfo)]
except AttributeError:
    pass
VkFlags64 = ctypes.c_uint64
class struct_VkPrivateDataSlot_T(Structure):
    pass

VkPrivateDataSlot = ctypes.POINTER(struct_VkPrivateDataSlot_T)

# values for enumeration 'VkPipelineCreationFeedbackFlagBits'
VkPipelineCreationFeedbackFlagBits__enumvalues = {
    1: 'VK_PIPELINE_CREATION_FEEDBACK_VALID_BIT',
    2: 'VK_PIPELINE_CREATION_FEEDBACK_APPLICATION_PIPELINE_CACHE_HIT_BIT',
    4: 'VK_PIPELINE_CREATION_FEEDBACK_BASE_PIPELINE_ACCELERATION_BIT',
    1: 'VK_PIPELINE_CREATION_FEEDBACK_VALID_BIT_EXT',
    2: 'VK_PIPELINE_CREATION_FEEDBACK_APPLICATION_PIPELINE_CACHE_HIT_BIT_EXT',
    4: 'VK_PIPELINE_CREATION_FEEDBACK_BASE_PIPELINE_ACCELERATION_BIT_EXT',
    2147483647: 'VK_PIPELINE_CREATION_FEEDBACK_FLAG_BITS_MAX_ENUM',
}
VK_PIPELINE_CREATION_FEEDBACK_VALID_BIT = 1
VK_PIPELINE_CREATION_FEEDBACK_APPLICATION_PIPELINE_CACHE_HIT_BIT = 2
VK_PIPELINE_CREATION_FEEDBACK_BASE_PIPELINE_ACCELERATION_BIT = 4
VK_PIPELINE_CREATION_FEEDBACK_VALID_BIT_EXT = 1
VK_PIPELINE_CREATION_FEEDBACK_APPLICATION_PIPELINE_CACHE_HIT_BIT_EXT = 2
VK_PIPELINE_CREATION_FEEDBACK_BASE_PIPELINE_ACCELERATION_BIT_EXT = 4
VK_PIPELINE_CREATION_FEEDBACK_FLAG_BITS_MAX_ENUM = 2147483647
VkPipelineCreationFeedbackFlagBits = ctypes.c_uint32 # enum
VkPipelineCreationFeedbackFlags = ctypes.c_uint32

# values for enumeration 'VkToolPurposeFlagBits'
VkToolPurposeFlagBits__enumvalues = {
    1: 'VK_TOOL_PURPOSE_VALIDATION_BIT',
    2: 'VK_TOOL_PURPOSE_PROFILING_BIT',
    4: 'VK_TOOL_PURPOSE_TRACING_BIT',
    8: 'VK_TOOL_PURPOSE_ADDITIONAL_FEATURES_BIT',
    16: 'VK_TOOL_PURPOSE_MODIFYING_FEATURES_BIT',
    32: 'VK_TOOL_PURPOSE_DEBUG_REPORTING_BIT_EXT',
    64: 'VK_TOOL_PURPOSE_DEBUG_MARKERS_BIT_EXT',
    1: 'VK_TOOL_PURPOSE_VALIDATION_BIT_EXT',
    2: 'VK_TOOL_PURPOSE_PROFILING_BIT_EXT',
    4: 'VK_TOOL_PURPOSE_TRACING_BIT_EXT',
    8: 'VK_TOOL_PURPOSE_ADDITIONAL_FEATURES_BIT_EXT',
    16: 'VK_TOOL_PURPOSE_MODIFYING_FEATURES_BIT_EXT',
    2147483647: 'VK_TOOL_PURPOSE_FLAG_BITS_MAX_ENUM',
}
VK_TOOL_PURPOSE_VALIDATION_BIT = 1
VK_TOOL_PURPOSE_PROFILING_BIT = 2
VK_TOOL_PURPOSE_TRACING_BIT = 4
VK_TOOL_PURPOSE_ADDITIONAL_FEATURES_BIT = 8
VK_TOOL_PURPOSE_MODIFYING_FEATURES_BIT = 16
VK_TOOL_PURPOSE_DEBUG_REPORTING_BIT_EXT = 32
VK_TOOL_PURPOSE_DEBUG_MARKERS_BIT_EXT = 64
VK_TOOL_PURPOSE_VALIDATION_BIT_EXT = 1
VK_TOOL_PURPOSE_PROFILING_BIT_EXT = 2
VK_TOOL_PURPOSE_TRACING_BIT_EXT = 4
VK_TOOL_PURPOSE_ADDITIONAL_FEATURES_BIT_EXT = 8
VK_TOOL_PURPOSE_MODIFYING_FEATURES_BIT_EXT = 16
VK_TOOL_PURPOSE_FLAG_BITS_MAX_ENUM = 2147483647
VkToolPurposeFlagBits = ctypes.c_uint32 # enum
VkToolPurposeFlags = ctypes.c_uint32
VkPrivateDataSlotCreateFlags = ctypes.c_uint32
VkPipelineStageFlags2 = ctypes.c_uint64
VkPipelineStageFlagBits2 = ctypes.c_uint64
VK_PIPELINE_STAGE_2_NONE = 0 # Variable ctypes.c_uint64
VK_PIPELINE_STAGE_2_NONE_KHR = 0 # Variable ctypes.c_uint64
VK_PIPELINE_STAGE_2_TOP_OF_PIPE_BIT = 0x00000001 # Variable ctypes.c_uint64
VK_PIPELINE_STAGE_2_TOP_OF_PIPE_BIT_KHR = 0x00000001 # Variable ctypes.c_uint64
VK_PIPELINE_STAGE_2_DRAW_INDIRECT_BIT = 0x00000002 # Variable ctypes.c_uint64
VK_PIPELINE_STAGE_2_DRAW_INDIRECT_BIT_KHR = 0x00000002 # Variable ctypes.c_uint64
VK_PIPELINE_STAGE_2_VERTEX_INPUT_BIT = 0x00000004 # Variable ctypes.c_uint64
VK_PIPELINE_STAGE_2_VERTEX_INPUT_BIT_KHR = 0x00000004 # Variable ctypes.c_uint64
VK_PIPELINE_STAGE_2_VERTEX_SHADER_BIT = 0x00000008 # Variable ctypes.c_uint64
VK_PIPELINE_STAGE_2_VERTEX_SHADER_BIT_KHR = 0x00000008 # Variable ctypes.c_uint64
VK_PIPELINE_STAGE_2_TESSELLATION_CONTROL_SHADER_BIT = 0x00000010 # Variable ctypes.c_uint64
VK_PIPELINE_STAGE_2_TESSELLATION_CONTROL_SHADER_BIT_KHR = 0x00000010 # Variable ctypes.c_uint64
VK_PIPELINE_STAGE_2_TESSELLATION_EVALUATION_SHADER_BIT = 0x00000020 # Variable ctypes.c_uint64
VK_PIPELINE_STAGE_2_TESSELLATION_EVALUATION_SHADER_BIT_KHR = 0x00000020 # Variable ctypes.c_uint64
VK_PIPELINE_STAGE_2_GEOMETRY_SHADER_BIT = 0x00000040 # Variable ctypes.c_uint64
VK_PIPELINE_STAGE_2_GEOMETRY_SHADER_BIT_KHR = 0x00000040 # Variable ctypes.c_uint64
VK_PIPELINE_STAGE_2_FRAGMENT_SHADER_BIT = 0x00000080 # Variable ctypes.c_uint64
VK_PIPELINE_STAGE_2_FRAGMENT_SHADER_BIT_KHR = 0x00000080 # Variable ctypes.c_uint64
VK_PIPELINE_STAGE_2_EARLY_FRAGMENT_TESTS_BIT = 0x00000100 # Variable ctypes.c_uint64
VK_PIPELINE_STAGE_2_EARLY_FRAGMENT_TESTS_BIT_KHR = 0x00000100 # Variable ctypes.c_uint64
VK_PIPELINE_STAGE_2_LATE_FRAGMENT_TESTS_BIT = 0x00000200 # Variable ctypes.c_uint64
VK_PIPELINE_STAGE_2_LATE_FRAGMENT_TESTS_BIT_KHR = 0x00000200 # Variable ctypes.c_uint64
VK_PIPELINE_STAGE_2_COLOR_ATTACHMENT_OUTPUT_BIT = 0x00000400 # Variable ctypes.c_uint64
VK_PIPELINE_STAGE_2_COLOR_ATTACHMENT_OUTPUT_BIT_KHR = 0x00000400 # Variable ctypes.c_uint64
VK_PIPELINE_STAGE_2_COMPUTE_SHADER_BIT = 0x00000800 # Variable ctypes.c_uint64
VK_PIPELINE_STAGE_2_COMPUTE_SHADER_BIT_KHR = 0x00000800 # Variable ctypes.c_uint64
VK_PIPELINE_STAGE_2_ALL_TRANSFER_BIT = 0x00001000 # Variable ctypes.c_uint64
VK_PIPELINE_STAGE_2_ALL_TRANSFER_BIT_KHR = 0x00001000 # Variable ctypes.c_uint64
VK_PIPELINE_STAGE_2_TRANSFER_BIT = 0x00001000 # Variable ctypes.c_uint64
VK_PIPELINE_STAGE_2_TRANSFER_BIT_KHR = 0x00001000 # Variable ctypes.c_uint64
VK_PIPELINE_STAGE_2_BOTTOM_OF_PIPE_BIT = 0x00002000 # Variable ctypes.c_uint64
VK_PIPELINE_STAGE_2_BOTTOM_OF_PIPE_BIT_KHR = 0x00002000 # Variable ctypes.c_uint64
VK_PIPELINE_STAGE_2_HOST_BIT = 0x00004000 # Variable ctypes.c_uint64
VK_PIPELINE_STAGE_2_HOST_BIT_KHR = 0x00004000 # Variable ctypes.c_uint64
VK_PIPELINE_STAGE_2_ALL_GRAPHICS_BIT = 0x00008000 # Variable ctypes.c_uint64
VK_PIPELINE_STAGE_2_ALL_GRAPHICS_BIT_KHR = 0x00008000 # Variable ctypes.c_uint64
VK_PIPELINE_STAGE_2_ALL_COMMANDS_BIT = 0x00010000 # Variable ctypes.c_uint64
VK_PIPELINE_STAGE_2_ALL_COMMANDS_BIT_KHR = 0x00010000 # Variable ctypes.c_uint64
VK_PIPELINE_STAGE_2_COPY_BIT = 0x100000000 # Variable ctypes.c_uint64
VK_PIPELINE_STAGE_2_COPY_BIT_KHR = 0x100000000 # Variable ctypes.c_uint64
VK_PIPELINE_STAGE_2_RESOLVE_BIT = 0x200000000 # Variable ctypes.c_uint64
VK_PIPELINE_STAGE_2_RESOLVE_BIT_KHR = 0x200000000 # Variable ctypes.c_uint64
VK_PIPELINE_STAGE_2_BLIT_BIT = 0x400000000 # Variable ctypes.c_uint64
VK_PIPELINE_STAGE_2_BLIT_BIT_KHR = 0x400000000 # Variable ctypes.c_uint64
VK_PIPELINE_STAGE_2_CLEAR_BIT = 0x800000000 # Variable ctypes.c_uint64
VK_PIPELINE_STAGE_2_CLEAR_BIT_KHR = 0x800000000 # Variable ctypes.c_uint64
VK_PIPELINE_STAGE_2_INDEX_INPUT_BIT = 0x1000000000 # Variable ctypes.c_uint64
VK_PIPELINE_STAGE_2_INDEX_INPUT_BIT_KHR = 0x1000000000 # Variable ctypes.c_uint64
VK_PIPELINE_STAGE_2_VERTEX_ATTRIBUTE_INPUT_BIT = 0x2000000000 # Variable ctypes.c_uint64
VK_PIPELINE_STAGE_2_VERTEX_ATTRIBUTE_INPUT_BIT_KHR = 0x2000000000 # Variable ctypes.c_uint64
VK_PIPELINE_STAGE_2_PRE_RASTERIZATION_SHADERS_BIT = 0x4000000000 # Variable ctypes.c_uint64
VK_PIPELINE_STAGE_2_PRE_RASTERIZATION_SHADERS_BIT_KHR = 0x4000000000 # Variable ctypes.c_uint64
VK_PIPELINE_STAGE_2_VIDEO_DECODE_BIT_KHR = 0x04000000 # Variable ctypes.c_uint64
VK_PIPELINE_STAGE_2_VIDEO_ENCODE_BIT_KHR = 0x08000000 # Variable ctypes.c_uint64
VK_PIPELINE_STAGE_2_TRANSFORM_FEEDBACK_BIT_EXT = 0x01000000 # Variable ctypes.c_uint64
VK_PIPELINE_STAGE_2_CONDITIONAL_RENDERING_BIT_EXT = 0x00040000 # Variable ctypes.c_uint64
VK_PIPELINE_STAGE_2_COMMAND_PREPROCESS_BIT_NV = 0x00020000 # Variable ctypes.c_uint64
VK_PIPELINE_STAGE_2_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR = 0x00400000 # Variable ctypes.c_uint64
VK_PIPELINE_STAGE_2_SHADING_RATE_IMAGE_BIT_NV = 0x00400000 # Variable ctypes.c_uint64
VK_PIPELINE_STAGE_2_ACCELERATION_STRUCTURE_BUILD_BIT_KHR = 0x02000000 # Variable ctypes.c_uint64
VK_PIPELINE_STAGE_2_RAY_TRACING_SHADER_BIT_KHR = 0x00200000 # Variable ctypes.c_uint64
VK_PIPELINE_STAGE_2_RAY_TRACING_SHADER_BIT_NV = 0x00200000 # Variable ctypes.c_uint64
VK_PIPELINE_STAGE_2_ACCELERATION_STRUCTURE_BUILD_BIT_NV = 0x02000000 # Variable ctypes.c_uint64
VK_PIPELINE_STAGE_2_FRAGMENT_DENSITY_PROCESS_BIT_EXT = 0x00800000 # Variable ctypes.c_uint64
VK_PIPELINE_STAGE_2_TASK_SHADER_BIT_NV = 0x00080000 # Variable ctypes.c_uint64
VK_PIPELINE_STAGE_2_MESH_SHADER_BIT_NV = 0x00100000 # Variable ctypes.c_uint64
VK_PIPELINE_STAGE_2_TASK_SHADER_BIT_EXT = 0x00080000 # Variable ctypes.c_uint64
VK_PIPELINE_STAGE_2_MESH_SHADER_BIT_EXT = 0x00100000 # Variable ctypes.c_uint64
VK_PIPELINE_STAGE_2_SUBPASS_SHADER_BIT_HUAWEI = 0x8000000000 # Variable ctypes.c_uint64
VK_PIPELINE_STAGE_2_SUBPASS_SHADING_BIT_HUAWEI = 0x8000000000 # Variable ctypes.c_uint64
VK_PIPELINE_STAGE_2_INVOCATION_MASK_BIT_HUAWEI = 0x10000000000 # Variable ctypes.c_uint64
VK_PIPELINE_STAGE_2_ACCELERATION_STRUCTURE_COPY_BIT_KHR = 0x10000000 # Variable ctypes.c_uint64
VK_PIPELINE_STAGE_2_MICROMAP_BUILD_BIT_EXT = 0x40000000 # Variable ctypes.c_uint64
VK_PIPELINE_STAGE_2_CLUSTER_CULLING_SHADER_BIT_HUAWEI = 0x20000000000 # Variable ctypes.c_uint64
VK_PIPELINE_STAGE_2_OPTICAL_FLOW_BIT_NV = 0x20000000 # Variable ctypes.c_uint64
VkAccessFlags2 = ctypes.c_uint64
VkAccessFlagBits2 = ctypes.c_uint64
VK_ACCESS_2_NONE = 0 # Variable ctypes.c_uint64
VK_ACCESS_2_NONE_KHR = 0 # Variable ctypes.c_uint64
VK_ACCESS_2_INDIRECT_COMMAND_READ_BIT = 0x00000001 # Variable ctypes.c_uint64
VK_ACCESS_2_INDIRECT_COMMAND_READ_BIT_KHR = 0x00000001 # Variable ctypes.c_uint64
VK_ACCESS_2_INDEX_READ_BIT = 0x00000002 # Variable ctypes.c_uint64
VK_ACCESS_2_INDEX_READ_BIT_KHR = 0x00000002 # Variable ctypes.c_uint64
VK_ACCESS_2_VERTEX_ATTRIBUTE_READ_BIT = 0x00000004 # Variable ctypes.c_uint64
VK_ACCESS_2_VERTEX_ATTRIBUTE_READ_BIT_KHR = 0x00000004 # Variable ctypes.c_uint64
VK_ACCESS_2_UNIFORM_READ_BIT = 0x00000008 # Variable ctypes.c_uint64
VK_ACCESS_2_UNIFORM_READ_BIT_KHR = 0x00000008 # Variable ctypes.c_uint64
VK_ACCESS_2_INPUT_ATTACHMENT_READ_BIT = 0x00000010 # Variable ctypes.c_uint64
VK_ACCESS_2_INPUT_ATTACHMENT_READ_BIT_KHR = 0x00000010 # Variable ctypes.c_uint64
VK_ACCESS_2_SHADER_READ_BIT = 0x00000020 # Variable ctypes.c_uint64
VK_ACCESS_2_SHADER_READ_BIT_KHR = 0x00000020 # Variable ctypes.c_uint64
VK_ACCESS_2_SHADER_WRITE_BIT = 0x00000040 # Variable ctypes.c_uint64
VK_ACCESS_2_SHADER_WRITE_BIT_KHR = 0x00000040 # Variable ctypes.c_uint64
VK_ACCESS_2_COLOR_ATTACHMENT_READ_BIT = 0x00000080 # Variable ctypes.c_uint64
VK_ACCESS_2_COLOR_ATTACHMENT_READ_BIT_KHR = 0x00000080 # Variable ctypes.c_uint64
VK_ACCESS_2_COLOR_ATTACHMENT_WRITE_BIT = 0x00000100 # Variable ctypes.c_uint64
VK_ACCESS_2_COLOR_ATTACHMENT_WRITE_BIT_KHR = 0x00000100 # Variable ctypes.c_uint64
VK_ACCESS_2_DEPTH_STENCIL_ATTACHMENT_READ_BIT = 0x00000200 # Variable ctypes.c_uint64
VK_ACCESS_2_DEPTH_STENCIL_ATTACHMENT_READ_BIT_KHR = 0x00000200 # Variable ctypes.c_uint64
VK_ACCESS_2_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT = 0x00000400 # Variable ctypes.c_uint64
VK_ACCESS_2_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT_KHR = 0x00000400 # Variable ctypes.c_uint64
VK_ACCESS_2_TRANSFER_READ_BIT = 0x00000800 # Variable ctypes.c_uint64
VK_ACCESS_2_TRANSFER_READ_BIT_KHR = 0x00000800 # Variable ctypes.c_uint64
VK_ACCESS_2_TRANSFER_WRITE_BIT = 0x00001000 # Variable ctypes.c_uint64
VK_ACCESS_2_TRANSFER_WRITE_BIT_KHR = 0x00001000 # Variable ctypes.c_uint64
VK_ACCESS_2_HOST_READ_BIT = 0x00002000 # Variable ctypes.c_uint64
VK_ACCESS_2_HOST_READ_BIT_KHR = 0x00002000 # Variable ctypes.c_uint64
VK_ACCESS_2_HOST_WRITE_BIT = 0x00004000 # Variable ctypes.c_uint64
VK_ACCESS_2_HOST_WRITE_BIT_KHR = 0x00004000 # Variable ctypes.c_uint64
VK_ACCESS_2_MEMORY_READ_BIT = 0x00008000 # Variable ctypes.c_uint64
VK_ACCESS_2_MEMORY_READ_BIT_KHR = 0x00008000 # Variable ctypes.c_uint64
VK_ACCESS_2_MEMORY_WRITE_BIT = 0x00010000 # Variable ctypes.c_uint64
VK_ACCESS_2_MEMORY_WRITE_BIT_KHR = 0x00010000 # Variable ctypes.c_uint64
VK_ACCESS_2_SHADER_SAMPLED_READ_BIT = 0x100000000 # Variable ctypes.c_uint64
VK_ACCESS_2_SHADER_SAMPLED_READ_BIT_KHR = 0x100000000 # Variable ctypes.c_uint64
VK_ACCESS_2_SHADER_STORAGE_READ_BIT = 0x200000000 # Variable ctypes.c_uint64
VK_ACCESS_2_SHADER_STORAGE_READ_BIT_KHR = 0x200000000 # Variable ctypes.c_uint64
VK_ACCESS_2_SHADER_STORAGE_WRITE_BIT = 0x400000000 # Variable ctypes.c_uint64
VK_ACCESS_2_SHADER_STORAGE_WRITE_BIT_KHR = 0x400000000 # Variable ctypes.c_uint64
VK_ACCESS_2_VIDEO_DECODE_READ_BIT_KHR = 0x800000000 # Variable ctypes.c_uint64
VK_ACCESS_2_VIDEO_DECODE_WRITE_BIT_KHR = 0x1000000000 # Variable ctypes.c_uint64
VK_ACCESS_2_VIDEO_ENCODE_READ_BIT_KHR = 0x2000000000 # Variable ctypes.c_uint64
VK_ACCESS_2_VIDEO_ENCODE_WRITE_BIT_KHR = 0x4000000000 # Variable ctypes.c_uint64
VK_ACCESS_2_TRANSFORM_FEEDBACK_WRITE_BIT_EXT = 0x02000000 # Variable ctypes.c_uint64
VK_ACCESS_2_TRANSFORM_FEEDBACK_COUNTER_READ_BIT_EXT = 0x04000000 # Variable ctypes.c_uint64
VK_ACCESS_2_TRANSFORM_FEEDBACK_COUNTER_WRITE_BIT_EXT = 0x08000000 # Variable ctypes.c_uint64
VK_ACCESS_2_CONDITIONAL_RENDERING_READ_BIT_EXT = 0x00100000 # Variable ctypes.c_uint64
VK_ACCESS_2_COMMAND_PREPROCESS_READ_BIT_NV = 0x00020000 # Variable ctypes.c_uint64
VK_ACCESS_2_COMMAND_PREPROCESS_WRITE_BIT_NV = 0x00040000 # Variable ctypes.c_uint64
VK_ACCESS_2_FRAGMENT_SHADING_RATE_ATTACHMENT_READ_BIT_KHR = 0x00800000 # Variable ctypes.c_uint64
VK_ACCESS_2_SHADING_RATE_IMAGE_READ_BIT_NV = 0x00800000 # Variable ctypes.c_uint64
VK_ACCESS_2_ACCELERATION_STRUCTURE_READ_BIT_KHR = 0x00200000 # Variable ctypes.c_uint64
VK_ACCESS_2_ACCELERATION_STRUCTURE_WRITE_BIT_KHR = 0x00400000 # Variable ctypes.c_uint64
VK_ACCESS_2_ACCELERATION_STRUCTURE_READ_BIT_NV = 0x00200000 # Variable ctypes.c_uint64
VK_ACCESS_2_ACCELERATION_STRUCTURE_WRITE_BIT_NV = 0x00400000 # Variable ctypes.c_uint64
VK_ACCESS_2_FRAGMENT_DENSITY_MAP_READ_BIT_EXT = 0x01000000 # Variable ctypes.c_uint64
VK_ACCESS_2_COLOR_ATTACHMENT_READ_NONCOHERENT_BIT_EXT = 0x00080000 # Variable ctypes.c_uint64
VK_ACCESS_2_DESCRIPTOR_BUFFER_READ_BIT_EXT = 0x20000000000 # Variable ctypes.c_uint64
VK_ACCESS_2_INVOCATION_MASK_READ_BIT_HUAWEI = 0x8000000000 # Variable ctypes.c_uint64
VK_ACCESS_2_SHADER_BINDING_TABLE_READ_BIT_KHR = 0x10000000000 # Variable ctypes.c_uint64
VK_ACCESS_2_MICROMAP_READ_BIT_EXT = 0x100000000000 # Variable ctypes.c_uint64
VK_ACCESS_2_MICROMAP_WRITE_BIT_EXT = 0x200000000000 # Variable ctypes.c_uint64
VK_ACCESS_2_OPTICAL_FLOW_READ_BIT_NV = 0x40000000000 # Variable ctypes.c_uint64
VK_ACCESS_2_OPTICAL_FLOW_WRITE_BIT_NV = 0x80000000000 # Variable ctypes.c_uint64

# values for enumeration 'VkSubmitFlagBits'
VkSubmitFlagBits__enumvalues = {
    1: 'VK_SUBMIT_PROTECTED_BIT',
    1: 'VK_SUBMIT_PROTECTED_BIT_KHR',
    2147483647: 'VK_SUBMIT_FLAG_BITS_MAX_ENUM',
}
VK_SUBMIT_PROTECTED_BIT = 1
VK_SUBMIT_PROTECTED_BIT_KHR = 1
VK_SUBMIT_FLAG_BITS_MAX_ENUM = 2147483647
VkSubmitFlagBits = ctypes.c_uint32 # enum
VkSubmitFlags = ctypes.c_uint32

# values for enumeration 'VkRenderingFlagBits'
VkRenderingFlagBits__enumvalues = {
    1: 'VK_RENDERING_CONTENTS_SECONDARY_COMMAND_BUFFERS_BIT',
    2: 'VK_RENDERING_SUSPENDING_BIT',
    4: 'VK_RENDERING_RESUMING_BIT',
    16: 'VK_RENDERING_CONTENTS_INLINE_BIT_EXT',
    8: 'VK_RENDERING_ENABLE_LEGACY_DITHERING_BIT_EXT',
    1: 'VK_RENDERING_CONTENTS_SECONDARY_COMMAND_BUFFERS_BIT_KHR',
    2: 'VK_RENDERING_SUSPENDING_BIT_KHR',
    4: 'VK_RENDERING_RESUMING_BIT_KHR',
    2147483647: 'VK_RENDERING_FLAG_BITS_MAX_ENUM',
}
VK_RENDERING_CONTENTS_SECONDARY_COMMAND_BUFFERS_BIT = 1
VK_RENDERING_SUSPENDING_BIT = 2
VK_RENDERING_RESUMING_BIT = 4
VK_RENDERING_CONTENTS_INLINE_BIT_EXT = 16
VK_RENDERING_ENABLE_LEGACY_DITHERING_BIT_EXT = 8
VK_RENDERING_CONTENTS_SECONDARY_COMMAND_BUFFERS_BIT_KHR = 1
VK_RENDERING_SUSPENDING_BIT_KHR = 2
VK_RENDERING_RESUMING_BIT_KHR = 4
VK_RENDERING_FLAG_BITS_MAX_ENUM = 2147483647
VkRenderingFlagBits = ctypes.c_uint32 # enum
VkRenderingFlags = ctypes.c_uint32
VkFormatFeatureFlags2 = ctypes.c_uint64
VkFormatFeatureFlagBits2 = ctypes.c_uint64
VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_BIT = 0x00000001 # Variable ctypes.c_uint64
VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_BIT_KHR = 0x00000001 # Variable ctypes.c_uint64
VK_FORMAT_FEATURE_2_STORAGE_IMAGE_BIT = 0x00000002 # Variable ctypes.c_uint64
VK_FORMAT_FEATURE_2_STORAGE_IMAGE_BIT_KHR = 0x00000002 # Variable ctypes.c_uint64
VK_FORMAT_FEATURE_2_STORAGE_IMAGE_ATOMIC_BIT = 0x00000004 # Variable ctypes.c_uint64
VK_FORMAT_FEATURE_2_STORAGE_IMAGE_ATOMIC_BIT_KHR = 0x00000004 # Variable ctypes.c_uint64
VK_FORMAT_FEATURE_2_UNIFORM_TEXEL_BUFFER_BIT = 0x00000008 # Variable ctypes.c_uint64
VK_FORMAT_FEATURE_2_UNIFORM_TEXEL_BUFFER_BIT_KHR = 0x00000008 # Variable ctypes.c_uint64
VK_FORMAT_FEATURE_2_STORAGE_TEXEL_BUFFER_BIT = 0x00000010 # Variable ctypes.c_uint64
VK_FORMAT_FEATURE_2_STORAGE_TEXEL_BUFFER_BIT_KHR = 0x00000010 # Variable ctypes.c_uint64
VK_FORMAT_FEATURE_2_STORAGE_TEXEL_BUFFER_ATOMIC_BIT = 0x00000020 # Variable ctypes.c_uint64
VK_FORMAT_FEATURE_2_STORAGE_TEXEL_BUFFER_ATOMIC_BIT_KHR = 0x00000020 # Variable ctypes.c_uint64
VK_FORMAT_FEATURE_2_VERTEX_BUFFER_BIT = 0x00000040 # Variable ctypes.c_uint64
VK_FORMAT_FEATURE_2_VERTEX_BUFFER_BIT_KHR = 0x00000040 # Variable ctypes.c_uint64
VK_FORMAT_FEATURE_2_COLOR_ATTACHMENT_BIT = 0x00000080 # Variable ctypes.c_uint64
VK_FORMAT_FEATURE_2_COLOR_ATTACHMENT_BIT_KHR = 0x00000080 # Variable ctypes.c_uint64
VK_FORMAT_FEATURE_2_COLOR_ATTACHMENT_BLEND_BIT = 0x00000100 # Variable ctypes.c_uint64
VK_FORMAT_FEATURE_2_COLOR_ATTACHMENT_BLEND_BIT_KHR = 0x00000100 # Variable ctypes.c_uint64
VK_FORMAT_FEATURE_2_DEPTH_STENCIL_ATTACHMENT_BIT = 0x00000200 # Variable ctypes.c_uint64
VK_FORMAT_FEATURE_2_DEPTH_STENCIL_ATTACHMENT_BIT_KHR = 0x00000200 # Variable ctypes.c_uint64
VK_FORMAT_FEATURE_2_BLIT_SRC_BIT = 0x00000400 # Variable ctypes.c_uint64
VK_FORMAT_FEATURE_2_BLIT_SRC_BIT_KHR = 0x00000400 # Variable ctypes.c_uint64
VK_FORMAT_FEATURE_2_BLIT_DST_BIT = 0x00000800 # Variable ctypes.c_uint64
VK_FORMAT_FEATURE_2_BLIT_DST_BIT_KHR = 0x00000800 # Variable ctypes.c_uint64
VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_LINEAR_BIT = 0x00001000 # Variable ctypes.c_uint64
VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_LINEAR_BIT_KHR = 0x00001000 # Variable ctypes.c_uint64
VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_CUBIC_BIT = 0x00002000 # Variable ctypes.c_uint64
VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_CUBIC_BIT_EXT = 0x00002000 # Variable ctypes.c_uint64
VK_FORMAT_FEATURE_2_TRANSFER_SRC_BIT = 0x00004000 # Variable ctypes.c_uint64
VK_FORMAT_FEATURE_2_TRANSFER_SRC_BIT_KHR = 0x00004000 # Variable ctypes.c_uint64
VK_FORMAT_FEATURE_2_TRANSFER_DST_BIT = 0x00008000 # Variable ctypes.c_uint64
VK_FORMAT_FEATURE_2_TRANSFER_DST_BIT_KHR = 0x00008000 # Variable ctypes.c_uint64
VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_MINMAX_BIT = 0x00010000 # Variable ctypes.c_uint64
VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_MINMAX_BIT_KHR = 0x00010000 # Variable ctypes.c_uint64
VK_FORMAT_FEATURE_2_MIDPOINT_CHROMA_SAMPLES_BIT = 0x00020000 # Variable ctypes.c_uint64
VK_FORMAT_FEATURE_2_MIDPOINT_CHROMA_SAMPLES_BIT_KHR = 0x00020000 # Variable ctypes.c_uint64
VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT = 0x00040000 # Variable ctypes.c_uint64
VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT_KHR = 0x00040000 # Variable ctypes.c_uint64
VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT = 0x00080000 # Variable ctypes.c_uint64
VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT_KHR = 0x00080000 # Variable ctypes.c_uint64
VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT = 0x00100000 # Variable ctypes.c_uint64
VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT_KHR = 0x00100000 # Variable ctypes.c_uint64
VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT = 0x00200000 # Variable ctypes.c_uint64
VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT_KHR = 0x00200000 # Variable ctypes.c_uint64
VK_FORMAT_FEATURE_2_DISJOINT_BIT = 0x00400000 # Variable ctypes.c_uint64
VK_FORMAT_FEATURE_2_DISJOINT_BIT_KHR = 0x00400000 # Variable ctypes.c_uint64
VK_FORMAT_FEATURE_2_COSITED_CHROMA_SAMPLES_BIT = 0x00800000 # Variable ctypes.c_uint64
VK_FORMAT_FEATURE_2_COSITED_CHROMA_SAMPLES_BIT_KHR = 0x00800000 # Variable ctypes.c_uint64
VK_FORMAT_FEATURE_2_STORAGE_READ_WITHOUT_FORMAT_BIT = 0x80000000 # Variable ctypes.c_uint64
VK_FORMAT_FEATURE_2_STORAGE_READ_WITHOUT_FORMAT_BIT_KHR = 0x80000000 # Variable ctypes.c_uint64
VK_FORMAT_FEATURE_2_STORAGE_WRITE_WITHOUT_FORMAT_BIT = 0x100000000 # Variable ctypes.c_uint64
VK_FORMAT_FEATURE_2_STORAGE_WRITE_WITHOUT_FORMAT_BIT_KHR = 0x100000000 # Variable ctypes.c_uint64
VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_DEPTH_COMPARISON_BIT = 0x200000000 # Variable ctypes.c_uint64
VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_DEPTH_COMPARISON_BIT_KHR = 0x200000000 # Variable ctypes.c_uint64
VK_FORMAT_FEATURE_2_VIDEO_DECODE_OUTPUT_BIT_KHR = 0x02000000 # Variable ctypes.c_uint64
VK_FORMAT_FEATURE_2_VIDEO_DECODE_DPB_BIT_KHR = 0x04000000 # Variable ctypes.c_uint64
VK_FORMAT_FEATURE_2_ACCELERATION_STRUCTURE_VERTEX_BUFFER_BIT_KHR = 0x20000000 # Variable ctypes.c_uint64
VK_FORMAT_FEATURE_2_FRAGMENT_DENSITY_MAP_BIT_EXT = 0x01000000 # Variable ctypes.c_uint64
VK_FORMAT_FEATURE_2_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR = 0x40000000 # Variable ctypes.c_uint64
VK_FORMAT_FEATURE_2_HOST_IMAGE_TRANSFER_BIT_EXT = 0x400000000000 # Variable ctypes.c_uint64
VK_FORMAT_FEATURE_2_VIDEO_ENCODE_INPUT_BIT_KHR = 0x08000000 # Variable ctypes.c_uint64
VK_FORMAT_FEATURE_2_VIDEO_ENCODE_DPB_BIT_KHR = 0x10000000 # Variable ctypes.c_uint64
VK_FORMAT_FEATURE_2_LINEAR_COLOR_ATTACHMENT_BIT_NV = 0x4000000000 # Variable ctypes.c_uint64
VK_FORMAT_FEATURE_2_WEIGHT_IMAGE_BIT_QCOM = 0x400000000 # Variable ctypes.c_uint64
VK_FORMAT_FEATURE_2_WEIGHT_SAMPLED_IMAGE_BIT_QCOM = 0x800000000 # Variable ctypes.c_uint64
VK_FORMAT_FEATURE_2_BLOCK_MATCHING_BIT_QCOM = 0x1000000000 # Variable ctypes.c_uint64
VK_FORMAT_FEATURE_2_BOX_FILTER_SAMPLED_BIT_QCOM = 0x2000000000 # Variable ctypes.c_uint64
VK_FORMAT_FEATURE_2_OPTICAL_FLOW_IMAGE_BIT_NV = 0x10000000000 # Variable ctypes.c_uint64
VK_FORMAT_FEATURE_2_OPTICAL_FLOW_VECTOR_BIT_NV = 0x20000000000 # Variable ctypes.c_uint64
VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV = 0x40000000000 # Variable ctypes.c_uint64
class struct_VkPhysicalDeviceVulkan13Features(Structure):
    pass

struct_VkPhysicalDeviceVulkan13Features._pack_ = 1 # source:False
struct_VkPhysicalDeviceVulkan13Features._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('robustImageAccess', ctypes.c_uint32),
    ('inlineUniformBlock', ctypes.c_uint32),
    ('descriptorBindingInlineUniformBlockUpdateAfterBind', ctypes.c_uint32),
    ('pipelineCreationCacheControl', ctypes.c_uint32),
    ('privateData', ctypes.c_uint32),
    ('shaderDemoteToHelperInvocation', ctypes.c_uint32),
    ('shaderTerminateInvocation', ctypes.c_uint32),
    ('subgroupSizeControl', ctypes.c_uint32),
    ('computeFullSubgroups', ctypes.c_uint32),
    ('synchronization2', ctypes.c_uint32),
    ('textureCompressionASTC_HDR', ctypes.c_uint32),
    ('shaderZeroInitializeWorkgroupMemory', ctypes.c_uint32),
    ('dynamicRendering', ctypes.c_uint32),
    ('shaderIntegerDotProduct', ctypes.c_uint32),
    ('maintenance4', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPhysicalDeviceVulkan13Features = struct_VkPhysicalDeviceVulkan13Features
class struct_VkPhysicalDeviceVulkan13Properties(Structure):
    pass

struct_VkPhysicalDeviceVulkan13Properties._pack_ = 1 # source:False
struct_VkPhysicalDeviceVulkan13Properties._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('minSubgroupSize', ctypes.c_uint32),
    ('maxSubgroupSize', ctypes.c_uint32),
    ('maxComputeWorkgroupSubgroups', ctypes.c_uint32),
    ('requiredSubgroupSizeStages', ctypes.c_uint32),
    ('maxInlineUniformBlockSize', ctypes.c_uint32),
    ('maxPerStageDescriptorInlineUniformBlocks', ctypes.c_uint32),
    ('maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks', ctypes.c_uint32),
    ('maxDescriptorSetInlineUniformBlocks', ctypes.c_uint32),
    ('maxDescriptorSetUpdateAfterBindInlineUniformBlocks', ctypes.c_uint32),
    ('maxInlineUniformTotalSize', ctypes.c_uint32),
    ('integerDotProduct8BitUnsignedAccelerated', ctypes.c_uint32),
    ('integerDotProduct8BitSignedAccelerated', ctypes.c_uint32),
    ('integerDotProduct8BitMixedSignednessAccelerated', ctypes.c_uint32),
    ('integerDotProduct4x8BitPackedUnsignedAccelerated', ctypes.c_uint32),
    ('integerDotProduct4x8BitPackedSignedAccelerated', ctypes.c_uint32),
    ('integerDotProduct4x8BitPackedMixedSignednessAccelerated', ctypes.c_uint32),
    ('integerDotProduct16BitUnsignedAccelerated', ctypes.c_uint32),
    ('integerDotProduct16BitSignedAccelerated', ctypes.c_uint32),
    ('integerDotProduct16BitMixedSignednessAccelerated', ctypes.c_uint32),
    ('integerDotProduct32BitUnsignedAccelerated', ctypes.c_uint32),
    ('integerDotProduct32BitSignedAccelerated', ctypes.c_uint32),
    ('integerDotProduct32BitMixedSignednessAccelerated', ctypes.c_uint32),
    ('integerDotProduct64BitUnsignedAccelerated', ctypes.c_uint32),
    ('integerDotProduct64BitSignedAccelerated', ctypes.c_uint32),
    ('integerDotProduct64BitMixedSignednessAccelerated', ctypes.c_uint32),
    ('integerDotProductAccumulatingSaturating8BitUnsignedAccelerated', ctypes.c_uint32),
    ('integerDotProductAccumulatingSaturating8BitSignedAccelerated', ctypes.c_uint32),
    ('integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated', ctypes.c_uint32),
    ('integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated', ctypes.c_uint32),
    ('integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated', ctypes.c_uint32),
    ('integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated', ctypes.c_uint32),
    ('integerDotProductAccumulatingSaturating16BitUnsignedAccelerated', ctypes.c_uint32),
    ('integerDotProductAccumulatingSaturating16BitSignedAccelerated', ctypes.c_uint32),
    ('integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated', ctypes.c_uint32),
    ('integerDotProductAccumulatingSaturating32BitUnsignedAccelerated', ctypes.c_uint32),
    ('integerDotProductAccumulatingSaturating32BitSignedAccelerated', ctypes.c_uint32),
    ('integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated', ctypes.c_uint32),
    ('integerDotProductAccumulatingSaturating64BitUnsignedAccelerated', ctypes.c_uint32),
    ('integerDotProductAccumulatingSaturating64BitSignedAccelerated', ctypes.c_uint32),
    ('integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated', ctypes.c_uint32),
    ('storageTexelBufferOffsetAlignmentBytes', ctypes.c_uint64),
    ('storageTexelBufferOffsetSingleTexelAlignment', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('uniformTexelBufferOffsetAlignmentBytes', ctypes.c_uint64),
    ('uniformTexelBufferOffsetSingleTexelAlignment', ctypes.c_uint32),
    ('PADDING_2', ctypes.c_ubyte * 4),
    ('maxBufferSize', ctypes.c_uint64),
]

VkPhysicalDeviceVulkan13Properties = struct_VkPhysicalDeviceVulkan13Properties
class struct_VkPipelineCreationFeedback(Structure):
    pass

struct_VkPipelineCreationFeedback._pack_ = 1 # source:False
struct_VkPipelineCreationFeedback._fields_ = [
    ('flags', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('duration', ctypes.c_uint64),
]

VkPipelineCreationFeedback = struct_VkPipelineCreationFeedback
class struct_VkPipelineCreationFeedbackCreateInfo(Structure):
    pass

struct_VkPipelineCreationFeedbackCreateInfo._pack_ = 1 # source:False
struct_VkPipelineCreationFeedbackCreateInfo._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('pPipelineCreationFeedback', ctypes.POINTER(struct_VkPipelineCreationFeedback)),
    ('pipelineStageCreationFeedbackCount', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('pPipelineStageCreationFeedbacks', ctypes.POINTER(struct_VkPipelineCreationFeedback)),
]

VkPipelineCreationFeedbackCreateInfo = struct_VkPipelineCreationFeedbackCreateInfo
class struct_VkPhysicalDeviceShaderTerminateInvocationFeatures(Structure):
    pass

struct_VkPhysicalDeviceShaderTerminateInvocationFeatures._pack_ = 1 # source:False
struct_VkPhysicalDeviceShaderTerminateInvocationFeatures._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('shaderTerminateInvocation', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPhysicalDeviceShaderTerminateInvocationFeatures = struct_VkPhysicalDeviceShaderTerminateInvocationFeatures
class struct_VkPhysicalDeviceToolProperties(Structure):
    pass

struct_VkPhysicalDeviceToolProperties._pack_ = 1 # source:False
struct_VkPhysicalDeviceToolProperties._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('name', ctypes.c_char * 256),
    ('version', ctypes.c_char * 256),
    ('purposes', ctypes.c_uint32),
    ('description', ctypes.c_char * 256),
    ('layer', ctypes.c_char * 256),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPhysicalDeviceToolProperties = struct_VkPhysicalDeviceToolProperties
class struct_VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures(Structure):
    pass

struct_VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures._pack_ = 1 # source:False
struct_VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('shaderDemoteToHelperInvocation', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures = struct_VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures
class struct_VkPhysicalDevicePrivateDataFeatures(Structure):
    pass

struct_VkPhysicalDevicePrivateDataFeatures._pack_ = 1 # source:False
struct_VkPhysicalDevicePrivateDataFeatures._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('privateData', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPhysicalDevicePrivateDataFeatures = struct_VkPhysicalDevicePrivateDataFeatures
class struct_VkDevicePrivateDataCreateInfo(Structure):
    pass

struct_VkDevicePrivateDataCreateInfo._pack_ = 1 # source:False
struct_VkDevicePrivateDataCreateInfo._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('privateDataSlotRequestCount', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkDevicePrivateDataCreateInfo = struct_VkDevicePrivateDataCreateInfo
class struct_VkPrivateDataSlotCreateInfo(Structure):
    pass

struct_VkPrivateDataSlotCreateInfo._pack_ = 1 # source:False
struct_VkPrivateDataSlotCreateInfo._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('flags', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPrivateDataSlotCreateInfo = struct_VkPrivateDataSlotCreateInfo
class struct_VkPhysicalDevicePipelineCreationCacheControlFeatures(Structure):
    pass

struct_VkPhysicalDevicePipelineCreationCacheControlFeatures._pack_ = 1 # source:False
struct_VkPhysicalDevicePipelineCreationCacheControlFeatures._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('pipelineCreationCacheControl', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPhysicalDevicePipelineCreationCacheControlFeatures = struct_VkPhysicalDevicePipelineCreationCacheControlFeatures
class struct_VkMemoryBarrier2(Structure):
    pass

struct_VkMemoryBarrier2._pack_ = 1 # source:False
struct_VkMemoryBarrier2._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('srcStageMask', ctypes.c_uint64),
    ('srcAccessMask', ctypes.c_uint64),
    ('dstStageMask', ctypes.c_uint64),
    ('dstAccessMask', ctypes.c_uint64),
]

VkMemoryBarrier2 = struct_VkMemoryBarrier2
class struct_VkBufferMemoryBarrier2(Structure):
    pass

struct_VkBufferMemoryBarrier2._pack_ = 1 # source:False
struct_VkBufferMemoryBarrier2._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('srcStageMask', ctypes.c_uint64),
    ('srcAccessMask', ctypes.c_uint64),
    ('dstStageMask', ctypes.c_uint64),
    ('dstAccessMask', ctypes.c_uint64),
    ('srcQueueFamilyIndex', ctypes.c_uint32),
    ('dstQueueFamilyIndex', ctypes.c_uint32),
    ('buffer', ctypes.POINTER(struct_VkBuffer_T)),
    ('offset', ctypes.c_uint64),
    ('size', ctypes.c_uint64),
]

VkBufferMemoryBarrier2 = struct_VkBufferMemoryBarrier2
class struct_VkImageMemoryBarrier2(Structure):
    pass

struct_VkImageMemoryBarrier2._pack_ = 1 # source:False
struct_VkImageMemoryBarrier2._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('srcStageMask', ctypes.c_uint64),
    ('srcAccessMask', ctypes.c_uint64),
    ('dstStageMask', ctypes.c_uint64),
    ('dstAccessMask', ctypes.c_uint64),
    ('oldLayout', VkImageLayout),
    ('newLayout', VkImageLayout),
    ('srcQueueFamilyIndex', ctypes.c_uint32),
    ('dstQueueFamilyIndex', ctypes.c_uint32),
    ('image', ctypes.POINTER(struct_VkImage_T)),
    ('subresourceRange', VkImageSubresourceRange),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkImageMemoryBarrier2 = struct_VkImageMemoryBarrier2
class struct_VkDependencyInfo(Structure):
    pass

struct_VkDependencyInfo._pack_ = 1 # source:False
struct_VkDependencyInfo._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('dependencyFlags', ctypes.c_uint32),
    ('memoryBarrierCount', ctypes.c_uint32),
    ('pMemoryBarriers', ctypes.POINTER(struct_VkMemoryBarrier2)),
    ('bufferMemoryBarrierCount', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('pBufferMemoryBarriers', ctypes.POINTER(struct_VkBufferMemoryBarrier2)),
    ('imageMemoryBarrierCount', ctypes.c_uint32),
    ('PADDING_2', ctypes.c_ubyte * 4),
    ('pImageMemoryBarriers', ctypes.POINTER(struct_VkImageMemoryBarrier2)),
]

VkDependencyInfo = struct_VkDependencyInfo
class struct_VkSemaphoreSubmitInfo(Structure):
    pass

struct_VkSemaphoreSubmitInfo._pack_ = 1 # source:False
struct_VkSemaphoreSubmitInfo._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('semaphore', ctypes.POINTER(struct_VkSemaphore_T)),
    ('value', ctypes.c_uint64),
    ('stageMask', ctypes.c_uint64),
    ('deviceIndex', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkSemaphoreSubmitInfo = struct_VkSemaphoreSubmitInfo
class struct_VkCommandBufferSubmitInfo(Structure):
    pass

struct_VkCommandBufferSubmitInfo._pack_ = 1 # source:False
struct_VkCommandBufferSubmitInfo._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('commandBuffer', ctypes.POINTER(struct_VkCommandBuffer_T)),
    ('deviceMask', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkCommandBufferSubmitInfo = struct_VkCommandBufferSubmitInfo
class struct_VkSubmitInfo2(Structure):
    pass

struct_VkSubmitInfo2._pack_ = 1 # source:False
struct_VkSubmitInfo2._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('flags', ctypes.c_uint32),
    ('waitSemaphoreInfoCount', ctypes.c_uint32),
    ('pWaitSemaphoreInfos', ctypes.POINTER(struct_VkSemaphoreSubmitInfo)),
    ('commandBufferInfoCount', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('pCommandBufferInfos', ctypes.POINTER(struct_VkCommandBufferSubmitInfo)),
    ('signalSemaphoreInfoCount', ctypes.c_uint32),
    ('PADDING_2', ctypes.c_ubyte * 4),
    ('pSignalSemaphoreInfos', ctypes.POINTER(struct_VkSemaphoreSubmitInfo)),
]

VkSubmitInfo2 = struct_VkSubmitInfo2
class struct_VkPhysicalDeviceSynchronization2Features(Structure):
    pass

struct_VkPhysicalDeviceSynchronization2Features._pack_ = 1 # source:False
struct_VkPhysicalDeviceSynchronization2Features._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('synchronization2', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPhysicalDeviceSynchronization2Features = struct_VkPhysicalDeviceSynchronization2Features
class struct_VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures(Structure):
    pass

struct_VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures._pack_ = 1 # source:False
struct_VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('shaderZeroInitializeWorkgroupMemory', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures = struct_VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures
class struct_VkPhysicalDeviceImageRobustnessFeatures(Structure):
    pass

struct_VkPhysicalDeviceImageRobustnessFeatures._pack_ = 1 # source:False
struct_VkPhysicalDeviceImageRobustnessFeatures._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('robustImageAccess', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPhysicalDeviceImageRobustnessFeatures = struct_VkPhysicalDeviceImageRobustnessFeatures
class struct_VkBufferCopy2(Structure):
    pass

struct_VkBufferCopy2._pack_ = 1 # source:False
struct_VkBufferCopy2._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('srcOffset', ctypes.c_uint64),
    ('dstOffset', ctypes.c_uint64),
    ('size', ctypes.c_uint64),
]

VkBufferCopy2 = struct_VkBufferCopy2
class struct_VkCopyBufferInfo2(Structure):
    pass

struct_VkCopyBufferInfo2._pack_ = 1 # source:False
struct_VkCopyBufferInfo2._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('srcBuffer', ctypes.POINTER(struct_VkBuffer_T)),
    ('dstBuffer', ctypes.POINTER(struct_VkBuffer_T)),
    ('regionCount', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('pRegions', ctypes.POINTER(struct_VkBufferCopy2)),
]

VkCopyBufferInfo2 = struct_VkCopyBufferInfo2
class struct_VkImageCopy2(Structure):
    pass

struct_VkImageCopy2._pack_ = 1 # source:False
struct_VkImageCopy2._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('srcSubresource', VkImageSubresourceLayers),
    ('srcOffset', VkOffset3D),
    ('dstSubresource', VkImageSubresourceLayers),
    ('dstOffset', VkOffset3D),
    ('extent', VkExtent3D),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkImageCopy2 = struct_VkImageCopy2
class struct_VkCopyImageInfo2(Structure):
    pass

struct_VkCopyImageInfo2._pack_ = 1 # source:False
struct_VkCopyImageInfo2._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('srcImage', ctypes.POINTER(struct_VkImage_T)),
    ('srcImageLayout', VkImageLayout),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('dstImage', ctypes.POINTER(struct_VkImage_T)),
    ('dstImageLayout', VkImageLayout),
    ('regionCount', ctypes.c_uint32),
    ('pRegions', ctypes.POINTER(struct_VkImageCopy2)),
]

VkCopyImageInfo2 = struct_VkCopyImageInfo2
class struct_VkBufferImageCopy2(Structure):
    pass

struct_VkBufferImageCopy2._pack_ = 1 # source:False
struct_VkBufferImageCopy2._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('bufferOffset', ctypes.c_uint64),
    ('bufferRowLength', ctypes.c_uint32),
    ('bufferImageHeight', ctypes.c_uint32),
    ('imageSubresource', VkImageSubresourceLayers),
    ('imageOffset', VkOffset3D),
    ('imageExtent', VkExtent3D),
]

VkBufferImageCopy2 = struct_VkBufferImageCopy2
class struct_VkCopyBufferToImageInfo2(Structure):
    pass

struct_VkCopyBufferToImageInfo2._pack_ = 1 # source:False
struct_VkCopyBufferToImageInfo2._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('srcBuffer', ctypes.POINTER(struct_VkBuffer_T)),
    ('dstImage', ctypes.POINTER(struct_VkImage_T)),
    ('dstImageLayout', VkImageLayout),
    ('regionCount', ctypes.c_uint32),
    ('pRegions', ctypes.POINTER(struct_VkBufferImageCopy2)),
]

VkCopyBufferToImageInfo2 = struct_VkCopyBufferToImageInfo2
class struct_VkCopyImageToBufferInfo2(Structure):
    pass

struct_VkCopyImageToBufferInfo2._pack_ = 1 # source:False
struct_VkCopyImageToBufferInfo2._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('srcImage', ctypes.POINTER(struct_VkImage_T)),
    ('srcImageLayout', VkImageLayout),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('dstBuffer', ctypes.POINTER(struct_VkBuffer_T)),
    ('regionCount', ctypes.c_uint32),
    ('PADDING_2', ctypes.c_ubyte * 4),
    ('pRegions', ctypes.POINTER(struct_VkBufferImageCopy2)),
]

VkCopyImageToBufferInfo2 = struct_VkCopyImageToBufferInfo2
class struct_VkImageBlit2(Structure):
    pass

struct_VkImageBlit2._pack_ = 1 # source:False
struct_VkImageBlit2._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('srcSubresource', VkImageSubresourceLayers),
    ('srcOffsets', struct_VkOffset3D * 2),
    ('dstSubresource', VkImageSubresourceLayers),
    ('dstOffsets', struct_VkOffset3D * 2),
]

VkImageBlit2 = struct_VkImageBlit2
class struct_VkBlitImageInfo2(Structure):
    pass

struct_VkBlitImageInfo2._pack_ = 1 # source:False
struct_VkBlitImageInfo2._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('srcImage', ctypes.POINTER(struct_VkImage_T)),
    ('srcImageLayout', VkImageLayout),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('dstImage', ctypes.POINTER(struct_VkImage_T)),
    ('dstImageLayout', VkImageLayout),
    ('regionCount', ctypes.c_uint32),
    ('pRegions', ctypes.POINTER(struct_VkImageBlit2)),
    ('filter', VkFilter),
    ('PADDING_2', ctypes.c_ubyte * 4),
]

VkBlitImageInfo2 = struct_VkBlitImageInfo2
class struct_VkImageResolve2(Structure):
    pass

struct_VkImageResolve2._pack_ = 1 # source:False
struct_VkImageResolve2._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('srcSubresource', VkImageSubresourceLayers),
    ('srcOffset', VkOffset3D),
    ('dstSubresource', VkImageSubresourceLayers),
    ('dstOffset', VkOffset3D),
    ('extent', VkExtent3D),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkImageResolve2 = struct_VkImageResolve2
class struct_VkResolveImageInfo2(Structure):
    pass

struct_VkResolveImageInfo2._pack_ = 1 # source:False
struct_VkResolveImageInfo2._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('srcImage', ctypes.POINTER(struct_VkImage_T)),
    ('srcImageLayout', VkImageLayout),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('dstImage', ctypes.POINTER(struct_VkImage_T)),
    ('dstImageLayout', VkImageLayout),
    ('regionCount', ctypes.c_uint32),
    ('pRegions', ctypes.POINTER(struct_VkImageResolve2)),
]

VkResolveImageInfo2 = struct_VkResolveImageInfo2
class struct_VkPhysicalDeviceSubgroupSizeControlFeatures(Structure):
    pass

struct_VkPhysicalDeviceSubgroupSizeControlFeatures._pack_ = 1 # source:False
struct_VkPhysicalDeviceSubgroupSizeControlFeatures._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('subgroupSizeControl', ctypes.c_uint32),
    ('computeFullSubgroups', ctypes.c_uint32),
]

VkPhysicalDeviceSubgroupSizeControlFeatures = struct_VkPhysicalDeviceSubgroupSizeControlFeatures
class struct_VkPhysicalDeviceSubgroupSizeControlProperties(Structure):
    pass

struct_VkPhysicalDeviceSubgroupSizeControlProperties._pack_ = 1 # source:False
struct_VkPhysicalDeviceSubgroupSizeControlProperties._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('minSubgroupSize', ctypes.c_uint32),
    ('maxSubgroupSize', ctypes.c_uint32),
    ('maxComputeWorkgroupSubgroups', ctypes.c_uint32),
    ('requiredSubgroupSizeStages', ctypes.c_uint32),
]

VkPhysicalDeviceSubgroupSizeControlProperties = struct_VkPhysicalDeviceSubgroupSizeControlProperties
class struct_VkPipelineShaderStageRequiredSubgroupSizeCreateInfo(Structure):
    pass

struct_VkPipelineShaderStageRequiredSubgroupSizeCreateInfo._pack_ = 1 # source:False
struct_VkPipelineShaderStageRequiredSubgroupSizeCreateInfo._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('requiredSubgroupSize', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPipelineShaderStageRequiredSubgroupSizeCreateInfo = struct_VkPipelineShaderStageRequiredSubgroupSizeCreateInfo
class struct_VkPhysicalDeviceInlineUniformBlockFeatures(Structure):
    pass

struct_VkPhysicalDeviceInlineUniformBlockFeatures._pack_ = 1 # source:False
struct_VkPhysicalDeviceInlineUniformBlockFeatures._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('inlineUniformBlock', ctypes.c_uint32),
    ('descriptorBindingInlineUniformBlockUpdateAfterBind', ctypes.c_uint32),
]

VkPhysicalDeviceInlineUniformBlockFeatures = struct_VkPhysicalDeviceInlineUniformBlockFeatures
class struct_VkPhysicalDeviceInlineUniformBlockProperties(Structure):
    pass

struct_VkPhysicalDeviceInlineUniformBlockProperties._pack_ = 1 # source:False
struct_VkPhysicalDeviceInlineUniformBlockProperties._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('maxInlineUniformBlockSize', ctypes.c_uint32),
    ('maxPerStageDescriptorInlineUniformBlocks', ctypes.c_uint32),
    ('maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks', ctypes.c_uint32),
    ('maxDescriptorSetInlineUniformBlocks', ctypes.c_uint32),
    ('maxDescriptorSetUpdateAfterBindInlineUniformBlocks', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPhysicalDeviceInlineUniformBlockProperties = struct_VkPhysicalDeviceInlineUniformBlockProperties
class struct_VkWriteDescriptorSetInlineUniformBlock(Structure):
    pass

struct_VkWriteDescriptorSetInlineUniformBlock._pack_ = 1 # source:False
struct_VkWriteDescriptorSetInlineUniformBlock._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('dataSize', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('pData', ctypes.POINTER(None)),
]

VkWriteDescriptorSetInlineUniformBlock = struct_VkWriteDescriptorSetInlineUniformBlock
class struct_VkDescriptorPoolInlineUniformBlockCreateInfo(Structure):
    pass

struct_VkDescriptorPoolInlineUniformBlockCreateInfo._pack_ = 1 # source:False
struct_VkDescriptorPoolInlineUniformBlockCreateInfo._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('maxInlineUniformBlockBindings', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkDescriptorPoolInlineUniformBlockCreateInfo = struct_VkDescriptorPoolInlineUniformBlockCreateInfo
class struct_VkPhysicalDeviceTextureCompressionASTCHDRFeatures(Structure):
    pass

struct_VkPhysicalDeviceTextureCompressionASTCHDRFeatures._pack_ = 1 # source:False
struct_VkPhysicalDeviceTextureCompressionASTCHDRFeatures._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('textureCompressionASTC_HDR', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPhysicalDeviceTextureCompressionASTCHDRFeatures = struct_VkPhysicalDeviceTextureCompressionASTCHDRFeatures
class struct_VkRenderingAttachmentInfo(Structure):
    pass

struct_VkRenderingAttachmentInfo._pack_ = 1 # source:False
struct_VkRenderingAttachmentInfo._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('imageView', ctypes.POINTER(struct_VkImageView_T)),
    ('imageLayout', VkImageLayout),
    ('resolveMode', VkResolveModeFlagBits),
    ('resolveImageView', ctypes.POINTER(struct_VkImageView_T)),
    ('resolveImageLayout', VkImageLayout),
    ('loadOp', VkAttachmentLoadOp),
    ('storeOp', VkAttachmentStoreOp),
    ('clearValue', VkClearValue),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkRenderingAttachmentInfo = struct_VkRenderingAttachmentInfo
class struct_VkRenderingInfo(Structure):
    pass

struct_VkRenderingInfo._pack_ = 1 # source:False
struct_VkRenderingInfo._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('flags', ctypes.c_uint32),
    ('renderArea', VkRect2D),
    ('layerCount', ctypes.c_uint32),
    ('viewMask', ctypes.c_uint32),
    ('colorAttachmentCount', ctypes.c_uint32),
    ('pColorAttachments', ctypes.POINTER(struct_VkRenderingAttachmentInfo)),
    ('pDepthAttachment', ctypes.POINTER(struct_VkRenderingAttachmentInfo)),
    ('pStencilAttachment', ctypes.POINTER(struct_VkRenderingAttachmentInfo)),
]

VkRenderingInfo = struct_VkRenderingInfo
class struct_VkPipelineRenderingCreateInfo(Structure):
    pass

struct_VkPipelineRenderingCreateInfo._pack_ = 1 # source:False
struct_VkPipelineRenderingCreateInfo._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('viewMask', ctypes.c_uint32),
    ('colorAttachmentCount', ctypes.c_uint32),
    ('pColorAttachmentFormats', ctypes.POINTER(VkFormat)),
    ('depthAttachmentFormat', VkFormat),
    ('stencilAttachmentFormat', VkFormat),
]

VkPipelineRenderingCreateInfo = struct_VkPipelineRenderingCreateInfo
class struct_VkPhysicalDeviceDynamicRenderingFeatures(Structure):
    pass

struct_VkPhysicalDeviceDynamicRenderingFeatures._pack_ = 1 # source:False
struct_VkPhysicalDeviceDynamicRenderingFeatures._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('dynamicRendering', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPhysicalDeviceDynamicRenderingFeatures = struct_VkPhysicalDeviceDynamicRenderingFeatures
class struct_VkCommandBufferInheritanceRenderingInfo(Structure):
    pass

struct_VkCommandBufferInheritanceRenderingInfo._pack_ = 1 # source:False
struct_VkCommandBufferInheritanceRenderingInfo._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('flags', ctypes.c_uint32),
    ('viewMask', ctypes.c_uint32),
    ('colorAttachmentCount', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('pColorAttachmentFormats', ctypes.POINTER(VkFormat)),
    ('depthAttachmentFormat', VkFormat),
    ('stencilAttachmentFormat', VkFormat),
    ('rasterizationSamples', VkSampleCountFlagBits),
    ('PADDING_2', ctypes.c_ubyte * 4),
]

VkCommandBufferInheritanceRenderingInfo = struct_VkCommandBufferInheritanceRenderingInfo
class struct_VkPhysicalDeviceShaderIntegerDotProductFeatures(Structure):
    pass

struct_VkPhysicalDeviceShaderIntegerDotProductFeatures._pack_ = 1 # source:False
struct_VkPhysicalDeviceShaderIntegerDotProductFeatures._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('shaderIntegerDotProduct', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPhysicalDeviceShaderIntegerDotProductFeatures = struct_VkPhysicalDeviceShaderIntegerDotProductFeatures
class struct_VkPhysicalDeviceShaderIntegerDotProductProperties(Structure):
    pass

struct_VkPhysicalDeviceShaderIntegerDotProductProperties._pack_ = 1 # source:False
struct_VkPhysicalDeviceShaderIntegerDotProductProperties._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('integerDotProduct8BitUnsignedAccelerated', ctypes.c_uint32),
    ('integerDotProduct8BitSignedAccelerated', ctypes.c_uint32),
    ('integerDotProduct8BitMixedSignednessAccelerated', ctypes.c_uint32),
    ('integerDotProduct4x8BitPackedUnsignedAccelerated', ctypes.c_uint32),
    ('integerDotProduct4x8BitPackedSignedAccelerated', ctypes.c_uint32),
    ('integerDotProduct4x8BitPackedMixedSignednessAccelerated', ctypes.c_uint32),
    ('integerDotProduct16BitUnsignedAccelerated', ctypes.c_uint32),
    ('integerDotProduct16BitSignedAccelerated', ctypes.c_uint32),
    ('integerDotProduct16BitMixedSignednessAccelerated', ctypes.c_uint32),
    ('integerDotProduct32BitUnsignedAccelerated', ctypes.c_uint32),
    ('integerDotProduct32BitSignedAccelerated', ctypes.c_uint32),
    ('integerDotProduct32BitMixedSignednessAccelerated', ctypes.c_uint32),
    ('integerDotProduct64BitUnsignedAccelerated', ctypes.c_uint32),
    ('integerDotProduct64BitSignedAccelerated', ctypes.c_uint32),
    ('integerDotProduct64BitMixedSignednessAccelerated', ctypes.c_uint32),
    ('integerDotProductAccumulatingSaturating8BitUnsignedAccelerated', ctypes.c_uint32),
    ('integerDotProductAccumulatingSaturating8BitSignedAccelerated', ctypes.c_uint32),
    ('integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated', ctypes.c_uint32),
    ('integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated', ctypes.c_uint32),
    ('integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated', ctypes.c_uint32),
    ('integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated', ctypes.c_uint32),
    ('integerDotProductAccumulatingSaturating16BitUnsignedAccelerated', ctypes.c_uint32),
    ('integerDotProductAccumulatingSaturating16BitSignedAccelerated', ctypes.c_uint32),
    ('integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated', ctypes.c_uint32),
    ('integerDotProductAccumulatingSaturating32BitUnsignedAccelerated', ctypes.c_uint32),
    ('integerDotProductAccumulatingSaturating32BitSignedAccelerated', ctypes.c_uint32),
    ('integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated', ctypes.c_uint32),
    ('integerDotProductAccumulatingSaturating64BitUnsignedAccelerated', ctypes.c_uint32),
    ('integerDotProductAccumulatingSaturating64BitSignedAccelerated', ctypes.c_uint32),
    ('integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated', ctypes.c_uint32),
]

VkPhysicalDeviceShaderIntegerDotProductProperties = struct_VkPhysicalDeviceShaderIntegerDotProductProperties
class struct_VkPhysicalDeviceTexelBufferAlignmentProperties(Structure):
    pass

struct_VkPhysicalDeviceTexelBufferAlignmentProperties._pack_ = 1 # source:False
struct_VkPhysicalDeviceTexelBufferAlignmentProperties._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('storageTexelBufferOffsetAlignmentBytes', ctypes.c_uint64),
    ('storageTexelBufferOffsetSingleTexelAlignment', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('uniformTexelBufferOffsetAlignmentBytes', ctypes.c_uint64),
    ('uniformTexelBufferOffsetSingleTexelAlignment', ctypes.c_uint32),
    ('PADDING_2', ctypes.c_ubyte * 4),
]

VkPhysicalDeviceTexelBufferAlignmentProperties = struct_VkPhysicalDeviceTexelBufferAlignmentProperties
class struct_VkFormatProperties3(Structure):
    pass

struct_VkFormatProperties3._pack_ = 1 # source:False
struct_VkFormatProperties3._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('linearTilingFeatures', ctypes.c_uint64),
    ('optimalTilingFeatures', ctypes.c_uint64),
    ('bufferFeatures', ctypes.c_uint64),
]

VkFormatProperties3 = struct_VkFormatProperties3
class struct_VkPhysicalDeviceMaintenance4Features(Structure):
    pass

struct_VkPhysicalDeviceMaintenance4Features._pack_ = 1 # source:False
struct_VkPhysicalDeviceMaintenance4Features._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('maintenance4', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPhysicalDeviceMaintenance4Features = struct_VkPhysicalDeviceMaintenance4Features
class struct_VkPhysicalDeviceMaintenance4Properties(Structure):
    pass

struct_VkPhysicalDeviceMaintenance4Properties._pack_ = 1 # source:False
struct_VkPhysicalDeviceMaintenance4Properties._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('maxBufferSize', ctypes.c_uint64),
]

VkPhysicalDeviceMaintenance4Properties = struct_VkPhysicalDeviceMaintenance4Properties
class struct_VkDeviceBufferMemoryRequirements(Structure):
    pass

struct_VkDeviceBufferMemoryRequirements._pack_ = 1 # source:False
struct_VkDeviceBufferMemoryRequirements._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('pCreateInfo', ctypes.POINTER(struct_VkBufferCreateInfo)),
]

VkDeviceBufferMemoryRequirements = struct_VkDeviceBufferMemoryRequirements
class struct_VkDeviceImageMemoryRequirements(Structure):
    pass

struct_VkDeviceImageMemoryRequirements._pack_ = 1 # source:False
struct_VkDeviceImageMemoryRequirements._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('pCreateInfo', ctypes.POINTER(struct_VkImageCreateInfo)),
    ('planeAspect', VkImageAspectFlagBits),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkDeviceImageMemoryRequirements = struct_VkDeviceImageMemoryRequirements
PFN_vkGetPhysicalDeviceToolProperties = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkPhysicalDevice_T), ctypes.POINTER(ctypes.c_uint32), ctypes.POINTER(struct_VkPhysicalDeviceToolProperties))
PFN_vkCreatePrivateDataSlot = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkPrivateDataSlotCreateInfo), ctypes.POINTER(struct_VkAllocationCallbacks), ctypes.POINTER(ctypes.POINTER(struct_VkPrivateDataSlot_T)))
PFN_vkDestroyPrivateDataSlot = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkPrivateDataSlot_T), ctypes.POINTER(struct_VkAllocationCallbacks))
PFN_vkSetPrivateData = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkDevice_T), VkObjectType, ctypes.c_uint64, ctypes.POINTER(struct_VkPrivateDataSlot_T), ctypes.c_uint64)
PFN_vkGetPrivateData = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkDevice_T), VkObjectType, ctypes.c_uint64, ctypes.POINTER(struct_VkPrivateDataSlot_T), ctypes.POINTER(ctypes.c_uint64))
PFN_vkCmdSetEvent2 = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.POINTER(struct_VkEvent_T), ctypes.POINTER(struct_VkDependencyInfo))
PFN_vkCmdResetEvent2 = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.POINTER(struct_VkEvent_T), ctypes.c_uint64)
PFN_vkCmdWaitEvents2 = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.c_uint32, ctypes.POINTER(ctypes.POINTER(struct_VkEvent_T)), ctypes.POINTER(struct_VkDependencyInfo))
PFN_vkCmdPipelineBarrier2 = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.POINTER(struct_VkDependencyInfo))
PFN_vkCmdWriteTimestamp2 = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.c_uint64, ctypes.POINTER(struct_VkQueryPool_T), ctypes.c_uint32)
PFN_vkQueueSubmit2 = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkQueue_T), ctypes.c_uint32, ctypes.POINTER(struct_VkSubmitInfo2), ctypes.POINTER(struct_VkFence_T))
PFN_vkCmdCopyBuffer2 = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.POINTER(struct_VkCopyBufferInfo2))
PFN_vkCmdCopyImage2 = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.POINTER(struct_VkCopyImageInfo2))
PFN_vkCmdCopyBufferToImage2 = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.POINTER(struct_VkCopyBufferToImageInfo2))
PFN_vkCmdCopyImageToBuffer2 = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.POINTER(struct_VkCopyImageToBufferInfo2))
PFN_vkCmdBlitImage2 = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.POINTER(struct_VkBlitImageInfo2))
PFN_vkCmdResolveImage2 = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.POINTER(struct_VkResolveImageInfo2))
PFN_vkCmdBeginRendering = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.POINTER(struct_VkRenderingInfo))
PFN_vkCmdEndRendering = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T))
PFN_vkCmdSetCullMode = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.c_uint32)
PFN_vkCmdSetFrontFace = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), VkFrontFace)
PFN_vkCmdSetPrimitiveTopology = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), VkPrimitiveTopology)
PFN_vkCmdSetViewportWithCount = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.c_uint32, ctypes.POINTER(struct_VkViewport))
PFN_vkCmdSetScissorWithCount = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.c_uint32, ctypes.POINTER(struct_VkRect2D))
PFN_vkCmdBindVertexBuffers2 = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.c_uint32, ctypes.c_uint32, ctypes.POINTER(ctypes.POINTER(struct_VkBuffer_T)), ctypes.POINTER(ctypes.c_uint64), ctypes.POINTER(ctypes.c_uint64), ctypes.POINTER(ctypes.c_uint64))
PFN_vkCmdSetDepthTestEnable = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.c_uint32)
PFN_vkCmdSetDepthWriteEnable = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.c_uint32)
PFN_vkCmdSetDepthCompareOp = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), VkCompareOp)
PFN_vkCmdSetDepthBoundsTestEnable = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.c_uint32)
PFN_vkCmdSetStencilTestEnable = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.c_uint32)
PFN_vkCmdSetStencilOp = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.c_uint32, VkStencilOp, VkStencilOp, VkStencilOp, VkCompareOp)
PFN_vkCmdSetRasterizerDiscardEnable = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.c_uint32)
PFN_vkCmdSetDepthBiasEnable = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.c_uint32)
PFN_vkCmdSetPrimitiveRestartEnable = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.c_uint32)
PFN_vkGetDeviceBufferMemoryRequirements = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkDeviceBufferMemoryRequirements), ctypes.POINTER(struct_VkMemoryRequirements2))
PFN_vkGetDeviceImageMemoryRequirements = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkDeviceImageMemoryRequirements), ctypes.POINTER(struct_VkMemoryRequirements2))
PFN_vkGetDeviceImageSparseMemoryRequirements = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkDeviceImageMemoryRequirements), ctypes.POINTER(ctypes.c_uint32), ctypes.POINTER(struct_VkSparseImageMemoryRequirements2))
try:
    vkGetPhysicalDeviceToolProperties = _libraries['libvulkan.so.1'].vkGetPhysicalDeviceToolProperties
    vkGetPhysicalDeviceToolProperties.restype = VkResult
    vkGetPhysicalDeviceToolProperties.argtypes = [VkPhysicalDevice, ctypes.POINTER(ctypes.c_uint32), ctypes.POINTER(struct_VkPhysicalDeviceToolProperties)]
except AttributeError:
    pass
try:
    vkCreatePrivateDataSlot = _libraries['libvulkan.so.1'].vkCreatePrivateDataSlot
    vkCreatePrivateDataSlot.restype = VkResult
    vkCreatePrivateDataSlot.argtypes = [VkDevice, ctypes.POINTER(struct_VkPrivateDataSlotCreateInfo), ctypes.POINTER(struct_VkAllocationCallbacks), ctypes.POINTER(ctypes.POINTER(struct_VkPrivateDataSlot_T))]
except AttributeError:
    pass
try:
    vkDestroyPrivateDataSlot = _libraries['libvulkan.so.1'].vkDestroyPrivateDataSlot
    vkDestroyPrivateDataSlot.restype = None
    vkDestroyPrivateDataSlot.argtypes = [VkDevice, VkPrivateDataSlot, ctypes.POINTER(struct_VkAllocationCallbacks)]
except AttributeError:
    pass
try:
    vkSetPrivateData = _libraries['libvulkan.so.1'].vkSetPrivateData
    vkSetPrivateData.restype = VkResult
    vkSetPrivateData.argtypes = [VkDevice, VkObjectType, uint64_t, VkPrivateDataSlot, uint64_t]
except AttributeError:
    pass
try:
    vkGetPrivateData = _libraries['libvulkan.so.1'].vkGetPrivateData
    vkGetPrivateData.restype = None
    vkGetPrivateData.argtypes = [VkDevice, VkObjectType, uint64_t, VkPrivateDataSlot, ctypes.POINTER(ctypes.c_uint64)]
except AttributeError:
    pass
try:
    vkCmdSetEvent2 = _libraries['libvulkan.so.1'].vkCmdSetEvent2
    vkCmdSetEvent2.restype = None
    vkCmdSetEvent2.argtypes = [VkCommandBuffer, VkEvent, ctypes.POINTER(struct_VkDependencyInfo)]
except AttributeError:
    pass
try:
    vkCmdResetEvent2 = _libraries['libvulkan.so.1'].vkCmdResetEvent2
    vkCmdResetEvent2.restype = None
    vkCmdResetEvent2.argtypes = [VkCommandBuffer, VkEvent, VkPipelineStageFlags2]
except AttributeError:
    pass
try:
    vkCmdWaitEvents2 = _libraries['libvulkan.so.1'].vkCmdWaitEvents2
    vkCmdWaitEvents2.restype = None
    vkCmdWaitEvents2.argtypes = [VkCommandBuffer, uint32_t, ctypes.POINTER(ctypes.POINTER(struct_VkEvent_T)), ctypes.POINTER(struct_VkDependencyInfo)]
except AttributeError:
    pass
try:
    vkCmdPipelineBarrier2 = _libraries['libvulkan.so.1'].vkCmdPipelineBarrier2
    vkCmdPipelineBarrier2.restype = None
    vkCmdPipelineBarrier2.argtypes = [VkCommandBuffer, ctypes.POINTER(struct_VkDependencyInfo)]
except AttributeError:
    pass
try:
    vkCmdWriteTimestamp2 = _libraries['libvulkan.so.1'].vkCmdWriteTimestamp2
    vkCmdWriteTimestamp2.restype = None
    vkCmdWriteTimestamp2.argtypes = [VkCommandBuffer, VkPipelineStageFlags2, VkQueryPool, uint32_t]
except AttributeError:
    pass
try:
    vkQueueSubmit2 = _libraries['libvulkan.so.1'].vkQueueSubmit2
    vkQueueSubmit2.restype = VkResult
    vkQueueSubmit2.argtypes = [VkQueue, uint32_t, ctypes.POINTER(struct_VkSubmitInfo2), VkFence]
except AttributeError:
    pass
try:
    vkCmdCopyBuffer2 = _libraries['libvulkan.so.1'].vkCmdCopyBuffer2
    vkCmdCopyBuffer2.restype = None
    vkCmdCopyBuffer2.argtypes = [VkCommandBuffer, ctypes.POINTER(struct_VkCopyBufferInfo2)]
except AttributeError:
    pass
try:
    vkCmdCopyImage2 = _libraries['libvulkan.so.1'].vkCmdCopyImage2
    vkCmdCopyImage2.restype = None
    vkCmdCopyImage2.argtypes = [VkCommandBuffer, ctypes.POINTER(struct_VkCopyImageInfo2)]
except AttributeError:
    pass
try:
    vkCmdCopyBufferToImage2 = _libraries['libvulkan.so.1'].vkCmdCopyBufferToImage2
    vkCmdCopyBufferToImage2.restype = None
    vkCmdCopyBufferToImage2.argtypes = [VkCommandBuffer, ctypes.POINTER(struct_VkCopyBufferToImageInfo2)]
except AttributeError:
    pass
try:
    vkCmdCopyImageToBuffer2 = _libraries['libvulkan.so.1'].vkCmdCopyImageToBuffer2
    vkCmdCopyImageToBuffer2.restype = None
    vkCmdCopyImageToBuffer2.argtypes = [VkCommandBuffer, ctypes.POINTER(struct_VkCopyImageToBufferInfo2)]
except AttributeError:
    pass
try:
    vkCmdBlitImage2 = _libraries['libvulkan.so.1'].vkCmdBlitImage2
    vkCmdBlitImage2.restype = None
    vkCmdBlitImage2.argtypes = [VkCommandBuffer, ctypes.POINTER(struct_VkBlitImageInfo2)]
except AttributeError:
    pass
try:
    vkCmdResolveImage2 = _libraries['libvulkan.so.1'].vkCmdResolveImage2
    vkCmdResolveImage2.restype = None
    vkCmdResolveImage2.argtypes = [VkCommandBuffer, ctypes.POINTER(struct_VkResolveImageInfo2)]
except AttributeError:
    pass
try:
    vkCmdBeginRendering = _libraries['libvulkan.so.1'].vkCmdBeginRendering
    vkCmdBeginRendering.restype = None
    vkCmdBeginRendering.argtypes = [VkCommandBuffer, ctypes.POINTER(struct_VkRenderingInfo)]
except AttributeError:
    pass
try:
    vkCmdEndRendering = _libraries['libvulkan.so.1'].vkCmdEndRendering
    vkCmdEndRendering.restype = None
    vkCmdEndRendering.argtypes = [VkCommandBuffer]
except AttributeError:
    pass
try:
    vkCmdSetCullMode = _libraries['libvulkan.so.1'].vkCmdSetCullMode
    vkCmdSetCullMode.restype = None
    vkCmdSetCullMode.argtypes = [VkCommandBuffer, VkCullModeFlags]
except AttributeError:
    pass
try:
    vkCmdSetFrontFace = _libraries['libvulkan.so.1'].vkCmdSetFrontFace
    vkCmdSetFrontFace.restype = None
    vkCmdSetFrontFace.argtypes = [VkCommandBuffer, VkFrontFace]
except AttributeError:
    pass
try:
    vkCmdSetPrimitiveTopology = _libraries['libvulkan.so.1'].vkCmdSetPrimitiveTopology
    vkCmdSetPrimitiveTopology.restype = None
    vkCmdSetPrimitiveTopology.argtypes = [VkCommandBuffer, VkPrimitiveTopology]
except AttributeError:
    pass
try:
    vkCmdSetViewportWithCount = _libraries['libvulkan.so.1'].vkCmdSetViewportWithCount
    vkCmdSetViewportWithCount.restype = None
    vkCmdSetViewportWithCount.argtypes = [VkCommandBuffer, uint32_t, ctypes.POINTER(struct_VkViewport)]
except AttributeError:
    pass
try:
    vkCmdSetScissorWithCount = _libraries['libvulkan.so.1'].vkCmdSetScissorWithCount
    vkCmdSetScissorWithCount.restype = None
    vkCmdSetScissorWithCount.argtypes = [VkCommandBuffer, uint32_t, ctypes.POINTER(struct_VkRect2D)]
except AttributeError:
    pass
try:
    vkCmdBindVertexBuffers2 = _libraries['libvulkan.so.1'].vkCmdBindVertexBuffers2
    vkCmdBindVertexBuffers2.restype = None
    vkCmdBindVertexBuffers2.argtypes = [VkCommandBuffer, uint32_t, uint32_t, ctypes.POINTER(ctypes.POINTER(struct_VkBuffer_T)), ctypes.POINTER(ctypes.c_uint64), ctypes.POINTER(ctypes.c_uint64), ctypes.POINTER(ctypes.c_uint64)]
except AttributeError:
    pass
try:
    vkCmdSetDepthTestEnable = _libraries['libvulkan.so.1'].vkCmdSetDepthTestEnable
    vkCmdSetDepthTestEnable.restype = None
    vkCmdSetDepthTestEnable.argtypes = [VkCommandBuffer, VkBool32]
except AttributeError:
    pass
try:
    vkCmdSetDepthWriteEnable = _libraries['libvulkan.so.1'].vkCmdSetDepthWriteEnable
    vkCmdSetDepthWriteEnable.restype = None
    vkCmdSetDepthWriteEnable.argtypes = [VkCommandBuffer, VkBool32]
except AttributeError:
    pass
try:
    vkCmdSetDepthCompareOp = _libraries['libvulkan.so.1'].vkCmdSetDepthCompareOp
    vkCmdSetDepthCompareOp.restype = None
    vkCmdSetDepthCompareOp.argtypes = [VkCommandBuffer, VkCompareOp]
except AttributeError:
    pass
try:
    vkCmdSetDepthBoundsTestEnable = _libraries['libvulkan.so.1'].vkCmdSetDepthBoundsTestEnable
    vkCmdSetDepthBoundsTestEnable.restype = None
    vkCmdSetDepthBoundsTestEnable.argtypes = [VkCommandBuffer, VkBool32]
except AttributeError:
    pass
try:
    vkCmdSetStencilTestEnable = _libraries['libvulkan.so.1'].vkCmdSetStencilTestEnable
    vkCmdSetStencilTestEnable.restype = None
    vkCmdSetStencilTestEnable.argtypes = [VkCommandBuffer, VkBool32]
except AttributeError:
    pass
try:
    vkCmdSetStencilOp = _libraries['libvulkan.so.1'].vkCmdSetStencilOp
    vkCmdSetStencilOp.restype = None
    vkCmdSetStencilOp.argtypes = [VkCommandBuffer, VkStencilFaceFlags, VkStencilOp, VkStencilOp, VkStencilOp, VkCompareOp]
except AttributeError:
    pass
try:
    vkCmdSetRasterizerDiscardEnable = _libraries['libvulkan.so.1'].vkCmdSetRasterizerDiscardEnable
    vkCmdSetRasterizerDiscardEnable.restype = None
    vkCmdSetRasterizerDiscardEnable.argtypes = [VkCommandBuffer, VkBool32]
except AttributeError:
    pass
try:
    vkCmdSetDepthBiasEnable = _libraries['libvulkan.so.1'].vkCmdSetDepthBiasEnable
    vkCmdSetDepthBiasEnable.restype = None
    vkCmdSetDepthBiasEnable.argtypes = [VkCommandBuffer, VkBool32]
except AttributeError:
    pass
try:
    vkCmdSetPrimitiveRestartEnable = _libraries['libvulkan.so.1'].vkCmdSetPrimitiveRestartEnable
    vkCmdSetPrimitiveRestartEnable.restype = None
    vkCmdSetPrimitiveRestartEnable.argtypes = [VkCommandBuffer, VkBool32]
except AttributeError:
    pass
try:
    vkGetDeviceBufferMemoryRequirements = _libraries['libvulkan.so.1'].vkGetDeviceBufferMemoryRequirements
    vkGetDeviceBufferMemoryRequirements.restype = None
    vkGetDeviceBufferMemoryRequirements.argtypes = [VkDevice, ctypes.POINTER(struct_VkDeviceBufferMemoryRequirements), ctypes.POINTER(struct_VkMemoryRequirements2)]
except AttributeError:
    pass
try:
    vkGetDeviceImageMemoryRequirements = _libraries['libvulkan.so.1'].vkGetDeviceImageMemoryRequirements
    vkGetDeviceImageMemoryRequirements.restype = None
    vkGetDeviceImageMemoryRequirements.argtypes = [VkDevice, ctypes.POINTER(struct_VkDeviceImageMemoryRequirements), ctypes.POINTER(struct_VkMemoryRequirements2)]
except AttributeError:
    pass
try:
    vkGetDeviceImageSparseMemoryRequirements = _libraries['libvulkan.so.1'].vkGetDeviceImageSparseMemoryRequirements
    vkGetDeviceImageSparseMemoryRequirements.restype = None
    vkGetDeviceImageSparseMemoryRequirements.argtypes = [VkDevice, ctypes.POINTER(struct_VkDeviceImageMemoryRequirements), ctypes.POINTER(ctypes.c_uint32), ctypes.POINTER(struct_VkSparseImageMemoryRequirements2)]
except AttributeError:
    pass
class struct_VkSurfaceKHR_T(Structure):
    pass

VkSurfaceKHR = ctypes.POINTER(struct_VkSurfaceKHR_T)

# values for enumeration 'VkPresentModeKHR'
VkPresentModeKHR__enumvalues = {
    0: 'VK_PRESENT_MODE_IMMEDIATE_KHR',
    1: 'VK_PRESENT_MODE_MAILBOX_KHR',
    2: 'VK_PRESENT_MODE_FIFO_KHR',
    3: 'VK_PRESENT_MODE_FIFO_RELAXED_KHR',
    1000111000: 'VK_PRESENT_MODE_SHARED_DEMAND_REFRESH_KHR',
    1000111001: 'VK_PRESENT_MODE_SHARED_CONTINUOUS_REFRESH_KHR',
    2147483647: 'VK_PRESENT_MODE_MAX_ENUM_KHR',
}
VK_PRESENT_MODE_IMMEDIATE_KHR = 0
VK_PRESENT_MODE_MAILBOX_KHR = 1
VK_PRESENT_MODE_FIFO_KHR = 2
VK_PRESENT_MODE_FIFO_RELAXED_KHR = 3
VK_PRESENT_MODE_SHARED_DEMAND_REFRESH_KHR = 1000111000
VK_PRESENT_MODE_SHARED_CONTINUOUS_REFRESH_KHR = 1000111001
VK_PRESENT_MODE_MAX_ENUM_KHR = 2147483647
VkPresentModeKHR = ctypes.c_uint32 # enum

# values for enumeration 'VkColorSpaceKHR'
VkColorSpaceKHR__enumvalues = {
    0: 'VK_COLOR_SPACE_SRGB_NONLINEAR_KHR',
    1000104001: 'VK_COLOR_SPACE_DISPLAY_P3_NONLINEAR_EXT',
    1000104002: 'VK_COLOR_SPACE_EXTENDED_SRGB_LINEAR_EXT',
    1000104003: 'VK_COLOR_SPACE_DISPLAY_P3_LINEAR_EXT',
    1000104004: 'VK_COLOR_SPACE_DCI_P3_NONLINEAR_EXT',
    1000104005: 'VK_COLOR_SPACE_BT709_LINEAR_EXT',
    1000104006: 'VK_COLOR_SPACE_BT709_NONLINEAR_EXT',
    1000104007: 'VK_COLOR_SPACE_BT2020_LINEAR_EXT',
    1000104008: 'VK_COLOR_SPACE_HDR10_ST2084_EXT',
    1000104009: 'VK_COLOR_SPACE_DOLBYVISION_EXT',
    1000104010: 'VK_COLOR_SPACE_HDR10_HLG_EXT',
    1000104011: 'VK_COLOR_SPACE_ADOBERGB_LINEAR_EXT',
    1000104012: 'VK_COLOR_SPACE_ADOBERGB_NONLINEAR_EXT',
    1000104013: 'VK_COLOR_SPACE_PASS_THROUGH_EXT',
    1000104014: 'VK_COLOR_SPACE_EXTENDED_SRGB_NONLINEAR_EXT',
    1000213000: 'VK_COLOR_SPACE_DISPLAY_NATIVE_AMD',
    0: 'VK_COLORSPACE_SRGB_NONLINEAR_KHR',
    1000104003: 'VK_COLOR_SPACE_DCI_P3_LINEAR_EXT',
    2147483647: 'VK_COLOR_SPACE_MAX_ENUM_KHR',
}
VK_COLOR_SPACE_SRGB_NONLINEAR_KHR = 0
VK_COLOR_SPACE_DISPLAY_P3_NONLINEAR_EXT = 1000104001
VK_COLOR_SPACE_EXTENDED_SRGB_LINEAR_EXT = 1000104002
VK_COLOR_SPACE_DISPLAY_P3_LINEAR_EXT = 1000104003
VK_COLOR_SPACE_DCI_P3_NONLINEAR_EXT = 1000104004
VK_COLOR_SPACE_BT709_LINEAR_EXT = 1000104005
VK_COLOR_SPACE_BT709_NONLINEAR_EXT = 1000104006
VK_COLOR_SPACE_BT2020_LINEAR_EXT = 1000104007
VK_COLOR_SPACE_HDR10_ST2084_EXT = 1000104008
VK_COLOR_SPACE_DOLBYVISION_EXT = 1000104009
VK_COLOR_SPACE_HDR10_HLG_EXT = 1000104010
VK_COLOR_SPACE_ADOBERGB_LINEAR_EXT = 1000104011
VK_COLOR_SPACE_ADOBERGB_NONLINEAR_EXT = 1000104012
VK_COLOR_SPACE_PASS_THROUGH_EXT = 1000104013
VK_COLOR_SPACE_EXTENDED_SRGB_NONLINEAR_EXT = 1000104014
VK_COLOR_SPACE_DISPLAY_NATIVE_AMD = 1000213000
VK_COLORSPACE_SRGB_NONLINEAR_KHR = 0
VK_COLOR_SPACE_DCI_P3_LINEAR_EXT = 1000104003
VK_COLOR_SPACE_MAX_ENUM_KHR = 2147483647
VkColorSpaceKHR = ctypes.c_uint32 # enum

# values for enumeration 'VkSurfaceTransformFlagBitsKHR'
VkSurfaceTransformFlagBitsKHR__enumvalues = {
    1: 'VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR',
    2: 'VK_SURFACE_TRANSFORM_ROTATE_90_BIT_KHR',
    4: 'VK_SURFACE_TRANSFORM_ROTATE_180_BIT_KHR',
    8: 'VK_SURFACE_TRANSFORM_ROTATE_270_BIT_KHR',
    16: 'VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_BIT_KHR',
    32: 'VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_90_BIT_KHR',
    64: 'VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_180_BIT_KHR',
    128: 'VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_270_BIT_KHR',
    256: 'VK_SURFACE_TRANSFORM_INHERIT_BIT_KHR',
    2147483647: 'VK_SURFACE_TRANSFORM_FLAG_BITS_MAX_ENUM_KHR',
}
VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR = 1
VK_SURFACE_TRANSFORM_ROTATE_90_BIT_KHR = 2
VK_SURFACE_TRANSFORM_ROTATE_180_BIT_KHR = 4
VK_SURFACE_TRANSFORM_ROTATE_270_BIT_KHR = 8
VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_BIT_KHR = 16
VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_90_BIT_KHR = 32
VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_180_BIT_KHR = 64
VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_270_BIT_KHR = 128
VK_SURFACE_TRANSFORM_INHERIT_BIT_KHR = 256
VK_SURFACE_TRANSFORM_FLAG_BITS_MAX_ENUM_KHR = 2147483647
VkSurfaceTransformFlagBitsKHR = ctypes.c_uint32 # enum

# values for enumeration 'VkCompositeAlphaFlagBitsKHR'
VkCompositeAlphaFlagBitsKHR__enumvalues = {
    1: 'VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR',
    2: 'VK_COMPOSITE_ALPHA_PRE_MULTIPLIED_BIT_KHR',
    4: 'VK_COMPOSITE_ALPHA_POST_MULTIPLIED_BIT_KHR',
    8: 'VK_COMPOSITE_ALPHA_INHERIT_BIT_KHR',
    2147483647: 'VK_COMPOSITE_ALPHA_FLAG_BITS_MAX_ENUM_KHR',
}
VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR = 1
VK_COMPOSITE_ALPHA_PRE_MULTIPLIED_BIT_KHR = 2
VK_COMPOSITE_ALPHA_POST_MULTIPLIED_BIT_KHR = 4
VK_COMPOSITE_ALPHA_INHERIT_BIT_KHR = 8
VK_COMPOSITE_ALPHA_FLAG_BITS_MAX_ENUM_KHR = 2147483647
VkCompositeAlphaFlagBitsKHR = ctypes.c_uint32 # enum
VkCompositeAlphaFlagsKHR = ctypes.c_uint32
VkSurfaceTransformFlagsKHR = ctypes.c_uint32
class struct_VkSurfaceCapabilitiesKHR(Structure):
    pass

struct_VkSurfaceCapabilitiesKHR._pack_ = 1 # source:False
struct_VkSurfaceCapabilitiesKHR._fields_ = [
    ('minImageCount', ctypes.c_uint32),
    ('maxImageCount', ctypes.c_uint32),
    ('currentExtent', VkExtent2D),
    ('minImageExtent', VkExtent2D),
    ('maxImageExtent', VkExtent2D),
    ('maxImageArrayLayers', ctypes.c_uint32),
    ('supportedTransforms', ctypes.c_uint32),
    ('currentTransform', VkSurfaceTransformFlagBitsKHR),
    ('supportedCompositeAlpha', ctypes.c_uint32),
    ('supportedUsageFlags', ctypes.c_uint32),
]

VkSurfaceCapabilitiesKHR = struct_VkSurfaceCapabilitiesKHR
class struct_VkSurfaceFormatKHR(Structure):
    _pack_ = 1 # source:False
    _fields_ = [
    ('format', VkFormat),
    ('colorSpace', VkColorSpaceKHR),
     ]

VkSurfaceFormatKHR = struct_VkSurfaceFormatKHR
PFN_vkDestroySurfaceKHR = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkInstance_T), ctypes.POINTER(struct_VkSurfaceKHR_T), ctypes.POINTER(struct_VkAllocationCallbacks))
PFN_vkGetPhysicalDeviceSurfaceSupportKHR = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkPhysicalDevice_T), ctypes.c_uint32, ctypes.POINTER(struct_VkSurfaceKHR_T), ctypes.POINTER(ctypes.c_uint32))
PFN_vkGetPhysicalDeviceSurfaceCapabilitiesKHR = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkPhysicalDevice_T), ctypes.POINTER(struct_VkSurfaceKHR_T), ctypes.POINTER(struct_VkSurfaceCapabilitiesKHR))
PFN_vkGetPhysicalDeviceSurfaceFormatsKHR = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkPhysicalDevice_T), ctypes.POINTER(struct_VkSurfaceKHR_T), ctypes.POINTER(ctypes.c_uint32), ctypes.POINTER(struct_VkSurfaceFormatKHR))
PFN_vkGetPhysicalDeviceSurfacePresentModesKHR = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkPhysicalDevice_T), ctypes.POINTER(struct_VkSurfaceKHR_T), ctypes.POINTER(ctypes.c_uint32), ctypes.POINTER(VkPresentModeKHR))
try:
    vkDestroySurfaceKHR = _libraries['libvulkan.so.1'].vkDestroySurfaceKHR
    vkDestroySurfaceKHR.restype = None
    vkDestroySurfaceKHR.argtypes = [VkInstance, VkSurfaceKHR, ctypes.POINTER(struct_VkAllocationCallbacks)]
except AttributeError:
    pass
try:
    vkGetPhysicalDeviceSurfaceSupportKHR = _libraries['libvulkan.so.1'].vkGetPhysicalDeviceSurfaceSupportKHR
    vkGetPhysicalDeviceSurfaceSupportKHR.restype = VkResult
    vkGetPhysicalDeviceSurfaceSupportKHR.argtypes = [VkPhysicalDevice, uint32_t, VkSurfaceKHR, ctypes.POINTER(ctypes.c_uint32)]
except AttributeError:
    pass
try:
    vkGetPhysicalDeviceSurfaceCapabilitiesKHR = _libraries['libvulkan.so.1'].vkGetPhysicalDeviceSurfaceCapabilitiesKHR
    vkGetPhysicalDeviceSurfaceCapabilitiesKHR.restype = VkResult
    vkGetPhysicalDeviceSurfaceCapabilitiesKHR.argtypes = [VkPhysicalDevice, VkSurfaceKHR, ctypes.POINTER(struct_VkSurfaceCapabilitiesKHR)]
except AttributeError:
    pass
try:
    vkGetPhysicalDeviceSurfaceFormatsKHR = _libraries['libvulkan.so.1'].vkGetPhysicalDeviceSurfaceFormatsKHR
    vkGetPhysicalDeviceSurfaceFormatsKHR.restype = VkResult
    vkGetPhysicalDeviceSurfaceFormatsKHR.argtypes = [VkPhysicalDevice, VkSurfaceKHR, ctypes.POINTER(ctypes.c_uint32), ctypes.POINTER(struct_VkSurfaceFormatKHR)]
except AttributeError:
    pass
try:
    vkGetPhysicalDeviceSurfacePresentModesKHR = _libraries['libvulkan.so.1'].vkGetPhysicalDeviceSurfacePresentModesKHR
    vkGetPhysicalDeviceSurfacePresentModesKHR.restype = VkResult
    vkGetPhysicalDeviceSurfacePresentModesKHR.argtypes = [VkPhysicalDevice, VkSurfaceKHR, ctypes.POINTER(ctypes.c_uint32), ctypes.POINTER(VkPresentModeKHR)]
except AttributeError:
    pass
class struct_VkSwapchainKHR_T(Structure):
    pass

VkSwapchainKHR = ctypes.POINTER(struct_VkSwapchainKHR_T)

# values for enumeration 'VkSwapchainCreateFlagBitsKHR'
VkSwapchainCreateFlagBitsKHR__enumvalues = {
    1: 'VK_SWAPCHAIN_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR',
    2: 'VK_SWAPCHAIN_CREATE_PROTECTED_BIT_KHR',
    4: 'VK_SWAPCHAIN_CREATE_MUTABLE_FORMAT_BIT_KHR',
    8: 'VK_SWAPCHAIN_CREATE_DEFERRED_MEMORY_ALLOCATION_BIT_EXT',
    2147483647: 'VK_SWAPCHAIN_CREATE_FLAG_BITS_MAX_ENUM_KHR',
}
VK_SWAPCHAIN_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR = 1
VK_SWAPCHAIN_CREATE_PROTECTED_BIT_KHR = 2
VK_SWAPCHAIN_CREATE_MUTABLE_FORMAT_BIT_KHR = 4
VK_SWAPCHAIN_CREATE_DEFERRED_MEMORY_ALLOCATION_BIT_EXT = 8
VK_SWAPCHAIN_CREATE_FLAG_BITS_MAX_ENUM_KHR = 2147483647
VkSwapchainCreateFlagBitsKHR = ctypes.c_uint32 # enum
VkSwapchainCreateFlagsKHR = ctypes.c_uint32

# values for enumeration 'VkDeviceGroupPresentModeFlagBitsKHR'
VkDeviceGroupPresentModeFlagBitsKHR__enumvalues = {
    1: 'VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_BIT_KHR',
    2: 'VK_DEVICE_GROUP_PRESENT_MODE_REMOTE_BIT_KHR',
    4: 'VK_DEVICE_GROUP_PRESENT_MODE_SUM_BIT_KHR',
    8: 'VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_MULTI_DEVICE_BIT_KHR',
    2147483647: 'VK_DEVICE_GROUP_PRESENT_MODE_FLAG_BITS_MAX_ENUM_KHR',
}
VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_BIT_KHR = 1
VK_DEVICE_GROUP_PRESENT_MODE_REMOTE_BIT_KHR = 2
VK_DEVICE_GROUP_PRESENT_MODE_SUM_BIT_KHR = 4
VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_MULTI_DEVICE_BIT_KHR = 8
VK_DEVICE_GROUP_PRESENT_MODE_FLAG_BITS_MAX_ENUM_KHR = 2147483647
VkDeviceGroupPresentModeFlagBitsKHR = ctypes.c_uint32 # enum
VkDeviceGroupPresentModeFlagsKHR = ctypes.c_uint32
class struct_VkSwapchainCreateInfoKHR(Structure):
    pass

struct_VkSwapchainCreateInfoKHR._pack_ = 1 # source:False
struct_VkSwapchainCreateInfoKHR._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('flags', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('surface', ctypes.POINTER(struct_VkSurfaceKHR_T)),
    ('minImageCount', ctypes.c_uint32),
    ('imageFormat', VkFormat),
    ('imageColorSpace', VkColorSpaceKHR),
    ('imageExtent', VkExtent2D),
    ('imageArrayLayers', ctypes.c_uint32),
    ('imageUsage', ctypes.c_uint32),
    ('imageSharingMode', VkSharingMode),
    ('queueFamilyIndexCount', ctypes.c_uint32),
    ('PADDING_2', ctypes.c_ubyte * 4),
    ('pQueueFamilyIndices', ctypes.POINTER(ctypes.c_uint32)),
    ('preTransform', VkSurfaceTransformFlagBitsKHR),
    ('compositeAlpha', VkCompositeAlphaFlagBitsKHR),
    ('presentMode', VkPresentModeKHR),
    ('clipped', ctypes.c_uint32),
    ('oldSwapchain', ctypes.POINTER(struct_VkSwapchainKHR_T)),
]

VkSwapchainCreateInfoKHR = struct_VkSwapchainCreateInfoKHR
class struct_VkPresentInfoKHR(Structure):
    pass

struct_VkPresentInfoKHR._pack_ = 1 # source:False
struct_VkPresentInfoKHR._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('waitSemaphoreCount', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('pWaitSemaphores', ctypes.POINTER(ctypes.POINTER(struct_VkSemaphore_T))),
    ('swapchainCount', ctypes.c_uint32),
    ('PADDING_2', ctypes.c_ubyte * 4),
    ('pSwapchains', ctypes.POINTER(ctypes.POINTER(struct_VkSwapchainKHR_T))),
    ('pImageIndices', ctypes.POINTER(ctypes.c_uint32)),
    ('pResults', ctypes.POINTER(VkResult)),
]

VkPresentInfoKHR = struct_VkPresentInfoKHR
class struct_VkImageSwapchainCreateInfoKHR(Structure):
    pass

struct_VkImageSwapchainCreateInfoKHR._pack_ = 1 # source:False
struct_VkImageSwapchainCreateInfoKHR._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('swapchain', ctypes.POINTER(struct_VkSwapchainKHR_T)),
]

VkImageSwapchainCreateInfoKHR = struct_VkImageSwapchainCreateInfoKHR
class struct_VkBindImageMemorySwapchainInfoKHR(Structure):
    pass

struct_VkBindImageMemorySwapchainInfoKHR._pack_ = 1 # source:False
struct_VkBindImageMemorySwapchainInfoKHR._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('swapchain', ctypes.POINTER(struct_VkSwapchainKHR_T)),
    ('imageIndex', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkBindImageMemorySwapchainInfoKHR = struct_VkBindImageMemorySwapchainInfoKHR
class struct_VkAcquireNextImageInfoKHR(Structure):
    pass

struct_VkAcquireNextImageInfoKHR._pack_ = 1 # source:False
struct_VkAcquireNextImageInfoKHR._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('swapchain', ctypes.POINTER(struct_VkSwapchainKHR_T)),
    ('timeout', ctypes.c_uint64),
    ('semaphore', ctypes.POINTER(struct_VkSemaphore_T)),
    ('fence', ctypes.POINTER(struct_VkFence_T)),
    ('deviceMask', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkAcquireNextImageInfoKHR = struct_VkAcquireNextImageInfoKHR
class struct_VkDeviceGroupPresentCapabilitiesKHR(Structure):
    pass

struct_VkDeviceGroupPresentCapabilitiesKHR._pack_ = 1 # source:False
struct_VkDeviceGroupPresentCapabilitiesKHR._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('presentMask', ctypes.c_uint32 * 32),
    ('modes', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkDeviceGroupPresentCapabilitiesKHR = struct_VkDeviceGroupPresentCapabilitiesKHR
class struct_VkDeviceGroupPresentInfoKHR(Structure):
    pass

struct_VkDeviceGroupPresentInfoKHR._pack_ = 1 # source:False
struct_VkDeviceGroupPresentInfoKHR._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('swapchainCount', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('pDeviceMasks', ctypes.POINTER(ctypes.c_uint32)),
    ('mode', VkDeviceGroupPresentModeFlagBitsKHR),
    ('PADDING_2', ctypes.c_ubyte * 4),
]

VkDeviceGroupPresentInfoKHR = struct_VkDeviceGroupPresentInfoKHR
class struct_VkDeviceGroupSwapchainCreateInfoKHR(Structure):
    pass

struct_VkDeviceGroupSwapchainCreateInfoKHR._pack_ = 1 # source:False
struct_VkDeviceGroupSwapchainCreateInfoKHR._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('modes', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkDeviceGroupSwapchainCreateInfoKHR = struct_VkDeviceGroupSwapchainCreateInfoKHR
PFN_vkCreateSwapchainKHR = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkSwapchainCreateInfoKHR), ctypes.POINTER(struct_VkAllocationCallbacks), ctypes.POINTER(ctypes.POINTER(struct_VkSwapchainKHR_T)))
PFN_vkDestroySwapchainKHR = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkSwapchainKHR_T), ctypes.POINTER(struct_VkAllocationCallbacks))
PFN_vkGetSwapchainImagesKHR = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkSwapchainKHR_T), ctypes.POINTER(ctypes.c_uint32), ctypes.POINTER(ctypes.POINTER(struct_VkImage_T)))
PFN_vkAcquireNextImageKHR = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkSwapchainKHR_T), ctypes.c_uint64, ctypes.POINTER(struct_VkSemaphore_T), ctypes.POINTER(struct_VkFence_T), ctypes.POINTER(ctypes.c_uint32))
PFN_vkQueuePresentKHR = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkQueue_T), ctypes.POINTER(struct_VkPresentInfoKHR))
PFN_vkGetDeviceGroupPresentCapabilitiesKHR = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkDeviceGroupPresentCapabilitiesKHR))
PFN_vkGetDeviceGroupSurfacePresentModesKHR = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkSurfaceKHR_T), ctypes.POINTER(ctypes.c_uint32))
PFN_vkGetPhysicalDevicePresentRectanglesKHR = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkPhysicalDevice_T), ctypes.POINTER(struct_VkSurfaceKHR_T), ctypes.POINTER(ctypes.c_uint32), ctypes.POINTER(struct_VkRect2D))
PFN_vkAcquireNextImage2KHR = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkAcquireNextImageInfoKHR), ctypes.POINTER(ctypes.c_uint32))
try:
    vkCreateSwapchainKHR = _libraries['libvulkan.so.1'].vkCreateSwapchainKHR
    vkCreateSwapchainKHR.restype = VkResult
    vkCreateSwapchainKHR.argtypes = [VkDevice, ctypes.POINTER(struct_VkSwapchainCreateInfoKHR), ctypes.POINTER(struct_VkAllocationCallbacks), ctypes.POINTER(ctypes.POINTER(struct_VkSwapchainKHR_T))]
except AttributeError:
    pass
try:
    vkDestroySwapchainKHR = _libraries['libvulkan.so.1'].vkDestroySwapchainKHR
    vkDestroySwapchainKHR.restype = None
    vkDestroySwapchainKHR.argtypes = [VkDevice, VkSwapchainKHR, ctypes.POINTER(struct_VkAllocationCallbacks)]
except AttributeError:
    pass
try:
    vkGetSwapchainImagesKHR = _libraries['libvulkan.so.1'].vkGetSwapchainImagesKHR
    vkGetSwapchainImagesKHR.restype = VkResult
    vkGetSwapchainImagesKHR.argtypes = [VkDevice, VkSwapchainKHR, ctypes.POINTER(ctypes.c_uint32), ctypes.POINTER(ctypes.POINTER(struct_VkImage_T))]
except AttributeError:
    pass
try:
    vkAcquireNextImageKHR = _libraries['libvulkan.so.1'].vkAcquireNextImageKHR
    vkAcquireNextImageKHR.restype = VkResult
    vkAcquireNextImageKHR.argtypes = [VkDevice, VkSwapchainKHR, uint64_t, VkSemaphore, VkFence, ctypes.POINTER(ctypes.c_uint32)]
except AttributeError:
    pass
try:
    vkQueuePresentKHR = _libraries['libvulkan.so.1'].vkQueuePresentKHR
    vkQueuePresentKHR.restype = VkResult
    vkQueuePresentKHR.argtypes = [VkQueue, ctypes.POINTER(struct_VkPresentInfoKHR)]
except AttributeError:
    pass
try:
    vkGetDeviceGroupPresentCapabilitiesKHR = _libraries['libvulkan.so.1'].vkGetDeviceGroupPresentCapabilitiesKHR
    vkGetDeviceGroupPresentCapabilitiesKHR.restype = VkResult
    vkGetDeviceGroupPresentCapabilitiesKHR.argtypes = [VkDevice, ctypes.POINTER(struct_VkDeviceGroupPresentCapabilitiesKHR)]
except AttributeError:
    pass
try:
    vkGetDeviceGroupSurfacePresentModesKHR = _libraries['libvulkan.so.1'].vkGetDeviceGroupSurfacePresentModesKHR
    vkGetDeviceGroupSurfacePresentModesKHR.restype = VkResult
    vkGetDeviceGroupSurfacePresentModesKHR.argtypes = [VkDevice, VkSurfaceKHR, ctypes.POINTER(ctypes.c_uint32)]
except AttributeError:
    pass
try:
    vkGetPhysicalDevicePresentRectanglesKHR = _libraries['libvulkan.so.1'].vkGetPhysicalDevicePresentRectanglesKHR
    vkGetPhysicalDevicePresentRectanglesKHR.restype = VkResult
    vkGetPhysicalDevicePresentRectanglesKHR.argtypes = [VkPhysicalDevice, VkSurfaceKHR, ctypes.POINTER(ctypes.c_uint32), ctypes.POINTER(struct_VkRect2D)]
except AttributeError:
    pass
try:
    vkAcquireNextImage2KHR = _libraries['libvulkan.so.1'].vkAcquireNextImage2KHR
    vkAcquireNextImage2KHR.restype = VkResult
    vkAcquireNextImage2KHR.argtypes = [VkDevice, ctypes.POINTER(struct_VkAcquireNextImageInfoKHR), ctypes.POINTER(ctypes.c_uint32)]
except AttributeError:
    pass
class struct_VkDisplayKHR_T(Structure):
    pass

VkDisplayKHR = ctypes.POINTER(struct_VkDisplayKHR_T)
class struct_VkDisplayModeKHR_T(Structure):
    pass

VkDisplayModeKHR = ctypes.POINTER(struct_VkDisplayModeKHR_T)
VkDisplayModeCreateFlagsKHR = ctypes.c_uint32

# values for enumeration 'VkDisplayPlaneAlphaFlagBitsKHR'
VkDisplayPlaneAlphaFlagBitsKHR__enumvalues = {
    1: 'VK_DISPLAY_PLANE_ALPHA_OPAQUE_BIT_KHR',
    2: 'VK_DISPLAY_PLANE_ALPHA_GLOBAL_BIT_KHR',
    4: 'VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_BIT_KHR',
    8: 'VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_PREMULTIPLIED_BIT_KHR',
    2147483647: 'VK_DISPLAY_PLANE_ALPHA_FLAG_BITS_MAX_ENUM_KHR',
}
VK_DISPLAY_PLANE_ALPHA_OPAQUE_BIT_KHR = 1
VK_DISPLAY_PLANE_ALPHA_GLOBAL_BIT_KHR = 2
VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_BIT_KHR = 4
VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_PREMULTIPLIED_BIT_KHR = 8
VK_DISPLAY_PLANE_ALPHA_FLAG_BITS_MAX_ENUM_KHR = 2147483647
VkDisplayPlaneAlphaFlagBitsKHR = ctypes.c_uint32 # enum
VkDisplayPlaneAlphaFlagsKHR = ctypes.c_uint32
VkDisplaySurfaceCreateFlagsKHR = ctypes.c_uint32
class struct_VkDisplayModeParametersKHR(Structure):
    pass

struct_VkDisplayModeParametersKHR._pack_ = 1 # source:False
struct_VkDisplayModeParametersKHR._fields_ = [
    ('visibleRegion', VkExtent2D),
    ('refreshRate', ctypes.c_uint32),
]

VkDisplayModeParametersKHR = struct_VkDisplayModeParametersKHR
class struct_VkDisplayModeCreateInfoKHR(Structure):
    pass

struct_VkDisplayModeCreateInfoKHR._pack_ = 1 # source:False
struct_VkDisplayModeCreateInfoKHR._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('flags', ctypes.c_uint32),
    ('parameters', VkDisplayModeParametersKHR),
]

VkDisplayModeCreateInfoKHR = struct_VkDisplayModeCreateInfoKHR
class struct_VkDisplayModePropertiesKHR(Structure):
    pass

struct_VkDisplayModePropertiesKHR._pack_ = 1 # source:False
struct_VkDisplayModePropertiesKHR._fields_ = [
    ('displayMode', ctypes.POINTER(struct_VkDisplayModeKHR_T)),
    ('parameters', VkDisplayModeParametersKHR),
    ('PADDING_0', ctypes.c_ubyte * 4),
]

VkDisplayModePropertiesKHR = struct_VkDisplayModePropertiesKHR
class struct_VkDisplayPlaneCapabilitiesKHR(Structure):
    pass

struct_VkDisplayPlaneCapabilitiesKHR._pack_ = 1 # source:False
struct_VkDisplayPlaneCapabilitiesKHR._fields_ = [
    ('supportedAlpha', ctypes.c_uint32),
    ('minSrcPosition', VkOffset2D),
    ('maxSrcPosition', VkOffset2D),
    ('minSrcExtent', VkExtent2D),
    ('maxSrcExtent', VkExtent2D),
    ('minDstPosition', VkOffset2D),
    ('maxDstPosition', VkOffset2D),
    ('minDstExtent', VkExtent2D),
    ('maxDstExtent', VkExtent2D),
]

VkDisplayPlaneCapabilitiesKHR = struct_VkDisplayPlaneCapabilitiesKHR
class struct_VkDisplayPlanePropertiesKHR(Structure):
    pass

struct_VkDisplayPlanePropertiesKHR._pack_ = 1 # source:False
struct_VkDisplayPlanePropertiesKHR._fields_ = [
    ('currentDisplay', ctypes.POINTER(struct_VkDisplayKHR_T)),
    ('currentStackIndex', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
]

VkDisplayPlanePropertiesKHR = struct_VkDisplayPlanePropertiesKHR
class struct_VkDisplayPropertiesKHR(Structure):
    pass

struct_VkDisplayPropertiesKHR._pack_ = 1 # source:False
struct_VkDisplayPropertiesKHR._fields_ = [
    ('display', ctypes.POINTER(struct_VkDisplayKHR_T)),
    ('displayName', ctypes.POINTER(ctypes.c_char)),
    ('physicalDimensions', VkExtent2D),
    ('physicalResolution', VkExtent2D),
    ('supportedTransforms', ctypes.c_uint32),
    ('planeReorderPossible', ctypes.c_uint32),
    ('persistentContent', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
]

VkDisplayPropertiesKHR = struct_VkDisplayPropertiesKHR
class struct_VkDisplaySurfaceCreateInfoKHR(Structure):
    pass

struct_VkDisplaySurfaceCreateInfoKHR._pack_ = 1 # source:False
struct_VkDisplaySurfaceCreateInfoKHR._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('flags', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('displayMode', ctypes.POINTER(struct_VkDisplayModeKHR_T)),
    ('planeIndex', ctypes.c_uint32),
    ('planeStackIndex', ctypes.c_uint32),
    ('transform', VkSurfaceTransformFlagBitsKHR),
    ('globalAlpha', ctypes.c_float),
    ('alphaMode', VkDisplayPlaneAlphaFlagBitsKHR),
    ('imageExtent', VkExtent2D),
    ('PADDING_2', ctypes.c_ubyte * 4),
]

VkDisplaySurfaceCreateInfoKHR = struct_VkDisplaySurfaceCreateInfoKHR
PFN_vkGetPhysicalDeviceDisplayPropertiesKHR = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkPhysicalDevice_T), ctypes.POINTER(ctypes.c_uint32), ctypes.POINTER(struct_VkDisplayPropertiesKHR))
PFN_vkGetPhysicalDeviceDisplayPlanePropertiesKHR = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkPhysicalDevice_T), ctypes.POINTER(ctypes.c_uint32), ctypes.POINTER(struct_VkDisplayPlanePropertiesKHR))
PFN_vkGetDisplayPlaneSupportedDisplaysKHR = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkPhysicalDevice_T), ctypes.c_uint32, ctypes.POINTER(ctypes.c_uint32), ctypes.POINTER(ctypes.POINTER(struct_VkDisplayKHR_T)))
PFN_vkGetDisplayModePropertiesKHR = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkPhysicalDevice_T), ctypes.POINTER(struct_VkDisplayKHR_T), ctypes.POINTER(ctypes.c_uint32), ctypes.POINTER(struct_VkDisplayModePropertiesKHR))
PFN_vkCreateDisplayModeKHR = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkPhysicalDevice_T), ctypes.POINTER(struct_VkDisplayKHR_T), ctypes.POINTER(struct_VkDisplayModeCreateInfoKHR), ctypes.POINTER(struct_VkAllocationCallbacks), ctypes.POINTER(ctypes.POINTER(struct_VkDisplayModeKHR_T)))
PFN_vkGetDisplayPlaneCapabilitiesKHR = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkPhysicalDevice_T), ctypes.POINTER(struct_VkDisplayModeKHR_T), ctypes.c_uint32, ctypes.POINTER(struct_VkDisplayPlaneCapabilitiesKHR))
PFN_vkCreateDisplayPlaneSurfaceKHR = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkInstance_T), ctypes.POINTER(struct_VkDisplaySurfaceCreateInfoKHR), ctypes.POINTER(struct_VkAllocationCallbacks), ctypes.POINTER(ctypes.POINTER(struct_VkSurfaceKHR_T)))
try:
    vkGetPhysicalDeviceDisplayPropertiesKHR = _libraries['libvulkan.so.1'].vkGetPhysicalDeviceDisplayPropertiesKHR
    vkGetPhysicalDeviceDisplayPropertiesKHR.restype = VkResult
    vkGetPhysicalDeviceDisplayPropertiesKHR.argtypes = [VkPhysicalDevice, ctypes.POINTER(ctypes.c_uint32), ctypes.POINTER(struct_VkDisplayPropertiesKHR)]
except AttributeError:
    pass
try:
    vkGetPhysicalDeviceDisplayPlanePropertiesKHR = _libraries['libvulkan.so.1'].vkGetPhysicalDeviceDisplayPlanePropertiesKHR
    vkGetPhysicalDeviceDisplayPlanePropertiesKHR.restype = VkResult
    vkGetPhysicalDeviceDisplayPlanePropertiesKHR.argtypes = [VkPhysicalDevice, ctypes.POINTER(ctypes.c_uint32), ctypes.POINTER(struct_VkDisplayPlanePropertiesKHR)]
except AttributeError:
    pass
try:
    vkGetDisplayPlaneSupportedDisplaysKHR = _libraries['libvulkan.so.1'].vkGetDisplayPlaneSupportedDisplaysKHR
    vkGetDisplayPlaneSupportedDisplaysKHR.restype = VkResult
    vkGetDisplayPlaneSupportedDisplaysKHR.argtypes = [VkPhysicalDevice, uint32_t, ctypes.POINTER(ctypes.c_uint32), ctypes.POINTER(ctypes.POINTER(struct_VkDisplayKHR_T))]
except AttributeError:
    pass
try:
    vkGetDisplayModePropertiesKHR = _libraries['libvulkan.so.1'].vkGetDisplayModePropertiesKHR
    vkGetDisplayModePropertiesKHR.restype = VkResult
    vkGetDisplayModePropertiesKHR.argtypes = [VkPhysicalDevice, VkDisplayKHR, ctypes.POINTER(ctypes.c_uint32), ctypes.POINTER(struct_VkDisplayModePropertiesKHR)]
except AttributeError:
    pass
try:
    vkCreateDisplayModeKHR = _libraries['libvulkan.so.1'].vkCreateDisplayModeKHR
    vkCreateDisplayModeKHR.restype = VkResult
    vkCreateDisplayModeKHR.argtypes = [VkPhysicalDevice, VkDisplayKHR, ctypes.POINTER(struct_VkDisplayModeCreateInfoKHR), ctypes.POINTER(struct_VkAllocationCallbacks), ctypes.POINTER(ctypes.POINTER(struct_VkDisplayModeKHR_T))]
except AttributeError:
    pass
try:
    vkGetDisplayPlaneCapabilitiesKHR = _libraries['libvulkan.so.1'].vkGetDisplayPlaneCapabilitiesKHR
    vkGetDisplayPlaneCapabilitiesKHR.restype = VkResult
    vkGetDisplayPlaneCapabilitiesKHR.argtypes = [VkPhysicalDevice, VkDisplayModeKHR, uint32_t, ctypes.POINTER(struct_VkDisplayPlaneCapabilitiesKHR)]
except AttributeError:
    pass
try:
    vkCreateDisplayPlaneSurfaceKHR = _libraries['libvulkan.so.1'].vkCreateDisplayPlaneSurfaceKHR
    vkCreateDisplayPlaneSurfaceKHR.restype = VkResult
    vkCreateDisplayPlaneSurfaceKHR.argtypes = [VkInstance, ctypes.POINTER(struct_VkDisplaySurfaceCreateInfoKHR), ctypes.POINTER(struct_VkAllocationCallbacks), ctypes.POINTER(ctypes.POINTER(struct_VkSurfaceKHR_T))]
except AttributeError:
    pass
class struct_VkDisplayPresentInfoKHR(Structure):
    pass

struct_VkDisplayPresentInfoKHR._pack_ = 1 # source:False
struct_VkDisplayPresentInfoKHR._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('srcRect', VkRect2D),
    ('dstRect', VkRect2D),
    ('persistent', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkDisplayPresentInfoKHR = struct_VkDisplayPresentInfoKHR
PFN_vkCreateSharedSwapchainsKHR = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkDevice_T), ctypes.c_uint32, ctypes.POINTER(struct_VkSwapchainCreateInfoKHR), ctypes.POINTER(struct_VkAllocationCallbacks), ctypes.POINTER(ctypes.POINTER(struct_VkSwapchainKHR_T)))
try:
    vkCreateSharedSwapchainsKHR = _libraries['libvulkan.so.1'].vkCreateSharedSwapchainsKHR
    vkCreateSharedSwapchainsKHR.restype = VkResult
    vkCreateSharedSwapchainsKHR.argtypes = [VkDevice, uint32_t, ctypes.POINTER(struct_VkSwapchainCreateInfoKHR), ctypes.POINTER(struct_VkAllocationCallbacks), ctypes.POINTER(ctypes.POINTER(struct_VkSwapchainKHR_T))]
except AttributeError:
    pass
class struct_VkVideoSessionKHR_T(Structure):
    pass

VkVideoSessionKHR = ctypes.POINTER(struct_VkVideoSessionKHR_T)
class struct_VkVideoSessionParametersKHR_T(Structure):
    pass

VkVideoSessionParametersKHR = ctypes.POINTER(struct_VkVideoSessionParametersKHR_T)

# values for enumeration 'VkQueryResultStatusKHR'
VkQueryResultStatusKHR__enumvalues = {
    -1: 'VK_QUERY_RESULT_STATUS_ERROR_KHR',
    0: 'VK_QUERY_RESULT_STATUS_NOT_READY_KHR',
    1: 'VK_QUERY_RESULT_STATUS_COMPLETE_KHR',
    -1000299000: 'VK_QUERY_RESULT_STATUS_INSUFFICIENT_BITSTREAM_BUFFER_RANGE_KHR',
    2147483647: 'VK_QUERY_RESULT_STATUS_MAX_ENUM_KHR',
}
VK_QUERY_RESULT_STATUS_ERROR_KHR = -1
VK_QUERY_RESULT_STATUS_NOT_READY_KHR = 0
VK_QUERY_RESULT_STATUS_COMPLETE_KHR = 1
VK_QUERY_RESULT_STATUS_INSUFFICIENT_BITSTREAM_BUFFER_RANGE_KHR = -1000299000
VK_QUERY_RESULT_STATUS_MAX_ENUM_KHR = 2147483647
VkQueryResultStatusKHR = ctypes.c_int32 # enum

# values for enumeration 'VkVideoCodecOperationFlagBitsKHR'
VkVideoCodecOperationFlagBitsKHR__enumvalues = {
    0: 'VK_VIDEO_CODEC_OPERATION_NONE_KHR',
    65536: 'VK_VIDEO_CODEC_OPERATION_ENCODE_H264_BIT_KHR',
    131072: 'VK_VIDEO_CODEC_OPERATION_ENCODE_H265_BIT_KHR',
    1: 'VK_VIDEO_CODEC_OPERATION_DECODE_H264_BIT_KHR',
    2: 'VK_VIDEO_CODEC_OPERATION_DECODE_H265_BIT_KHR',
    2147483647: 'VK_VIDEO_CODEC_OPERATION_FLAG_BITS_MAX_ENUM_KHR',
}
VK_VIDEO_CODEC_OPERATION_NONE_KHR = 0
VK_VIDEO_CODEC_OPERATION_ENCODE_H264_BIT_KHR = 65536
VK_VIDEO_CODEC_OPERATION_ENCODE_H265_BIT_KHR = 131072
VK_VIDEO_CODEC_OPERATION_DECODE_H264_BIT_KHR = 1
VK_VIDEO_CODEC_OPERATION_DECODE_H265_BIT_KHR = 2
VK_VIDEO_CODEC_OPERATION_FLAG_BITS_MAX_ENUM_KHR = 2147483647
VkVideoCodecOperationFlagBitsKHR = ctypes.c_uint32 # enum
VkVideoCodecOperationFlagsKHR = ctypes.c_uint32

# values for enumeration 'VkVideoChromaSubsamplingFlagBitsKHR'
VkVideoChromaSubsamplingFlagBitsKHR__enumvalues = {
    0: 'VK_VIDEO_CHROMA_SUBSAMPLING_INVALID_KHR',
    1: 'VK_VIDEO_CHROMA_SUBSAMPLING_MONOCHROME_BIT_KHR',
    2: 'VK_VIDEO_CHROMA_SUBSAMPLING_420_BIT_KHR',
    4: 'VK_VIDEO_CHROMA_SUBSAMPLING_422_BIT_KHR',
    8: 'VK_VIDEO_CHROMA_SUBSAMPLING_444_BIT_KHR',
    2147483647: 'VK_VIDEO_CHROMA_SUBSAMPLING_FLAG_BITS_MAX_ENUM_KHR',
}
VK_VIDEO_CHROMA_SUBSAMPLING_INVALID_KHR = 0
VK_VIDEO_CHROMA_SUBSAMPLING_MONOCHROME_BIT_KHR = 1
VK_VIDEO_CHROMA_SUBSAMPLING_420_BIT_KHR = 2
VK_VIDEO_CHROMA_SUBSAMPLING_422_BIT_KHR = 4
VK_VIDEO_CHROMA_SUBSAMPLING_444_BIT_KHR = 8
VK_VIDEO_CHROMA_SUBSAMPLING_FLAG_BITS_MAX_ENUM_KHR = 2147483647
VkVideoChromaSubsamplingFlagBitsKHR = ctypes.c_uint32 # enum
VkVideoChromaSubsamplingFlagsKHR = ctypes.c_uint32

# values for enumeration 'VkVideoComponentBitDepthFlagBitsKHR'
VkVideoComponentBitDepthFlagBitsKHR__enumvalues = {
    0: 'VK_VIDEO_COMPONENT_BIT_DEPTH_INVALID_KHR',
    1: 'VK_VIDEO_COMPONENT_BIT_DEPTH_8_BIT_KHR',
    4: 'VK_VIDEO_COMPONENT_BIT_DEPTH_10_BIT_KHR',
    16: 'VK_VIDEO_COMPONENT_BIT_DEPTH_12_BIT_KHR',
    2147483647: 'VK_VIDEO_COMPONENT_BIT_DEPTH_FLAG_BITS_MAX_ENUM_KHR',
}
VK_VIDEO_COMPONENT_BIT_DEPTH_INVALID_KHR = 0
VK_VIDEO_COMPONENT_BIT_DEPTH_8_BIT_KHR = 1
VK_VIDEO_COMPONENT_BIT_DEPTH_10_BIT_KHR = 4
VK_VIDEO_COMPONENT_BIT_DEPTH_12_BIT_KHR = 16
VK_VIDEO_COMPONENT_BIT_DEPTH_FLAG_BITS_MAX_ENUM_KHR = 2147483647
VkVideoComponentBitDepthFlagBitsKHR = ctypes.c_uint32 # enum
VkVideoComponentBitDepthFlagsKHR = ctypes.c_uint32

# values for enumeration 'VkVideoCapabilityFlagBitsKHR'
VkVideoCapabilityFlagBitsKHR__enumvalues = {
    1: 'VK_VIDEO_CAPABILITY_PROTECTED_CONTENT_BIT_KHR',
    2: 'VK_VIDEO_CAPABILITY_SEPARATE_REFERENCE_IMAGES_BIT_KHR',
    2147483647: 'VK_VIDEO_CAPABILITY_FLAG_BITS_MAX_ENUM_KHR',
}
VK_VIDEO_CAPABILITY_PROTECTED_CONTENT_BIT_KHR = 1
VK_VIDEO_CAPABILITY_SEPARATE_REFERENCE_IMAGES_BIT_KHR = 2
VK_VIDEO_CAPABILITY_FLAG_BITS_MAX_ENUM_KHR = 2147483647
VkVideoCapabilityFlagBitsKHR = ctypes.c_uint32 # enum
VkVideoCapabilityFlagsKHR = ctypes.c_uint32

# values for enumeration 'VkVideoSessionCreateFlagBitsKHR'
VkVideoSessionCreateFlagBitsKHR__enumvalues = {
    1: 'VK_VIDEO_SESSION_CREATE_PROTECTED_CONTENT_BIT_KHR',
    2: 'VK_VIDEO_SESSION_CREATE_ALLOW_ENCODE_PARAMETER_OPTIMIZATIONS_BIT_KHR',
    4: 'VK_VIDEO_SESSION_CREATE_INLINE_QUERIES_BIT_KHR',
    2147483647: 'VK_VIDEO_SESSION_CREATE_FLAG_BITS_MAX_ENUM_KHR',
}
VK_VIDEO_SESSION_CREATE_PROTECTED_CONTENT_BIT_KHR = 1
VK_VIDEO_SESSION_CREATE_ALLOW_ENCODE_PARAMETER_OPTIMIZATIONS_BIT_KHR = 2
VK_VIDEO_SESSION_CREATE_INLINE_QUERIES_BIT_KHR = 4
VK_VIDEO_SESSION_CREATE_FLAG_BITS_MAX_ENUM_KHR = 2147483647
VkVideoSessionCreateFlagBitsKHR = ctypes.c_uint32 # enum
VkVideoSessionCreateFlagsKHR = ctypes.c_uint32
VkVideoSessionParametersCreateFlagsKHR = ctypes.c_uint32
VkVideoBeginCodingFlagsKHR = ctypes.c_uint32
VkVideoEndCodingFlagsKHR = ctypes.c_uint32

# values for enumeration 'VkVideoCodingControlFlagBitsKHR'
VkVideoCodingControlFlagBitsKHR__enumvalues = {
    1: 'VK_VIDEO_CODING_CONTROL_RESET_BIT_KHR',
    2: 'VK_VIDEO_CODING_CONTROL_ENCODE_RATE_CONTROL_BIT_KHR',
    4: 'VK_VIDEO_CODING_CONTROL_ENCODE_QUALITY_LEVEL_BIT_KHR',
    2147483647: 'VK_VIDEO_CODING_CONTROL_FLAG_BITS_MAX_ENUM_KHR',
}
VK_VIDEO_CODING_CONTROL_RESET_BIT_KHR = 1
VK_VIDEO_CODING_CONTROL_ENCODE_RATE_CONTROL_BIT_KHR = 2
VK_VIDEO_CODING_CONTROL_ENCODE_QUALITY_LEVEL_BIT_KHR = 4
VK_VIDEO_CODING_CONTROL_FLAG_BITS_MAX_ENUM_KHR = 2147483647
VkVideoCodingControlFlagBitsKHR = ctypes.c_uint32 # enum
VkVideoCodingControlFlagsKHR = ctypes.c_uint32
class struct_VkQueueFamilyQueryResultStatusPropertiesKHR(Structure):
    pass

struct_VkQueueFamilyQueryResultStatusPropertiesKHR._pack_ = 1 # source:False
struct_VkQueueFamilyQueryResultStatusPropertiesKHR._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('queryResultStatusSupport', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkQueueFamilyQueryResultStatusPropertiesKHR = struct_VkQueueFamilyQueryResultStatusPropertiesKHR
class struct_VkQueueFamilyVideoPropertiesKHR(Structure):
    pass

struct_VkQueueFamilyVideoPropertiesKHR._pack_ = 1 # source:False
struct_VkQueueFamilyVideoPropertiesKHR._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('videoCodecOperations', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkQueueFamilyVideoPropertiesKHR = struct_VkQueueFamilyVideoPropertiesKHR
class struct_VkVideoProfileInfoKHR(Structure):
    pass

struct_VkVideoProfileInfoKHR._pack_ = 1 # source:False
struct_VkVideoProfileInfoKHR._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('videoCodecOperation', VkVideoCodecOperationFlagBitsKHR),
    ('chromaSubsampling', ctypes.c_uint32),
    ('lumaBitDepth', ctypes.c_uint32),
    ('chromaBitDepth', ctypes.c_uint32),
]

VkVideoProfileInfoKHR = struct_VkVideoProfileInfoKHR
class struct_VkVideoProfileListInfoKHR(Structure):
    pass

struct_VkVideoProfileListInfoKHR._pack_ = 1 # source:False
struct_VkVideoProfileListInfoKHR._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('profileCount', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('pProfiles', ctypes.POINTER(struct_VkVideoProfileInfoKHR)),
]

VkVideoProfileListInfoKHR = struct_VkVideoProfileListInfoKHR
class struct_VkVideoCapabilitiesKHR(Structure):
    pass

struct_VkVideoCapabilitiesKHR._pack_ = 1 # source:False
struct_VkVideoCapabilitiesKHR._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('flags', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('minBitstreamBufferOffsetAlignment', ctypes.c_uint64),
    ('minBitstreamBufferSizeAlignment', ctypes.c_uint64),
    ('pictureAccessGranularity', VkExtent2D),
    ('minCodedExtent', VkExtent2D),
    ('maxCodedExtent', VkExtent2D),
    ('maxDpbSlots', ctypes.c_uint32),
    ('maxActiveReferencePictures', ctypes.c_uint32),
    ('stdHeaderVersion', VkExtensionProperties),
    ('PADDING_2', ctypes.c_ubyte * 4),
]

VkVideoCapabilitiesKHR = struct_VkVideoCapabilitiesKHR
class struct_VkPhysicalDeviceVideoFormatInfoKHR(Structure):
    pass

struct_VkPhysicalDeviceVideoFormatInfoKHR._pack_ = 1 # source:False
struct_VkPhysicalDeviceVideoFormatInfoKHR._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('imageUsage', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPhysicalDeviceVideoFormatInfoKHR = struct_VkPhysicalDeviceVideoFormatInfoKHR
class struct_VkVideoFormatPropertiesKHR(Structure):
    pass

struct_VkVideoFormatPropertiesKHR._pack_ = 1 # source:False
struct_VkVideoFormatPropertiesKHR._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('format', VkFormat),
    ('componentMapping', VkComponentMapping),
    ('imageCreateFlags', ctypes.c_uint32),
    ('imageType', VkImageType),
    ('imageTiling', VkImageTiling),
    ('imageUsageFlags', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkVideoFormatPropertiesKHR = struct_VkVideoFormatPropertiesKHR
class struct_VkVideoPictureResourceInfoKHR(Structure):
    pass

struct_VkVideoPictureResourceInfoKHR._pack_ = 1 # source:False
struct_VkVideoPictureResourceInfoKHR._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('codedOffset', VkOffset2D),
    ('codedExtent', VkExtent2D),
    ('baseArrayLayer', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('imageViewBinding', ctypes.POINTER(struct_VkImageView_T)),
]

VkVideoPictureResourceInfoKHR = struct_VkVideoPictureResourceInfoKHR
class struct_VkVideoReferenceSlotInfoKHR(Structure):
    pass

struct_VkVideoReferenceSlotInfoKHR._pack_ = 1 # source:False
struct_VkVideoReferenceSlotInfoKHR._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('slotIndex', ctypes.c_int32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('pPictureResource', ctypes.POINTER(struct_VkVideoPictureResourceInfoKHR)),
]

VkVideoReferenceSlotInfoKHR = struct_VkVideoReferenceSlotInfoKHR
class struct_VkVideoSessionMemoryRequirementsKHR(Structure):
    pass

struct_VkVideoSessionMemoryRequirementsKHR._pack_ = 1 # source:False
struct_VkVideoSessionMemoryRequirementsKHR._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('memoryBindIndex', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('memoryRequirements', VkMemoryRequirements),
]

VkVideoSessionMemoryRequirementsKHR = struct_VkVideoSessionMemoryRequirementsKHR
class struct_VkBindVideoSessionMemoryInfoKHR(Structure):
    pass

struct_VkBindVideoSessionMemoryInfoKHR._pack_ = 1 # source:False
struct_VkBindVideoSessionMemoryInfoKHR._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('memoryBindIndex', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('memory', ctypes.POINTER(struct_VkDeviceMemory_T)),
    ('memoryOffset', ctypes.c_uint64),
    ('memorySize', ctypes.c_uint64),
]

VkBindVideoSessionMemoryInfoKHR = struct_VkBindVideoSessionMemoryInfoKHR
class struct_VkVideoSessionCreateInfoKHR(Structure):
    pass

struct_VkVideoSessionCreateInfoKHR._pack_ = 1 # source:False
struct_VkVideoSessionCreateInfoKHR._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('queueFamilyIndex', ctypes.c_uint32),
    ('flags', ctypes.c_uint32),
    ('pVideoProfile', ctypes.POINTER(struct_VkVideoProfileInfoKHR)),
    ('pictureFormat', VkFormat),
    ('maxCodedExtent', VkExtent2D),
    ('referencePictureFormat', VkFormat),
    ('maxDpbSlots', ctypes.c_uint32),
    ('maxActiveReferencePictures', ctypes.c_uint32),
    ('pStdHeaderVersion', ctypes.POINTER(struct_VkExtensionProperties)),
]

VkVideoSessionCreateInfoKHR = struct_VkVideoSessionCreateInfoKHR
class struct_VkVideoSessionParametersCreateInfoKHR(Structure):
    pass

struct_VkVideoSessionParametersCreateInfoKHR._pack_ = 1 # source:False
struct_VkVideoSessionParametersCreateInfoKHR._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('flags', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('videoSessionParametersTemplate', ctypes.POINTER(struct_VkVideoSessionParametersKHR_T)),
    ('videoSession', ctypes.POINTER(struct_VkVideoSessionKHR_T)),
]

VkVideoSessionParametersCreateInfoKHR = struct_VkVideoSessionParametersCreateInfoKHR
class struct_VkVideoSessionParametersUpdateInfoKHR(Structure):
    pass

struct_VkVideoSessionParametersUpdateInfoKHR._pack_ = 1 # source:False
struct_VkVideoSessionParametersUpdateInfoKHR._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('updateSequenceCount', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkVideoSessionParametersUpdateInfoKHR = struct_VkVideoSessionParametersUpdateInfoKHR
class struct_VkVideoBeginCodingInfoKHR(Structure):
    pass

struct_VkVideoBeginCodingInfoKHR._pack_ = 1 # source:False
struct_VkVideoBeginCodingInfoKHR._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('flags', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('videoSession', ctypes.POINTER(struct_VkVideoSessionKHR_T)),
    ('videoSessionParameters', ctypes.POINTER(struct_VkVideoSessionParametersKHR_T)),
    ('referenceSlotCount', ctypes.c_uint32),
    ('PADDING_2', ctypes.c_ubyte * 4),
    ('pReferenceSlots', ctypes.POINTER(struct_VkVideoReferenceSlotInfoKHR)),
]

VkVideoBeginCodingInfoKHR = struct_VkVideoBeginCodingInfoKHR
class struct_VkVideoEndCodingInfoKHR(Structure):
    pass

struct_VkVideoEndCodingInfoKHR._pack_ = 1 # source:False
struct_VkVideoEndCodingInfoKHR._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('flags', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkVideoEndCodingInfoKHR = struct_VkVideoEndCodingInfoKHR
class struct_VkVideoCodingControlInfoKHR(Structure):
    pass

struct_VkVideoCodingControlInfoKHR._pack_ = 1 # source:False
struct_VkVideoCodingControlInfoKHR._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('flags', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkVideoCodingControlInfoKHR = struct_VkVideoCodingControlInfoKHR
PFN_vkGetPhysicalDeviceVideoCapabilitiesKHR = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkPhysicalDevice_T), ctypes.POINTER(struct_VkVideoProfileInfoKHR), ctypes.POINTER(struct_VkVideoCapabilitiesKHR))
PFN_vkGetPhysicalDeviceVideoFormatPropertiesKHR = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkPhysicalDevice_T), ctypes.POINTER(struct_VkPhysicalDeviceVideoFormatInfoKHR), ctypes.POINTER(ctypes.c_uint32), ctypes.POINTER(struct_VkVideoFormatPropertiesKHR))
PFN_vkCreateVideoSessionKHR = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkVideoSessionCreateInfoKHR), ctypes.POINTER(struct_VkAllocationCallbacks), ctypes.POINTER(ctypes.POINTER(struct_VkVideoSessionKHR_T)))
PFN_vkDestroyVideoSessionKHR = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkVideoSessionKHR_T), ctypes.POINTER(struct_VkAllocationCallbacks))
PFN_vkGetVideoSessionMemoryRequirementsKHR = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkVideoSessionKHR_T), ctypes.POINTER(ctypes.c_uint32), ctypes.POINTER(struct_VkVideoSessionMemoryRequirementsKHR))
PFN_vkBindVideoSessionMemoryKHR = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkVideoSessionKHR_T), ctypes.c_uint32, ctypes.POINTER(struct_VkBindVideoSessionMemoryInfoKHR))
PFN_vkCreateVideoSessionParametersKHR = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkVideoSessionParametersCreateInfoKHR), ctypes.POINTER(struct_VkAllocationCallbacks), ctypes.POINTER(ctypes.POINTER(struct_VkVideoSessionParametersKHR_T)))
PFN_vkUpdateVideoSessionParametersKHR = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkVideoSessionParametersKHR_T), ctypes.POINTER(struct_VkVideoSessionParametersUpdateInfoKHR))
PFN_vkDestroyVideoSessionParametersKHR = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkVideoSessionParametersKHR_T), ctypes.POINTER(struct_VkAllocationCallbacks))
PFN_vkCmdBeginVideoCodingKHR = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.POINTER(struct_VkVideoBeginCodingInfoKHR))
PFN_vkCmdEndVideoCodingKHR = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.POINTER(struct_VkVideoEndCodingInfoKHR))
PFN_vkCmdControlVideoCodingKHR = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.POINTER(struct_VkVideoCodingControlInfoKHR))
try:
    vkGetPhysicalDeviceVideoCapabilitiesKHR = _libraries['FIXME_STUB'].vkGetPhysicalDeviceVideoCapabilitiesKHR
    vkGetPhysicalDeviceVideoCapabilitiesKHR.restype = VkResult
    vkGetPhysicalDeviceVideoCapabilitiesKHR.argtypes = [VkPhysicalDevice, ctypes.POINTER(struct_VkVideoProfileInfoKHR), ctypes.POINTER(struct_VkVideoCapabilitiesKHR)]
except AttributeError:
    pass
try:
    vkGetPhysicalDeviceVideoFormatPropertiesKHR = _libraries['FIXME_STUB'].vkGetPhysicalDeviceVideoFormatPropertiesKHR
    vkGetPhysicalDeviceVideoFormatPropertiesKHR.restype = VkResult
    vkGetPhysicalDeviceVideoFormatPropertiesKHR.argtypes = [VkPhysicalDevice, ctypes.POINTER(struct_VkPhysicalDeviceVideoFormatInfoKHR), ctypes.POINTER(ctypes.c_uint32), ctypes.POINTER(struct_VkVideoFormatPropertiesKHR)]
except AttributeError:
    pass
try:
    vkCreateVideoSessionKHR = _libraries['FIXME_STUB'].vkCreateVideoSessionKHR
    vkCreateVideoSessionKHR.restype = VkResult
    vkCreateVideoSessionKHR.argtypes = [VkDevice, ctypes.POINTER(struct_VkVideoSessionCreateInfoKHR), ctypes.POINTER(struct_VkAllocationCallbacks), ctypes.POINTER(ctypes.POINTER(struct_VkVideoSessionKHR_T))]
except AttributeError:
    pass
try:
    vkDestroyVideoSessionKHR = _libraries['FIXME_STUB'].vkDestroyVideoSessionKHR
    vkDestroyVideoSessionKHR.restype = None
    vkDestroyVideoSessionKHR.argtypes = [VkDevice, VkVideoSessionKHR, ctypes.POINTER(struct_VkAllocationCallbacks)]
except AttributeError:
    pass
try:
    vkGetVideoSessionMemoryRequirementsKHR = _libraries['FIXME_STUB'].vkGetVideoSessionMemoryRequirementsKHR
    vkGetVideoSessionMemoryRequirementsKHR.restype = VkResult
    vkGetVideoSessionMemoryRequirementsKHR.argtypes = [VkDevice, VkVideoSessionKHR, ctypes.POINTER(ctypes.c_uint32), ctypes.POINTER(struct_VkVideoSessionMemoryRequirementsKHR)]
except AttributeError:
    pass
try:
    vkBindVideoSessionMemoryKHR = _libraries['FIXME_STUB'].vkBindVideoSessionMemoryKHR
    vkBindVideoSessionMemoryKHR.restype = VkResult
    vkBindVideoSessionMemoryKHR.argtypes = [VkDevice, VkVideoSessionKHR, uint32_t, ctypes.POINTER(struct_VkBindVideoSessionMemoryInfoKHR)]
except AttributeError:
    pass
try:
    vkCreateVideoSessionParametersKHR = _libraries['FIXME_STUB'].vkCreateVideoSessionParametersKHR
    vkCreateVideoSessionParametersKHR.restype = VkResult
    vkCreateVideoSessionParametersKHR.argtypes = [VkDevice, ctypes.POINTER(struct_VkVideoSessionParametersCreateInfoKHR), ctypes.POINTER(struct_VkAllocationCallbacks), ctypes.POINTER(ctypes.POINTER(struct_VkVideoSessionParametersKHR_T))]
except AttributeError:
    pass
try:
    vkUpdateVideoSessionParametersKHR = _libraries['FIXME_STUB'].vkUpdateVideoSessionParametersKHR
    vkUpdateVideoSessionParametersKHR.restype = VkResult
    vkUpdateVideoSessionParametersKHR.argtypes = [VkDevice, VkVideoSessionParametersKHR, ctypes.POINTER(struct_VkVideoSessionParametersUpdateInfoKHR)]
except AttributeError:
    pass
try:
    vkDestroyVideoSessionParametersKHR = _libraries['FIXME_STUB'].vkDestroyVideoSessionParametersKHR
    vkDestroyVideoSessionParametersKHR.restype = None
    vkDestroyVideoSessionParametersKHR.argtypes = [VkDevice, VkVideoSessionParametersKHR, ctypes.POINTER(struct_VkAllocationCallbacks)]
except AttributeError:
    pass
try:
    vkCmdBeginVideoCodingKHR = _libraries['FIXME_STUB'].vkCmdBeginVideoCodingKHR
    vkCmdBeginVideoCodingKHR.restype = None
    vkCmdBeginVideoCodingKHR.argtypes = [VkCommandBuffer, ctypes.POINTER(struct_VkVideoBeginCodingInfoKHR)]
except AttributeError:
    pass
try:
    vkCmdEndVideoCodingKHR = _libraries['FIXME_STUB'].vkCmdEndVideoCodingKHR
    vkCmdEndVideoCodingKHR.restype = None
    vkCmdEndVideoCodingKHR.argtypes = [VkCommandBuffer, ctypes.POINTER(struct_VkVideoEndCodingInfoKHR)]
except AttributeError:
    pass
try:
    vkCmdControlVideoCodingKHR = _libraries['FIXME_STUB'].vkCmdControlVideoCodingKHR
    vkCmdControlVideoCodingKHR.restype = None
    vkCmdControlVideoCodingKHR.argtypes = [VkCommandBuffer, ctypes.POINTER(struct_VkVideoCodingControlInfoKHR)]
except AttributeError:
    pass

# values for enumeration 'VkVideoDecodeCapabilityFlagBitsKHR'
VkVideoDecodeCapabilityFlagBitsKHR__enumvalues = {
    1: 'VK_VIDEO_DECODE_CAPABILITY_DPB_AND_OUTPUT_COINCIDE_BIT_KHR',
    2: 'VK_VIDEO_DECODE_CAPABILITY_DPB_AND_OUTPUT_DISTINCT_BIT_KHR',
    2147483647: 'VK_VIDEO_DECODE_CAPABILITY_FLAG_BITS_MAX_ENUM_KHR',
}
VK_VIDEO_DECODE_CAPABILITY_DPB_AND_OUTPUT_COINCIDE_BIT_KHR = 1
VK_VIDEO_DECODE_CAPABILITY_DPB_AND_OUTPUT_DISTINCT_BIT_KHR = 2
VK_VIDEO_DECODE_CAPABILITY_FLAG_BITS_MAX_ENUM_KHR = 2147483647
VkVideoDecodeCapabilityFlagBitsKHR = ctypes.c_uint32 # enum
VkVideoDecodeCapabilityFlagsKHR = ctypes.c_uint32

# values for enumeration 'VkVideoDecodeUsageFlagBitsKHR'
VkVideoDecodeUsageFlagBitsKHR__enumvalues = {
    0: 'VK_VIDEO_DECODE_USAGE_DEFAULT_KHR',
    1: 'VK_VIDEO_DECODE_USAGE_TRANSCODING_BIT_KHR',
    2: 'VK_VIDEO_DECODE_USAGE_OFFLINE_BIT_KHR',
    4: 'VK_VIDEO_DECODE_USAGE_STREAMING_BIT_KHR',
    2147483647: 'VK_VIDEO_DECODE_USAGE_FLAG_BITS_MAX_ENUM_KHR',
}
VK_VIDEO_DECODE_USAGE_DEFAULT_KHR = 0
VK_VIDEO_DECODE_USAGE_TRANSCODING_BIT_KHR = 1
VK_VIDEO_DECODE_USAGE_OFFLINE_BIT_KHR = 2
VK_VIDEO_DECODE_USAGE_STREAMING_BIT_KHR = 4
VK_VIDEO_DECODE_USAGE_FLAG_BITS_MAX_ENUM_KHR = 2147483647
VkVideoDecodeUsageFlagBitsKHR = ctypes.c_uint32 # enum
VkVideoDecodeUsageFlagsKHR = ctypes.c_uint32
VkVideoDecodeFlagsKHR = ctypes.c_uint32
class struct_VkVideoDecodeCapabilitiesKHR(Structure):
    pass

struct_VkVideoDecodeCapabilitiesKHR._pack_ = 1 # source:False
struct_VkVideoDecodeCapabilitiesKHR._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('flags', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkVideoDecodeCapabilitiesKHR = struct_VkVideoDecodeCapabilitiesKHR
class struct_VkVideoDecodeUsageInfoKHR(Structure):
    pass

struct_VkVideoDecodeUsageInfoKHR._pack_ = 1 # source:False
struct_VkVideoDecodeUsageInfoKHR._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('videoUsageHints', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkVideoDecodeUsageInfoKHR = struct_VkVideoDecodeUsageInfoKHR
class struct_VkVideoDecodeInfoKHR(Structure):
    pass

struct_VkVideoDecodeInfoKHR._pack_ = 1 # source:False
struct_VkVideoDecodeInfoKHR._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('flags', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('srcBuffer', ctypes.POINTER(struct_VkBuffer_T)),
    ('srcBufferOffset', ctypes.c_uint64),
    ('srcBufferRange', ctypes.c_uint64),
    ('dstPictureResource', VkVideoPictureResourceInfoKHR),
    ('pSetupReferenceSlot', ctypes.POINTER(struct_VkVideoReferenceSlotInfoKHR)),
    ('referenceSlotCount', ctypes.c_uint32),
    ('PADDING_2', ctypes.c_ubyte * 4),
    ('pReferenceSlots', ctypes.POINTER(struct_VkVideoReferenceSlotInfoKHR)),
]

VkVideoDecodeInfoKHR = struct_VkVideoDecodeInfoKHR
PFN_vkCmdDecodeVideoKHR = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.POINTER(struct_VkVideoDecodeInfoKHR))
try:
    vkCmdDecodeVideoKHR = _libraries['FIXME_STUB'].vkCmdDecodeVideoKHR
    vkCmdDecodeVideoKHR.restype = None
    vkCmdDecodeVideoKHR.argtypes = [VkCommandBuffer, ctypes.POINTER(struct_VkVideoDecodeInfoKHR)]
except AttributeError:
    pass

# values for enumeration 'VkVideoEncodeH264CapabilityFlagBitsKHR'
VkVideoEncodeH264CapabilityFlagBitsKHR__enumvalues = {
    1: 'VK_VIDEO_ENCODE_H264_CAPABILITY_HRD_COMPLIANCE_BIT_KHR',
    2: 'VK_VIDEO_ENCODE_H264_CAPABILITY_PREDICTION_WEIGHT_TABLE_GENERATED_BIT_KHR',
    4: 'VK_VIDEO_ENCODE_H264_CAPABILITY_ROW_UNALIGNED_SLICE_BIT_KHR',
    8: 'VK_VIDEO_ENCODE_H264_CAPABILITY_DIFFERENT_SLICE_TYPE_BIT_KHR',
    16: 'VK_VIDEO_ENCODE_H264_CAPABILITY_B_FRAME_IN_L0_LIST_BIT_KHR',
    32: 'VK_VIDEO_ENCODE_H264_CAPABILITY_B_FRAME_IN_L1_LIST_BIT_KHR',
    64: 'VK_VIDEO_ENCODE_H264_CAPABILITY_PER_PICTURE_TYPE_MIN_MAX_QP_BIT_KHR',
    128: 'VK_VIDEO_ENCODE_H264_CAPABILITY_PER_SLICE_CONSTANT_QP_BIT_KHR',
    256: 'VK_VIDEO_ENCODE_H264_CAPABILITY_GENERATE_PREFIX_NALU_BIT_KHR',
    2147483647: 'VK_VIDEO_ENCODE_H264_CAPABILITY_FLAG_BITS_MAX_ENUM_KHR',
}
VK_VIDEO_ENCODE_H264_CAPABILITY_HRD_COMPLIANCE_BIT_KHR = 1
VK_VIDEO_ENCODE_H264_CAPABILITY_PREDICTION_WEIGHT_TABLE_GENERATED_BIT_KHR = 2
VK_VIDEO_ENCODE_H264_CAPABILITY_ROW_UNALIGNED_SLICE_BIT_KHR = 4
VK_VIDEO_ENCODE_H264_CAPABILITY_DIFFERENT_SLICE_TYPE_BIT_KHR = 8
VK_VIDEO_ENCODE_H264_CAPABILITY_B_FRAME_IN_L0_LIST_BIT_KHR = 16
VK_VIDEO_ENCODE_H264_CAPABILITY_B_FRAME_IN_L1_LIST_BIT_KHR = 32
VK_VIDEO_ENCODE_H264_CAPABILITY_PER_PICTURE_TYPE_MIN_MAX_QP_BIT_KHR = 64
VK_VIDEO_ENCODE_H264_CAPABILITY_PER_SLICE_CONSTANT_QP_BIT_KHR = 128
VK_VIDEO_ENCODE_H264_CAPABILITY_GENERATE_PREFIX_NALU_BIT_KHR = 256
VK_VIDEO_ENCODE_H264_CAPABILITY_FLAG_BITS_MAX_ENUM_KHR = 2147483647
VkVideoEncodeH264CapabilityFlagBitsKHR = ctypes.c_uint32 # enum
VkVideoEncodeH264CapabilityFlagsKHR = ctypes.c_uint32

# values for enumeration 'VkVideoEncodeH264StdFlagBitsKHR'
VkVideoEncodeH264StdFlagBitsKHR__enumvalues = {
    1: 'VK_VIDEO_ENCODE_H264_STD_SEPARATE_COLOR_PLANE_FLAG_SET_BIT_KHR',
    2: 'VK_VIDEO_ENCODE_H264_STD_QPPRIME_Y_ZERO_TRANSFORM_BYPASS_FLAG_SET_BIT_KHR',
    4: 'VK_VIDEO_ENCODE_H264_STD_SCALING_MATRIX_PRESENT_FLAG_SET_BIT_KHR',
    8: 'VK_VIDEO_ENCODE_H264_STD_CHROMA_QP_INDEX_OFFSET_BIT_KHR',
    16: 'VK_VIDEO_ENCODE_H264_STD_SECOND_CHROMA_QP_INDEX_OFFSET_BIT_KHR',
    32: 'VK_VIDEO_ENCODE_H264_STD_PIC_INIT_QP_MINUS26_BIT_KHR',
    64: 'VK_VIDEO_ENCODE_H264_STD_WEIGHTED_PRED_FLAG_SET_BIT_KHR',
    128: 'VK_VIDEO_ENCODE_H264_STD_WEIGHTED_BIPRED_IDC_EXPLICIT_BIT_KHR',
    256: 'VK_VIDEO_ENCODE_H264_STD_WEIGHTED_BIPRED_IDC_IMPLICIT_BIT_KHR',
    512: 'VK_VIDEO_ENCODE_H264_STD_TRANSFORM_8X8_MODE_FLAG_SET_BIT_KHR',
    1024: 'VK_VIDEO_ENCODE_H264_STD_DIRECT_SPATIAL_MV_PRED_FLAG_UNSET_BIT_KHR',
    2048: 'VK_VIDEO_ENCODE_H264_STD_ENTROPY_CODING_MODE_FLAG_UNSET_BIT_KHR',
    4096: 'VK_VIDEO_ENCODE_H264_STD_ENTROPY_CODING_MODE_FLAG_SET_BIT_KHR',
    8192: 'VK_VIDEO_ENCODE_H264_STD_DIRECT_8X8_INFERENCE_FLAG_UNSET_BIT_KHR',
    16384: 'VK_VIDEO_ENCODE_H264_STD_CONSTRAINED_INTRA_PRED_FLAG_SET_BIT_KHR',
    32768: 'VK_VIDEO_ENCODE_H264_STD_DEBLOCKING_FILTER_DISABLED_BIT_KHR',
    65536: 'VK_VIDEO_ENCODE_H264_STD_DEBLOCKING_FILTER_ENABLED_BIT_KHR',
    131072: 'VK_VIDEO_ENCODE_H264_STD_DEBLOCKING_FILTER_PARTIAL_BIT_KHR',
    524288: 'VK_VIDEO_ENCODE_H264_STD_SLICE_QP_DELTA_BIT_KHR',
    1048576: 'VK_VIDEO_ENCODE_H264_STD_DIFFERENT_SLICE_QP_DELTA_BIT_KHR',
    2147483647: 'VK_VIDEO_ENCODE_H264_STD_FLAG_BITS_MAX_ENUM_KHR',
}
VK_VIDEO_ENCODE_H264_STD_SEPARATE_COLOR_PLANE_FLAG_SET_BIT_KHR = 1
VK_VIDEO_ENCODE_H264_STD_QPPRIME_Y_ZERO_TRANSFORM_BYPASS_FLAG_SET_BIT_KHR = 2
VK_VIDEO_ENCODE_H264_STD_SCALING_MATRIX_PRESENT_FLAG_SET_BIT_KHR = 4
VK_VIDEO_ENCODE_H264_STD_CHROMA_QP_INDEX_OFFSET_BIT_KHR = 8
VK_VIDEO_ENCODE_H264_STD_SECOND_CHROMA_QP_INDEX_OFFSET_BIT_KHR = 16
VK_VIDEO_ENCODE_H264_STD_PIC_INIT_QP_MINUS26_BIT_KHR = 32
VK_VIDEO_ENCODE_H264_STD_WEIGHTED_PRED_FLAG_SET_BIT_KHR = 64
VK_VIDEO_ENCODE_H264_STD_WEIGHTED_BIPRED_IDC_EXPLICIT_BIT_KHR = 128
VK_VIDEO_ENCODE_H264_STD_WEIGHTED_BIPRED_IDC_IMPLICIT_BIT_KHR = 256
VK_VIDEO_ENCODE_H264_STD_TRANSFORM_8X8_MODE_FLAG_SET_BIT_KHR = 512
VK_VIDEO_ENCODE_H264_STD_DIRECT_SPATIAL_MV_PRED_FLAG_UNSET_BIT_KHR = 1024
VK_VIDEO_ENCODE_H264_STD_ENTROPY_CODING_MODE_FLAG_UNSET_BIT_KHR = 2048
VK_VIDEO_ENCODE_H264_STD_ENTROPY_CODING_MODE_FLAG_SET_BIT_KHR = 4096
VK_VIDEO_ENCODE_H264_STD_DIRECT_8X8_INFERENCE_FLAG_UNSET_BIT_KHR = 8192
VK_VIDEO_ENCODE_H264_STD_CONSTRAINED_INTRA_PRED_FLAG_SET_BIT_KHR = 16384
VK_VIDEO_ENCODE_H264_STD_DEBLOCKING_FILTER_DISABLED_BIT_KHR = 32768
VK_VIDEO_ENCODE_H264_STD_DEBLOCKING_FILTER_ENABLED_BIT_KHR = 65536
VK_VIDEO_ENCODE_H264_STD_DEBLOCKING_FILTER_PARTIAL_BIT_KHR = 131072
VK_VIDEO_ENCODE_H264_STD_SLICE_QP_DELTA_BIT_KHR = 524288
VK_VIDEO_ENCODE_H264_STD_DIFFERENT_SLICE_QP_DELTA_BIT_KHR = 1048576
VK_VIDEO_ENCODE_H264_STD_FLAG_BITS_MAX_ENUM_KHR = 2147483647
VkVideoEncodeH264StdFlagBitsKHR = ctypes.c_uint32 # enum
VkVideoEncodeH264StdFlagsKHR = ctypes.c_uint32

# values for enumeration 'VkVideoEncodeH264RateControlFlagBitsKHR'
VkVideoEncodeH264RateControlFlagBitsKHR__enumvalues = {
    1: 'VK_VIDEO_ENCODE_H264_RATE_CONTROL_ATTEMPT_HRD_COMPLIANCE_BIT_KHR',
    2: 'VK_VIDEO_ENCODE_H264_RATE_CONTROL_REGULAR_GOP_BIT_KHR',
    4: 'VK_VIDEO_ENCODE_H264_RATE_CONTROL_REFERENCE_PATTERN_FLAT_BIT_KHR',
    8: 'VK_VIDEO_ENCODE_H264_RATE_CONTROL_REFERENCE_PATTERN_DYADIC_BIT_KHR',
    16: 'VK_VIDEO_ENCODE_H264_RATE_CONTROL_TEMPORAL_LAYER_PATTERN_DYADIC_BIT_KHR',
    2147483647: 'VK_VIDEO_ENCODE_H264_RATE_CONTROL_FLAG_BITS_MAX_ENUM_KHR',
}
VK_VIDEO_ENCODE_H264_RATE_CONTROL_ATTEMPT_HRD_COMPLIANCE_BIT_KHR = 1
VK_VIDEO_ENCODE_H264_RATE_CONTROL_REGULAR_GOP_BIT_KHR = 2
VK_VIDEO_ENCODE_H264_RATE_CONTROL_REFERENCE_PATTERN_FLAT_BIT_KHR = 4
VK_VIDEO_ENCODE_H264_RATE_CONTROL_REFERENCE_PATTERN_DYADIC_BIT_KHR = 8
VK_VIDEO_ENCODE_H264_RATE_CONTROL_TEMPORAL_LAYER_PATTERN_DYADIC_BIT_KHR = 16
VK_VIDEO_ENCODE_H264_RATE_CONTROL_FLAG_BITS_MAX_ENUM_KHR = 2147483647
VkVideoEncodeH264RateControlFlagBitsKHR = ctypes.c_uint32 # enum
VkVideoEncodeH264RateControlFlagsKHR = ctypes.c_uint32
class struct_VkVideoEncodeH264CapabilitiesKHR(Structure):
    pass


# values for enumeration 'StdVideoH264LevelIdc'
StdVideoH264LevelIdc__enumvalues = {
    0: 'STD_VIDEO_H264_LEVEL_IDC_1_0',
    1: 'STD_VIDEO_H264_LEVEL_IDC_1_1',
    2: 'STD_VIDEO_H264_LEVEL_IDC_1_2',
    3: 'STD_VIDEO_H264_LEVEL_IDC_1_3',
    4: 'STD_VIDEO_H264_LEVEL_IDC_2_0',
    5: 'STD_VIDEO_H264_LEVEL_IDC_2_1',
    6: 'STD_VIDEO_H264_LEVEL_IDC_2_2',
    7: 'STD_VIDEO_H264_LEVEL_IDC_3_0',
    8: 'STD_VIDEO_H264_LEVEL_IDC_3_1',
    9: 'STD_VIDEO_H264_LEVEL_IDC_3_2',
    10: 'STD_VIDEO_H264_LEVEL_IDC_4_0',
    11: 'STD_VIDEO_H264_LEVEL_IDC_4_1',
    12: 'STD_VIDEO_H264_LEVEL_IDC_4_2',
    13: 'STD_VIDEO_H264_LEVEL_IDC_5_0',
    14: 'STD_VIDEO_H264_LEVEL_IDC_5_1',
    15: 'STD_VIDEO_H264_LEVEL_IDC_5_2',
    16: 'STD_VIDEO_H264_LEVEL_IDC_6_0',
    17: 'STD_VIDEO_H264_LEVEL_IDC_6_1',
    18: 'STD_VIDEO_H264_LEVEL_IDC_6_2',
    2147483647: 'STD_VIDEO_H264_LEVEL_IDC_INVALID',
    2147483647: 'STD_VIDEO_H264_LEVEL_IDC_MAX_ENUM',
}
STD_VIDEO_H264_LEVEL_IDC_1_0 = 0
STD_VIDEO_H264_LEVEL_IDC_1_1 = 1
STD_VIDEO_H264_LEVEL_IDC_1_2 = 2
STD_VIDEO_H264_LEVEL_IDC_1_3 = 3
STD_VIDEO_H264_LEVEL_IDC_2_0 = 4
STD_VIDEO_H264_LEVEL_IDC_2_1 = 5
STD_VIDEO_H264_LEVEL_IDC_2_2 = 6
STD_VIDEO_H264_LEVEL_IDC_3_0 = 7
STD_VIDEO_H264_LEVEL_IDC_3_1 = 8
STD_VIDEO_H264_LEVEL_IDC_3_2 = 9
STD_VIDEO_H264_LEVEL_IDC_4_0 = 10
STD_VIDEO_H264_LEVEL_IDC_4_1 = 11
STD_VIDEO_H264_LEVEL_IDC_4_2 = 12
STD_VIDEO_H264_LEVEL_IDC_5_0 = 13
STD_VIDEO_H264_LEVEL_IDC_5_1 = 14
STD_VIDEO_H264_LEVEL_IDC_5_2 = 15
STD_VIDEO_H264_LEVEL_IDC_6_0 = 16
STD_VIDEO_H264_LEVEL_IDC_6_1 = 17
STD_VIDEO_H264_LEVEL_IDC_6_2 = 18
STD_VIDEO_H264_LEVEL_IDC_INVALID = 2147483647
STD_VIDEO_H264_LEVEL_IDC_MAX_ENUM = 2147483647
StdVideoH264LevelIdc = ctypes.c_uint32 # enum
struct_VkVideoEncodeH264CapabilitiesKHR._pack_ = 1 # source:False
struct_VkVideoEncodeH264CapabilitiesKHR._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('flags', ctypes.c_uint32),
    ('maxLevelIdc', StdVideoH264LevelIdc),
    ('maxSliceCount', ctypes.c_uint32),
    ('maxPPictureL0ReferenceCount', ctypes.c_uint32),
    ('maxBPictureL0ReferenceCount', ctypes.c_uint32),
    ('maxL1ReferenceCount', ctypes.c_uint32),
    ('maxTemporalLayerCount', ctypes.c_uint32),
    ('expectDyadicTemporalLayerPattern', ctypes.c_uint32),
    ('minQp', ctypes.c_int32),
    ('maxQp', ctypes.c_int32),
    ('prefersGopRemainingFrames', ctypes.c_uint32),
    ('requiresGopRemainingFrames', ctypes.c_uint32),
    ('stdSyntaxFlags', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkVideoEncodeH264CapabilitiesKHR = struct_VkVideoEncodeH264CapabilitiesKHR
class struct_VkVideoEncodeH264QpKHR(Structure):
    pass

struct_VkVideoEncodeH264QpKHR._pack_ = 1 # source:False
struct_VkVideoEncodeH264QpKHR._fields_ = [
    ('qpI', ctypes.c_int32),
    ('qpP', ctypes.c_int32),
    ('qpB', ctypes.c_int32),
]

VkVideoEncodeH264QpKHR = struct_VkVideoEncodeH264QpKHR
class struct_VkVideoEncodeH264QualityLevelPropertiesKHR(Structure):
    pass

struct_VkVideoEncodeH264QualityLevelPropertiesKHR._pack_ = 1 # source:False
struct_VkVideoEncodeH264QualityLevelPropertiesKHR._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('preferredRateControlFlags', ctypes.c_uint32),
    ('preferredGopFrameCount', ctypes.c_uint32),
    ('preferredIdrPeriod', ctypes.c_uint32),
    ('preferredConsecutiveBFrameCount', ctypes.c_uint32),
    ('preferredTemporalLayerCount', ctypes.c_uint32),
    ('preferredConstantQp', VkVideoEncodeH264QpKHR),
    ('preferredMaxL0ReferenceCount', ctypes.c_uint32),
    ('preferredMaxL1ReferenceCount', ctypes.c_uint32),
    ('preferredStdEntropyCodingModeFlag', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkVideoEncodeH264QualityLevelPropertiesKHR = struct_VkVideoEncodeH264QualityLevelPropertiesKHR
class struct_VkVideoEncodeH264SessionCreateInfoKHR(Structure):
    pass

struct_VkVideoEncodeH264SessionCreateInfoKHR._pack_ = 1 # source:False
struct_VkVideoEncodeH264SessionCreateInfoKHR._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('useMaxLevelIdc', ctypes.c_uint32),
    ('maxLevelIdc', StdVideoH264LevelIdc),
]

VkVideoEncodeH264SessionCreateInfoKHR = struct_VkVideoEncodeH264SessionCreateInfoKHR
class struct_VkVideoEncodeH264SessionParametersAddInfoKHR(Structure):
    pass

class struct_StdVideoH264SequenceParameterSet(Structure):
    pass

class struct_StdVideoH264PictureParameterSet(Structure):
    pass

struct_VkVideoEncodeH264SessionParametersAddInfoKHR._pack_ = 1 # source:False
struct_VkVideoEncodeH264SessionParametersAddInfoKHR._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('stdSPSCount', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('pStdSPSs', ctypes.POINTER(struct_StdVideoH264SequenceParameterSet)),
    ('stdPPSCount', ctypes.c_uint32),
    ('PADDING_2', ctypes.c_ubyte * 4),
    ('pStdPPSs', ctypes.POINTER(struct_StdVideoH264PictureParameterSet)),
]

class struct_StdVideoH264ScalingLists(Structure):
    pass

class struct_StdVideoH264SequenceParameterSetVui(Structure):
    pass

class struct_StdVideoH264SpsFlags(Structure):
    pass

struct_StdVideoH264SpsFlags._pack_ = 1 # source:False
struct_StdVideoH264SpsFlags._fields_ = [
    ('constraint_set0_flag', ctypes.c_uint32, 1),
    ('constraint_set1_flag', ctypes.c_uint32, 1),
    ('constraint_set2_flag', ctypes.c_uint32, 1),
    ('constraint_set3_flag', ctypes.c_uint32, 1),
    ('constraint_set4_flag', ctypes.c_uint32, 1),
    ('constraint_set5_flag', ctypes.c_uint32, 1),
    ('direct_8x8_inference_flag', ctypes.c_uint32, 1),
    ('mb_adaptive_frame_field_flag', ctypes.c_uint32, 1),
    ('frame_mbs_only_flag', ctypes.c_uint32, 1),
    ('delta_pic_order_always_zero_flag', ctypes.c_uint32, 1),
    ('separate_colour_plane_flag', ctypes.c_uint32, 1),
    ('gaps_in_frame_num_value_allowed_flag', ctypes.c_uint32, 1),
    ('qpprime_y_zero_transform_bypass_flag', ctypes.c_uint32, 1),
    ('frame_cropping_flag', ctypes.c_uint32, 1),
    ('seq_scaling_matrix_present_flag', ctypes.c_uint32, 1),
    ('vui_parameters_present_flag', ctypes.c_uint32, 1),
    ('PADDING_0', ctypes.c_uint16, 16),
]


# values for enumeration 'StdVideoH264ProfileIdc'
StdVideoH264ProfileIdc__enumvalues = {
    66: 'STD_VIDEO_H264_PROFILE_IDC_BASELINE',
    77: 'STD_VIDEO_H264_PROFILE_IDC_MAIN',
    100: 'STD_VIDEO_H264_PROFILE_IDC_HIGH',
    244: 'STD_VIDEO_H264_PROFILE_IDC_HIGH_444_PREDICTIVE',
    2147483647: 'STD_VIDEO_H264_PROFILE_IDC_INVALID',
    2147483647: 'STD_VIDEO_H264_PROFILE_IDC_MAX_ENUM',
}
STD_VIDEO_H264_PROFILE_IDC_BASELINE = 66
STD_VIDEO_H264_PROFILE_IDC_MAIN = 77
STD_VIDEO_H264_PROFILE_IDC_HIGH = 100
STD_VIDEO_H264_PROFILE_IDC_HIGH_444_PREDICTIVE = 244
STD_VIDEO_H264_PROFILE_IDC_INVALID = 2147483647
STD_VIDEO_H264_PROFILE_IDC_MAX_ENUM = 2147483647
StdVideoH264ProfileIdc = ctypes.c_uint32 # enum

# values for enumeration 'StdVideoH264ChromaFormatIdc'
StdVideoH264ChromaFormatIdc__enumvalues = {
    0: 'STD_VIDEO_H264_CHROMA_FORMAT_IDC_MONOCHROME',
    1: 'STD_VIDEO_H264_CHROMA_FORMAT_IDC_420',
    2: 'STD_VIDEO_H264_CHROMA_FORMAT_IDC_422',
    3: 'STD_VIDEO_H264_CHROMA_FORMAT_IDC_444',
    2147483647: 'STD_VIDEO_H264_CHROMA_FORMAT_IDC_INVALID',
    2147483647: 'STD_VIDEO_H264_CHROMA_FORMAT_IDC_MAX_ENUM',
}
STD_VIDEO_H264_CHROMA_FORMAT_IDC_MONOCHROME = 0
STD_VIDEO_H264_CHROMA_FORMAT_IDC_420 = 1
STD_VIDEO_H264_CHROMA_FORMAT_IDC_422 = 2
STD_VIDEO_H264_CHROMA_FORMAT_IDC_444 = 3
STD_VIDEO_H264_CHROMA_FORMAT_IDC_INVALID = 2147483647
STD_VIDEO_H264_CHROMA_FORMAT_IDC_MAX_ENUM = 2147483647
StdVideoH264ChromaFormatIdc = ctypes.c_uint32 # enum

# values for enumeration 'StdVideoH264PocType'
StdVideoH264PocType__enumvalues = {
    0: 'STD_VIDEO_H264_POC_TYPE_0',
    1: 'STD_VIDEO_H264_POC_TYPE_1',
    2: 'STD_VIDEO_H264_POC_TYPE_2',
    2147483647: 'STD_VIDEO_H264_POC_TYPE_INVALID',
    2147483647: 'STD_VIDEO_H264_POC_TYPE_MAX_ENUM',
}
STD_VIDEO_H264_POC_TYPE_0 = 0
STD_VIDEO_H264_POC_TYPE_1 = 1
STD_VIDEO_H264_POC_TYPE_2 = 2
STD_VIDEO_H264_POC_TYPE_INVALID = 2147483647
STD_VIDEO_H264_POC_TYPE_MAX_ENUM = 2147483647
StdVideoH264PocType = ctypes.c_uint32 # enum
struct_StdVideoH264SequenceParameterSet._pack_ = 1 # source:False
struct_StdVideoH264SequenceParameterSet._fields_ = [
    ('flags', struct_StdVideoH264SpsFlags),
    ('profile_idc', StdVideoH264ProfileIdc),
    ('level_idc', StdVideoH264LevelIdc),
    ('chroma_format_idc', StdVideoH264ChromaFormatIdc),
    ('seq_parameter_set_id', ctypes.c_ubyte),
    ('bit_depth_luma_minus8', ctypes.c_ubyte),
    ('bit_depth_chroma_minus8', ctypes.c_ubyte),
    ('log2_max_frame_num_minus4', ctypes.c_ubyte),
    ('pic_order_cnt_type', StdVideoH264PocType),
    ('offset_for_non_ref_pic', ctypes.c_int32),
    ('offset_for_top_to_bottom_field', ctypes.c_int32),
    ('log2_max_pic_order_cnt_lsb_minus4', ctypes.c_ubyte),
    ('num_ref_frames_in_pic_order_cnt_cycle', ctypes.c_ubyte),
    ('max_num_ref_frames', ctypes.c_ubyte),
    ('reserved1', ctypes.c_ubyte),
    ('pic_width_in_mbs_minus1', ctypes.c_uint32),
    ('pic_height_in_map_units_minus1', ctypes.c_uint32),
    ('frame_crop_left_offset', ctypes.c_uint32),
    ('frame_crop_right_offset', ctypes.c_uint32),
    ('frame_crop_top_offset', ctypes.c_uint32),
    ('frame_crop_bottom_offset', ctypes.c_uint32),
    ('reserved2', ctypes.c_uint32),
    ('pOffsetForRefFrame', ctypes.POINTER(ctypes.c_int32)),
    ('pScalingLists', ctypes.POINTER(struct_StdVideoH264ScalingLists)),
    ('pSequenceParameterSetVui', ctypes.POINTER(struct_StdVideoH264SequenceParameterSetVui)),
]

struct_StdVideoH264ScalingLists._pack_ = 1 # source:False
struct_StdVideoH264ScalingLists._fields_ = [
    ('scaling_list_present_mask', ctypes.c_uint16),
    ('use_default_scaling_matrix_mask', ctypes.c_uint16),
    ('ScalingList4x4', ctypes.c_ubyte * 16 * 6),
    ('ScalingList8x8', ctypes.c_ubyte * 64 * 6),
]

class struct_StdVideoH264HrdParameters(Structure):
    pass

class struct_StdVideoH264SpsVuiFlags(Structure):
    pass

struct_StdVideoH264SpsVuiFlags._pack_ = 1 # source:False
struct_StdVideoH264SpsVuiFlags._fields_ = [
    ('aspect_ratio_info_present_flag', ctypes.c_uint32, 1),
    ('overscan_info_present_flag', ctypes.c_uint32, 1),
    ('overscan_appropriate_flag', ctypes.c_uint32, 1),
    ('video_signal_type_present_flag', ctypes.c_uint32, 1),
    ('video_full_range_flag', ctypes.c_uint32, 1),
    ('color_description_present_flag', ctypes.c_uint32, 1),
    ('chroma_loc_info_present_flag', ctypes.c_uint32, 1),
    ('timing_info_present_flag', ctypes.c_uint32, 1),
    ('fixed_frame_rate_flag', ctypes.c_uint32, 1),
    ('bitstream_restriction_flag', ctypes.c_uint32, 1),
    ('nal_hrd_parameters_present_flag', ctypes.c_uint32, 1),
    ('vcl_hrd_parameters_present_flag', ctypes.c_uint32, 1),
    ('PADDING_0', ctypes.c_uint32, 20),
]


# values for enumeration 'StdVideoH264AspectRatioIdc'
StdVideoH264AspectRatioIdc__enumvalues = {
    0: 'STD_VIDEO_H264_ASPECT_RATIO_IDC_UNSPECIFIED',
    1: 'STD_VIDEO_H264_ASPECT_RATIO_IDC_SQUARE',
    2: 'STD_VIDEO_H264_ASPECT_RATIO_IDC_12_11',
    3: 'STD_VIDEO_H264_ASPECT_RATIO_IDC_10_11',
    4: 'STD_VIDEO_H264_ASPECT_RATIO_IDC_16_11',
    5: 'STD_VIDEO_H264_ASPECT_RATIO_IDC_40_33',
    6: 'STD_VIDEO_H264_ASPECT_RATIO_IDC_24_11',
    7: 'STD_VIDEO_H264_ASPECT_RATIO_IDC_20_11',
    8: 'STD_VIDEO_H264_ASPECT_RATIO_IDC_32_11',
    9: 'STD_VIDEO_H264_ASPECT_RATIO_IDC_80_33',
    10: 'STD_VIDEO_H264_ASPECT_RATIO_IDC_18_11',
    11: 'STD_VIDEO_H264_ASPECT_RATIO_IDC_15_11',
    12: 'STD_VIDEO_H264_ASPECT_RATIO_IDC_64_33',
    13: 'STD_VIDEO_H264_ASPECT_RATIO_IDC_160_99',
    14: 'STD_VIDEO_H264_ASPECT_RATIO_IDC_4_3',
    15: 'STD_VIDEO_H264_ASPECT_RATIO_IDC_3_2',
    16: 'STD_VIDEO_H264_ASPECT_RATIO_IDC_2_1',
    255: 'STD_VIDEO_H264_ASPECT_RATIO_IDC_EXTENDED_SAR',
    2147483647: 'STD_VIDEO_H264_ASPECT_RATIO_IDC_INVALID',
    2147483647: 'STD_VIDEO_H264_ASPECT_RATIO_IDC_MAX_ENUM',
}
STD_VIDEO_H264_ASPECT_RATIO_IDC_UNSPECIFIED = 0
STD_VIDEO_H264_ASPECT_RATIO_IDC_SQUARE = 1
STD_VIDEO_H264_ASPECT_RATIO_IDC_12_11 = 2
STD_VIDEO_H264_ASPECT_RATIO_IDC_10_11 = 3
STD_VIDEO_H264_ASPECT_RATIO_IDC_16_11 = 4
STD_VIDEO_H264_ASPECT_RATIO_IDC_40_33 = 5
STD_VIDEO_H264_ASPECT_RATIO_IDC_24_11 = 6
STD_VIDEO_H264_ASPECT_RATIO_IDC_20_11 = 7
STD_VIDEO_H264_ASPECT_RATIO_IDC_32_11 = 8
STD_VIDEO_H264_ASPECT_RATIO_IDC_80_33 = 9
STD_VIDEO_H264_ASPECT_RATIO_IDC_18_11 = 10
STD_VIDEO_H264_ASPECT_RATIO_IDC_15_11 = 11
STD_VIDEO_H264_ASPECT_RATIO_IDC_64_33 = 12
STD_VIDEO_H264_ASPECT_RATIO_IDC_160_99 = 13
STD_VIDEO_H264_ASPECT_RATIO_IDC_4_3 = 14
STD_VIDEO_H264_ASPECT_RATIO_IDC_3_2 = 15
STD_VIDEO_H264_ASPECT_RATIO_IDC_2_1 = 16
STD_VIDEO_H264_ASPECT_RATIO_IDC_EXTENDED_SAR = 255
STD_VIDEO_H264_ASPECT_RATIO_IDC_INVALID = 2147483647
STD_VIDEO_H264_ASPECT_RATIO_IDC_MAX_ENUM = 2147483647
StdVideoH264AspectRatioIdc = ctypes.c_uint32 # enum
struct_StdVideoH264SequenceParameterSetVui._pack_ = 1 # source:False
struct_StdVideoH264SequenceParameterSetVui._fields_ = [
    ('flags', struct_StdVideoH264SpsVuiFlags),
    ('aspect_ratio_idc', StdVideoH264AspectRatioIdc),
    ('sar_width', ctypes.c_uint16),
    ('sar_height', ctypes.c_uint16),
    ('video_format', ctypes.c_ubyte),
    ('colour_primaries', ctypes.c_ubyte),
    ('transfer_characteristics', ctypes.c_ubyte),
    ('matrix_coefficients', ctypes.c_ubyte),
    ('num_units_in_tick', ctypes.c_uint32),
    ('time_scale', ctypes.c_uint32),
    ('max_num_reorder_frames', ctypes.c_ubyte),
    ('max_dec_frame_buffering', ctypes.c_ubyte),
    ('chroma_sample_loc_type_top_field', ctypes.c_ubyte),
    ('chroma_sample_loc_type_bottom_field', ctypes.c_ubyte),
    ('reserved1', ctypes.c_uint32),
    ('pHrdParameters', ctypes.POINTER(struct_StdVideoH264HrdParameters)),
]

struct_StdVideoH264HrdParameters._pack_ = 1 # source:False
struct_StdVideoH264HrdParameters._fields_ = [
    ('cpb_cnt_minus1', ctypes.c_ubyte),
    ('bit_rate_scale', ctypes.c_ubyte),
    ('cpb_size_scale', ctypes.c_ubyte),
    ('reserved1', ctypes.c_ubyte),
    ('bit_rate_value_minus1', ctypes.c_uint32 * 32),
    ('cpb_size_value_minus1', ctypes.c_uint32 * 32),
    ('cbr_flag', ctypes.c_ubyte * 32),
    ('initial_cpb_removal_delay_length_minus1', ctypes.c_uint32),
    ('cpb_removal_delay_length_minus1', ctypes.c_uint32),
    ('dpb_output_delay_length_minus1', ctypes.c_uint32),
    ('time_offset_length', ctypes.c_uint32),
]

class struct_StdVideoH264PpsFlags(Structure):
    pass

struct_StdVideoH264PpsFlags._pack_ = 1 # source:False
struct_StdVideoH264PpsFlags._fields_ = [
    ('transform_8x8_mode_flag', ctypes.c_uint32, 1),
    ('redundant_pic_cnt_present_flag', ctypes.c_uint32, 1),
    ('constrained_intra_pred_flag', ctypes.c_uint32, 1),
    ('deblocking_filter_control_present_flag', ctypes.c_uint32, 1),
    ('weighted_pred_flag', ctypes.c_uint32, 1),
    ('bottom_field_pic_order_in_frame_present_flag', ctypes.c_uint32, 1),
    ('entropy_coding_mode_flag', ctypes.c_uint32, 1),
    ('pic_scaling_matrix_present_flag', ctypes.c_uint32, 1),
    ('PADDING_0', ctypes.c_uint32, 24),
]


# values for enumeration 'StdVideoH264WeightedBipredIdc'
StdVideoH264WeightedBipredIdc__enumvalues = {
    0: 'STD_VIDEO_H264_WEIGHTED_BIPRED_IDC_DEFAULT',
    1: 'STD_VIDEO_H264_WEIGHTED_BIPRED_IDC_EXPLICIT',
    2: 'STD_VIDEO_H264_WEIGHTED_BIPRED_IDC_IMPLICIT',
    2147483647: 'STD_VIDEO_H264_WEIGHTED_BIPRED_IDC_INVALID',
    2147483647: 'STD_VIDEO_H264_WEIGHTED_BIPRED_IDC_MAX_ENUM',
}
STD_VIDEO_H264_WEIGHTED_BIPRED_IDC_DEFAULT = 0
STD_VIDEO_H264_WEIGHTED_BIPRED_IDC_EXPLICIT = 1
STD_VIDEO_H264_WEIGHTED_BIPRED_IDC_IMPLICIT = 2
STD_VIDEO_H264_WEIGHTED_BIPRED_IDC_INVALID = 2147483647
STD_VIDEO_H264_WEIGHTED_BIPRED_IDC_MAX_ENUM = 2147483647
StdVideoH264WeightedBipredIdc = ctypes.c_uint32 # enum
struct_StdVideoH264PictureParameterSet._pack_ = 1 # source:False
struct_StdVideoH264PictureParameterSet._fields_ = [
    ('flags', struct_StdVideoH264PpsFlags),
    ('seq_parameter_set_id', ctypes.c_ubyte),
    ('pic_parameter_set_id', ctypes.c_ubyte),
    ('num_ref_idx_l0_default_active_minus1', ctypes.c_ubyte),
    ('num_ref_idx_l1_default_active_minus1', ctypes.c_ubyte),
    ('weighted_bipred_idc', StdVideoH264WeightedBipredIdc),
    ('pic_init_qp_minus26', ctypes.c_byte),
    ('pic_init_qs_minus26', ctypes.c_byte),
    ('chroma_qp_index_offset', ctypes.c_byte),
    ('second_chroma_qp_index_offset', ctypes.c_byte),
    ('pScalingLists', ctypes.POINTER(struct_StdVideoH264ScalingLists)),
]

VkVideoEncodeH264SessionParametersAddInfoKHR = struct_VkVideoEncodeH264SessionParametersAddInfoKHR
class struct_VkVideoEncodeH264SessionParametersCreateInfoKHR(Structure):
    pass

struct_VkVideoEncodeH264SessionParametersCreateInfoKHR._pack_ = 1 # source:False
struct_VkVideoEncodeH264SessionParametersCreateInfoKHR._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('maxStdSPSCount', ctypes.c_uint32),
    ('maxStdPPSCount', ctypes.c_uint32),
    ('pParametersAddInfo', ctypes.POINTER(struct_VkVideoEncodeH264SessionParametersAddInfoKHR)),
]

VkVideoEncodeH264SessionParametersCreateInfoKHR = struct_VkVideoEncodeH264SessionParametersCreateInfoKHR
class struct_VkVideoEncodeH264SessionParametersGetInfoKHR(Structure):
    pass

struct_VkVideoEncodeH264SessionParametersGetInfoKHR._pack_ = 1 # source:False
struct_VkVideoEncodeH264SessionParametersGetInfoKHR._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('writeStdSPS', ctypes.c_uint32),
    ('writeStdPPS', ctypes.c_uint32),
    ('stdSPSId', ctypes.c_uint32),
    ('stdPPSId', ctypes.c_uint32),
]

VkVideoEncodeH264SessionParametersGetInfoKHR = struct_VkVideoEncodeH264SessionParametersGetInfoKHR
class struct_VkVideoEncodeH264SessionParametersFeedbackInfoKHR(Structure):
    pass

struct_VkVideoEncodeH264SessionParametersFeedbackInfoKHR._pack_ = 1 # source:False
struct_VkVideoEncodeH264SessionParametersFeedbackInfoKHR._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('hasStdSPSOverrides', ctypes.c_uint32),
    ('hasStdPPSOverrides', ctypes.c_uint32),
]

VkVideoEncodeH264SessionParametersFeedbackInfoKHR = struct_VkVideoEncodeH264SessionParametersFeedbackInfoKHR
class struct_VkVideoEncodeH264NaluSliceInfoKHR(Structure):
    pass

class struct_StdVideoEncodeH264SliceHeader(Structure):
    pass

struct_VkVideoEncodeH264NaluSliceInfoKHR._pack_ = 1 # source:False
struct_VkVideoEncodeH264NaluSliceInfoKHR._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('constantQp', ctypes.c_int32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('pStdSliceHeader', ctypes.POINTER(struct_StdVideoEncodeH264SliceHeader)),
]

class struct_StdVideoEncodeH264WeightTable(Structure):
    pass

class struct_StdVideoEncodeH264SliceHeaderFlags(Structure):
    pass

struct_StdVideoEncodeH264SliceHeaderFlags._pack_ = 1 # source:False
struct_StdVideoEncodeH264SliceHeaderFlags._fields_ = [
    ('direct_spatial_mv_pred_flag', ctypes.c_uint32, 1),
    ('num_ref_idx_active_override_flag', ctypes.c_uint32, 1),
    ('reserved', ctypes.c_uint32, 30),
]


# values for enumeration 'StdVideoH264SliceType'
StdVideoH264SliceType__enumvalues = {
    0: 'STD_VIDEO_H264_SLICE_TYPE_P',
    1: 'STD_VIDEO_H264_SLICE_TYPE_B',
    2: 'STD_VIDEO_H264_SLICE_TYPE_I',
    2147483647: 'STD_VIDEO_H264_SLICE_TYPE_INVALID',
    2147483647: 'STD_VIDEO_H264_SLICE_TYPE_MAX_ENUM',
}
STD_VIDEO_H264_SLICE_TYPE_P = 0
STD_VIDEO_H264_SLICE_TYPE_B = 1
STD_VIDEO_H264_SLICE_TYPE_I = 2
STD_VIDEO_H264_SLICE_TYPE_INVALID = 2147483647
STD_VIDEO_H264_SLICE_TYPE_MAX_ENUM = 2147483647
StdVideoH264SliceType = ctypes.c_uint32 # enum

# values for enumeration 'StdVideoH264CabacInitIdc'
StdVideoH264CabacInitIdc__enumvalues = {
    0: 'STD_VIDEO_H264_CABAC_INIT_IDC_0',
    1: 'STD_VIDEO_H264_CABAC_INIT_IDC_1',
    2: 'STD_VIDEO_H264_CABAC_INIT_IDC_2',
    2147483647: 'STD_VIDEO_H264_CABAC_INIT_IDC_INVALID',
    2147483647: 'STD_VIDEO_H264_CABAC_INIT_IDC_MAX_ENUM',
}
STD_VIDEO_H264_CABAC_INIT_IDC_0 = 0
STD_VIDEO_H264_CABAC_INIT_IDC_1 = 1
STD_VIDEO_H264_CABAC_INIT_IDC_2 = 2
STD_VIDEO_H264_CABAC_INIT_IDC_INVALID = 2147483647
STD_VIDEO_H264_CABAC_INIT_IDC_MAX_ENUM = 2147483647
StdVideoH264CabacInitIdc = ctypes.c_uint32 # enum

# values for enumeration 'StdVideoH264DisableDeblockingFilterIdc'
StdVideoH264DisableDeblockingFilterIdc__enumvalues = {
    0: 'STD_VIDEO_H264_DISABLE_DEBLOCKING_FILTER_IDC_DISABLED',
    1: 'STD_VIDEO_H264_DISABLE_DEBLOCKING_FILTER_IDC_ENABLED',
    2: 'STD_VIDEO_H264_DISABLE_DEBLOCKING_FILTER_IDC_PARTIAL',
    2147483647: 'STD_VIDEO_H264_DISABLE_DEBLOCKING_FILTER_IDC_INVALID',
    2147483647: 'STD_VIDEO_H264_DISABLE_DEBLOCKING_FILTER_IDC_MAX_ENUM',
}
STD_VIDEO_H264_DISABLE_DEBLOCKING_FILTER_IDC_DISABLED = 0
STD_VIDEO_H264_DISABLE_DEBLOCKING_FILTER_IDC_ENABLED = 1
STD_VIDEO_H264_DISABLE_DEBLOCKING_FILTER_IDC_PARTIAL = 2
STD_VIDEO_H264_DISABLE_DEBLOCKING_FILTER_IDC_INVALID = 2147483647
STD_VIDEO_H264_DISABLE_DEBLOCKING_FILTER_IDC_MAX_ENUM = 2147483647
StdVideoH264DisableDeblockingFilterIdc = ctypes.c_uint32 # enum
struct_StdVideoEncodeH264SliceHeader._pack_ = 1 # source:False
struct_StdVideoEncodeH264SliceHeader._fields_ = [
    ('flags', struct_StdVideoEncodeH264SliceHeaderFlags),
    ('first_mb_in_slice', ctypes.c_uint32),
    ('slice_type', StdVideoH264SliceType),
    ('slice_alpha_c0_offset_div2', ctypes.c_byte),
    ('slice_beta_offset_div2', ctypes.c_byte),
    ('slice_qp_delta', ctypes.c_byte),
    ('reserved1', ctypes.c_ubyte),
    ('cabac_init_idc', StdVideoH264CabacInitIdc),
    ('disable_deblocking_filter_idc', StdVideoH264DisableDeblockingFilterIdc),
    ('pWeightTable', ctypes.POINTER(struct_StdVideoEncodeH264WeightTable)),
]

class struct_StdVideoEncodeH264WeightTableFlags(Structure):
    pass

struct_StdVideoEncodeH264WeightTableFlags._pack_ = 1 # source:False
struct_StdVideoEncodeH264WeightTableFlags._fields_ = [
    ('luma_weight_l0_flag', ctypes.c_uint32),
    ('chroma_weight_l0_flag', ctypes.c_uint32),
    ('luma_weight_l1_flag', ctypes.c_uint32),
    ('chroma_weight_l1_flag', ctypes.c_uint32),
]

struct_StdVideoEncodeH264WeightTable._pack_ = 1 # source:False
struct_StdVideoEncodeH264WeightTable._fields_ = [
    ('flags', struct_StdVideoEncodeH264WeightTableFlags),
    ('luma_log2_weight_denom', ctypes.c_ubyte),
    ('chroma_log2_weight_denom', ctypes.c_ubyte),
    ('luma_weight_l0', ctypes.c_byte * 32),
    ('luma_offset_l0', ctypes.c_byte * 32),
    ('chroma_weight_l0', ctypes.c_byte * 2 * 32),
    ('chroma_offset_l0', ctypes.c_byte * 2 * 32),
    ('luma_weight_l1', ctypes.c_byte * 32),
    ('luma_offset_l1', ctypes.c_byte * 32),
    ('chroma_weight_l1', ctypes.c_byte * 2 * 32),
    ('chroma_offset_l1', ctypes.c_byte * 2 * 32),
    ('PADDING_0', ctypes.c_ubyte * 2),
]

VkVideoEncodeH264NaluSliceInfoKHR = struct_VkVideoEncodeH264NaluSliceInfoKHR
class struct_VkVideoEncodeH264PictureInfoKHR(Structure):
    pass

class struct_StdVideoEncodeH264PictureInfo(Structure):
    pass

struct_VkVideoEncodeH264PictureInfoKHR._pack_ = 1 # source:False
struct_VkVideoEncodeH264PictureInfoKHR._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('naluSliceEntryCount', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('pNaluSliceEntries', ctypes.POINTER(struct_VkVideoEncodeH264NaluSliceInfoKHR)),
    ('pStdPictureInfo', ctypes.POINTER(struct_StdVideoEncodeH264PictureInfo)),
    ('generatePrefixNalu', ctypes.c_uint32),
    ('PADDING_2', ctypes.c_ubyte * 4),
]

class struct_StdVideoEncodeH264ReferenceListsInfo(Structure):
    pass

class struct_StdVideoEncodeH264PictureInfoFlags(Structure):
    pass

struct_StdVideoEncodeH264PictureInfoFlags._pack_ = 1 # source:False
struct_StdVideoEncodeH264PictureInfoFlags._fields_ = [
    ('IdrPicFlag', ctypes.c_uint32, 1),
    ('is_reference', ctypes.c_uint32, 1),
    ('no_output_of_prior_pics_flag', ctypes.c_uint32, 1),
    ('long_term_reference_flag', ctypes.c_uint32, 1),
    ('adaptive_ref_pic_marking_mode_flag', ctypes.c_uint32, 1),
    ('reserved', ctypes.c_uint32, 27),
]


# values for enumeration 'StdVideoH264PictureType'
StdVideoH264PictureType__enumvalues = {
    0: 'STD_VIDEO_H264_PICTURE_TYPE_P',
    1: 'STD_VIDEO_H264_PICTURE_TYPE_B',
    2: 'STD_VIDEO_H264_PICTURE_TYPE_I',
    5: 'STD_VIDEO_H264_PICTURE_TYPE_IDR',
    2147483647: 'STD_VIDEO_H264_PICTURE_TYPE_INVALID',
    2147483647: 'STD_VIDEO_H264_PICTURE_TYPE_MAX_ENUM',
}
STD_VIDEO_H264_PICTURE_TYPE_P = 0
STD_VIDEO_H264_PICTURE_TYPE_B = 1
STD_VIDEO_H264_PICTURE_TYPE_I = 2
STD_VIDEO_H264_PICTURE_TYPE_IDR = 5
STD_VIDEO_H264_PICTURE_TYPE_INVALID = 2147483647
STD_VIDEO_H264_PICTURE_TYPE_MAX_ENUM = 2147483647
StdVideoH264PictureType = ctypes.c_uint32 # enum
struct_StdVideoEncodeH264PictureInfo._pack_ = 1 # source:False
struct_StdVideoEncodeH264PictureInfo._fields_ = [
    ('flags', struct_StdVideoEncodeH264PictureInfoFlags),
    ('seq_parameter_set_id', ctypes.c_ubyte),
    ('pic_parameter_set_id', ctypes.c_ubyte),
    ('idr_pic_id', ctypes.c_uint16),
    ('primary_pic_type', StdVideoH264PictureType),
    ('frame_num', ctypes.c_uint32),
    ('PicOrderCnt', ctypes.c_int32),
    ('temporal_id', ctypes.c_ubyte),
    ('reserved1', ctypes.c_ubyte * 3),
    ('pRefLists', ctypes.POINTER(struct_StdVideoEncodeH264ReferenceListsInfo)),
]

class struct_StdVideoEncodeH264RefListModEntry(Structure):
    pass

class struct_StdVideoEncodeH264RefPicMarkingEntry(Structure):
    pass

class struct_StdVideoEncodeH264ReferenceListsInfoFlags(Structure):
    pass

struct_StdVideoEncodeH264ReferenceListsInfoFlags._pack_ = 1 # source:False
struct_StdVideoEncodeH264ReferenceListsInfoFlags._fields_ = [
    ('ref_pic_list_modification_flag_l0', ctypes.c_uint32, 1),
    ('ref_pic_list_modification_flag_l1', ctypes.c_uint32, 1),
    ('reserved', ctypes.c_uint32, 30),
]

struct_StdVideoEncodeH264ReferenceListsInfo._pack_ = 1 # source:False
struct_StdVideoEncodeH264ReferenceListsInfo._fields_ = [
    ('flags', struct_StdVideoEncodeH264ReferenceListsInfoFlags),
    ('num_ref_idx_l0_active_minus1', ctypes.c_ubyte),
    ('num_ref_idx_l1_active_minus1', ctypes.c_ubyte),
    ('RefPicList0', ctypes.c_ubyte * 32),
    ('RefPicList1', ctypes.c_ubyte * 32),
    ('refList0ModOpCount', ctypes.c_ubyte),
    ('refList1ModOpCount', ctypes.c_ubyte),
    ('refPicMarkingOpCount', ctypes.c_ubyte),
    ('reserved1', ctypes.c_ubyte * 7),
    ('pRefList0ModOperations', ctypes.POINTER(struct_StdVideoEncodeH264RefListModEntry)),
    ('pRefList1ModOperations', ctypes.POINTER(struct_StdVideoEncodeH264RefListModEntry)),
    ('pRefPicMarkingOperations', ctypes.POINTER(struct_StdVideoEncodeH264RefPicMarkingEntry)),
]


# values for enumeration 'StdVideoH264ModificationOfPicNumsIdc'
StdVideoH264ModificationOfPicNumsIdc__enumvalues = {
    0: 'STD_VIDEO_H264_MODIFICATION_OF_PIC_NUMS_IDC_SHORT_TERM_SUBTRACT',
    1: 'STD_VIDEO_H264_MODIFICATION_OF_PIC_NUMS_IDC_SHORT_TERM_ADD',
    2: 'STD_VIDEO_H264_MODIFICATION_OF_PIC_NUMS_IDC_LONG_TERM',
    3: 'STD_VIDEO_H264_MODIFICATION_OF_PIC_NUMS_IDC_END',
    2147483647: 'STD_VIDEO_H264_MODIFICATION_OF_PIC_NUMS_IDC_INVALID',
    2147483647: 'STD_VIDEO_H264_MODIFICATION_OF_PIC_NUMS_IDC_MAX_ENUM',
}
STD_VIDEO_H264_MODIFICATION_OF_PIC_NUMS_IDC_SHORT_TERM_SUBTRACT = 0
STD_VIDEO_H264_MODIFICATION_OF_PIC_NUMS_IDC_SHORT_TERM_ADD = 1
STD_VIDEO_H264_MODIFICATION_OF_PIC_NUMS_IDC_LONG_TERM = 2
STD_VIDEO_H264_MODIFICATION_OF_PIC_NUMS_IDC_END = 3
STD_VIDEO_H264_MODIFICATION_OF_PIC_NUMS_IDC_INVALID = 2147483647
STD_VIDEO_H264_MODIFICATION_OF_PIC_NUMS_IDC_MAX_ENUM = 2147483647
StdVideoH264ModificationOfPicNumsIdc = ctypes.c_uint32 # enum
struct_StdVideoEncodeH264RefListModEntry._pack_ = 1 # source:False
struct_StdVideoEncodeH264RefListModEntry._fields_ = [
    ('modification_of_pic_nums_idc', StdVideoH264ModificationOfPicNumsIdc),
    ('abs_diff_pic_num_minus1', ctypes.c_uint16),
    ('long_term_pic_num', ctypes.c_uint16),
]


# values for enumeration 'StdVideoH264MemMgmtControlOp'
StdVideoH264MemMgmtControlOp__enumvalues = {
    0: 'STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_END',
    1: 'STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_UNMARK_SHORT_TERM',
    2: 'STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_UNMARK_LONG_TERM',
    3: 'STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_MARK_LONG_TERM',
    4: 'STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_SET_MAX_LONG_TERM_INDEX',
    5: 'STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_UNMARK_ALL',
    6: 'STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_MARK_CURRENT_AS_LONG_TERM',
    2147483647: 'STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_INVALID',
    2147483647: 'STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_MAX_ENUM',
}
STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_END = 0
STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_UNMARK_SHORT_TERM = 1
STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_UNMARK_LONG_TERM = 2
STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_MARK_LONG_TERM = 3
STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_SET_MAX_LONG_TERM_INDEX = 4
STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_UNMARK_ALL = 5
STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_MARK_CURRENT_AS_LONG_TERM = 6
STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_INVALID = 2147483647
STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_MAX_ENUM = 2147483647
StdVideoH264MemMgmtControlOp = ctypes.c_uint32 # enum
struct_StdVideoEncodeH264RefPicMarkingEntry._pack_ = 1 # source:False
struct_StdVideoEncodeH264RefPicMarkingEntry._fields_ = [
    ('memory_management_control_operation', StdVideoH264MemMgmtControlOp),
    ('difference_of_pic_nums_minus1', ctypes.c_uint16),
    ('long_term_pic_num', ctypes.c_uint16),
    ('long_term_frame_idx', ctypes.c_uint16),
    ('max_long_term_frame_idx_plus1', ctypes.c_uint16),
]

VkVideoEncodeH264PictureInfoKHR = struct_VkVideoEncodeH264PictureInfoKHR
class struct_VkVideoEncodeH264DpbSlotInfoKHR(Structure):
    pass

class struct_StdVideoEncodeH264ReferenceInfo(Structure):
    pass

struct_VkVideoEncodeH264DpbSlotInfoKHR._pack_ = 1 # source:False
struct_VkVideoEncodeH264DpbSlotInfoKHR._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('pStdReferenceInfo', ctypes.POINTER(struct_StdVideoEncodeH264ReferenceInfo)),
]

class struct_StdVideoEncodeH264ReferenceInfoFlags(Structure):
    pass

struct_StdVideoEncodeH264ReferenceInfoFlags._pack_ = 1 # source:False
struct_StdVideoEncodeH264ReferenceInfoFlags._fields_ = [
    ('used_for_long_term_reference', ctypes.c_uint32, 1),
    ('reserved', ctypes.c_uint32, 31),
]

struct_StdVideoEncodeH264ReferenceInfo._pack_ = 1 # source:False
struct_StdVideoEncodeH264ReferenceInfo._fields_ = [
    ('flags', struct_StdVideoEncodeH264ReferenceInfoFlags),
    ('primary_pic_type', StdVideoH264PictureType),
    ('FrameNum', ctypes.c_uint32),
    ('PicOrderCnt', ctypes.c_int32),
    ('long_term_pic_num', ctypes.c_uint16),
    ('long_term_frame_idx', ctypes.c_uint16),
    ('temporal_id', ctypes.c_ubyte),
    ('PADDING_0', ctypes.c_ubyte * 3),
]

VkVideoEncodeH264DpbSlotInfoKHR = struct_VkVideoEncodeH264DpbSlotInfoKHR
class struct_VkVideoEncodeH264ProfileInfoKHR(Structure):
    pass

struct_VkVideoEncodeH264ProfileInfoKHR._pack_ = 1 # source:False
struct_VkVideoEncodeH264ProfileInfoKHR._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('stdProfileIdc', StdVideoH264ProfileIdc),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkVideoEncodeH264ProfileInfoKHR = struct_VkVideoEncodeH264ProfileInfoKHR
class struct_VkVideoEncodeH264RateControlInfoKHR(Structure):
    pass

struct_VkVideoEncodeH264RateControlInfoKHR._pack_ = 1 # source:False
struct_VkVideoEncodeH264RateControlInfoKHR._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('flags', ctypes.c_uint32),
    ('gopFrameCount', ctypes.c_uint32),
    ('idrPeriod', ctypes.c_uint32),
    ('consecutiveBFrameCount', ctypes.c_uint32),
    ('temporalLayerCount', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkVideoEncodeH264RateControlInfoKHR = struct_VkVideoEncodeH264RateControlInfoKHR
class struct_VkVideoEncodeH264FrameSizeKHR(Structure):
    pass

struct_VkVideoEncodeH264FrameSizeKHR._pack_ = 1 # source:False
struct_VkVideoEncodeH264FrameSizeKHR._fields_ = [
    ('frameISize', ctypes.c_uint32),
    ('framePSize', ctypes.c_uint32),
    ('frameBSize', ctypes.c_uint32),
]

VkVideoEncodeH264FrameSizeKHR = struct_VkVideoEncodeH264FrameSizeKHR
class struct_VkVideoEncodeH264RateControlLayerInfoKHR(Structure):
    pass

struct_VkVideoEncodeH264RateControlLayerInfoKHR._pack_ = 1 # source:False
struct_VkVideoEncodeH264RateControlLayerInfoKHR._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('useMinQp', ctypes.c_uint32),
    ('minQp', VkVideoEncodeH264QpKHR),
    ('useMaxQp', ctypes.c_uint32),
    ('maxQp', VkVideoEncodeH264QpKHR),
    ('useMaxFrameSize', ctypes.c_uint32),
    ('maxFrameSize', VkVideoEncodeH264FrameSizeKHR),
]

VkVideoEncodeH264RateControlLayerInfoKHR = struct_VkVideoEncodeH264RateControlLayerInfoKHR
class struct_VkVideoEncodeH264GopRemainingFrameInfoKHR(Structure):
    pass

struct_VkVideoEncodeH264GopRemainingFrameInfoKHR._pack_ = 1 # source:False
struct_VkVideoEncodeH264GopRemainingFrameInfoKHR._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('useGopRemainingFrames', ctypes.c_uint32),
    ('gopRemainingI', ctypes.c_uint32),
    ('gopRemainingP', ctypes.c_uint32),
    ('gopRemainingB', ctypes.c_uint32),
]

VkVideoEncodeH264GopRemainingFrameInfoKHR = struct_VkVideoEncodeH264GopRemainingFrameInfoKHR

# values for enumeration 'VkVideoEncodeH265CapabilityFlagBitsKHR'
VkVideoEncodeH265CapabilityFlagBitsKHR__enumvalues = {
    1: 'VK_VIDEO_ENCODE_H265_CAPABILITY_HRD_COMPLIANCE_BIT_KHR',
    2: 'VK_VIDEO_ENCODE_H265_CAPABILITY_PREDICTION_WEIGHT_TABLE_GENERATED_BIT_KHR',
    4: 'VK_VIDEO_ENCODE_H265_CAPABILITY_ROW_UNALIGNED_SLICE_SEGMENT_BIT_KHR',
    8: 'VK_VIDEO_ENCODE_H265_CAPABILITY_DIFFERENT_SLICE_SEGMENT_TYPE_BIT_KHR',
    16: 'VK_VIDEO_ENCODE_H265_CAPABILITY_B_FRAME_IN_L0_LIST_BIT_KHR',
    32: 'VK_VIDEO_ENCODE_H265_CAPABILITY_B_FRAME_IN_L1_LIST_BIT_KHR',
    64: 'VK_VIDEO_ENCODE_H265_CAPABILITY_PER_PICTURE_TYPE_MIN_MAX_QP_BIT_KHR',
    128: 'VK_VIDEO_ENCODE_H265_CAPABILITY_PER_SLICE_SEGMENT_CONSTANT_QP_BIT_KHR',
    256: 'VK_VIDEO_ENCODE_H265_CAPABILITY_MULTIPLE_TILES_PER_SLICE_SEGMENT_BIT_KHR',
    512: 'VK_VIDEO_ENCODE_H265_CAPABILITY_MULTIPLE_SLICE_SEGMENTS_PER_TILE_BIT_KHR',
    2147483647: 'VK_VIDEO_ENCODE_H265_CAPABILITY_FLAG_BITS_MAX_ENUM_KHR',
}
VK_VIDEO_ENCODE_H265_CAPABILITY_HRD_COMPLIANCE_BIT_KHR = 1
VK_VIDEO_ENCODE_H265_CAPABILITY_PREDICTION_WEIGHT_TABLE_GENERATED_BIT_KHR = 2
VK_VIDEO_ENCODE_H265_CAPABILITY_ROW_UNALIGNED_SLICE_SEGMENT_BIT_KHR = 4
VK_VIDEO_ENCODE_H265_CAPABILITY_DIFFERENT_SLICE_SEGMENT_TYPE_BIT_KHR = 8
VK_VIDEO_ENCODE_H265_CAPABILITY_B_FRAME_IN_L0_LIST_BIT_KHR = 16
VK_VIDEO_ENCODE_H265_CAPABILITY_B_FRAME_IN_L1_LIST_BIT_KHR = 32
VK_VIDEO_ENCODE_H265_CAPABILITY_PER_PICTURE_TYPE_MIN_MAX_QP_BIT_KHR = 64
VK_VIDEO_ENCODE_H265_CAPABILITY_PER_SLICE_SEGMENT_CONSTANT_QP_BIT_KHR = 128
VK_VIDEO_ENCODE_H265_CAPABILITY_MULTIPLE_TILES_PER_SLICE_SEGMENT_BIT_KHR = 256
VK_VIDEO_ENCODE_H265_CAPABILITY_MULTIPLE_SLICE_SEGMENTS_PER_TILE_BIT_KHR = 512
VK_VIDEO_ENCODE_H265_CAPABILITY_FLAG_BITS_MAX_ENUM_KHR = 2147483647
VkVideoEncodeH265CapabilityFlagBitsKHR = ctypes.c_uint32 # enum
VkVideoEncodeH265CapabilityFlagsKHR = ctypes.c_uint32

# values for enumeration 'VkVideoEncodeH265StdFlagBitsKHR'
VkVideoEncodeH265StdFlagBitsKHR__enumvalues = {
    1: 'VK_VIDEO_ENCODE_H265_STD_SEPARATE_COLOR_PLANE_FLAG_SET_BIT_KHR',
    2: 'VK_VIDEO_ENCODE_H265_STD_SAMPLE_ADAPTIVE_OFFSET_ENABLED_FLAG_SET_BIT_KHR',
    4: 'VK_VIDEO_ENCODE_H265_STD_SCALING_LIST_DATA_PRESENT_FLAG_SET_BIT_KHR',
    8: 'VK_VIDEO_ENCODE_H265_STD_PCM_ENABLED_FLAG_SET_BIT_KHR',
    16: 'VK_VIDEO_ENCODE_H265_STD_SPS_TEMPORAL_MVP_ENABLED_FLAG_SET_BIT_KHR',
    32: 'VK_VIDEO_ENCODE_H265_STD_INIT_QP_MINUS26_BIT_KHR',
    64: 'VK_VIDEO_ENCODE_H265_STD_WEIGHTED_PRED_FLAG_SET_BIT_KHR',
    128: 'VK_VIDEO_ENCODE_H265_STD_WEIGHTED_BIPRED_FLAG_SET_BIT_KHR',
    256: 'VK_VIDEO_ENCODE_H265_STD_LOG2_PARALLEL_MERGE_LEVEL_MINUS2_BIT_KHR',
    512: 'VK_VIDEO_ENCODE_H265_STD_SIGN_DATA_HIDING_ENABLED_FLAG_SET_BIT_KHR',
    1024: 'VK_VIDEO_ENCODE_H265_STD_TRANSFORM_SKIP_ENABLED_FLAG_SET_BIT_KHR',
    2048: 'VK_VIDEO_ENCODE_H265_STD_TRANSFORM_SKIP_ENABLED_FLAG_UNSET_BIT_KHR',
    4096: 'VK_VIDEO_ENCODE_H265_STD_PPS_SLICE_CHROMA_QP_OFFSETS_PRESENT_FLAG_SET_BIT_KHR',
    8192: 'VK_VIDEO_ENCODE_H265_STD_TRANSQUANT_BYPASS_ENABLED_FLAG_SET_BIT_KHR',
    16384: 'VK_VIDEO_ENCODE_H265_STD_CONSTRAINED_INTRA_PRED_FLAG_SET_BIT_KHR',
    32768: 'VK_VIDEO_ENCODE_H265_STD_ENTROPY_CODING_SYNC_ENABLED_FLAG_SET_BIT_KHR',
    65536: 'VK_VIDEO_ENCODE_H265_STD_DEBLOCKING_FILTER_OVERRIDE_ENABLED_FLAG_SET_BIT_KHR',
    131072: 'VK_VIDEO_ENCODE_H265_STD_DEPENDENT_SLICE_SEGMENTS_ENABLED_FLAG_SET_BIT_KHR',
    262144: 'VK_VIDEO_ENCODE_H265_STD_DEPENDENT_SLICE_SEGMENT_FLAG_SET_BIT_KHR',
    524288: 'VK_VIDEO_ENCODE_H265_STD_SLICE_QP_DELTA_BIT_KHR',
    1048576: 'VK_VIDEO_ENCODE_H265_STD_DIFFERENT_SLICE_QP_DELTA_BIT_KHR',
    2147483647: 'VK_VIDEO_ENCODE_H265_STD_FLAG_BITS_MAX_ENUM_KHR',
}
VK_VIDEO_ENCODE_H265_STD_SEPARATE_COLOR_PLANE_FLAG_SET_BIT_KHR = 1
VK_VIDEO_ENCODE_H265_STD_SAMPLE_ADAPTIVE_OFFSET_ENABLED_FLAG_SET_BIT_KHR = 2
VK_VIDEO_ENCODE_H265_STD_SCALING_LIST_DATA_PRESENT_FLAG_SET_BIT_KHR = 4
VK_VIDEO_ENCODE_H265_STD_PCM_ENABLED_FLAG_SET_BIT_KHR = 8
VK_VIDEO_ENCODE_H265_STD_SPS_TEMPORAL_MVP_ENABLED_FLAG_SET_BIT_KHR = 16
VK_VIDEO_ENCODE_H265_STD_INIT_QP_MINUS26_BIT_KHR = 32
VK_VIDEO_ENCODE_H265_STD_WEIGHTED_PRED_FLAG_SET_BIT_KHR = 64
VK_VIDEO_ENCODE_H265_STD_WEIGHTED_BIPRED_FLAG_SET_BIT_KHR = 128
VK_VIDEO_ENCODE_H265_STD_LOG2_PARALLEL_MERGE_LEVEL_MINUS2_BIT_KHR = 256
VK_VIDEO_ENCODE_H265_STD_SIGN_DATA_HIDING_ENABLED_FLAG_SET_BIT_KHR = 512
VK_VIDEO_ENCODE_H265_STD_TRANSFORM_SKIP_ENABLED_FLAG_SET_BIT_KHR = 1024
VK_VIDEO_ENCODE_H265_STD_TRANSFORM_SKIP_ENABLED_FLAG_UNSET_BIT_KHR = 2048
VK_VIDEO_ENCODE_H265_STD_PPS_SLICE_CHROMA_QP_OFFSETS_PRESENT_FLAG_SET_BIT_KHR = 4096
VK_VIDEO_ENCODE_H265_STD_TRANSQUANT_BYPASS_ENABLED_FLAG_SET_BIT_KHR = 8192
VK_VIDEO_ENCODE_H265_STD_CONSTRAINED_INTRA_PRED_FLAG_SET_BIT_KHR = 16384
VK_VIDEO_ENCODE_H265_STD_ENTROPY_CODING_SYNC_ENABLED_FLAG_SET_BIT_KHR = 32768
VK_VIDEO_ENCODE_H265_STD_DEBLOCKING_FILTER_OVERRIDE_ENABLED_FLAG_SET_BIT_KHR = 65536
VK_VIDEO_ENCODE_H265_STD_DEPENDENT_SLICE_SEGMENTS_ENABLED_FLAG_SET_BIT_KHR = 131072
VK_VIDEO_ENCODE_H265_STD_DEPENDENT_SLICE_SEGMENT_FLAG_SET_BIT_KHR = 262144
VK_VIDEO_ENCODE_H265_STD_SLICE_QP_DELTA_BIT_KHR = 524288
VK_VIDEO_ENCODE_H265_STD_DIFFERENT_SLICE_QP_DELTA_BIT_KHR = 1048576
VK_VIDEO_ENCODE_H265_STD_FLAG_BITS_MAX_ENUM_KHR = 2147483647
VkVideoEncodeH265StdFlagBitsKHR = ctypes.c_uint32 # enum
VkVideoEncodeH265StdFlagsKHR = ctypes.c_uint32

# values for enumeration 'VkVideoEncodeH265CtbSizeFlagBitsKHR'
VkVideoEncodeH265CtbSizeFlagBitsKHR__enumvalues = {
    1: 'VK_VIDEO_ENCODE_H265_CTB_SIZE_16_BIT_KHR',
    2: 'VK_VIDEO_ENCODE_H265_CTB_SIZE_32_BIT_KHR',
    4: 'VK_VIDEO_ENCODE_H265_CTB_SIZE_64_BIT_KHR',
    2147483647: 'VK_VIDEO_ENCODE_H265_CTB_SIZE_FLAG_BITS_MAX_ENUM_KHR',
}
VK_VIDEO_ENCODE_H265_CTB_SIZE_16_BIT_KHR = 1
VK_VIDEO_ENCODE_H265_CTB_SIZE_32_BIT_KHR = 2
VK_VIDEO_ENCODE_H265_CTB_SIZE_64_BIT_KHR = 4
VK_VIDEO_ENCODE_H265_CTB_SIZE_FLAG_BITS_MAX_ENUM_KHR = 2147483647
VkVideoEncodeH265CtbSizeFlagBitsKHR = ctypes.c_uint32 # enum
VkVideoEncodeH265CtbSizeFlagsKHR = ctypes.c_uint32

# values for enumeration 'VkVideoEncodeH265TransformBlockSizeFlagBitsKHR'
VkVideoEncodeH265TransformBlockSizeFlagBitsKHR__enumvalues = {
    1: 'VK_VIDEO_ENCODE_H265_TRANSFORM_BLOCK_SIZE_4_BIT_KHR',
    2: 'VK_VIDEO_ENCODE_H265_TRANSFORM_BLOCK_SIZE_8_BIT_KHR',
    4: 'VK_VIDEO_ENCODE_H265_TRANSFORM_BLOCK_SIZE_16_BIT_KHR',
    8: 'VK_VIDEO_ENCODE_H265_TRANSFORM_BLOCK_SIZE_32_BIT_KHR',
    2147483647: 'VK_VIDEO_ENCODE_H265_TRANSFORM_BLOCK_SIZE_FLAG_BITS_MAX_ENUM_KHR',
}
VK_VIDEO_ENCODE_H265_TRANSFORM_BLOCK_SIZE_4_BIT_KHR = 1
VK_VIDEO_ENCODE_H265_TRANSFORM_BLOCK_SIZE_8_BIT_KHR = 2
VK_VIDEO_ENCODE_H265_TRANSFORM_BLOCK_SIZE_16_BIT_KHR = 4
VK_VIDEO_ENCODE_H265_TRANSFORM_BLOCK_SIZE_32_BIT_KHR = 8
VK_VIDEO_ENCODE_H265_TRANSFORM_BLOCK_SIZE_FLAG_BITS_MAX_ENUM_KHR = 2147483647
VkVideoEncodeH265TransformBlockSizeFlagBitsKHR = ctypes.c_uint32 # enum
VkVideoEncodeH265TransformBlockSizeFlagsKHR = ctypes.c_uint32

# values for enumeration 'VkVideoEncodeH265RateControlFlagBitsKHR'
VkVideoEncodeH265RateControlFlagBitsKHR__enumvalues = {
    1: 'VK_VIDEO_ENCODE_H265_RATE_CONTROL_ATTEMPT_HRD_COMPLIANCE_BIT_KHR',
    2: 'VK_VIDEO_ENCODE_H265_RATE_CONTROL_REGULAR_GOP_BIT_KHR',
    4: 'VK_VIDEO_ENCODE_H265_RATE_CONTROL_REFERENCE_PATTERN_FLAT_BIT_KHR',
    8: 'VK_VIDEO_ENCODE_H265_RATE_CONTROL_REFERENCE_PATTERN_DYADIC_BIT_KHR',
    16: 'VK_VIDEO_ENCODE_H265_RATE_CONTROL_TEMPORAL_SUB_LAYER_PATTERN_DYADIC_BIT_KHR',
    2147483647: 'VK_VIDEO_ENCODE_H265_RATE_CONTROL_FLAG_BITS_MAX_ENUM_KHR',
}
VK_VIDEO_ENCODE_H265_RATE_CONTROL_ATTEMPT_HRD_COMPLIANCE_BIT_KHR = 1
VK_VIDEO_ENCODE_H265_RATE_CONTROL_REGULAR_GOP_BIT_KHR = 2
VK_VIDEO_ENCODE_H265_RATE_CONTROL_REFERENCE_PATTERN_FLAT_BIT_KHR = 4
VK_VIDEO_ENCODE_H265_RATE_CONTROL_REFERENCE_PATTERN_DYADIC_BIT_KHR = 8
VK_VIDEO_ENCODE_H265_RATE_CONTROL_TEMPORAL_SUB_LAYER_PATTERN_DYADIC_BIT_KHR = 16
VK_VIDEO_ENCODE_H265_RATE_CONTROL_FLAG_BITS_MAX_ENUM_KHR = 2147483647
VkVideoEncodeH265RateControlFlagBitsKHR = ctypes.c_uint32 # enum
VkVideoEncodeH265RateControlFlagsKHR = ctypes.c_uint32
class struct_VkVideoEncodeH265CapabilitiesKHR(Structure):
    pass


# values for enumeration 'StdVideoH265LevelIdc'
StdVideoH265LevelIdc__enumvalues = {
    0: 'STD_VIDEO_H265_LEVEL_IDC_1_0',
    1: 'STD_VIDEO_H265_LEVEL_IDC_2_0',
    2: 'STD_VIDEO_H265_LEVEL_IDC_2_1',
    3: 'STD_VIDEO_H265_LEVEL_IDC_3_0',
    4: 'STD_VIDEO_H265_LEVEL_IDC_3_1',
    5: 'STD_VIDEO_H265_LEVEL_IDC_4_0',
    6: 'STD_VIDEO_H265_LEVEL_IDC_4_1',
    7: 'STD_VIDEO_H265_LEVEL_IDC_5_0',
    8: 'STD_VIDEO_H265_LEVEL_IDC_5_1',
    9: 'STD_VIDEO_H265_LEVEL_IDC_5_2',
    10: 'STD_VIDEO_H265_LEVEL_IDC_6_0',
    11: 'STD_VIDEO_H265_LEVEL_IDC_6_1',
    12: 'STD_VIDEO_H265_LEVEL_IDC_6_2',
    2147483647: 'STD_VIDEO_H265_LEVEL_IDC_INVALID',
    2147483647: 'STD_VIDEO_H265_LEVEL_IDC_MAX_ENUM',
}
STD_VIDEO_H265_LEVEL_IDC_1_0 = 0
STD_VIDEO_H265_LEVEL_IDC_2_0 = 1
STD_VIDEO_H265_LEVEL_IDC_2_1 = 2
STD_VIDEO_H265_LEVEL_IDC_3_0 = 3
STD_VIDEO_H265_LEVEL_IDC_3_1 = 4
STD_VIDEO_H265_LEVEL_IDC_4_0 = 5
STD_VIDEO_H265_LEVEL_IDC_4_1 = 6
STD_VIDEO_H265_LEVEL_IDC_5_0 = 7
STD_VIDEO_H265_LEVEL_IDC_5_1 = 8
STD_VIDEO_H265_LEVEL_IDC_5_2 = 9
STD_VIDEO_H265_LEVEL_IDC_6_0 = 10
STD_VIDEO_H265_LEVEL_IDC_6_1 = 11
STD_VIDEO_H265_LEVEL_IDC_6_2 = 12
STD_VIDEO_H265_LEVEL_IDC_INVALID = 2147483647
STD_VIDEO_H265_LEVEL_IDC_MAX_ENUM = 2147483647
StdVideoH265LevelIdc = ctypes.c_uint32 # enum
struct_VkVideoEncodeH265CapabilitiesKHR._pack_ = 1 # source:False
struct_VkVideoEncodeH265CapabilitiesKHR._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('flags', ctypes.c_uint32),
    ('maxLevelIdc', StdVideoH265LevelIdc),
    ('maxSliceSegmentCount', ctypes.c_uint32),
    ('maxTiles', VkExtent2D),
    ('ctbSizes', ctypes.c_uint32),
    ('transformBlockSizes', ctypes.c_uint32),
    ('maxPPictureL0ReferenceCount', ctypes.c_uint32),
    ('maxBPictureL0ReferenceCount', ctypes.c_uint32),
    ('maxL1ReferenceCount', ctypes.c_uint32),
    ('maxSubLayerCount', ctypes.c_uint32),
    ('expectDyadicTemporalSubLayerPattern', ctypes.c_uint32),
    ('minQp', ctypes.c_int32),
    ('maxQp', ctypes.c_int32),
    ('prefersGopRemainingFrames', ctypes.c_uint32),
    ('requiresGopRemainingFrames', ctypes.c_uint32),
    ('stdSyntaxFlags', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkVideoEncodeH265CapabilitiesKHR = struct_VkVideoEncodeH265CapabilitiesKHR
class struct_VkVideoEncodeH265SessionCreateInfoKHR(Structure):
    pass

struct_VkVideoEncodeH265SessionCreateInfoKHR._pack_ = 1 # source:False
struct_VkVideoEncodeH265SessionCreateInfoKHR._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('useMaxLevelIdc', ctypes.c_uint32),
    ('maxLevelIdc', StdVideoH265LevelIdc),
]

VkVideoEncodeH265SessionCreateInfoKHR = struct_VkVideoEncodeH265SessionCreateInfoKHR
class struct_VkVideoEncodeH265QpKHR(Structure):
    pass

struct_VkVideoEncodeH265QpKHR._pack_ = 1 # source:False
struct_VkVideoEncodeH265QpKHR._fields_ = [
    ('qpI', ctypes.c_int32),
    ('qpP', ctypes.c_int32),
    ('qpB', ctypes.c_int32),
]

VkVideoEncodeH265QpKHR = struct_VkVideoEncodeH265QpKHR
class struct_VkVideoEncodeH265QualityLevelPropertiesKHR(Structure):
    pass

struct_VkVideoEncodeH265QualityLevelPropertiesKHR._pack_ = 1 # source:False
struct_VkVideoEncodeH265QualityLevelPropertiesKHR._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('preferredRateControlFlags', ctypes.c_uint32),
    ('preferredGopFrameCount', ctypes.c_uint32),
    ('preferredIdrPeriod', ctypes.c_uint32),
    ('preferredConsecutiveBFrameCount', ctypes.c_uint32),
    ('preferredSubLayerCount', ctypes.c_uint32),
    ('preferredConstantQp', VkVideoEncodeH265QpKHR),
    ('preferredMaxL0ReferenceCount', ctypes.c_uint32),
    ('preferredMaxL1ReferenceCount', ctypes.c_uint32),
]

VkVideoEncodeH265QualityLevelPropertiesKHR = struct_VkVideoEncodeH265QualityLevelPropertiesKHR
class struct_VkVideoEncodeH265SessionParametersAddInfoKHR(Structure):
    pass

class struct_StdVideoH265VideoParameterSet(Structure):
    pass

class struct_StdVideoH265SequenceParameterSet(Structure):
    pass

class struct_StdVideoH265PictureParameterSet(Structure):
    pass

struct_VkVideoEncodeH265SessionParametersAddInfoKHR._pack_ = 1 # source:False
struct_VkVideoEncodeH265SessionParametersAddInfoKHR._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('stdVPSCount', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('pStdVPSs', ctypes.POINTER(struct_StdVideoH265VideoParameterSet)),
    ('stdSPSCount', ctypes.c_uint32),
    ('PADDING_2', ctypes.c_ubyte * 4),
    ('pStdSPSs', ctypes.POINTER(struct_StdVideoH265SequenceParameterSet)),
    ('stdPPSCount', ctypes.c_uint32),
    ('PADDING_3', ctypes.c_ubyte * 4),
    ('pStdPPSs', ctypes.POINTER(struct_StdVideoH265PictureParameterSet)),
]

class struct_StdVideoH265DecPicBufMgr(Structure):
    pass

class struct_StdVideoH265HrdParameters(Structure):
    pass

class struct_StdVideoH265ProfileTierLevel(Structure):
    pass

class struct_StdVideoH265VpsFlags(Structure):
    pass

struct_StdVideoH265VpsFlags._pack_ = 1 # source:False
struct_StdVideoH265VpsFlags._fields_ = [
    ('vps_temporal_id_nesting_flag', ctypes.c_uint32, 1),
    ('vps_sub_layer_ordering_info_present_flag', ctypes.c_uint32, 1),
    ('vps_timing_info_present_flag', ctypes.c_uint32, 1),
    ('vps_poc_proportional_to_timing_flag', ctypes.c_uint32, 1),
    ('PADDING_0', ctypes.c_uint32, 28),
]

struct_StdVideoH265VideoParameterSet._pack_ = 1 # source:False
struct_StdVideoH265VideoParameterSet._fields_ = [
    ('flags', struct_StdVideoH265VpsFlags),
    ('vps_video_parameter_set_id', ctypes.c_ubyte),
    ('vps_max_sub_layers_minus1', ctypes.c_ubyte),
    ('reserved1', ctypes.c_ubyte),
    ('reserved2', ctypes.c_ubyte),
    ('vps_num_units_in_tick', ctypes.c_uint32),
    ('vps_time_scale', ctypes.c_uint32),
    ('vps_num_ticks_poc_diff_one_minus1', ctypes.c_uint32),
    ('reserved3', ctypes.c_uint32),
    ('pDecPicBufMgr', ctypes.POINTER(struct_StdVideoH265DecPicBufMgr)),
    ('pHrdParameters', ctypes.POINTER(struct_StdVideoH265HrdParameters)),
    ('pProfileTierLevel', ctypes.POINTER(struct_StdVideoH265ProfileTierLevel)),
]

struct_StdVideoH265DecPicBufMgr._pack_ = 1 # source:False
struct_StdVideoH265DecPicBufMgr._fields_ = [
    ('max_latency_increase_plus1', ctypes.c_uint32 * 7),
    ('max_dec_pic_buffering_minus1', ctypes.c_ubyte * 7),
    ('max_num_reorder_pics', ctypes.c_ubyte * 7),
    ('PADDING_0', ctypes.c_ubyte * 2),
]

class struct_StdVideoH265SubLayerHrdParameters(Structure):
    pass

class struct_StdVideoH265HrdFlags(Structure):
    pass

struct_StdVideoH265HrdFlags._pack_ = 1 # source:False
struct_StdVideoH265HrdFlags._fields_ = [
    ('nal_hrd_parameters_present_flag', ctypes.c_uint32, 1),
    ('vcl_hrd_parameters_present_flag', ctypes.c_uint32, 1),
    ('sub_pic_hrd_params_present_flag', ctypes.c_uint32, 1),
    ('sub_pic_cpb_params_in_pic_timing_sei_flag', ctypes.c_uint32, 1),
    ('fixed_pic_rate_general_flag', ctypes.c_uint32, 8),
    ('fixed_pic_rate_within_cvs_flag', ctypes.c_uint32, 8),
    ('low_delay_hrd_flag', ctypes.c_uint32, 8),
    ('PADDING_0', ctypes.c_uint8, 4),
]

struct_StdVideoH265HrdParameters._pack_ = 1 # source:False
struct_StdVideoH265HrdParameters._fields_ = [
    ('flags', struct_StdVideoH265HrdFlags),
    ('tick_divisor_minus2', ctypes.c_ubyte),
    ('du_cpb_removal_delay_increment_length_minus1', ctypes.c_ubyte),
    ('dpb_output_delay_du_length_minus1', ctypes.c_ubyte),
    ('bit_rate_scale', ctypes.c_ubyte),
    ('cpb_size_scale', ctypes.c_ubyte),
    ('cpb_size_du_scale', ctypes.c_ubyte),
    ('initial_cpb_removal_delay_length_minus1', ctypes.c_ubyte),
    ('au_cpb_removal_delay_length_minus1', ctypes.c_ubyte),
    ('dpb_output_delay_length_minus1', ctypes.c_ubyte),
    ('cpb_cnt_minus1', ctypes.c_ubyte * 7),
    ('elemental_duration_in_tc_minus1', ctypes.c_uint16 * 7),
    ('reserved', ctypes.c_uint16 * 3),
    ('pSubLayerHrdParametersNal', ctypes.POINTER(struct_StdVideoH265SubLayerHrdParameters)),
    ('pSubLayerHrdParametersVcl', ctypes.POINTER(struct_StdVideoH265SubLayerHrdParameters)),
]

struct_StdVideoH265SubLayerHrdParameters._pack_ = 1 # source:False
struct_StdVideoH265SubLayerHrdParameters._fields_ = [
    ('bit_rate_value_minus1', ctypes.c_uint32 * 32),
    ('cpb_size_value_minus1', ctypes.c_uint32 * 32),
    ('cpb_size_du_value_minus1', ctypes.c_uint32 * 32),
    ('bit_rate_du_value_minus1', ctypes.c_uint32 * 32),
    ('cbr_flag', ctypes.c_uint32),
]

class struct_StdVideoH265ProfileTierLevelFlags(Structure):
    pass

struct_StdVideoH265ProfileTierLevelFlags._pack_ = 1 # source:False
struct_StdVideoH265ProfileTierLevelFlags._fields_ = [
    ('general_tier_flag', ctypes.c_uint32, 1),
    ('general_progressive_source_flag', ctypes.c_uint32, 1),
    ('general_interlaced_source_flag', ctypes.c_uint32, 1),
    ('general_non_packed_constraint_flag', ctypes.c_uint32, 1),
    ('general_frame_only_constraint_flag', ctypes.c_uint32, 1),
    ('PADDING_0', ctypes.c_uint32, 27),
]


# values for enumeration 'StdVideoH265ProfileIdc'
StdVideoH265ProfileIdc__enumvalues = {
    1: 'STD_VIDEO_H265_PROFILE_IDC_MAIN',
    2: 'STD_VIDEO_H265_PROFILE_IDC_MAIN_10',
    3: 'STD_VIDEO_H265_PROFILE_IDC_MAIN_STILL_PICTURE',
    4: 'STD_VIDEO_H265_PROFILE_IDC_FORMAT_RANGE_EXTENSIONS',
    9: 'STD_VIDEO_H265_PROFILE_IDC_SCC_EXTENSIONS',
    2147483647: 'STD_VIDEO_H265_PROFILE_IDC_INVALID',
    2147483647: 'STD_VIDEO_H265_PROFILE_IDC_MAX_ENUM',
}
STD_VIDEO_H265_PROFILE_IDC_MAIN = 1
STD_VIDEO_H265_PROFILE_IDC_MAIN_10 = 2
STD_VIDEO_H265_PROFILE_IDC_MAIN_STILL_PICTURE = 3
STD_VIDEO_H265_PROFILE_IDC_FORMAT_RANGE_EXTENSIONS = 4
STD_VIDEO_H265_PROFILE_IDC_SCC_EXTENSIONS = 9
STD_VIDEO_H265_PROFILE_IDC_INVALID = 2147483647
STD_VIDEO_H265_PROFILE_IDC_MAX_ENUM = 2147483647
StdVideoH265ProfileIdc = ctypes.c_uint32 # enum
struct_StdVideoH265ProfileTierLevel._pack_ = 1 # source:False
struct_StdVideoH265ProfileTierLevel._fields_ = [
    ('flags', struct_StdVideoH265ProfileTierLevelFlags),
    ('general_profile_idc', StdVideoH265ProfileIdc),
    ('general_level_idc', StdVideoH265LevelIdc),
]

class struct_StdVideoH265ScalingLists(Structure):
    pass

class struct_StdVideoH265ShortTermRefPicSet(Structure):
    pass

class struct_StdVideoH265LongTermRefPicsSps(Structure):
    pass

class struct_StdVideoH265SequenceParameterSetVui(Structure):
    pass

class struct_StdVideoH265PredictorPaletteEntries(Structure):
    pass

class struct_StdVideoH265SpsFlags(Structure):
    pass

struct_StdVideoH265SpsFlags._pack_ = 1 # source:False
struct_StdVideoH265SpsFlags._fields_ = [
    ('sps_temporal_id_nesting_flag', ctypes.c_uint32, 1),
    ('separate_colour_plane_flag', ctypes.c_uint32, 1),
    ('conformance_window_flag', ctypes.c_uint32, 1),
    ('sps_sub_layer_ordering_info_present_flag', ctypes.c_uint32, 1),
    ('scaling_list_enabled_flag', ctypes.c_uint32, 1),
    ('sps_scaling_list_data_present_flag', ctypes.c_uint32, 1),
    ('amp_enabled_flag', ctypes.c_uint32, 1),
    ('sample_adaptive_offset_enabled_flag', ctypes.c_uint32, 1),
    ('pcm_enabled_flag', ctypes.c_uint32, 1),
    ('pcm_loop_filter_disabled_flag', ctypes.c_uint32, 1),
    ('long_term_ref_pics_present_flag', ctypes.c_uint32, 1),
    ('sps_temporal_mvp_enabled_flag', ctypes.c_uint32, 1),
    ('strong_intra_smoothing_enabled_flag', ctypes.c_uint32, 1),
    ('vui_parameters_present_flag', ctypes.c_uint32, 1),
    ('sps_extension_present_flag', ctypes.c_uint32, 1),
    ('sps_range_extension_flag', ctypes.c_uint32, 1),
    ('transform_skip_rotation_enabled_flag', ctypes.c_uint32, 1),
    ('transform_skip_context_enabled_flag', ctypes.c_uint32, 1),
    ('implicit_rdpcm_enabled_flag', ctypes.c_uint32, 1),
    ('explicit_rdpcm_enabled_flag', ctypes.c_uint32, 1),
    ('extended_precision_processing_flag', ctypes.c_uint32, 1),
    ('intra_smoothing_disabled_flag', ctypes.c_uint32, 1),
    ('high_precision_offsets_enabled_flag', ctypes.c_uint32, 1),
    ('persistent_rice_adaptation_enabled_flag', ctypes.c_uint32, 1),
    ('cabac_bypass_alignment_enabled_flag', ctypes.c_uint32, 1),
    ('sps_scc_extension_flag', ctypes.c_uint32, 1),
    ('sps_curr_pic_ref_enabled_flag', ctypes.c_uint32, 1),
    ('palette_mode_enabled_flag', ctypes.c_uint32, 1),
    ('sps_palette_predictor_initializers_present_flag', ctypes.c_uint32, 1),
    ('intra_boundary_filtering_disabled_flag', ctypes.c_uint32, 1),
    ('PADDING_0', ctypes.c_uint8, 2),
]


# values for enumeration 'StdVideoH265ChromaFormatIdc'
StdVideoH265ChromaFormatIdc__enumvalues = {
    0: 'STD_VIDEO_H265_CHROMA_FORMAT_IDC_MONOCHROME',
    1: 'STD_VIDEO_H265_CHROMA_FORMAT_IDC_420',
    2: 'STD_VIDEO_H265_CHROMA_FORMAT_IDC_422',
    3: 'STD_VIDEO_H265_CHROMA_FORMAT_IDC_444',
    2147483647: 'STD_VIDEO_H265_CHROMA_FORMAT_IDC_INVALID',
    2147483647: 'STD_VIDEO_H265_CHROMA_FORMAT_IDC_MAX_ENUM',
}
STD_VIDEO_H265_CHROMA_FORMAT_IDC_MONOCHROME = 0
STD_VIDEO_H265_CHROMA_FORMAT_IDC_420 = 1
STD_VIDEO_H265_CHROMA_FORMAT_IDC_422 = 2
STD_VIDEO_H265_CHROMA_FORMAT_IDC_444 = 3
STD_VIDEO_H265_CHROMA_FORMAT_IDC_INVALID = 2147483647
STD_VIDEO_H265_CHROMA_FORMAT_IDC_MAX_ENUM = 2147483647
StdVideoH265ChromaFormatIdc = ctypes.c_uint32 # enum
struct_StdVideoH265SequenceParameterSet._pack_ = 1 # source:False
struct_StdVideoH265SequenceParameterSet._fields_ = [
    ('flags', struct_StdVideoH265SpsFlags),
    ('chroma_format_idc', StdVideoH265ChromaFormatIdc),
    ('pic_width_in_luma_samples', ctypes.c_uint32),
    ('pic_height_in_luma_samples', ctypes.c_uint32),
    ('sps_video_parameter_set_id', ctypes.c_ubyte),
    ('sps_max_sub_layers_minus1', ctypes.c_ubyte),
    ('sps_seq_parameter_set_id', ctypes.c_ubyte),
    ('bit_depth_luma_minus8', ctypes.c_ubyte),
    ('bit_depth_chroma_minus8', ctypes.c_ubyte),
    ('log2_max_pic_order_cnt_lsb_minus4', ctypes.c_ubyte),
    ('log2_min_luma_coding_block_size_minus3', ctypes.c_ubyte),
    ('log2_diff_max_min_luma_coding_block_size', ctypes.c_ubyte),
    ('log2_min_luma_transform_block_size_minus2', ctypes.c_ubyte),
    ('log2_diff_max_min_luma_transform_block_size', ctypes.c_ubyte),
    ('max_transform_hierarchy_depth_inter', ctypes.c_ubyte),
    ('max_transform_hierarchy_depth_intra', ctypes.c_ubyte),
    ('num_short_term_ref_pic_sets', ctypes.c_ubyte),
    ('num_long_term_ref_pics_sps', ctypes.c_ubyte),
    ('pcm_sample_bit_depth_luma_minus1', ctypes.c_ubyte),
    ('pcm_sample_bit_depth_chroma_minus1', ctypes.c_ubyte),
    ('log2_min_pcm_luma_coding_block_size_minus3', ctypes.c_ubyte),
    ('log2_diff_max_min_pcm_luma_coding_block_size', ctypes.c_ubyte),
    ('reserved1', ctypes.c_ubyte),
    ('reserved2', ctypes.c_ubyte),
    ('palette_max_size', ctypes.c_ubyte),
    ('delta_palette_max_predictor_size', ctypes.c_ubyte),
    ('motion_vector_resolution_control_idc', ctypes.c_ubyte),
    ('sps_num_palette_predictor_initializers_minus1', ctypes.c_ubyte),
    ('conf_win_left_offset', ctypes.c_uint32),
    ('conf_win_right_offset', ctypes.c_uint32),
    ('conf_win_top_offset', ctypes.c_uint32),
    ('conf_win_bottom_offset', ctypes.c_uint32),
    ('pProfileTierLevel', ctypes.POINTER(struct_StdVideoH265ProfileTierLevel)),
    ('pDecPicBufMgr', ctypes.POINTER(struct_StdVideoH265DecPicBufMgr)),
    ('pScalingLists', ctypes.POINTER(struct_StdVideoH265ScalingLists)),
    ('pShortTermRefPicSet', ctypes.POINTER(struct_StdVideoH265ShortTermRefPicSet)),
    ('pLongTermRefPicsSps', ctypes.POINTER(struct_StdVideoH265LongTermRefPicsSps)),
    ('pSequenceParameterSetVui', ctypes.POINTER(struct_StdVideoH265SequenceParameterSetVui)),
    ('pPredictorPaletteEntries', ctypes.POINTER(struct_StdVideoH265PredictorPaletteEntries)),
]

struct_StdVideoH265ScalingLists._pack_ = 1 # source:False
struct_StdVideoH265ScalingLists._fields_ = [
    ('ScalingList4x4', ctypes.c_ubyte * 16 * 6),
    ('ScalingList8x8', ctypes.c_ubyte * 64 * 6),
    ('ScalingList16x16', ctypes.c_ubyte * 64 * 6),
    ('ScalingList32x32', ctypes.c_ubyte * 64 * 2),
    ('ScalingListDCCoef16x16', ctypes.c_ubyte * 6),
    ('ScalingListDCCoef32x32', ctypes.c_ubyte * 2),
]

class struct_StdVideoH265ShortTermRefPicSetFlags(Structure):
    pass

struct_StdVideoH265ShortTermRefPicSetFlags._pack_ = 1 # source:False
struct_StdVideoH265ShortTermRefPicSetFlags._fields_ = [
    ('inter_ref_pic_set_prediction_flag', ctypes.c_uint32, 1),
    ('delta_rps_sign', ctypes.c_uint32, 1),
    ('PADDING_0', ctypes.c_uint32, 30),
]

struct_StdVideoH265ShortTermRefPicSet._pack_ = 1 # source:False
struct_StdVideoH265ShortTermRefPicSet._fields_ = [
    ('flags', struct_StdVideoH265ShortTermRefPicSetFlags),
    ('delta_idx_minus1', ctypes.c_uint32),
    ('use_delta_flag', ctypes.c_uint16),
    ('abs_delta_rps_minus1', ctypes.c_uint16),
    ('used_by_curr_pic_flag', ctypes.c_uint16),
    ('used_by_curr_pic_s0_flag', ctypes.c_uint16),
    ('used_by_curr_pic_s1_flag', ctypes.c_uint16),
    ('reserved1', ctypes.c_uint16),
    ('reserved2', ctypes.c_ubyte),
    ('reserved3', ctypes.c_ubyte),
    ('num_negative_pics', ctypes.c_ubyte),
    ('num_positive_pics', ctypes.c_ubyte),
    ('delta_poc_s0_minus1', ctypes.c_uint16 * 16),
    ('delta_poc_s1_minus1', ctypes.c_uint16 * 16),
]

struct_StdVideoH265LongTermRefPicsSps._pack_ = 1 # source:False
struct_StdVideoH265LongTermRefPicsSps._fields_ = [
    ('used_by_curr_pic_lt_sps_flag', ctypes.c_uint32),
    ('lt_ref_pic_poc_lsb_sps', ctypes.c_uint32 * 32),
]

class struct_StdVideoH265SpsVuiFlags(Structure):
    pass

struct_StdVideoH265SpsVuiFlags._pack_ = 1 # source:False
struct_StdVideoH265SpsVuiFlags._fields_ = [
    ('aspect_ratio_info_present_flag', ctypes.c_uint32, 1),
    ('overscan_info_present_flag', ctypes.c_uint32, 1),
    ('overscan_appropriate_flag', ctypes.c_uint32, 1),
    ('video_signal_type_present_flag', ctypes.c_uint32, 1),
    ('video_full_range_flag', ctypes.c_uint32, 1),
    ('colour_description_present_flag', ctypes.c_uint32, 1),
    ('chroma_loc_info_present_flag', ctypes.c_uint32, 1),
    ('neutral_chroma_indication_flag', ctypes.c_uint32, 1),
    ('field_seq_flag', ctypes.c_uint32, 1),
    ('frame_field_info_present_flag', ctypes.c_uint32, 1),
    ('default_display_window_flag', ctypes.c_uint32, 1),
    ('vui_timing_info_present_flag', ctypes.c_uint32, 1),
    ('vui_poc_proportional_to_timing_flag', ctypes.c_uint32, 1),
    ('vui_hrd_parameters_present_flag', ctypes.c_uint32, 1),
    ('bitstream_restriction_flag', ctypes.c_uint32, 1),
    ('tiles_fixed_structure_flag', ctypes.c_uint32, 1),
    ('motion_vectors_over_pic_boundaries_flag', ctypes.c_uint32, 1),
    ('restricted_ref_pic_lists_flag', ctypes.c_uint32, 1),
    ('PADDING_0', ctypes.c_uint16, 14),
]


# values for enumeration 'StdVideoH265AspectRatioIdc'
StdVideoH265AspectRatioIdc__enumvalues = {
    0: 'STD_VIDEO_H265_ASPECT_RATIO_IDC_UNSPECIFIED',
    1: 'STD_VIDEO_H265_ASPECT_RATIO_IDC_SQUARE',
    2: 'STD_VIDEO_H265_ASPECT_RATIO_IDC_12_11',
    3: 'STD_VIDEO_H265_ASPECT_RATIO_IDC_10_11',
    4: 'STD_VIDEO_H265_ASPECT_RATIO_IDC_16_11',
    5: 'STD_VIDEO_H265_ASPECT_RATIO_IDC_40_33',
    6: 'STD_VIDEO_H265_ASPECT_RATIO_IDC_24_11',
    7: 'STD_VIDEO_H265_ASPECT_RATIO_IDC_20_11',
    8: 'STD_VIDEO_H265_ASPECT_RATIO_IDC_32_11',
    9: 'STD_VIDEO_H265_ASPECT_RATIO_IDC_80_33',
    10: 'STD_VIDEO_H265_ASPECT_RATIO_IDC_18_11',
    11: 'STD_VIDEO_H265_ASPECT_RATIO_IDC_15_11',
    12: 'STD_VIDEO_H265_ASPECT_RATIO_IDC_64_33',
    13: 'STD_VIDEO_H265_ASPECT_RATIO_IDC_160_99',
    14: 'STD_VIDEO_H265_ASPECT_RATIO_IDC_4_3',
    15: 'STD_VIDEO_H265_ASPECT_RATIO_IDC_3_2',
    16: 'STD_VIDEO_H265_ASPECT_RATIO_IDC_2_1',
    255: 'STD_VIDEO_H265_ASPECT_RATIO_IDC_EXTENDED_SAR',
    2147483647: 'STD_VIDEO_H265_ASPECT_RATIO_IDC_INVALID',
    2147483647: 'STD_VIDEO_H265_ASPECT_RATIO_IDC_MAX_ENUM',
}
STD_VIDEO_H265_ASPECT_RATIO_IDC_UNSPECIFIED = 0
STD_VIDEO_H265_ASPECT_RATIO_IDC_SQUARE = 1
STD_VIDEO_H265_ASPECT_RATIO_IDC_12_11 = 2
STD_VIDEO_H265_ASPECT_RATIO_IDC_10_11 = 3
STD_VIDEO_H265_ASPECT_RATIO_IDC_16_11 = 4
STD_VIDEO_H265_ASPECT_RATIO_IDC_40_33 = 5
STD_VIDEO_H265_ASPECT_RATIO_IDC_24_11 = 6
STD_VIDEO_H265_ASPECT_RATIO_IDC_20_11 = 7
STD_VIDEO_H265_ASPECT_RATIO_IDC_32_11 = 8
STD_VIDEO_H265_ASPECT_RATIO_IDC_80_33 = 9
STD_VIDEO_H265_ASPECT_RATIO_IDC_18_11 = 10
STD_VIDEO_H265_ASPECT_RATIO_IDC_15_11 = 11
STD_VIDEO_H265_ASPECT_RATIO_IDC_64_33 = 12
STD_VIDEO_H265_ASPECT_RATIO_IDC_160_99 = 13
STD_VIDEO_H265_ASPECT_RATIO_IDC_4_3 = 14
STD_VIDEO_H265_ASPECT_RATIO_IDC_3_2 = 15
STD_VIDEO_H265_ASPECT_RATIO_IDC_2_1 = 16
STD_VIDEO_H265_ASPECT_RATIO_IDC_EXTENDED_SAR = 255
STD_VIDEO_H265_ASPECT_RATIO_IDC_INVALID = 2147483647
STD_VIDEO_H265_ASPECT_RATIO_IDC_MAX_ENUM = 2147483647
StdVideoH265AspectRatioIdc = ctypes.c_uint32 # enum
struct_StdVideoH265SequenceParameterSetVui._pack_ = 1 # source:False
struct_StdVideoH265SequenceParameterSetVui._fields_ = [
    ('flags', struct_StdVideoH265SpsVuiFlags),
    ('aspect_ratio_idc', StdVideoH265AspectRatioIdc),
    ('sar_width', ctypes.c_uint16),
    ('sar_height', ctypes.c_uint16),
    ('video_format', ctypes.c_ubyte),
    ('colour_primaries', ctypes.c_ubyte),
    ('transfer_characteristics', ctypes.c_ubyte),
    ('matrix_coeffs', ctypes.c_ubyte),
    ('chroma_sample_loc_type_top_field', ctypes.c_ubyte),
    ('chroma_sample_loc_type_bottom_field', ctypes.c_ubyte),
    ('reserved1', ctypes.c_ubyte),
    ('reserved2', ctypes.c_ubyte),
    ('def_disp_win_left_offset', ctypes.c_uint16),
    ('def_disp_win_right_offset', ctypes.c_uint16),
    ('def_disp_win_top_offset', ctypes.c_uint16),
    ('def_disp_win_bottom_offset', ctypes.c_uint16),
    ('vui_num_units_in_tick', ctypes.c_uint32),
    ('vui_time_scale', ctypes.c_uint32),
    ('vui_num_ticks_poc_diff_one_minus1', ctypes.c_uint32),
    ('min_spatial_segmentation_idc', ctypes.c_uint16),
    ('reserved3', ctypes.c_uint16),
    ('max_bytes_per_pic_denom', ctypes.c_ubyte),
    ('max_bits_per_min_cu_denom', ctypes.c_ubyte),
    ('log2_max_mv_length_horizontal', ctypes.c_ubyte),
    ('log2_max_mv_length_vertical', ctypes.c_ubyte),
    ('pHrdParameters', ctypes.POINTER(struct_StdVideoH265HrdParameters)),
]

struct_StdVideoH265PredictorPaletteEntries._pack_ = 1 # source:False
struct_StdVideoH265PredictorPaletteEntries._fields_ = [
    ('PredictorPaletteEntries', ctypes.c_uint16 * 128 * 3),
]

class struct_StdVideoH265PpsFlags(Structure):
    pass

struct_StdVideoH265PpsFlags._pack_ = 1 # source:False
struct_StdVideoH265PpsFlags._fields_ = [
    ('dependent_slice_segments_enabled_flag', ctypes.c_uint32, 1),
    ('output_flag_present_flag', ctypes.c_uint32, 1),
    ('sign_data_hiding_enabled_flag', ctypes.c_uint32, 1),
    ('cabac_init_present_flag', ctypes.c_uint32, 1),
    ('constrained_intra_pred_flag', ctypes.c_uint32, 1),
    ('transform_skip_enabled_flag', ctypes.c_uint32, 1),
    ('cu_qp_delta_enabled_flag', ctypes.c_uint32, 1),
    ('pps_slice_chroma_qp_offsets_present_flag', ctypes.c_uint32, 1),
    ('weighted_pred_flag', ctypes.c_uint32, 1),
    ('weighted_bipred_flag', ctypes.c_uint32, 1),
    ('transquant_bypass_enabled_flag', ctypes.c_uint32, 1),
    ('tiles_enabled_flag', ctypes.c_uint32, 1),
    ('entropy_coding_sync_enabled_flag', ctypes.c_uint32, 1),
    ('uniform_spacing_flag', ctypes.c_uint32, 1),
    ('loop_filter_across_tiles_enabled_flag', ctypes.c_uint32, 1),
    ('pps_loop_filter_across_slices_enabled_flag', ctypes.c_uint32, 1),
    ('deblocking_filter_control_present_flag', ctypes.c_uint32, 1),
    ('deblocking_filter_override_enabled_flag', ctypes.c_uint32, 1),
    ('pps_deblocking_filter_disabled_flag', ctypes.c_uint32, 1),
    ('pps_scaling_list_data_present_flag', ctypes.c_uint32, 1),
    ('lists_modification_present_flag', ctypes.c_uint32, 1),
    ('slice_segment_header_extension_present_flag', ctypes.c_uint32, 1),
    ('pps_extension_present_flag', ctypes.c_uint32, 1),
    ('cross_component_prediction_enabled_flag', ctypes.c_uint32, 1),
    ('chroma_qp_offset_list_enabled_flag', ctypes.c_uint32, 1),
    ('pps_curr_pic_ref_enabled_flag', ctypes.c_uint32, 1),
    ('residual_adaptive_colour_transform_enabled_flag', ctypes.c_uint32, 1),
    ('pps_slice_act_qp_offsets_present_flag', ctypes.c_uint32, 1),
    ('pps_palette_predictor_initializers_present_flag', ctypes.c_uint32, 1),
    ('monochrome_palette_flag', ctypes.c_uint32, 1),
    ('pps_range_extension_flag', ctypes.c_uint32, 1),
    ('PADDING_0', ctypes.c_uint8, 1),
]

struct_StdVideoH265PictureParameterSet._pack_ = 1 # source:False
struct_StdVideoH265PictureParameterSet._fields_ = [
    ('flags', struct_StdVideoH265PpsFlags),
    ('pps_pic_parameter_set_id', ctypes.c_ubyte),
    ('pps_seq_parameter_set_id', ctypes.c_ubyte),
    ('sps_video_parameter_set_id', ctypes.c_ubyte),
    ('num_extra_slice_header_bits', ctypes.c_ubyte),
    ('num_ref_idx_l0_default_active_minus1', ctypes.c_ubyte),
    ('num_ref_idx_l1_default_active_minus1', ctypes.c_ubyte),
    ('init_qp_minus26', ctypes.c_byte),
    ('diff_cu_qp_delta_depth', ctypes.c_ubyte),
    ('pps_cb_qp_offset', ctypes.c_byte),
    ('pps_cr_qp_offset', ctypes.c_byte),
    ('pps_beta_offset_div2', ctypes.c_byte),
    ('pps_tc_offset_div2', ctypes.c_byte),
    ('log2_parallel_merge_level_minus2', ctypes.c_ubyte),
    ('log2_max_transform_skip_block_size_minus2', ctypes.c_ubyte),
    ('diff_cu_chroma_qp_offset_depth', ctypes.c_ubyte),
    ('chroma_qp_offset_list_len_minus1', ctypes.c_ubyte),
    ('cb_qp_offset_list', ctypes.c_byte * 6),
    ('cr_qp_offset_list', ctypes.c_byte * 6),
    ('log2_sao_offset_scale_luma', ctypes.c_ubyte),
    ('log2_sao_offset_scale_chroma', ctypes.c_ubyte),
    ('pps_act_y_qp_offset_plus5', ctypes.c_byte),
    ('pps_act_cb_qp_offset_plus5', ctypes.c_byte),
    ('pps_act_cr_qp_offset_plus3', ctypes.c_byte),
    ('pps_num_palette_predictor_initializers', ctypes.c_ubyte),
    ('luma_bit_depth_entry_minus8', ctypes.c_ubyte),
    ('chroma_bit_depth_entry_minus8', ctypes.c_ubyte),
    ('num_tile_columns_minus1', ctypes.c_ubyte),
    ('num_tile_rows_minus1', ctypes.c_ubyte),
    ('reserved1', ctypes.c_ubyte),
    ('reserved2', ctypes.c_ubyte),
    ('column_width_minus1', ctypes.c_uint16 * 19),
    ('row_height_minus1', ctypes.c_uint16 * 21),
    ('reserved3', ctypes.c_uint32),
    ('pScalingLists', ctypes.POINTER(struct_StdVideoH265ScalingLists)),
    ('pPredictorPaletteEntries', ctypes.POINTER(struct_StdVideoH265PredictorPaletteEntries)),
]

VkVideoEncodeH265SessionParametersAddInfoKHR = struct_VkVideoEncodeH265SessionParametersAddInfoKHR
class struct_VkVideoEncodeH265SessionParametersCreateInfoKHR(Structure):
    pass

struct_VkVideoEncodeH265SessionParametersCreateInfoKHR._pack_ = 1 # source:False
struct_VkVideoEncodeH265SessionParametersCreateInfoKHR._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('maxStdVPSCount', ctypes.c_uint32),
    ('maxStdSPSCount', ctypes.c_uint32),
    ('maxStdPPSCount', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('pParametersAddInfo', ctypes.POINTER(struct_VkVideoEncodeH265SessionParametersAddInfoKHR)),
]

VkVideoEncodeH265SessionParametersCreateInfoKHR = struct_VkVideoEncodeH265SessionParametersCreateInfoKHR
class struct_VkVideoEncodeH265SessionParametersGetInfoKHR(Structure):
    pass

struct_VkVideoEncodeH265SessionParametersGetInfoKHR._pack_ = 1 # source:False
struct_VkVideoEncodeH265SessionParametersGetInfoKHR._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('writeStdVPS', ctypes.c_uint32),
    ('writeStdSPS', ctypes.c_uint32),
    ('writeStdPPS', ctypes.c_uint32),
    ('stdVPSId', ctypes.c_uint32),
    ('stdSPSId', ctypes.c_uint32),
    ('stdPPSId', ctypes.c_uint32),
]

VkVideoEncodeH265SessionParametersGetInfoKHR = struct_VkVideoEncodeH265SessionParametersGetInfoKHR
class struct_VkVideoEncodeH265SessionParametersFeedbackInfoKHR(Structure):
    pass

struct_VkVideoEncodeH265SessionParametersFeedbackInfoKHR._pack_ = 1 # source:False
struct_VkVideoEncodeH265SessionParametersFeedbackInfoKHR._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('hasStdVPSOverrides', ctypes.c_uint32),
    ('hasStdSPSOverrides', ctypes.c_uint32),
    ('hasStdPPSOverrides', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkVideoEncodeH265SessionParametersFeedbackInfoKHR = struct_VkVideoEncodeH265SessionParametersFeedbackInfoKHR
class struct_VkVideoEncodeH265NaluSliceSegmentInfoKHR(Structure):
    pass

class struct_StdVideoEncodeH265SliceSegmentHeader(Structure):
    pass

struct_VkVideoEncodeH265NaluSliceSegmentInfoKHR._pack_ = 1 # source:False
struct_VkVideoEncodeH265NaluSliceSegmentInfoKHR._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('constantQp', ctypes.c_int32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('pStdSliceSegmentHeader', ctypes.POINTER(struct_StdVideoEncodeH265SliceSegmentHeader)),
]

class struct_StdVideoEncodeH265WeightTable(Structure):
    pass

class struct_StdVideoEncodeH265SliceSegmentHeaderFlags(Structure):
    pass

struct_StdVideoEncodeH265SliceSegmentHeaderFlags._pack_ = 1 # source:False
struct_StdVideoEncodeH265SliceSegmentHeaderFlags._fields_ = [
    ('first_slice_segment_in_pic_flag', ctypes.c_uint32, 1),
    ('dependent_slice_segment_flag', ctypes.c_uint32, 1),
    ('slice_sao_luma_flag', ctypes.c_uint32, 1),
    ('slice_sao_chroma_flag', ctypes.c_uint32, 1),
    ('num_ref_idx_active_override_flag', ctypes.c_uint32, 1),
    ('mvd_l1_zero_flag', ctypes.c_uint32, 1),
    ('cabac_init_flag', ctypes.c_uint32, 1),
    ('cu_chroma_qp_offset_enabled_flag', ctypes.c_uint32, 1),
    ('deblocking_filter_override_flag', ctypes.c_uint32, 1),
    ('slice_deblocking_filter_disabled_flag', ctypes.c_uint32, 1),
    ('collocated_from_l0_flag', ctypes.c_uint32, 1),
    ('slice_loop_filter_across_slices_enabled_flag', ctypes.c_uint32, 1),
    ('reserved', ctypes.c_uint32, 20),
]


# values for enumeration 'StdVideoH265SliceType'
StdVideoH265SliceType__enumvalues = {
    0: 'STD_VIDEO_H265_SLICE_TYPE_B',
    1: 'STD_VIDEO_H265_SLICE_TYPE_P',
    2: 'STD_VIDEO_H265_SLICE_TYPE_I',
    2147483647: 'STD_VIDEO_H265_SLICE_TYPE_INVALID',
    2147483647: 'STD_VIDEO_H265_SLICE_TYPE_MAX_ENUM',
}
STD_VIDEO_H265_SLICE_TYPE_B = 0
STD_VIDEO_H265_SLICE_TYPE_P = 1
STD_VIDEO_H265_SLICE_TYPE_I = 2
STD_VIDEO_H265_SLICE_TYPE_INVALID = 2147483647
STD_VIDEO_H265_SLICE_TYPE_MAX_ENUM = 2147483647
StdVideoH265SliceType = ctypes.c_uint32 # enum
struct_StdVideoEncodeH265SliceSegmentHeader._pack_ = 1 # source:False
struct_StdVideoEncodeH265SliceSegmentHeader._fields_ = [
    ('flags', struct_StdVideoEncodeH265SliceSegmentHeaderFlags),
    ('slice_type', StdVideoH265SliceType),
    ('slice_segment_address', ctypes.c_uint32),
    ('collocated_ref_idx', ctypes.c_ubyte),
    ('MaxNumMergeCand', ctypes.c_ubyte),
    ('slice_cb_qp_offset', ctypes.c_byte),
    ('slice_cr_qp_offset', ctypes.c_byte),
    ('slice_beta_offset_div2', ctypes.c_byte),
    ('slice_tc_offset_div2', ctypes.c_byte),
    ('slice_act_y_qp_offset', ctypes.c_byte),
    ('slice_act_cb_qp_offset', ctypes.c_byte),
    ('slice_act_cr_qp_offset', ctypes.c_byte),
    ('slice_qp_delta', ctypes.c_byte),
    ('reserved1', ctypes.c_uint16),
    ('pWeightTable', ctypes.POINTER(struct_StdVideoEncodeH265WeightTable)),
]

class struct_StdVideoEncodeH265WeightTableFlags(Structure):
    pass

struct_StdVideoEncodeH265WeightTableFlags._pack_ = 1 # source:False
struct_StdVideoEncodeH265WeightTableFlags._fields_ = [
    ('luma_weight_l0_flag', ctypes.c_uint16),
    ('chroma_weight_l0_flag', ctypes.c_uint16),
    ('luma_weight_l1_flag', ctypes.c_uint16),
    ('chroma_weight_l1_flag', ctypes.c_uint16),
]

struct_StdVideoEncodeH265WeightTable._pack_ = 1 # source:False
struct_StdVideoEncodeH265WeightTable._fields_ = [
    ('flags', struct_StdVideoEncodeH265WeightTableFlags),
    ('luma_log2_weight_denom', ctypes.c_ubyte),
    ('delta_chroma_log2_weight_denom', ctypes.c_byte),
    ('delta_luma_weight_l0', ctypes.c_byte * 15),
    ('luma_offset_l0', ctypes.c_byte * 15),
    ('delta_chroma_weight_l0', ctypes.c_byte * 2 * 15),
    ('delta_chroma_offset_l0', ctypes.c_byte * 2 * 15),
    ('delta_luma_weight_l1', ctypes.c_byte * 15),
    ('luma_offset_l1', ctypes.c_byte * 15),
    ('delta_chroma_weight_l1', ctypes.c_byte * 2 * 15),
    ('delta_chroma_offset_l1', ctypes.c_byte * 2 * 15),
]

VkVideoEncodeH265NaluSliceSegmentInfoKHR = struct_VkVideoEncodeH265NaluSliceSegmentInfoKHR
class struct_VkVideoEncodeH265PictureInfoKHR(Structure):
    pass

class struct_StdVideoEncodeH265PictureInfo(Structure):
    pass

struct_VkVideoEncodeH265PictureInfoKHR._pack_ = 1 # source:False
struct_VkVideoEncodeH265PictureInfoKHR._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('naluSliceSegmentEntryCount', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('pNaluSliceSegmentEntries', ctypes.POINTER(struct_VkVideoEncodeH265NaluSliceSegmentInfoKHR)),
    ('pStdPictureInfo', ctypes.POINTER(struct_StdVideoEncodeH265PictureInfo)),
]

class struct_StdVideoEncodeH265ReferenceListsInfo(Structure):
    pass

class struct_StdVideoEncodeH265LongTermRefPics(Structure):
    pass

class struct_StdVideoEncodeH265PictureInfoFlags(Structure):
    pass

struct_StdVideoEncodeH265PictureInfoFlags._pack_ = 1 # source:False
struct_StdVideoEncodeH265PictureInfoFlags._fields_ = [
    ('is_reference', ctypes.c_uint32, 1),
    ('IrapPicFlag', ctypes.c_uint32, 1),
    ('used_for_long_term_reference', ctypes.c_uint32, 1),
    ('discardable_flag', ctypes.c_uint32, 1),
    ('cross_layer_bla_flag', ctypes.c_uint32, 1),
    ('pic_output_flag', ctypes.c_uint32, 1),
    ('no_output_of_prior_pics_flag', ctypes.c_uint32, 1),
    ('short_term_ref_pic_set_sps_flag', ctypes.c_uint32, 1),
    ('slice_temporal_mvp_enabled_flag', ctypes.c_uint32, 1),
    ('reserved', ctypes.c_uint32, 23),
]


# values for enumeration 'StdVideoH265PictureType'
StdVideoH265PictureType__enumvalues = {
    0: 'STD_VIDEO_H265_PICTURE_TYPE_P',
    1: 'STD_VIDEO_H265_PICTURE_TYPE_B',
    2: 'STD_VIDEO_H265_PICTURE_TYPE_I',
    3: 'STD_VIDEO_H265_PICTURE_TYPE_IDR',
    2147483647: 'STD_VIDEO_H265_PICTURE_TYPE_INVALID',
    2147483647: 'STD_VIDEO_H265_PICTURE_TYPE_MAX_ENUM',
}
STD_VIDEO_H265_PICTURE_TYPE_P = 0
STD_VIDEO_H265_PICTURE_TYPE_B = 1
STD_VIDEO_H265_PICTURE_TYPE_I = 2
STD_VIDEO_H265_PICTURE_TYPE_IDR = 3
STD_VIDEO_H265_PICTURE_TYPE_INVALID = 2147483647
STD_VIDEO_H265_PICTURE_TYPE_MAX_ENUM = 2147483647
StdVideoH265PictureType = ctypes.c_uint32 # enum
struct_StdVideoEncodeH265PictureInfo._pack_ = 1 # source:False
struct_StdVideoEncodeH265PictureInfo._fields_ = [
    ('flags', struct_StdVideoEncodeH265PictureInfoFlags),
    ('pic_type', StdVideoH265PictureType),
    ('sps_video_parameter_set_id', ctypes.c_ubyte),
    ('pps_seq_parameter_set_id', ctypes.c_ubyte),
    ('pps_pic_parameter_set_id', ctypes.c_ubyte),
    ('short_term_ref_pic_set_idx', ctypes.c_ubyte),
    ('PicOrderCntVal', ctypes.c_int32),
    ('TemporalId', ctypes.c_ubyte),
    ('reserved1', ctypes.c_ubyte * 7),
    ('pRefLists', ctypes.POINTER(struct_StdVideoEncodeH265ReferenceListsInfo)),
    ('pShortTermRefPicSet', ctypes.POINTER(struct_StdVideoH265ShortTermRefPicSet)),
    ('pLongTermRefPics', ctypes.POINTER(struct_StdVideoEncodeH265LongTermRefPics)),
]

class struct_StdVideoEncodeH265ReferenceListsInfoFlags(Structure):
    pass

struct_StdVideoEncodeH265ReferenceListsInfoFlags._pack_ = 1 # source:False
struct_StdVideoEncodeH265ReferenceListsInfoFlags._fields_ = [
    ('ref_pic_list_modification_flag_l0', ctypes.c_uint32, 1),
    ('ref_pic_list_modification_flag_l1', ctypes.c_uint32, 1),
    ('reserved', ctypes.c_uint32, 30),
]

struct_StdVideoEncodeH265ReferenceListsInfo._pack_ = 1 # source:False
struct_StdVideoEncodeH265ReferenceListsInfo._fields_ = [
    ('flags', struct_StdVideoEncodeH265ReferenceListsInfoFlags),
    ('num_ref_idx_l0_active_minus1', ctypes.c_ubyte),
    ('num_ref_idx_l1_active_minus1', ctypes.c_ubyte),
    ('RefPicList0', ctypes.c_ubyte * 15),
    ('RefPicList1', ctypes.c_ubyte * 15),
    ('list_entry_l0', ctypes.c_ubyte * 15),
    ('list_entry_l1', ctypes.c_ubyte * 15),
    ('PADDING_0', ctypes.c_ubyte * 2),
]

struct_StdVideoEncodeH265LongTermRefPics._pack_ = 1 # source:False
struct_StdVideoEncodeH265LongTermRefPics._fields_ = [
    ('num_long_term_sps', ctypes.c_ubyte),
    ('num_long_term_pics', ctypes.c_ubyte),
    ('lt_idx_sps', ctypes.c_ubyte * 32),
    ('poc_lsb_lt', ctypes.c_ubyte * 16),
    ('used_by_curr_pic_lt_flag', ctypes.c_uint16),
    ('delta_poc_msb_present_flag', ctypes.c_ubyte * 48),
    ('delta_poc_msb_cycle_lt', ctypes.c_ubyte * 48),
]

VkVideoEncodeH265PictureInfoKHR = struct_VkVideoEncodeH265PictureInfoKHR
class struct_VkVideoEncodeH265DpbSlotInfoKHR(Structure):
    pass

class struct_StdVideoEncodeH265ReferenceInfo(Structure):
    pass

struct_VkVideoEncodeH265DpbSlotInfoKHR._pack_ = 1 # source:False
struct_VkVideoEncodeH265DpbSlotInfoKHR._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('pStdReferenceInfo', ctypes.POINTER(struct_StdVideoEncodeH265ReferenceInfo)),
]

class struct_StdVideoEncodeH265ReferenceInfoFlags(Structure):
    pass

struct_StdVideoEncodeH265ReferenceInfoFlags._pack_ = 1 # source:False
struct_StdVideoEncodeH265ReferenceInfoFlags._fields_ = [
    ('used_for_long_term_reference', ctypes.c_uint32, 1),
    ('unused_for_reference', ctypes.c_uint32, 1),
    ('reserved', ctypes.c_uint32, 30),
]

struct_StdVideoEncodeH265ReferenceInfo._pack_ = 1 # source:False
struct_StdVideoEncodeH265ReferenceInfo._fields_ = [
    ('flags', struct_StdVideoEncodeH265ReferenceInfoFlags),
    ('pic_type', StdVideoH265PictureType),
    ('PicOrderCntVal', ctypes.c_int32),
    ('TemporalId', ctypes.c_ubyte),
    ('PADDING_0', ctypes.c_ubyte * 3),
]

VkVideoEncodeH265DpbSlotInfoKHR = struct_VkVideoEncodeH265DpbSlotInfoKHR
class struct_VkVideoEncodeH265ProfileInfoKHR(Structure):
    pass

struct_VkVideoEncodeH265ProfileInfoKHR._pack_ = 1 # source:False
struct_VkVideoEncodeH265ProfileInfoKHR._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('stdProfileIdc', StdVideoH265ProfileIdc),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkVideoEncodeH265ProfileInfoKHR = struct_VkVideoEncodeH265ProfileInfoKHR
class struct_VkVideoEncodeH265RateControlInfoKHR(Structure):
    pass

struct_VkVideoEncodeH265RateControlInfoKHR._pack_ = 1 # source:False
struct_VkVideoEncodeH265RateControlInfoKHR._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('flags', ctypes.c_uint32),
    ('gopFrameCount', ctypes.c_uint32),
    ('idrPeriod', ctypes.c_uint32),
    ('consecutiveBFrameCount', ctypes.c_uint32),
    ('subLayerCount', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkVideoEncodeH265RateControlInfoKHR = struct_VkVideoEncodeH265RateControlInfoKHR
class struct_VkVideoEncodeH265FrameSizeKHR(Structure):
    pass

struct_VkVideoEncodeH265FrameSizeKHR._pack_ = 1 # source:False
struct_VkVideoEncodeH265FrameSizeKHR._fields_ = [
    ('frameISize', ctypes.c_uint32),
    ('framePSize', ctypes.c_uint32),
    ('frameBSize', ctypes.c_uint32),
]

VkVideoEncodeH265FrameSizeKHR = struct_VkVideoEncodeH265FrameSizeKHR
class struct_VkVideoEncodeH265RateControlLayerInfoKHR(Structure):
    pass

struct_VkVideoEncodeH265RateControlLayerInfoKHR._pack_ = 1 # source:False
struct_VkVideoEncodeH265RateControlLayerInfoKHR._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('useMinQp', ctypes.c_uint32),
    ('minQp', VkVideoEncodeH265QpKHR),
    ('useMaxQp', ctypes.c_uint32),
    ('maxQp', VkVideoEncodeH265QpKHR),
    ('useMaxFrameSize', ctypes.c_uint32),
    ('maxFrameSize', VkVideoEncodeH265FrameSizeKHR),
]

VkVideoEncodeH265RateControlLayerInfoKHR = struct_VkVideoEncodeH265RateControlLayerInfoKHR
class struct_VkVideoEncodeH265GopRemainingFrameInfoKHR(Structure):
    pass

struct_VkVideoEncodeH265GopRemainingFrameInfoKHR._pack_ = 1 # source:False
struct_VkVideoEncodeH265GopRemainingFrameInfoKHR._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('useGopRemainingFrames', ctypes.c_uint32),
    ('gopRemainingI', ctypes.c_uint32),
    ('gopRemainingP', ctypes.c_uint32),
    ('gopRemainingB', ctypes.c_uint32),
]

VkVideoEncodeH265GopRemainingFrameInfoKHR = struct_VkVideoEncodeH265GopRemainingFrameInfoKHR

# values for enumeration 'VkVideoDecodeH264PictureLayoutFlagBitsKHR'
VkVideoDecodeH264PictureLayoutFlagBitsKHR__enumvalues = {
    0: 'VK_VIDEO_DECODE_H264_PICTURE_LAYOUT_PROGRESSIVE_KHR',
    1: 'VK_VIDEO_DECODE_H264_PICTURE_LAYOUT_INTERLACED_INTERLEAVED_LINES_BIT_KHR',
    2: 'VK_VIDEO_DECODE_H264_PICTURE_LAYOUT_INTERLACED_SEPARATE_PLANES_BIT_KHR',
    2147483647: 'VK_VIDEO_DECODE_H264_PICTURE_LAYOUT_FLAG_BITS_MAX_ENUM_KHR',
}
VK_VIDEO_DECODE_H264_PICTURE_LAYOUT_PROGRESSIVE_KHR = 0
VK_VIDEO_DECODE_H264_PICTURE_LAYOUT_INTERLACED_INTERLEAVED_LINES_BIT_KHR = 1
VK_VIDEO_DECODE_H264_PICTURE_LAYOUT_INTERLACED_SEPARATE_PLANES_BIT_KHR = 2
VK_VIDEO_DECODE_H264_PICTURE_LAYOUT_FLAG_BITS_MAX_ENUM_KHR = 2147483647
VkVideoDecodeH264PictureLayoutFlagBitsKHR = ctypes.c_uint32 # enum
VkVideoDecodeH264PictureLayoutFlagsKHR = ctypes.c_uint32
class struct_VkVideoDecodeH264ProfileInfoKHR(Structure):
    pass

struct_VkVideoDecodeH264ProfileInfoKHR._pack_ = 1 # source:False
struct_VkVideoDecodeH264ProfileInfoKHR._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('stdProfileIdc', StdVideoH264ProfileIdc),
    ('pictureLayout', VkVideoDecodeH264PictureLayoutFlagBitsKHR),
]

VkVideoDecodeH264ProfileInfoKHR = struct_VkVideoDecodeH264ProfileInfoKHR
class struct_VkVideoDecodeH264CapabilitiesKHR(Structure):
    pass

struct_VkVideoDecodeH264CapabilitiesKHR._pack_ = 1 # source:False
struct_VkVideoDecodeH264CapabilitiesKHR._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('maxLevelIdc', StdVideoH264LevelIdc),
    ('fieldOffsetGranularity', VkOffset2D),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkVideoDecodeH264CapabilitiesKHR = struct_VkVideoDecodeH264CapabilitiesKHR
class struct_VkVideoDecodeH264SessionParametersAddInfoKHR(Structure):
    pass

struct_VkVideoDecodeH264SessionParametersAddInfoKHR._pack_ = 1 # source:False
struct_VkVideoDecodeH264SessionParametersAddInfoKHR._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('stdSPSCount', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('pStdSPSs', ctypes.POINTER(struct_StdVideoH264SequenceParameterSet)),
    ('stdPPSCount', ctypes.c_uint32),
    ('PADDING_2', ctypes.c_ubyte * 4),
    ('pStdPPSs', ctypes.POINTER(struct_StdVideoH264PictureParameterSet)),
]

VkVideoDecodeH264SessionParametersAddInfoKHR = struct_VkVideoDecodeH264SessionParametersAddInfoKHR
class struct_VkVideoDecodeH264SessionParametersCreateInfoKHR(Structure):
    pass

struct_VkVideoDecodeH264SessionParametersCreateInfoKHR._pack_ = 1 # source:False
struct_VkVideoDecodeH264SessionParametersCreateInfoKHR._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('maxStdSPSCount', ctypes.c_uint32),
    ('maxStdPPSCount', ctypes.c_uint32),
    ('pParametersAddInfo', ctypes.POINTER(struct_VkVideoDecodeH264SessionParametersAddInfoKHR)),
]

VkVideoDecodeH264SessionParametersCreateInfoKHR = struct_VkVideoDecodeH264SessionParametersCreateInfoKHR
class struct_VkVideoDecodeH264PictureInfoKHR(Structure):
    pass

class struct_StdVideoDecodeH264PictureInfo(Structure):
    pass

struct_VkVideoDecodeH264PictureInfoKHR._pack_ = 1 # source:False
struct_VkVideoDecodeH264PictureInfoKHR._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('pStdPictureInfo', ctypes.POINTER(struct_StdVideoDecodeH264PictureInfo)),
    ('sliceCount', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('pSliceOffsets', ctypes.POINTER(ctypes.c_uint32)),
]

class struct_StdVideoDecodeH264PictureInfoFlags(Structure):
    pass

struct_StdVideoDecodeH264PictureInfoFlags._pack_ = 1 # source:False
struct_StdVideoDecodeH264PictureInfoFlags._fields_ = [
    ('field_pic_flag', ctypes.c_uint32, 1),
    ('is_intra', ctypes.c_uint32, 1),
    ('IdrPicFlag', ctypes.c_uint32, 1),
    ('bottom_field_flag', ctypes.c_uint32, 1),
    ('is_reference', ctypes.c_uint32, 1),
    ('complementary_field_pair', ctypes.c_uint32, 1),
    ('PADDING_0', ctypes.c_uint32, 26),
]

struct_StdVideoDecodeH264PictureInfo._pack_ = 1 # source:False
struct_StdVideoDecodeH264PictureInfo._fields_ = [
    ('flags', struct_StdVideoDecodeH264PictureInfoFlags),
    ('seq_parameter_set_id', ctypes.c_ubyte),
    ('pic_parameter_set_id', ctypes.c_ubyte),
    ('reserved1', ctypes.c_ubyte),
    ('reserved2', ctypes.c_ubyte),
    ('frame_num', ctypes.c_uint16),
    ('idr_pic_id', ctypes.c_uint16),
    ('PicOrderCnt', ctypes.c_int32 * 2),
]

VkVideoDecodeH264PictureInfoKHR = struct_VkVideoDecodeH264PictureInfoKHR
class struct_VkVideoDecodeH264DpbSlotInfoKHR(Structure):
    pass

class struct_StdVideoDecodeH264ReferenceInfo(Structure):
    pass

struct_VkVideoDecodeH264DpbSlotInfoKHR._pack_ = 1 # source:False
struct_VkVideoDecodeH264DpbSlotInfoKHR._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('pStdReferenceInfo', ctypes.POINTER(struct_StdVideoDecodeH264ReferenceInfo)),
]

class struct_StdVideoDecodeH264ReferenceInfoFlags(Structure):
    pass

struct_StdVideoDecodeH264ReferenceInfoFlags._pack_ = 1 # source:False
struct_StdVideoDecodeH264ReferenceInfoFlags._fields_ = [
    ('top_field_flag', ctypes.c_uint32, 1),
    ('bottom_field_flag', ctypes.c_uint32, 1),
    ('used_for_long_term_reference', ctypes.c_uint32, 1),
    ('is_non_existing', ctypes.c_uint32, 1),
    ('PADDING_0', ctypes.c_uint32, 28),
]

struct_StdVideoDecodeH264ReferenceInfo._pack_ = 1 # source:False
struct_StdVideoDecodeH264ReferenceInfo._fields_ = [
    ('flags', struct_StdVideoDecodeH264ReferenceInfoFlags),
    ('FrameNum', ctypes.c_uint16),
    ('reserved', ctypes.c_uint16),
    ('PicOrderCnt', ctypes.c_int32 * 2),
]

VkVideoDecodeH264DpbSlotInfoKHR = struct_VkVideoDecodeH264DpbSlotInfoKHR
VkRenderingFlagsKHR = ctypes.c_uint32
VkRenderingFlagBitsKHR = VkRenderingFlagBits
VkRenderingFlagBitsKHR__enumvalues = VkRenderingFlagBits__enumvalues
VkRenderingInfoKHR = struct_VkRenderingInfo
VkRenderingAttachmentInfoKHR = struct_VkRenderingAttachmentInfo
VkPipelineRenderingCreateInfoKHR = struct_VkPipelineRenderingCreateInfo
VkPhysicalDeviceDynamicRenderingFeaturesKHR = struct_VkPhysicalDeviceDynamicRenderingFeatures
VkCommandBufferInheritanceRenderingInfoKHR = struct_VkCommandBufferInheritanceRenderingInfo
class struct_VkRenderingFragmentShadingRateAttachmentInfoKHR(Structure):
    pass

struct_VkRenderingFragmentShadingRateAttachmentInfoKHR._pack_ = 1 # source:False
struct_VkRenderingFragmentShadingRateAttachmentInfoKHR._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('imageView', ctypes.POINTER(struct_VkImageView_T)),
    ('imageLayout', VkImageLayout),
    ('shadingRateAttachmentTexelSize', VkExtent2D),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkRenderingFragmentShadingRateAttachmentInfoKHR = struct_VkRenderingFragmentShadingRateAttachmentInfoKHR
class struct_VkRenderingFragmentDensityMapAttachmentInfoEXT(Structure):
    pass

struct_VkRenderingFragmentDensityMapAttachmentInfoEXT._pack_ = 1 # source:False
struct_VkRenderingFragmentDensityMapAttachmentInfoEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('imageView', ctypes.POINTER(struct_VkImageView_T)),
    ('imageLayout', VkImageLayout),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkRenderingFragmentDensityMapAttachmentInfoEXT = struct_VkRenderingFragmentDensityMapAttachmentInfoEXT
class struct_VkAttachmentSampleCountInfoAMD(Structure):
    pass

struct_VkAttachmentSampleCountInfoAMD._pack_ = 1 # source:False
struct_VkAttachmentSampleCountInfoAMD._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('colorAttachmentCount', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('pColorAttachmentSamples', ctypes.POINTER(VkSampleCountFlagBits)),
    ('depthStencilAttachmentSamples', VkSampleCountFlagBits),
    ('PADDING_2', ctypes.c_ubyte * 4),
]

VkAttachmentSampleCountInfoAMD = struct_VkAttachmentSampleCountInfoAMD
VkAttachmentSampleCountInfoNV = struct_VkAttachmentSampleCountInfoAMD
class struct_VkMultiviewPerViewAttributesInfoNVX(Structure):
    pass

struct_VkMultiviewPerViewAttributesInfoNVX._pack_ = 1 # source:False
struct_VkMultiviewPerViewAttributesInfoNVX._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('perViewAttributes', ctypes.c_uint32),
    ('perViewAttributesPositionXOnly', ctypes.c_uint32),
]

VkMultiviewPerViewAttributesInfoNVX = struct_VkMultiviewPerViewAttributesInfoNVX
PFN_vkCmdBeginRenderingKHR = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.POINTER(struct_VkRenderingInfo))
PFN_vkCmdEndRenderingKHR = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T))
try:
    vkCmdBeginRenderingKHR = _libraries['FIXME_STUB'].vkCmdBeginRenderingKHR
    vkCmdBeginRenderingKHR.restype = None
    vkCmdBeginRenderingKHR.argtypes = [VkCommandBuffer, ctypes.POINTER(struct_VkRenderingInfo)]
except AttributeError:
    pass
try:
    vkCmdEndRenderingKHR = _libraries['FIXME_STUB'].vkCmdEndRenderingKHR
    vkCmdEndRenderingKHR.restype = None
    vkCmdEndRenderingKHR.argtypes = [VkCommandBuffer]
except AttributeError:
    pass
VkRenderPassMultiviewCreateInfoKHR = struct_VkRenderPassMultiviewCreateInfo
VkPhysicalDeviceMultiviewFeaturesKHR = struct_VkPhysicalDeviceMultiviewFeatures
VkPhysicalDeviceMultiviewPropertiesKHR = struct_VkPhysicalDeviceMultiviewProperties
VkPhysicalDeviceFeatures2KHR = struct_VkPhysicalDeviceFeatures2
VkPhysicalDeviceProperties2KHR = struct_VkPhysicalDeviceProperties2
VkFormatProperties2KHR = struct_VkFormatProperties2
VkImageFormatProperties2KHR = struct_VkImageFormatProperties2
VkPhysicalDeviceImageFormatInfo2KHR = struct_VkPhysicalDeviceImageFormatInfo2
VkQueueFamilyProperties2KHR = struct_VkQueueFamilyProperties2
VkPhysicalDeviceMemoryProperties2KHR = struct_VkPhysicalDeviceMemoryProperties2
VkSparseImageFormatProperties2KHR = struct_VkSparseImageFormatProperties2
VkPhysicalDeviceSparseImageFormatInfo2KHR = struct_VkPhysicalDeviceSparseImageFormatInfo2
PFN_vkGetPhysicalDeviceFeatures2KHR = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkPhysicalDevice_T), ctypes.POINTER(struct_VkPhysicalDeviceFeatures2))
PFN_vkGetPhysicalDeviceProperties2KHR = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkPhysicalDevice_T), ctypes.POINTER(struct_VkPhysicalDeviceProperties2))
PFN_vkGetPhysicalDeviceFormatProperties2KHR = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkPhysicalDevice_T), VkFormat, ctypes.POINTER(struct_VkFormatProperties2))
PFN_vkGetPhysicalDeviceImageFormatProperties2KHR = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkPhysicalDevice_T), ctypes.POINTER(struct_VkPhysicalDeviceImageFormatInfo2), ctypes.POINTER(struct_VkImageFormatProperties2))
PFN_vkGetPhysicalDeviceQueueFamilyProperties2KHR = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkPhysicalDevice_T), ctypes.POINTER(ctypes.c_uint32), ctypes.POINTER(struct_VkQueueFamilyProperties2))
PFN_vkGetPhysicalDeviceMemoryProperties2KHR = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkPhysicalDevice_T), ctypes.POINTER(struct_VkPhysicalDeviceMemoryProperties2))
PFN_vkGetPhysicalDeviceSparseImageFormatProperties2KHR = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkPhysicalDevice_T), ctypes.POINTER(struct_VkPhysicalDeviceSparseImageFormatInfo2), ctypes.POINTER(ctypes.c_uint32), ctypes.POINTER(struct_VkSparseImageFormatProperties2))
try:
    vkGetPhysicalDeviceFeatures2KHR = _libraries['FIXME_STUB'].vkGetPhysicalDeviceFeatures2KHR
    vkGetPhysicalDeviceFeatures2KHR.restype = None
    vkGetPhysicalDeviceFeatures2KHR.argtypes = [VkPhysicalDevice, ctypes.POINTER(struct_VkPhysicalDeviceFeatures2)]
except AttributeError:
    pass
try:
    vkGetPhysicalDeviceProperties2KHR = _libraries['FIXME_STUB'].vkGetPhysicalDeviceProperties2KHR
    vkGetPhysicalDeviceProperties2KHR.restype = None
    vkGetPhysicalDeviceProperties2KHR.argtypes = [VkPhysicalDevice, ctypes.POINTER(struct_VkPhysicalDeviceProperties2)]
except AttributeError:
    pass
try:
    vkGetPhysicalDeviceFormatProperties2KHR = _libraries['FIXME_STUB'].vkGetPhysicalDeviceFormatProperties2KHR
    vkGetPhysicalDeviceFormatProperties2KHR.restype = None
    vkGetPhysicalDeviceFormatProperties2KHR.argtypes = [VkPhysicalDevice, VkFormat, ctypes.POINTER(struct_VkFormatProperties2)]
except AttributeError:
    pass
try:
    vkGetPhysicalDeviceImageFormatProperties2KHR = _libraries['FIXME_STUB'].vkGetPhysicalDeviceImageFormatProperties2KHR
    vkGetPhysicalDeviceImageFormatProperties2KHR.restype = VkResult
    vkGetPhysicalDeviceImageFormatProperties2KHR.argtypes = [VkPhysicalDevice, ctypes.POINTER(struct_VkPhysicalDeviceImageFormatInfo2), ctypes.POINTER(struct_VkImageFormatProperties2)]
except AttributeError:
    pass
try:
    vkGetPhysicalDeviceQueueFamilyProperties2KHR = _libraries['FIXME_STUB'].vkGetPhysicalDeviceQueueFamilyProperties2KHR
    vkGetPhysicalDeviceQueueFamilyProperties2KHR.restype = None
    vkGetPhysicalDeviceQueueFamilyProperties2KHR.argtypes = [VkPhysicalDevice, ctypes.POINTER(ctypes.c_uint32), ctypes.POINTER(struct_VkQueueFamilyProperties2)]
except AttributeError:
    pass
try:
    vkGetPhysicalDeviceMemoryProperties2KHR = _libraries['FIXME_STUB'].vkGetPhysicalDeviceMemoryProperties2KHR
    vkGetPhysicalDeviceMemoryProperties2KHR.restype = None
    vkGetPhysicalDeviceMemoryProperties2KHR.argtypes = [VkPhysicalDevice, ctypes.POINTER(struct_VkPhysicalDeviceMemoryProperties2)]
except AttributeError:
    pass
try:
    vkGetPhysicalDeviceSparseImageFormatProperties2KHR = _libraries['FIXME_STUB'].vkGetPhysicalDeviceSparseImageFormatProperties2KHR
    vkGetPhysicalDeviceSparseImageFormatProperties2KHR.restype = None
    vkGetPhysicalDeviceSparseImageFormatProperties2KHR.argtypes = [VkPhysicalDevice, ctypes.POINTER(struct_VkPhysicalDeviceSparseImageFormatInfo2), ctypes.POINTER(ctypes.c_uint32), ctypes.POINTER(struct_VkSparseImageFormatProperties2)]
except AttributeError:
    pass
VkPeerMemoryFeatureFlagsKHR = ctypes.c_uint32
VkPeerMemoryFeatureFlagBitsKHR = VkPeerMemoryFeatureFlagBits
VkPeerMemoryFeatureFlagBitsKHR__enumvalues = VkPeerMemoryFeatureFlagBits__enumvalues
VkMemoryAllocateFlagsKHR = ctypes.c_uint32
VkMemoryAllocateFlagBitsKHR = VkMemoryAllocateFlagBits
VkMemoryAllocateFlagBitsKHR__enumvalues = VkMemoryAllocateFlagBits__enumvalues
VkMemoryAllocateFlagsInfoKHR = struct_VkMemoryAllocateFlagsInfo
VkDeviceGroupRenderPassBeginInfoKHR = struct_VkDeviceGroupRenderPassBeginInfo
VkDeviceGroupCommandBufferBeginInfoKHR = struct_VkDeviceGroupCommandBufferBeginInfo
VkDeviceGroupSubmitInfoKHR = struct_VkDeviceGroupSubmitInfo
VkDeviceGroupBindSparseInfoKHR = struct_VkDeviceGroupBindSparseInfo
VkBindBufferMemoryDeviceGroupInfoKHR = struct_VkBindBufferMemoryDeviceGroupInfo
VkBindImageMemoryDeviceGroupInfoKHR = struct_VkBindImageMemoryDeviceGroupInfo
PFN_vkGetDeviceGroupPeerMemoryFeaturesKHR = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkDevice_T), ctypes.c_uint32, ctypes.c_uint32, ctypes.c_uint32, ctypes.POINTER(ctypes.c_uint32))
PFN_vkCmdSetDeviceMaskKHR = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.c_uint32)
PFN_vkCmdDispatchBaseKHR = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.c_uint32, ctypes.c_uint32, ctypes.c_uint32, ctypes.c_uint32, ctypes.c_uint32, ctypes.c_uint32)
try:
    vkGetDeviceGroupPeerMemoryFeaturesKHR = _libraries['FIXME_STUB'].vkGetDeviceGroupPeerMemoryFeaturesKHR
    vkGetDeviceGroupPeerMemoryFeaturesKHR.restype = None
    vkGetDeviceGroupPeerMemoryFeaturesKHR.argtypes = [VkDevice, uint32_t, uint32_t, uint32_t, ctypes.POINTER(ctypes.c_uint32)]
except AttributeError:
    pass
try:
    vkCmdSetDeviceMaskKHR = _libraries['FIXME_STUB'].vkCmdSetDeviceMaskKHR
    vkCmdSetDeviceMaskKHR.restype = None
    vkCmdSetDeviceMaskKHR.argtypes = [VkCommandBuffer, uint32_t]
except AttributeError:
    pass
try:
    vkCmdDispatchBaseKHR = _libraries['FIXME_STUB'].vkCmdDispatchBaseKHR
    vkCmdDispatchBaseKHR.restype = None
    vkCmdDispatchBaseKHR.argtypes = [VkCommandBuffer, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t]
except AttributeError:
    pass
VkCommandPoolTrimFlagsKHR = ctypes.c_uint32
PFN_vkTrimCommandPoolKHR = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkCommandPool_T), ctypes.c_uint32)
try:
    vkTrimCommandPoolKHR = _libraries['FIXME_STUB'].vkTrimCommandPoolKHR
    vkTrimCommandPoolKHR.restype = None
    vkTrimCommandPoolKHR.argtypes = [VkDevice, VkCommandPool, VkCommandPoolTrimFlags]
except AttributeError:
    pass
VkPhysicalDeviceGroupPropertiesKHR = struct_VkPhysicalDeviceGroupProperties
VkDeviceGroupDeviceCreateInfoKHR = struct_VkDeviceGroupDeviceCreateInfo
PFN_vkEnumeratePhysicalDeviceGroupsKHR = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkInstance_T), ctypes.POINTER(ctypes.c_uint32), ctypes.POINTER(struct_VkPhysicalDeviceGroupProperties))
try:
    vkEnumeratePhysicalDeviceGroupsKHR = _libraries['FIXME_STUB'].vkEnumeratePhysicalDeviceGroupsKHR
    vkEnumeratePhysicalDeviceGroupsKHR.restype = VkResult
    vkEnumeratePhysicalDeviceGroupsKHR.argtypes = [VkInstance, ctypes.POINTER(ctypes.c_uint32), ctypes.POINTER(struct_VkPhysicalDeviceGroupProperties)]
except AttributeError:
    pass
VkExternalMemoryHandleTypeFlagsKHR = ctypes.c_uint32
VkExternalMemoryHandleTypeFlagBitsKHR = VkExternalMemoryHandleTypeFlagBits
VkExternalMemoryHandleTypeFlagBitsKHR__enumvalues = VkExternalMemoryHandleTypeFlagBits__enumvalues
VkExternalMemoryFeatureFlagsKHR = ctypes.c_uint32
VkExternalMemoryFeatureFlagBitsKHR = VkExternalMemoryFeatureFlagBits
VkExternalMemoryFeatureFlagBitsKHR__enumvalues = VkExternalMemoryFeatureFlagBits__enumvalues
VkExternalMemoryPropertiesKHR = struct_VkExternalMemoryProperties
VkPhysicalDeviceExternalImageFormatInfoKHR = struct_VkPhysicalDeviceExternalImageFormatInfo
VkExternalImageFormatPropertiesKHR = struct_VkExternalImageFormatProperties
VkPhysicalDeviceExternalBufferInfoKHR = struct_VkPhysicalDeviceExternalBufferInfo
VkExternalBufferPropertiesKHR = struct_VkExternalBufferProperties
VkPhysicalDeviceIDPropertiesKHR = struct_VkPhysicalDeviceIDProperties
PFN_vkGetPhysicalDeviceExternalBufferPropertiesKHR = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkPhysicalDevice_T), ctypes.POINTER(struct_VkPhysicalDeviceExternalBufferInfo), ctypes.POINTER(struct_VkExternalBufferProperties))
try:
    vkGetPhysicalDeviceExternalBufferPropertiesKHR = _libraries['FIXME_STUB'].vkGetPhysicalDeviceExternalBufferPropertiesKHR
    vkGetPhysicalDeviceExternalBufferPropertiesKHR.restype = None
    vkGetPhysicalDeviceExternalBufferPropertiesKHR.argtypes = [VkPhysicalDevice, ctypes.POINTER(struct_VkPhysicalDeviceExternalBufferInfo), ctypes.POINTER(struct_VkExternalBufferProperties)]
except AttributeError:
    pass
VkExternalMemoryImageCreateInfoKHR = struct_VkExternalMemoryImageCreateInfo
VkExternalMemoryBufferCreateInfoKHR = struct_VkExternalMemoryBufferCreateInfo
VkExportMemoryAllocateInfoKHR = struct_VkExportMemoryAllocateInfo
class struct_VkImportMemoryFdInfoKHR(Structure):
    pass

struct_VkImportMemoryFdInfoKHR._pack_ = 1 # source:False
struct_VkImportMemoryFdInfoKHR._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('handleType', VkExternalMemoryHandleTypeFlagBits),
    ('fd', ctypes.c_int32),
]

VkImportMemoryFdInfoKHR = struct_VkImportMemoryFdInfoKHR
class struct_VkMemoryFdPropertiesKHR(Structure):
    pass

struct_VkMemoryFdPropertiesKHR._pack_ = 1 # source:False
struct_VkMemoryFdPropertiesKHR._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('memoryTypeBits', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkMemoryFdPropertiesKHR = struct_VkMemoryFdPropertiesKHR
class struct_VkMemoryGetFdInfoKHR(Structure):
    pass

struct_VkMemoryGetFdInfoKHR._pack_ = 1 # source:False
struct_VkMemoryGetFdInfoKHR._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('memory', ctypes.POINTER(struct_VkDeviceMemory_T)),
    ('handleType', VkExternalMemoryHandleTypeFlagBits),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkMemoryGetFdInfoKHR = struct_VkMemoryGetFdInfoKHR
PFN_vkGetMemoryFdKHR = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkMemoryGetFdInfoKHR), ctypes.POINTER(ctypes.c_int32))
PFN_vkGetMemoryFdPropertiesKHR = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkDevice_T), VkExternalMemoryHandleTypeFlagBits, ctypes.c_int32, ctypes.POINTER(struct_VkMemoryFdPropertiesKHR))
try:
    vkGetMemoryFdKHR = _libraries['FIXME_STUB'].vkGetMemoryFdKHR
    vkGetMemoryFdKHR.restype = VkResult
    vkGetMemoryFdKHR.argtypes = [VkDevice, ctypes.POINTER(struct_VkMemoryGetFdInfoKHR), ctypes.POINTER(ctypes.c_int32)]
except AttributeError:
    pass
try:
    vkGetMemoryFdPropertiesKHR = _libraries['FIXME_STUB'].vkGetMemoryFdPropertiesKHR
    vkGetMemoryFdPropertiesKHR.restype = VkResult
    vkGetMemoryFdPropertiesKHR.argtypes = [VkDevice, VkExternalMemoryHandleTypeFlagBits, ctypes.c_int32, ctypes.POINTER(struct_VkMemoryFdPropertiesKHR)]
except AttributeError:
    pass
VkExternalSemaphoreHandleTypeFlagsKHR = ctypes.c_uint32
VkExternalSemaphoreHandleTypeFlagBitsKHR = VkExternalSemaphoreHandleTypeFlagBits
VkExternalSemaphoreHandleTypeFlagBitsKHR__enumvalues = VkExternalSemaphoreHandleTypeFlagBits__enumvalues
VkExternalSemaphoreFeatureFlagsKHR = ctypes.c_uint32
VkExternalSemaphoreFeatureFlagBitsKHR = VkExternalSemaphoreFeatureFlagBits
VkExternalSemaphoreFeatureFlagBitsKHR__enumvalues = VkExternalSemaphoreFeatureFlagBits__enumvalues
VkPhysicalDeviceExternalSemaphoreInfoKHR = struct_VkPhysicalDeviceExternalSemaphoreInfo
VkExternalSemaphorePropertiesKHR = struct_VkExternalSemaphoreProperties
PFN_vkGetPhysicalDeviceExternalSemaphorePropertiesKHR = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkPhysicalDevice_T), ctypes.POINTER(struct_VkPhysicalDeviceExternalSemaphoreInfo), ctypes.POINTER(struct_VkExternalSemaphoreProperties))
try:
    vkGetPhysicalDeviceExternalSemaphorePropertiesKHR = _libraries['FIXME_STUB'].vkGetPhysicalDeviceExternalSemaphorePropertiesKHR
    vkGetPhysicalDeviceExternalSemaphorePropertiesKHR.restype = None
    vkGetPhysicalDeviceExternalSemaphorePropertiesKHR.argtypes = [VkPhysicalDevice, ctypes.POINTER(struct_VkPhysicalDeviceExternalSemaphoreInfo), ctypes.POINTER(struct_VkExternalSemaphoreProperties)]
except AttributeError:
    pass
VkSemaphoreImportFlagsKHR = ctypes.c_uint32
VkSemaphoreImportFlagBitsKHR = VkSemaphoreImportFlagBits
VkSemaphoreImportFlagBitsKHR__enumvalues = VkSemaphoreImportFlagBits__enumvalues
VkExportSemaphoreCreateInfoKHR = struct_VkExportSemaphoreCreateInfo
class struct_VkImportSemaphoreFdInfoKHR(Structure):
    pass

struct_VkImportSemaphoreFdInfoKHR._pack_ = 1 # source:False
struct_VkImportSemaphoreFdInfoKHR._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('semaphore', ctypes.POINTER(struct_VkSemaphore_T)),
    ('flags', ctypes.c_uint32),
    ('handleType', VkExternalSemaphoreHandleTypeFlagBits),
    ('fd', ctypes.c_int32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkImportSemaphoreFdInfoKHR = struct_VkImportSemaphoreFdInfoKHR
class struct_VkSemaphoreGetFdInfoKHR(Structure):
    pass

struct_VkSemaphoreGetFdInfoKHR._pack_ = 1 # source:False
struct_VkSemaphoreGetFdInfoKHR._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('semaphore', ctypes.POINTER(struct_VkSemaphore_T)),
    ('handleType', VkExternalSemaphoreHandleTypeFlagBits),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkSemaphoreGetFdInfoKHR = struct_VkSemaphoreGetFdInfoKHR
PFN_vkImportSemaphoreFdKHR = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkImportSemaphoreFdInfoKHR))
PFN_vkGetSemaphoreFdKHR = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkSemaphoreGetFdInfoKHR), ctypes.POINTER(ctypes.c_int32))
try:
    vkImportSemaphoreFdKHR = _libraries['FIXME_STUB'].vkImportSemaphoreFdKHR
    vkImportSemaphoreFdKHR.restype = VkResult
    vkImportSemaphoreFdKHR.argtypes = [VkDevice, ctypes.POINTER(struct_VkImportSemaphoreFdInfoKHR)]
except AttributeError:
    pass
try:
    vkGetSemaphoreFdKHR = _libraries['FIXME_STUB'].vkGetSemaphoreFdKHR
    vkGetSemaphoreFdKHR.restype = VkResult
    vkGetSemaphoreFdKHR.argtypes = [VkDevice, ctypes.POINTER(struct_VkSemaphoreGetFdInfoKHR), ctypes.POINTER(ctypes.c_int32)]
except AttributeError:
    pass
class struct_VkPhysicalDevicePushDescriptorPropertiesKHR(Structure):
    pass

struct_VkPhysicalDevicePushDescriptorPropertiesKHR._pack_ = 1 # source:False
struct_VkPhysicalDevicePushDescriptorPropertiesKHR._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('maxPushDescriptors', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPhysicalDevicePushDescriptorPropertiesKHR = struct_VkPhysicalDevicePushDescriptorPropertiesKHR
PFN_vkCmdPushDescriptorSetKHR = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), VkPipelineBindPoint, ctypes.POINTER(struct_VkPipelineLayout_T), ctypes.c_uint32, ctypes.c_uint32, ctypes.POINTER(struct_VkWriteDescriptorSet))
PFN_vkCmdPushDescriptorSetWithTemplateKHR = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.POINTER(struct_VkDescriptorUpdateTemplate_T), ctypes.POINTER(struct_VkPipelineLayout_T), ctypes.c_uint32, ctypes.POINTER(None))
try:
    vkCmdPushDescriptorSetKHR = _libraries['FIXME_STUB'].vkCmdPushDescriptorSetKHR
    vkCmdPushDescriptorSetKHR.restype = None
    vkCmdPushDescriptorSetKHR.argtypes = [VkCommandBuffer, VkPipelineBindPoint, VkPipelineLayout, uint32_t, uint32_t, ctypes.POINTER(struct_VkWriteDescriptorSet)]
except AttributeError:
    pass
try:
    vkCmdPushDescriptorSetWithTemplateKHR = _libraries['FIXME_STUB'].vkCmdPushDescriptorSetWithTemplateKHR
    vkCmdPushDescriptorSetWithTemplateKHR.restype = None
    vkCmdPushDescriptorSetWithTemplateKHR.argtypes = [VkCommandBuffer, VkDescriptorUpdateTemplate, VkPipelineLayout, uint32_t, ctypes.POINTER(None)]
except AttributeError:
    pass
VkPhysicalDeviceShaderFloat16Int8FeaturesKHR = struct_VkPhysicalDeviceShaderFloat16Int8Features
VkPhysicalDeviceFloat16Int8FeaturesKHR = struct_VkPhysicalDeviceShaderFloat16Int8Features
VkPhysicalDevice16BitStorageFeaturesKHR = struct_VkPhysicalDevice16BitStorageFeatures
class struct_VkRectLayerKHR(Structure):
    pass

struct_VkRectLayerKHR._pack_ = 1 # source:False
struct_VkRectLayerKHR._fields_ = [
    ('offset', VkOffset2D),
    ('extent', VkExtent2D),
    ('layer', ctypes.c_uint32),
]

VkRectLayerKHR = struct_VkRectLayerKHR
class struct_VkPresentRegionKHR(Structure):
    pass

struct_VkPresentRegionKHR._pack_ = 1 # source:False
struct_VkPresentRegionKHR._fields_ = [
    ('rectangleCount', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pRectangles', ctypes.POINTER(struct_VkRectLayerKHR)),
]

VkPresentRegionKHR = struct_VkPresentRegionKHR
class struct_VkPresentRegionsKHR(Structure):
    pass

struct_VkPresentRegionsKHR._pack_ = 1 # source:False
struct_VkPresentRegionsKHR._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('swapchainCount', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('pRegions', ctypes.POINTER(struct_VkPresentRegionKHR)),
]

VkPresentRegionsKHR = struct_VkPresentRegionsKHR
VkDescriptorUpdateTemplateKHR = ctypes.POINTER(struct_VkDescriptorUpdateTemplate_T)
VkDescriptorUpdateTemplateTypeKHR = VkDescriptorUpdateTemplateType
VkDescriptorUpdateTemplateTypeKHR__enumvalues = VkDescriptorUpdateTemplateType__enumvalues
VkDescriptorUpdateTemplateCreateFlagsKHR = ctypes.c_uint32
VkDescriptorUpdateTemplateEntryKHR = struct_VkDescriptorUpdateTemplateEntry
VkDescriptorUpdateTemplateCreateInfoKHR = struct_VkDescriptorUpdateTemplateCreateInfo
PFN_vkCreateDescriptorUpdateTemplateKHR = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkDescriptorUpdateTemplateCreateInfo), ctypes.POINTER(struct_VkAllocationCallbacks), ctypes.POINTER(ctypes.POINTER(struct_VkDescriptorUpdateTemplate_T)))
PFN_vkDestroyDescriptorUpdateTemplateKHR = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkDescriptorUpdateTemplate_T), ctypes.POINTER(struct_VkAllocationCallbacks))
PFN_vkUpdateDescriptorSetWithTemplateKHR = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkDescriptorSet_T), ctypes.POINTER(struct_VkDescriptorUpdateTemplate_T), ctypes.POINTER(None))
try:
    vkCreateDescriptorUpdateTemplateKHR = _libraries['FIXME_STUB'].vkCreateDescriptorUpdateTemplateKHR
    vkCreateDescriptorUpdateTemplateKHR.restype = VkResult
    vkCreateDescriptorUpdateTemplateKHR.argtypes = [VkDevice, ctypes.POINTER(struct_VkDescriptorUpdateTemplateCreateInfo), ctypes.POINTER(struct_VkAllocationCallbacks), ctypes.POINTER(ctypes.POINTER(struct_VkDescriptorUpdateTemplate_T))]
except AttributeError:
    pass
try:
    vkDestroyDescriptorUpdateTemplateKHR = _libraries['FIXME_STUB'].vkDestroyDescriptorUpdateTemplateKHR
    vkDestroyDescriptorUpdateTemplateKHR.restype = None
    vkDestroyDescriptorUpdateTemplateKHR.argtypes = [VkDevice, VkDescriptorUpdateTemplate, ctypes.POINTER(struct_VkAllocationCallbacks)]
except AttributeError:
    pass
try:
    vkUpdateDescriptorSetWithTemplateKHR = _libraries['FIXME_STUB'].vkUpdateDescriptorSetWithTemplateKHR
    vkUpdateDescriptorSetWithTemplateKHR.restype = None
    vkUpdateDescriptorSetWithTemplateKHR.argtypes = [VkDevice, VkDescriptorSet, VkDescriptorUpdateTemplate, ctypes.POINTER(None)]
except AttributeError:
    pass
VkPhysicalDeviceImagelessFramebufferFeaturesKHR = struct_VkPhysicalDeviceImagelessFramebufferFeatures
VkFramebufferAttachmentsCreateInfoKHR = struct_VkFramebufferAttachmentsCreateInfo
VkFramebufferAttachmentImageInfoKHR = struct_VkFramebufferAttachmentImageInfo
VkRenderPassAttachmentBeginInfoKHR = struct_VkRenderPassAttachmentBeginInfo
VkRenderPassCreateInfo2KHR = struct_VkRenderPassCreateInfo2
VkAttachmentDescription2KHR = struct_VkAttachmentDescription2
VkAttachmentReference2KHR = struct_VkAttachmentReference2
VkSubpassDescription2KHR = struct_VkSubpassDescription2
VkSubpassDependency2KHR = struct_VkSubpassDependency2
VkSubpassBeginInfoKHR = struct_VkSubpassBeginInfo
VkSubpassEndInfoKHR = struct_VkSubpassEndInfo
PFN_vkCreateRenderPass2KHR = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkRenderPassCreateInfo2), ctypes.POINTER(struct_VkAllocationCallbacks), ctypes.POINTER(ctypes.POINTER(struct_VkRenderPass_T)))
PFN_vkCmdBeginRenderPass2KHR = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.POINTER(struct_VkRenderPassBeginInfo), ctypes.POINTER(struct_VkSubpassBeginInfo))
PFN_vkCmdNextSubpass2KHR = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.POINTER(struct_VkSubpassBeginInfo), ctypes.POINTER(struct_VkSubpassEndInfo))
PFN_vkCmdEndRenderPass2KHR = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.POINTER(struct_VkSubpassEndInfo))
try:
    vkCreateRenderPass2KHR = _libraries['FIXME_STUB'].vkCreateRenderPass2KHR
    vkCreateRenderPass2KHR.restype = VkResult
    vkCreateRenderPass2KHR.argtypes = [VkDevice, ctypes.POINTER(struct_VkRenderPassCreateInfo2), ctypes.POINTER(struct_VkAllocationCallbacks), ctypes.POINTER(ctypes.POINTER(struct_VkRenderPass_T))]
except AttributeError:
    pass
try:
    vkCmdBeginRenderPass2KHR = _libraries['FIXME_STUB'].vkCmdBeginRenderPass2KHR
    vkCmdBeginRenderPass2KHR.restype = None
    vkCmdBeginRenderPass2KHR.argtypes = [VkCommandBuffer, ctypes.POINTER(struct_VkRenderPassBeginInfo), ctypes.POINTER(struct_VkSubpassBeginInfo)]
except AttributeError:
    pass
try:
    vkCmdNextSubpass2KHR = _libraries['FIXME_STUB'].vkCmdNextSubpass2KHR
    vkCmdNextSubpass2KHR.restype = None
    vkCmdNextSubpass2KHR.argtypes = [VkCommandBuffer, ctypes.POINTER(struct_VkSubpassBeginInfo), ctypes.POINTER(struct_VkSubpassEndInfo)]
except AttributeError:
    pass
try:
    vkCmdEndRenderPass2KHR = _libraries['FIXME_STUB'].vkCmdEndRenderPass2KHR
    vkCmdEndRenderPass2KHR.restype = None
    vkCmdEndRenderPass2KHR.argtypes = [VkCommandBuffer, ctypes.POINTER(struct_VkSubpassEndInfo)]
except AttributeError:
    pass
class struct_VkSharedPresentSurfaceCapabilitiesKHR(Structure):
    pass

struct_VkSharedPresentSurfaceCapabilitiesKHR._pack_ = 1 # source:False
struct_VkSharedPresentSurfaceCapabilitiesKHR._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('sharedPresentSupportedUsageFlags', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkSharedPresentSurfaceCapabilitiesKHR = struct_VkSharedPresentSurfaceCapabilitiesKHR
PFN_vkGetSwapchainStatusKHR = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkSwapchainKHR_T))
try:
    vkGetSwapchainStatusKHR = _libraries['FIXME_STUB'].vkGetSwapchainStatusKHR
    vkGetSwapchainStatusKHR.restype = VkResult
    vkGetSwapchainStatusKHR.argtypes = [VkDevice, VkSwapchainKHR]
except AttributeError:
    pass
VkExternalFenceHandleTypeFlagsKHR = ctypes.c_uint32
VkExternalFenceHandleTypeFlagBitsKHR = VkExternalFenceHandleTypeFlagBits
VkExternalFenceHandleTypeFlagBitsKHR__enumvalues = VkExternalFenceHandleTypeFlagBits__enumvalues
VkExternalFenceFeatureFlagsKHR = ctypes.c_uint32
VkExternalFenceFeatureFlagBitsKHR = VkExternalFenceFeatureFlagBits
VkExternalFenceFeatureFlagBitsKHR__enumvalues = VkExternalFenceFeatureFlagBits__enumvalues
VkPhysicalDeviceExternalFenceInfoKHR = struct_VkPhysicalDeviceExternalFenceInfo
VkExternalFencePropertiesKHR = struct_VkExternalFenceProperties
PFN_vkGetPhysicalDeviceExternalFencePropertiesKHR = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkPhysicalDevice_T), ctypes.POINTER(struct_VkPhysicalDeviceExternalFenceInfo), ctypes.POINTER(struct_VkExternalFenceProperties))
try:
    vkGetPhysicalDeviceExternalFencePropertiesKHR = _libraries['FIXME_STUB'].vkGetPhysicalDeviceExternalFencePropertiesKHR
    vkGetPhysicalDeviceExternalFencePropertiesKHR.restype = None
    vkGetPhysicalDeviceExternalFencePropertiesKHR.argtypes = [VkPhysicalDevice, ctypes.POINTER(struct_VkPhysicalDeviceExternalFenceInfo), ctypes.POINTER(struct_VkExternalFenceProperties)]
except AttributeError:
    pass
VkFenceImportFlagsKHR = ctypes.c_uint32
VkFenceImportFlagBitsKHR = VkFenceImportFlagBits
VkFenceImportFlagBitsKHR__enumvalues = VkFenceImportFlagBits__enumvalues
VkExportFenceCreateInfoKHR = struct_VkExportFenceCreateInfo
class struct_VkImportFenceFdInfoKHR(Structure):
    pass

struct_VkImportFenceFdInfoKHR._pack_ = 1 # source:False
struct_VkImportFenceFdInfoKHR._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('fence', ctypes.POINTER(struct_VkFence_T)),
    ('flags', ctypes.c_uint32),
    ('handleType', VkExternalFenceHandleTypeFlagBits),
    ('fd', ctypes.c_int32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkImportFenceFdInfoKHR = struct_VkImportFenceFdInfoKHR
class struct_VkFenceGetFdInfoKHR(Structure):
    pass

struct_VkFenceGetFdInfoKHR._pack_ = 1 # source:False
struct_VkFenceGetFdInfoKHR._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('fence', ctypes.POINTER(struct_VkFence_T)),
    ('handleType', VkExternalFenceHandleTypeFlagBits),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkFenceGetFdInfoKHR = struct_VkFenceGetFdInfoKHR
PFN_vkImportFenceFdKHR = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkImportFenceFdInfoKHR))
PFN_vkGetFenceFdKHR = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkFenceGetFdInfoKHR), ctypes.POINTER(ctypes.c_int32))
try:
    vkImportFenceFdKHR = _libraries['FIXME_STUB'].vkImportFenceFdKHR
    vkImportFenceFdKHR.restype = VkResult
    vkImportFenceFdKHR.argtypes = [VkDevice, ctypes.POINTER(struct_VkImportFenceFdInfoKHR)]
except AttributeError:
    pass
try:
    vkGetFenceFdKHR = _libraries['FIXME_STUB'].vkGetFenceFdKHR
    vkGetFenceFdKHR.restype = VkResult
    vkGetFenceFdKHR.argtypes = [VkDevice, ctypes.POINTER(struct_VkFenceGetFdInfoKHR), ctypes.POINTER(ctypes.c_int32)]
except AttributeError:
    pass

# values for enumeration 'VkPerformanceCounterUnitKHR'
VkPerformanceCounterUnitKHR__enumvalues = {
    0: 'VK_PERFORMANCE_COUNTER_UNIT_GENERIC_KHR',
    1: 'VK_PERFORMANCE_COUNTER_UNIT_PERCENTAGE_KHR',
    2: 'VK_PERFORMANCE_COUNTER_UNIT_NANOSECONDS_KHR',
    3: 'VK_PERFORMANCE_COUNTER_UNIT_BYTES_KHR',
    4: 'VK_PERFORMANCE_COUNTER_UNIT_BYTES_PER_SECOND_KHR',
    5: 'VK_PERFORMANCE_COUNTER_UNIT_KELVIN_KHR',
    6: 'VK_PERFORMANCE_COUNTER_UNIT_WATTS_KHR',
    7: 'VK_PERFORMANCE_COUNTER_UNIT_VOLTS_KHR',
    8: 'VK_PERFORMANCE_COUNTER_UNIT_AMPS_KHR',
    9: 'VK_PERFORMANCE_COUNTER_UNIT_HERTZ_KHR',
    10: 'VK_PERFORMANCE_COUNTER_UNIT_CYCLES_KHR',
    2147483647: 'VK_PERFORMANCE_COUNTER_UNIT_MAX_ENUM_KHR',
}
VK_PERFORMANCE_COUNTER_UNIT_GENERIC_KHR = 0
VK_PERFORMANCE_COUNTER_UNIT_PERCENTAGE_KHR = 1
VK_PERFORMANCE_COUNTER_UNIT_NANOSECONDS_KHR = 2
VK_PERFORMANCE_COUNTER_UNIT_BYTES_KHR = 3
VK_PERFORMANCE_COUNTER_UNIT_BYTES_PER_SECOND_KHR = 4
VK_PERFORMANCE_COUNTER_UNIT_KELVIN_KHR = 5
VK_PERFORMANCE_COUNTER_UNIT_WATTS_KHR = 6
VK_PERFORMANCE_COUNTER_UNIT_VOLTS_KHR = 7
VK_PERFORMANCE_COUNTER_UNIT_AMPS_KHR = 8
VK_PERFORMANCE_COUNTER_UNIT_HERTZ_KHR = 9
VK_PERFORMANCE_COUNTER_UNIT_CYCLES_KHR = 10
VK_PERFORMANCE_COUNTER_UNIT_MAX_ENUM_KHR = 2147483647
VkPerformanceCounterUnitKHR = ctypes.c_uint32 # enum

# values for enumeration 'VkPerformanceCounterScopeKHR'
VkPerformanceCounterScopeKHR__enumvalues = {
    0: 'VK_PERFORMANCE_COUNTER_SCOPE_COMMAND_BUFFER_KHR',
    1: 'VK_PERFORMANCE_COUNTER_SCOPE_RENDER_PASS_KHR',
    2: 'VK_PERFORMANCE_COUNTER_SCOPE_COMMAND_KHR',
    0: 'VK_QUERY_SCOPE_COMMAND_BUFFER_KHR',
    1: 'VK_QUERY_SCOPE_RENDER_PASS_KHR',
    2: 'VK_QUERY_SCOPE_COMMAND_KHR',
    2147483647: 'VK_PERFORMANCE_COUNTER_SCOPE_MAX_ENUM_KHR',
}
VK_PERFORMANCE_COUNTER_SCOPE_COMMAND_BUFFER_KHR = 0
VK_PERFORMANCE_COUNTER_SCOPE_RENDER_PASS_KHR = 1
VK_PERFORMANCE_COUNTER_SCOPE_COMMAND_KHR = 2
VK_QUERY_SCOPE_COMMAND_BUFFER_KHR = 0
VK_QUERY_SCOPE_RENDER_PASS_KHR = 1
VK_QUERY_SCOPE_COMMAND_KHR = 2
VK_PERFORMANCE_COUNTER_SCOPE_MAX_ENUM_KHR = 2147483647
VkPerformanceCounterScopeKHR = ctypes.c_uint32 # enum

# values for enumeration 'VkPerformanceCounterStorageKHR'
VkPerformanceCounterStorageKHR__enumvalues = {
    0: 'VK_PERFORMANCE_COUNTER_STORAGE_INT32_KHR',
    1: 'VK_PERFORMANCE_COUNTER_STORAGE_INT64_KHR',
    2: 'VK_PERFORMANCE_COUNTER_STORAGE_UINT32_KHR',
    3: 'VK_PERFORMANCE_COUNTER_STORAGE_UINT64_KHR',
    4: 'VK_PERFORMANCE_COUNTER_STORAGE_FLOAT32_KHR',
    5: 'VK_PERFORMANCE_COUNTER_STORAGE_FLOAT64_KHR',
    2147483647: 'VK_PERFORMANCE_COUNTER_STORAGE_MAX_ENUM_KHR',
}
VK_PERFORMANCE_COUNTER_STORAGE_INT32_KHR = 0
VK_PERFORMANCE_COUNTER_STORAGE_INT64_KHR = 1
VK_PERFORMANCE_COUNTER_STORAGE_UINT32_KHR = 2
VK_PERFORMANCE_COUNTER_STORAGE_UINT64_KHR = 3
VK_PERFORMANCE_COUNTER_STORAGE_FLOAT32_KHR = 4
VK_PERFORMANCE_COUNTER_STORAGE_FLOAT64_KHR = 5
VK_PERFORMANCE_COUNTER_STORAGE_MAX_ENUM_KHR = 2147483647
VkPerformanceCounterStorageKHR = ctypes.c_uint32 # enum

# values for enumeration 'VkPerformanceCounterDescriptionFlagBitsKHR'
VkPerformanceCounterDescriptionFlagBitsKHR__enumvalues = {
    1: 'VK_PERFORMANCE_COUNTER_DESCRIPTION_PERFORMANCE_IMPACTING_BIT_KHR',
    2: 'VK_PERFORMANCE_COUNTER_DESCRIPTION_CONCURRENTLY_IMPACTED_BIT_KHR',
    1: 'VK_PERFORMANCE_COUNTER_DESCRIPTION_PERFORMANCE_IMPACTING_KHR',
    2: 'VK_PERFORMANCE_COUNTER_DESCRIPTION_CONCURRENTLY_IMPACTED_KHR',
    2147483647: 'VK_PERFORMANCE_COUNTER_DESCRIPTION_FLAG_BITS_MAX_ENUM_KHR',
}
VK_PERFORMANCE_COUNTER_DESCRIPTION_PERFORMANCE_IMPACTING_BIT_KHR = 1
VK_PERFORMANCE_COUNTER_DESCRIPTION_CONCURRENTLY_IMPACTED_BIT_KHR = 2
VK_PERFORMANCE_COUNTER_DESCRIPTION_PERFORMANCE_IMPACTING_KHR = 1
VK_PERFORMANCE_COUNTER_DESCRIPTION_CONCURRENTLY_IMPACTED_KHR = 2
VK_PERFORMANCE_COUNTER_DESCRIPTION_FLAG_BITS_MAX_ENUM_KHR = 2147483647
VkPerformanceCounterDescriptionFlagBitsKHR = ctypes.c_uint32 # enum
VkPerformanceCounterDescriptionFlagsKHR = ctypes.c_uint32

# values for enumeration 'VkAcquireProfilingLockFlagBitsKHR'
VkAcquireProfilingLockFlagBitsKHR__enumvalues = {
    2147483647: 'VK_ACQUIRE_PROFILING_LOCK_FLAG_BITS_MAX_ENUM_KHR',
}
VK_ACQUIRE_PROFILING_LOCK_FLAG_BITS_MAX_ENUM_KHR = 2147483647
VkAcquireProfilingLockFlagBitsKHR = ctypes.c_uint32 # enum
VkAcquireProfilingLockFlagsKHR = ctypes.c_uint32
class struct_VkPhysicalDevicePerformanceQueryFeaturesKHR(Structure):
    pass

struct_VkPhysicalDevicePerformanceQueryFeaturesKHR._pack_ = 1 # source:False
struct_VkPhysicalDevicePerformanceQueryFeaturesKHR._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('performanceCounterQueryPools', ctypes.c_uint32),
    ('performanceCounterMultipleQueryPools', ctypes.c_uint32),
]

VkPhysicalDevicePerformanceQueryFeaturesKHR = struct_VkPhysicalDevicePerformanceQueryFeaturesKHR
class struct_VkPhysicalDevicePerformanceQueryPropertiesKHR(Structure):
    pass

struct_VkPhysicalDevicePerformanceQueryPropertiesKHR._pack_ = 1 # source:False
struct_VkPhysicalDevicePerformanceQueryPropertiesKHR._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('allowCommandBufferQueryCopies', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPhysicalDevicePerformanceQueryPropertiesKHR = struct_VkPhysicalDevicePerformanceQueryPropertiesKHR
class struct_VkPerformanceCounterKHR(Structure):
    pass

struct_VkPerformanceCounterKHR._pack_ = 1 # source:False
struct_VkPerformanceCounterKHR._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('unit', VkPerformanceCounterUnitKHR),
    ('scope', VkPerformanceCounterScopeKHR),
    ('storage', VkPerformanceCounterStorageKHR),
    ('uuid', ctypes.c_ubyte * 16),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPerformanceCounterKHR = struct_VkPerformanceCounterKHR
class struct_VkPerformanceCounterDescriptionKHR(Structure):
    pass

struct_VkPerformanceCounterDescriptionKHR._pack_ = 1 # source:False
struct_VkPerformanceCounterDescriptionKHR._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('flags', ctypes.c_uint32),
    ('name', ctypes.c_char * 256),
    ('category', ctypes.c_char * 256),
    ('description', ctypes.c_char * 256),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPerformanceCounterDescriptionKHR = struct_VkPerformanceCounterDescriptionKHR
class struct_VkQueryPoolPerformanceCreateInfoKHR(Structure):
    pass

struct_VkQueryPoolPerformanceCreateInfoKHR._pack_ = 1 # source:False
struct_VkQueryPoolPerformanceCreateInfoKHR._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('queueFamilyIndex', ctypes.c_uint32),
    ('counterIndexCount', ctypes.c_uint32),
    ('pCounterIndices', ctypes.POINTER(ctypes.c_uint32)),
]

VkQueryPoolPerformanceCreateInfoKHR = struct_VkQueryPoolPerformanceCreateInfoKHR
class union_VkPerformanceCounterResultKHR(Union):
    pass

union_VkPerformanceCounterResultKHR._pack_ = 1 # source:False
union_VkPerformanceCounterResultKHR._fields_ = [
    ('int32', ctypes.c_int32),
    ('int64', ctypes.c_int64),
    ('uint32', ctypes.c_uint32),
    ('uint64', ctypes.c_uint64),
    ('float32', ctypes.c_float),
    ('float64', ctypes.c_double),
]

VkPerformanceCounterResultKHR = union_VkPerformanceCounterResultKHR
class struct_VkAcquireProfilingLockInfoKHR(Structure):
    pass

struct_VkAcquireProfilingLockInfoKHR._pack_ = 1 # source:False
struct_VkAcquireProfilingLockInfoKHR._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('flags', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('timeout', ctypes.c_uint64),
]

VkAcquireProfilingLockInfoKHR = struct_VkAcquireProfilingLockInfoKHR
class struct_VkPerformanceQuerySubmitInfoKHR(Structure):
    pass

struct_VkPerformanceQuerySubmitInfoKHR._pack_ = 1 # source:False
struct_VkPerformanceQuerySubmitInfoKHR._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('counterPassIndex', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPerformanceQuerySubmitInfoKHR = struct_VkPerformanceQuerySubmitInfoKHR
PFN_vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkPhysicalDevice_T), ctypes.c_uint32, ctypes.POINTER(ctypes.c_uint32), ctypes.POINTER(struct_VkPerformanceCounterKHR), ctypes.POINTER(struct_VkPerformanceCounterDescriptionKHR))
PFN_vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkPhysicalDevice_T), ctypes.POINTER(struct_VkQueryPoolPerformanceCreateInfoKHR), ctypes.POINTER(ctypes.c_uint32))
PFN_vkAcquireProfilingLockKHR = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkAcquireProfilingLockInfoKHR))
PFN_vkReleaseProfilingLockKHR = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkDevice_T))
try:
    vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR = _libraries['FIXME_STUB'].vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR
    vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR.restype = VkResult
    vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR.argtypes = [VkPhysicalDevice, uint32_t, ctypes.POINTER(ctypes.c_uint32), ctypes.POINTER(struct_VkPerformanceCounterKHR), ctypes.POINTER(struct_VkPerformanceCounterDescriptionKHR)]
except AttributeError:
    pass
try:
    vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR = _libraries['FIXME_STUB'].vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR
    vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR.restype = None
    vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR.argtypes = [VkPhysicalDevice, ctypes.POINTER(struct_VkQueryPoolPerformanceCreateInfoKHR), ctypes.POINTER(ctypes.c_uint32)]
except AttributeError:
    pass
try:
    vkAcquireProfilingLockKHR = _libraries['FIXME_STUB'].vkAcquireProfilingLockKHR
    vkAcquireProfilingLockKHR.restype = VkResult
    vkAcquireProfilingLockKHR.argtypes = [VkDevice, ctypes.POINTER(struct_VkAcquireProfilingLockInfoKHR)]
except AttributeError:
    pass
try:
    vkReleaseProfilingLockKHR = _libraries['FIXME_STUB'].vkReleaseProfilingLockKHR
    vkReleaseProfilingLockKHR.restype = None
    vkReleaseProfilingLockKHR.argtypes = [VkDevice]
except AttributeError:
    pass
VkPointClippingBehaviorKHR = VkPointClippingBehavior
VkPointClippingBehaviorKHR__enumvalues = VkPointClippingBehavior__enumvalues
VkTessellationDomainOriginKHR = VkTessellationDomainOrigin
VkTessellationDomainOriginKHR__enumvalues = VkTessellationDomainOrigin__enumvalues
VkPhysicalDevicePointClippingPropertiesKHR = struct_VkPhysicalDevicePointClippingProperties
VkRenderPassInputAttachmentAspectCreateInfoKHR = struct_VkRenderPassInputAttachmentAspectCreateInfo
VkInputAttachmentAspectReferenceKHR = struct_VkInputAttachmentAspectReference
VkImageViewUsageCreateInfoKHR = struct_VkImageViewUsageCreateInfo
VkPipelineTessellationDomainOriginStateCreateInfoKHR = struct_VkPipelineTessellationDomainOriginStateCreateInfo
class struct_VkPhysicalDeviceSurfaceInfo2KHR(Structure):
    pass

struct_VkPhysicalDeviceSurfaceInfo2KHR._pack_ = 1 # source:False
struct_VkPhysicalDeviceSurfaceInfo2KHR._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('surface', ctypes.POINTER(struct_VkSurfaceKHR_T)),
]

VkPhysicalDeviceSurfaceInfo2KHR = struct_VkPhysicalDeviceSurfaceInfo2KHR
class struct_VkSurfaceCapabilities2KHR(Structure):
    pass

struct_VkSurfaceCapabilities2KHR._pack_ = 1 # source:False
struct_VkSurfaceCapabilities2KHR._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('surfaceCapabilities', VkSurfaceCapabilitiesKHR),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkSurfaceCapabilities2KHR = struct_VkSurfaceCapabilities2KHR
class struct_VkSurfaceFormat2KHR(Structure):
    pass

struct_VkSurfaceFormat2KHR._pack_ = 1 # source:False
struct_VkSurfaceFormat2KHR._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('surfaceFormat', VkSurfaceFormatKHR),
]

VkSurfaceFormat2KHR = struct_VkSurfaceFormat2KHR
PFN_vkGetPhysicalDeviceSurfaceCapabilities2KHR = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkPhysicalDevice_T), ctypes.POINTER(struct_VkPhysicalDeviceSurfaceInfo2KHR), ctypes.POINTER(struct_VkSurfaceCapabilities2KHR))
PFN_vkGetPhysicalDeviceSurfaceFormats2KHR = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkPhysicalDevice_T), ctypes.POINTER(struct_VkPhysicalDeviceSurfaceInfo2KHR), ctypes.POINTER(ctypes.c_uint32), ctypes.POINTER(struct_VkSurfaceFormat2KHR))
try:
    vkGetPhysicalDeviceSurfaceCapabilities2KHR = _libraries['libvulkan.so.1'].vkGetPhysicalDeviceSurfaceCapabilities2KHR
    vkGetPhysicalDeviceSurfaceCapabilities2KHR.restype = VkResult
    vkGetPhysicalDeviceSurfaceCapabilities2KHR.argtypes = [VkPhysicalDevice, ctypes.POINTER(struct_VkPhysicalDeviceSurfaceInfo2KHR), ctypes.POINTER(struct_VkSurfaceCapabilities2KHR)]
except AttributeError:
    pass
try:
    vkGetPhysicalDeviceSurfaceFormats2KHR = _libraries['libvulkan.so.1'].vkGetPhysicalDeviceSurfaceFormats2KHR
    vkGetPhysicalDeviceSurfaceFormats2KHR.restype = VkResult
    vkGetPhysicalDeviceSurfaceFormats2KHR.argtypes = [VkPhysicalDevice, ctypes.POINTER(struct_VkPhysicalDeviceSurfaceInfo2KHR), ctypes.POINTER(ctypes.c_uint32), ctypes.POINTER(struct_VkSurfaceFormat2KHR)]
except AttributeError:
    pass
VkPhysicalDeviceVariablePointerFeaturesKHR = struct_VkPhysicalDeviceVariablePointersFeatures
VkPhysicalDeviceVariablePointersFeaturesKHR = struct_VkPhysicalDeviceVariablePointersFeatures
class struct_VkDisplayProperties2KHR(Structure):
    pass

struct_VkDisplayProperties2KHR._pack_ = 1 # source:False
struct_VkDisplayProperties2KHR._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('displayProperties', VkDisplayPropertiesKHR),
]

VkDisplayProperties2KHR = struct_VkDisplayProperties2KHR
class struct_VkDisplayPlaneProperties2KHR(Structure):
    pass

struct_VkDisplayPlaneProperties2KHR._pack_ = 1 # source:False
struct_VkDisplayPlaneProperties2KHR._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('displayPlaneProperties', VkDisplayPlanePropertiesKHR),
]

VkDisplayPlaneProperties2KHR = struct_VkDisplayPlaneProperties2KHR
class struct_VkDisplayModeProperties2KHR(Structure):
    pass

struct_VkDisplayModeProperties2KHR._pack_ = 1 # source:False
struct_VkDisplayModeProperties2KHR._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('displayModeProperties', VkDisplayModePropertiesKHR),
]

VkDisplayModeProperties2KHR = struct_VkDisplayModeProperties2KHR
class struct_VkDisplayPlaneInfo2KHR(Structure):
    pass

struct_VkDisplayPlaneInfo2KHR._pack_ = 1 # source:False
struct_VkDisplayPlaneInfo2KHR._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('mode', ctypes.POINTER(struct_VkDisplayModeKHR_T)),
    ('planeIndex', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkDisplayPlaneInfo2KHR = struct_VkDisplayPlaneInfo2KHR
class struct_VkDisplayPlaneCapabilities2KHR(Structure):
    pass

struct_VkDisplayPlaneCapabilities2KHR._pack_ = 1 # source:False
struct_VkDisplayPlaneCapabilities2KHR._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('capabilities', VkDisplayPlaneCapabilitiesKHR),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkDisplayPlaneCapabilities2KHR = struct_VkDisplayPlaneCapabilities2KHR
PFN_vkGetPhysicalDeviceDisplayProperties2KHR = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkPhysicalDevice_T), ctypes.POINTER(ctypes.c_uint32), ctypes.POINTER(struct_VkDisplayProperties2KHR))
PFN_vkGetPhysicalDeviceDisplayPlaneProperties2KHR = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkPhysicalDevice_T), ctypes.POINTER(ctypes.c_uint32), ctypes.POINTER(struct_VkDisplayPlaneProperties2KHR))
PFN_vkGetDisplayModeProperties2KHR = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkPhysicalDevice_T), ctypes.POINTER(struct_VkDisplayKHR_T), ctypes.POINTER(ctypes.c_uint32), ctypes.POINTER(struct_VkDisplayModeProperties2KHR))
PFN_vkGetDisplayPlaneCapabilities2KHR = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkPhysicalDevice_T), ctypes.POINTER(struct_VkDisplayPlaneInfo2KHR), ctypes.POINTER(struct_VkDisplayPlaneCapabilities2KHR))
try:
    vkGetPhysicalDeviceDisplayProperties2KHR = _libraries['libvulkan.so.1'].vkGetPhysicalDeviceDisplayProperties2KHR
    vkGetPhysicalDeviceDisplayProperties2KHR.restype = VkResult
    vkGetPhysicalDeviceDisplayProperties2KHR.argtypes = [VkPhysicalDevice, ctypes.POINTER(ctypes.c_uint32), ctypes.POINTER(struct_VkDisplayProperties2KHR)]
except AttributeError:
    pass
try:
    vkGetPhysicalDeviceDisplayPlaneProperties2KHR = _libraries['libvulkan.so.1'].vkGetPhysicalDeviceDisplayPlaneProperties2KHR
    vkGetPhysicalDeviceDisplayPlaneProperties2KHR.restype = VkResult
    vkGetPhysicalDeviceDisplayPlaneProperties2KHR.argtypes = [VkPhysicalDevice, ctypes.POINTER(ctypes.c_uint32), ctypes.POINTER(struct_VkDisplayPlaneProperties2KHR)]
except AttributeError:
    pass
try:
    vkGetDisplayModeProperties2KHR = _libraries['libvulkan.so.1'].vkGetDisplayModeProperties2KHR
    vkGetDisplayModeProperties2KHR.restype = VkResult
    vkGetDisplayModeProperties2KHR.argtypes = [VkPhysicalDevice, VkDisplayKHR, ctypes.POINTER(ctypes.c_uint32), ctypes.POINTER(struct_VkDisplayModeProperties2KHR)]
except AttributeError:
    pass
try:
    vkGetDisplayPlaneCapabilities2KHR = _libraries['libvulkan.so.1'].vkGetDisplayPlaneCapabilities2KHR
    vkGetDisplayPlaneCapabilities2KHR.restype = VkResult
    vkGetDisplayPlaneCapabilities2KHR.argtypes = [VkPhysicalDevice, ctypes.POINTER(struct_VkDisplayPlaneInfo2KHR), ctypes.POINTER(struct_VkDisplayPlaneCapabilities2KHR)]
except AttributeError:
    pass
VkMemoryDedicatedRequirementsKHR = struct_VkMemoryDedicatedRequirements
VkMemoryDedicatedAllocateInfoKHR = struct_VkMemoryDedicatedAllocateInfo
VkBufferMemoryRequirementsInfo2KHR = struct_VkBufferMemoryRequirementsInfo2
VkImageMemoryRequirementsInfo2KHR = struct_VkImageMemoryRequirementsInfo2
VkImageSparseMemoryRequirementsInfo2KHR = struct_VkImageSparseMemoryRequirementsInfo2
VkMemoryRequirements2KHR = struct_VkMemoryRequirements2
VkSparseImageMemoryRequirements2KHR = struct_VkSparseImageMemoryRequirements2
PFN_vkGetImageMemoryRequirements2KHR = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkImageMemoryRequirementsInfo2), ctypes.POINTER(struct_VkMemoryRequirements2))
PFN_vkGetBufferMemoryRequirements2KHR = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkBufferMemoryRequirementsInfo2), ctypes.POINTER(struct_VkMemoryRequirements2))
PFN_vkGetImageSparseMemoryRequirements2KHR = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkImageSparseMemoryRequirementsInfo2), ctypes.POINTER(ctypes.c_uint32), ctypes.POINTER(struct_VkSparseImageMemoryRequirements2))
try:
    vkGetImageMemoryRequirements2KHR = _libraries['FIXME_STUB'].vkGetImageMemoryRequirements2KHR
    vkGetImageMemoryRequirements2KHR.restype = None
    vkGetImageMemoryRequirements2KHR.argtypes = [VkDevice, ctypes.POINTER(struct_VkImageMemoryRequirementsInfo2), ctypes.POINTER(struct_VkMemoryRequirements2)]
except AttributeError:
    pass
try:
    vkGetBufferMemoryRequirements2KHR = _libraries['FIXME_STUB'].vkGetBufferMemoryRequirements2KHR
    vkGetBufferMemoryRequirements2KHR.restype = None
    vkGetBufferMemoryRequirements2KHR.argtypes = [VkDevice, ctypes.POINTER(struct_VkBufferMemoryRequirementsInfo2), ctypes.POINTER(struct_VkMemoryRequirements2)]
except AttributeError:
    pass
try:
    vkGetImageSparseMemoryRequirements2KHR = _libraries['FIXME_STUB'].vkGetImageSparseMemoryRequirements2KHR
    vkGetImageSparseMemoryRequirements2KHR.restype = None
    vkGetImageSparseMemoryRequirements2KHR.argtypes = [VkDevice, ctypes.POINTER(struct_VkImageSparseMemoryRequirementsInfo2), ctypes.POINTER(ctypes.c_uint32), ctypes.POINTER(struct_VkSparseImageMemoryRequirements2)]
except AttributeError:
    pass
VkImageFormatListCreateInfoKHR = struct_VkImageFormatListCreateInfo
VkSamplerYcbcrConversionKHR = ctypes.POINTER(struct_VkSamplerYcbcrConversion_T)
VkSamplerYcbcrModelConversionKHR = VkSamplerYcbcrModelConversion
VkSamplerYcbcrModelConversionKHR__enumvalues = VkSamplerYcbcrModelConversion__enumvalues
VkSamplerYcbcrRangeKHR = VkSamplerYcbcrRange
VkSamplerYcbcrRangeKHR__enumvalues = VkSamplerYcbcrRange__enumvalues
VkChromaLocationKHR = VkChromaLocation
VkChromaLocationKHR__enumvalues = VkChromaLocation__enumvalues
VkSamplerYcbcrConversionCreateInfoKHR = struct_VkSamplerYcbcrConversionCreateInfo
VkSamplerYcbcrConversionInfoKHR = struct_VkSamplerYcbcrConversionInfo
VkBindImagePlaneMemoryInfoKHR = struct_VkBindImagePlaneMemoryInfo
VkImagePlaneMemoryRequirementsInfoKHR = struct_VkImagePlaneMemoryRequirementsInfo
VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR = struct_VkPhysicalDeviceSamplerYcbcrConversionFeatures
VkSamplerYcbcrConversionImageFormatPropertiesKHR = struct_VkSamplerYcbcrConversionImageFormatProperties
PFN_vkCreateSamplerYcbcrConversionKHR = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkSamplerYcbcrConversionCreateInfo), ctypes.POINTER(struct_VkAllocationCallbacks), ctypes.POINTER(ctypes.POINTER(struct_VkSamplerYcbcrConversion_T)))
PFN_vkDestroySamplerYcbcrConversionKHR = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkSamplerYcbcrConversion_T), ctypes.POINTER(struct_VkAllocationCallbacks))
try:
    vkCreateSamplerYcbcrConversionKHR = _libraries['FIXME_STUB'].vkCreateSamplerYcbcrConversionKHR
    vkCreateSamplerYcbcrConversionKHR.restype = VkResult
    vkCreateSamplerYcbcrConversionKHR.argtypes = [VkDevice, ctypes.POINTER(struct_VkSamplerYcbcrConversionCreateInfo), ctypes.POINTER(struct_VkAllocationCallbacks), ctypes.POINTER(ctypes.POINTER(struct_VkSamplerYcbcrConversion_T))]
except AttributeError:
    pass
try:
    vkDestroySamplerYcbcrConversionKHR = _libraries['FIXME_STUB'].vkDestroySamplerYcbcrConversionKHR
    vkDestroySamplerYcbcrConversionKHR.restype = None
    vkDestroySamplerYcbcrConversionKHR.argtypes = [VkDevice, VkSamplerYcbcrConversion, ctypes.POINTER(struct_VkAllocationCallbacks)]
except AttributeError:
    pass
VkBindBufferMemoryInfoKHR = struct_VkBindBufferMemoryInfo
VkBindImageMemoryInfoKHR = struct_VkBindImageMemoryInfo
PFN_vkBindBufferMemory2KHR = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkDevice_T), ctypes.c_uint32, ctypes.POINTER(struct_VkBindBufferMemoryInfo))
PFN_vkBindImageMemory2KHR = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkDevice_T), ctypes.c_uint32, ctypes.POINTER(struct_VkBindImageMemoryInfo))
try:
    vkBindBufferMemory2KHR = _libraries['FIXME_STUB'].vkBindBufferMemory2KHR
    vkBindBufferMemory2KHR.restype = VkResult
    vkBindBufferMemory2KHR.argtypes = [VkDevice, uint32_t, ctypes.POINTER(struct_VkBindBufferMemoryInfo)]
except AttributeError:
    pass
try:
    vkBindImageMemory2KHR = _libraries['FIXME_STUB'].vkBindImageMemory2KHR
    vkBindImageMemory2KHR.restype = VkResult
    vkBindImageMemory2KHR.argtypes = [VkDevice, uint32_t, ctypes.POINTER(struct_VkBindImageMemoryInfo)]
except AttributeError:
    pass
VkPhysicalDeviceMaintenance3PropertiesKHR = struct_VkPhysicalDeviceMaintenance3Properties
VkDescriptorSetLayoutSupportKHR = struct_VkDescriptorSetLayoutSupport
PFN_vkGetDescriptorSetLayoutSupportKHR = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkDescriptorSetLayoutCreateInfo), ctypes.POINTER(struct_VkDescriptorSetLayoutSupport))
try:
    vkGetDescriptorSetLayoutSupportKHR = _libraries['FIXME_STUB'].vkGetDescriptorSetLayoutSupportKHR
    vkGetDescriptorSetLayoutSupportKHR.restype = None
    vkGetDescriptorSetLayoutSupportKHR.argtypes = [VkDevice, ctypes.POINTER(struct_VkDescriptorSetLayoutCreateInfo), ctypes.POINTER(struct_VkDescriptorSetLayoutSupport)]
except AttributeError:
    pass
PFN_vkCmdDrawIndirectCountKHR = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.POINTER(struct_VkBuffer_T), ctypes.c_uint64, ctypes.POINTER(struct_VkBuffer_T), ctypes.c_uint64, ctypes.c_uint32, ctypes.c_uint32)
PFN_vkCmdDrawIndexedIndirectCountKHR = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.POINTER(struct_VkBuffer_T), ctypes.c_uint64, ctypes.POINTER(struct_VkBuffer_T), ctypes.c_uint64, ctypes.c_uint32, ctypes.c_uint32)
try:
    vkCmdDrawIndirectCountKHR = _libraries['FIXME_STUB'].vkCmdDrawIndirectCountKHR
    vkCmdDrawIndirectCountKHR.restype = None
    vkCmdDrawIndirectCountKHR.argtypes = [VkCommandBuffer, VkBuffer, VkDeviceSize, VkBuffer, VkDeviceSize, uint32_t, uint32_t]
except AttributeError:
    pass
try:
    vkCmdDrawIndexedIndirectCountKHR = _libraries['FIXME_STUB'].vkCmdDrawIndexedIndirectCountKHR
    vkCmdDrawIndexedIndirectCountKHR.restype = None
    vkCmdDrawIndexedIndirectCountKHR.argtypes = [VkCommandBuffer, VkBuffer, VkDeviceSize, VkBuffer, VkDeviceSize, uint32_t, uint32_t]
except AttributeError:
    pass
VkPhysicalDeviceShaderSubgroupExtendedTypesFeaturesKHR = struct_VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures
VkPhysicalDevice8BitStorageFeaturesKHR = struct_VkPhysicalDevice8BitStorageFeatures
VkPhysicalDeviceShaderAtomicInt64FeaturesKHR = struct_VkPhysicalDeviceShaderAtomicInt64Features
class struct_VkPhysicalDeviceShaderClockFeaturesKHR(Structure):
    pass

struct_VkPhysicalDeviceShaderClockFeaturesKHR._pack_ = 1 # source:False
struct_VkPhysicalDeviceShaderClockFeaturesKHR._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('shaderSubgroupClock', ctypes.c_uint32),
    ('shaderDeviceClock', ctypes.c_uint32),
]

VkPhysicalDeviceShaderClockFeaturesKHR = struct_VkPhysicalDeviceShaderClockFeaturesKHR
class struct_VkVideoDecodeH265ProfileInfoKHR(Structure):
    pass

struct_VkVideoDecodeH265ProfileInfoKHR._pack_ = 1 # source:False
struct_VkVideoDecodeH265ProfileInfoKHR._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('stdProfileIdc', StdVideoH265ProfileIdc),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkVideoDecodeH265ProfileInfoKHR = struct_VkVideoDecodeH265ProfileInfoKHR
class struct_VkVideoDecodeH265CapabilitiesKHR(Structure):
    pass

struct_VkVideoDecodeH265CapabilitiesKHR._pack_ = 1 # source:False
struct_VkVideoDecodeH265CapabilitiesKHR._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('maxLevelIdc', StdVideoH265LevelIdc),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkVideoDecodeH265CapabilitiesKHR = struct_VkVideoDecodeH265CapabilitiesKHR
class struct_VkVideoDecodeH265SessionParametersAddInfoKHR(Structure):
    pass

struct_VkVideoDecodeH265SessionParametersAddInfoKHR._pack_ = 1 # source:False
struct_VkVideoDecodeH265SessionParametersAddInfoKHR._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('stdVPSCount', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('pStdVPSs', ctypes.POINTER(struct_StdVideoH265VideoParameterSet)),
    ('stdSPSCount', ctypes.c_uint32),
    ('PADDING_2', ctypes.c_ubyte * 4),
    ('pStdSPSs', ctypes.POINTER(struct_StdVideoH265SequenceParameterSet)),
    ('stdPPSCount', ctypes.c_uint32),
    ('PADDING_3', ctypes.c_ubyte * 4),
    ('pStdPPSs', ctypes.POINTER(struct_StdVideoH265PictureParameterSet)),
]

VkVideoDecodeH265SessionParametersAddInfoKHR = struct_VkVideoDecodeH265SessionParametersAddInfoKHR
class struct_VkVideoDecodeH265SessionParametersCreateInfoKHR(Structure):
    pass

struct_VkVideoDecodeH265SessionParametersCreateInfoKHR._pack_ = 1 # source:False
struct_VkVideoDecodeH265SessionParametersCreateInfoKHR._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('maxStdVPSCount', ctypes.c_uint32),
    ('maxStdSPSCount', ctypes.c_uint32),
    ('maxStdPPSCount', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('pParametersAddInfo', ctypes.POINTER(struct_VkVideoDecodeH265SessionParametersAddInfoKHR)),
]

VkVideoDecodeH265SessionParametersCreateInfoKHR = struct_VkVideoDecodeH265SessionParametersCreateInfoKHR
class struct_VkVideoDecodeH265PictureInfoKHR(Structure):
    pass

class struct_StdVideoDecodeH265PictureInfo(Structure):
    pass

struct_VkVideoDecodeH265PictureInfoKHR._pack_ = 1 # source:False
struct_VkVideoDecodeH265PictureInfoKHR._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('pStdPictureInfo', ctypes.POINTER(struct_StdVideoDecodeH265PictureInfo)),
    ('sliceSegmentCount', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('pSliceSegmentOffsets', ctypes.POINTER(ctypes.c_uint32)),
]

class struct_StdVideoDecodeH265PictureInfoFlags(Structure):
    pass

struct_StdVideoDecodeH265PictureInfoFlags._pack_ = 1 # source:False
struct_StdVideoDecodeH265PictureInfoFlags._fields_ = [
    ('IrapPicFlag', ctypes.c_uint32, 1),
    ('IdrPicFlag', ctypes.c_uint32, 1),
    ('IsReference', ctypes.c_uint32, 1),
    ('short_term_ref_pic_set_sps_flag', ctypes.c_uint32, 1),
    ('PADDING_0', ctypes.c_uint32, 28),
]

struct_StdVideoDecodeH265PictureInfo._pack_ = 1 # source:False
struct_StdVideoDecodeH265PictureInfo._fields_ = [
    ('flags', struct_StdVideoDecodeH265PictureInfoFlags),
    ('sps_video_parameter_set_id', ctypes.c_ubyte),
    ('pps_seq_parameter_set_id', ctypes.c_ubyte),
    ('pps_pic_parameter_set_id', ctypes.c_ubyte),
    ('NumDeltaPocsOfRefRpsIdx', ctypes.c_ubyte),
    ('PicOrderCntVal', ctypes.c_int32),
    ('NumBitsForSTRefPicSetInSlice', ctypes.c_uint16),
    ('reserved', ctypes.c_uint16),
    ('RefPicSetStCurrBefore', ctypes.c_ubyte * 8),
    ('RefPicSetStCurrAfter', ctypes.c_ubyte * 8),
    ('RefPicSetLtCurr', ctypes.c_ubyte * 8),
]

VkVideoDecodeH265PictureInfoKHR = struct_VkVideoDecodeH265PictureInfoKHR
class struct_VkVideoDecodeH265DpbSlotInfoKHR(Structure):
    pass

class struct_StdVideoDecodeH265ReferenceInfo(Structure):
    pass

struct_VkVideoDecodeH265DpbSlotInfoKHR._pack_ = 1 # source:False
struct_VkVideoDecodeH265DpbSlotInfoKHR._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('pStdReferenceInfo', ctypes.POINTER(struct_StdVideoDecodeH265ReferenceInfo)),
]

class struct_StdVideoDecodeH265ReferenceInfoFlags(Structure):
    pass

struct_StdVideoDecodeH265ReferenceInfoFlags._pack_ = 1 # source:False
struct_StdVideoDecodeH265ReferenceInfoFlags._fields_ = [
    ('used_for_long_term_reference', ctypes.c_uint32, 1),
    ('unused_for_reference', ctypes.c_uint32, 1),
    ('PADDING_0', ctypes.c_uint32, 30),
]

struct_StdVideoDecodeH265ReferenceInfo._pack_ = 1 # source:False
struct_StdVideoDecodeH265ReferenceInfo._fields_ = [
    ('flags', struct_StdVideoDecodeH265ReferenceInfoFlags),
    ('PicOrderCntVal', ctypes.c_int32),
]

VkVideoDecodeH265DpbSlotInfoKHR = struct_VkVideoDecodeH265DpbSlotInfoKHR

# values for enumeration 'VkQueueGlobalPriorityKHR'
VkQueueGlobalPriorityKHR__enumvalues = {
    128: 'VK_QUEUE_GLOBAL_PRIORITY_LOW_KHR',
    256: 'VK_QUEUE_GLOBAL_PRIORITY_MEDIUM_KHR',
    512: 'VK_QUEUE_GLOBAL_PRIORITY_HIGH_KHR',
    1024: 'VK_QUEUE_GLOBAL_PRIORITY_REALTIME_KHR',
    128: 'VK_QUEUE_GLOBAL_PRIORITY_LOW_EXT',
    256: 'VK_QUEUE_GLOBAL_PRIORITY_MEDIUM_EXT',
    512: 'VK_QUEUE_GLOBAL_PRIORITY_HIGH_EXT',
    1024: 'VK_QUEUE_GLOBAL_PRIORITY_REALTIME_EXT',
    2147483647: 'VK_QUEUE_GLOBAL_PRIORITY_MAX_ENUM_KHR',
}
VK_QUEUE_GLOBAL_PRIORITY_LOW_KHR = 128
VK_QUEUE_GLOBAL_PRIORITY_MEDIUM_KHR = 256
VK_QUEUE_GLOBAL_PRIORITY_HIGH_KHR = 512
VK_QUEUE_GLOBAL_PRIORITY_REALTIME_KHR = 1024
VK_QUEUE_GLOBAL_PRIORITY_LOW_EXT = 128
VK_QUEUE_GLOBAL_PRIORITY_MEDIUM_EXT = 256
VK_QUEUE_GLOBAL_PRIORITY_HIGH_EXT = 512
VK_QUEUE_GLOBAL_PRIORITY_REALTIME_EXT = 1024
VK_QUEUE_GLOBAL_PRIORITY_MAX_ENUM_KHR = 2147483647
VkQueueGlobalPriorityKHR = ctypes.c_uint32 # enum
class struct_VkDeviceQueueGlobalPriorityCreateInfoKHR(Structure):
    pass

struct_VkDeviceQueueGlobalPriorityCreateInfoKHR._pack_ = 1 # source:False
struct_VkDeviceQueueGlobalPriorityCreateInfoKHR._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('globalPriority', VkQueueGlobalPriorityKHR),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkDeviceQueueGlobalPriorityCreateInfoKHR = struct_VkDeviceQueueGlobalPriorityCreateInfoKHR
class struct_VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR(Structure):
    pass

struct_VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR._pack_ = 1 # source:False
struct_VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('globalPriorityQuery', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR = struct_VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR
class struct_VkQueueFamilyGlobalPriorityPropertiesKHR(Structure):
    pass

struct_VkQueueFamilyGlobalPriorityPropertiesKHR._pack_ = 1 # source:False
struct_VkQueueFamilyGlobalPriorityPropertiesKHR._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('priorityCount', ctypes.c_uint32),
    ('priorities', VkQueueGlobalPriorityKHR * 16),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkQueueFamilyGlobalPriorityPropertiesKHR = struct_VkQueueFamilyGlobalPriorityPropertiesKHR
VkDriverIdKHR = VkDriverId
VkDriverIdKHR__enumvalues = VkDriverId__enumvalues
VkConformanceVersionKHR = struct_VkConformanceVersion
VkPhysicalDeviceDriverPropertiesKHR = struct_VkPhysicalDeviceDriverProperties
VkShaderFloatControlsIndependenceKHR = VkShaderFloatControlsIndependence
VkShaderFloatControlsIndependenceKHR__enumvalues = VkShaderFloatControlsIndependence__enumvalues
VkPhysicalDeviceFloatControlsPropertiesKHR = struct_VkPhysicalDeviceFloatControlsProperties
VkResolveModeFlagBitsKHR = VkResolveModeFlagBits
VkResolveModeFlagBitsKHR__enumvalues = VkResolveModeFlagBits__enumvalues
VkResolveModeFlagsKHR = ctypes.c_uint32
VkSubpassDescriptionDepthStencilResolveKHR = struct_VkSubpassDescriptionDepthStencilResolve
VkPhysicalDeviceDepthStencilResolvePropertiesKHR = struct_VkPhysicalDeviceDepthStencilResolveProperties
VkSemaphoreTypeKHR = VkSemaphoreType
VkSemaphoreTypeKHR__enumvalues = VkSemaphoreType__enumvalues
VkSemaphoreWaitFlagBitsKHR = VkSemaphoreWaitFlagBits
VkSemaphoreWaitFlagBitsKHR__enumvalues = VkSemaphoreWaitFlagBits__enumvalues
VkSemaphoreWaitFlagsKHR = ctypes.c_uint32
VkPhysicalDeviceTimelineSemaphoreFeaturesKHR = struct_VkPhysicalDeviceTimelineSemaphoreFeatures
VkPhysicalDeviceTimelineSemaphorePropertiesKHR = struct_VkPhysicalDeviceTimelineSemaphoreProperties
VkSemaphoreTypeCreateInfoKHR = struct_VkSemaphoreTypeCreateInfo
VkTimelineSemaphoreSubmitInfoKHR = struct_VkTimelineSemaphoreSubmitInfo
VkSemaphoreWaitInfoKHR = struct_VkSemaphoreWaitInfo
VkSemaphoreSignalInfoKHR = struct_VkSemaphoreSignalInfo
PFN_vkGetSemaphoreCounterValueKHR = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkSemaphore_T), ctypes.POINTER(ctypes.c_uint64))
PFN_vkWaitSemaphoresKHR = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkSemaphoreWaitInfo), ctypes.c_uint64)
PFN_vkSignalSemaphoreKHR = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkSemaphoreSignalInfo))
try:
    vkGetSemaphoreCounterValueKHR = _libraries['FIXME_STUB'].vkGetSemaphoreCounterValueKHR
    vkGetSemaphoreCounterValueKHR.restype = VkResult
    vkGetSemaphoreCounterValueKHR.argtypes = [VkDevice, VkSemaphore, ctypes.POINTER(ctypes.c_uint64)]
except AttributeError:
    pass
try:
    vkWaitSemaphoresKHR = _libraries['FIXME_STUB'].vkWaitSemaphoresKHR
    vkWaitSemaphoresKHR.restype = VkResult
    vkWaitSemaphoresKHR.argtypes = [VkDevice, ctypes.POINTER(struct_VkSemaphoreWaitInfo), uint64_t]
except AttributeError:
    pass
try:
    vkSignalSemaphoreKHR = _libraries['FIXME_STUB'].vkSignalSemaphoreKHR
    vkSignalSemaphoreKHR.restype = VkResult
    vkSignalSemaphoreKHR.argtypes = [VkDevice, ctypes.POINTER(struct_VkSemaphoreSignalInfo)]
except AttributeError:
    pass
VkPhysicalDeviceVulkanMemoryModelFeaturesKHR = struct_VkPhysicalDeviceVulkanMemoryModelFeatures
VkPhysicalDeviceShaderTerminateInvocationFeaturesKHR = struct_VkPhysicalDeviceShaderTerminateInvocationFeatures

# values for enumeration 'VkFragmentShadingRateCombinerOpKHR'
VkFragmentShadingRateCombinerOpKHR__enumvalues = {
    0: 'VK_FRAGMENT_SHADING_RATE_COMBINER_OP_KEEP_KHR',
    1: 'VK_FRAGMENT_SHADING_RATE_COMBINER_OP_REPLACE_KHR',
    2: 'VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MIN_KHR',
    3: 'VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MAX_KHR',
    4: 'VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MUL_KHR',
    2147483647: 'VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MAX_ENUM_KHR',
}
VK_FRAGMENT_SHADING_RATE_COMBINER_OP_KEEP_KHR = 0
VK_FRAGMENT_SHADING_RATE_COMBINER_OP_REPLACE_KHR = 1
VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MIN_KHR = 2
VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MAX_KHR = 3
VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MUL_KHR = 4
VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MAX_ENUM_KHR = 2147483647
VkFragmentShadingRateCombinerOpKHR = ctypes.c_uint32 # enum
class struct_VkFragmentShadingRateAttachmentInfoKHR(Structure):
    pass

struct_VkFragmentShadingRateAttachmentInfoKHR._pack_ = 1 # source:False
struct_VkFragmentShadingRateAttachmentInfoKHR._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('pFragmentShadingRateAttachment', ctypes.POINTER(struct_VkAttachmentReference2)),
    ('shadingRateAttachmentTexelSize', VkExtent2D),
]

VkFragmentShadingRateAttachmentInfoKHR = struct_VkFragmentShadingRateAttachmentInfoKHR
class struct_VkPipelineFragmentShadingRateStateCreateInfoKHR(Structure):
    pass

struct_VkPipelineFragmentShadingRateStateCreateInfoKHR._pack_ = 1 # source:False
struct_VkPipelineFragmentShadingRateStateCreateInfoKHR._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('fragmentSize', VkExtent2D),
    ('combinerOps', VkFragmentShadingRateCombinerOpKHR * 2),
]

VkPipelineFragmentShadingRateStateCreateInfoKHR = struct_VkPipelineFragmentShadingRateStateCreateInfoKHR
class struct_VkPhysicalDeviceFragmentShadingRateFeaturesKHR(Structure):
    pass

struct_VkPhysicalDeviceFragmentShadingRateFeaturesKHR._pack_ = 1 # source:False
struct_VkPhysicalDeviceFragmentShadingRateFeaturesKHR._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('pipelineFragmentShadingRate', ctypes.c_uint32),
    ('primitiveFragmentShadingRate', ctypes.c_uint32),
    ('attachmentFragmentShadingRate', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPhysicalDeviceFragmentShadingRateFeaturesKHR = struct_VkPhysicalDeviceFragmentShadingRateFeaturesKHR
class struct_VkPhysicalDeviceFragmentShadingRatePropertiesKHR(Structure):
    pass

struct_VkPhysicalDeviceFragmentShadingRatePropertiesKHR._pack_ = 1 # source:False
struct_VkPhysicalDeviceFragmentShadingRatePropertiesKHR._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('minFragmentShadingRateAttachmentTexelSize', VkExtent2D),
    ('maxFragmentShadingRateAttachmentTexelSize', VkExtent2D),
    ('maxFragmentShadingRateAttachmentTexelSizeAspectRatio', ctypes.c_uint32),
    ('primitiveFragmentShadingRateWithMultipleViewports', ctypes.c_uint32),
    ('layeredShadingRateAttachments', ctypes.c_uint32),
    ('fragmentShadingRateNonTrivialCombinerOps', ctypes.c_uint32),
    ('maxFragmentSize', VkExtent2D),
    ('maxFragmentSizeAspectRatio', ctypes.c_uint32),
    ('maxFragmentShadingRateCoverageSamples', ctypes.c_uint32),
    ('maxFragmentShadingRateRasterizationSamples', VkSampleCountFlagBits),
    ('fragmentShadingRateWithShaderDepthStencilWrites', ctypes.c_uint32),
    ('fragmentShadingRateWithSampleMask', ctypes.c_uint32),
    ('fragmentShadingRateWithShaderSampleMask', ctypes.c_uint32),
    ('fragmentShadingRateWithConservativeRasterization', ctypes.c_uint32),
    ('fragmentShadingRateWithFragmentShaderInterlock', ctypes.c_uint32),
    ('fragmentShadingRateWithCustomSampleLocations', ctypes.c_uint32),
    ('fragmentShadingRateStrictMultiplyCombiner', ctypes.c_uint32),
]

VkPhysicalDeviceFragmentShadingRatePropertiesKHR = struct_VkPhysicalDeviceFragmentShadingRatePropertiesKHR
class struct_VkPhysicalDeviceFragmentShadingRateKHR(Structure):
    pass

struct_VkPhysicalDeviceFragmentShadingRateKHR._pack_ = 1 # source:False
struct_VkPhysicalDeviceFragmentShadingRateKHR._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('sampleCounts', ctypes.c_uint32),
    ('fragmentSize', VkExtent2D),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPhysicalDeviceFragmentShadingRateKHR = struct_VkPhysicalDeviceFragmentShadingRateKHR
PFN_vkGetPhysicalDeviceFragmentShadingRatesKHR = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkPhysicalDevice_T), ctypes.POINTER(ctypes.c_uint32), ctypes.POINTER(struct_VkPhysicalDeviceFragmentShadingRateKHR))
PFN_vkCmdSetFragmentShadingRateKHR = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.POINTER(struct_VkExtent2D), ctypes.POINTER(VkFragmentShadingRateCombinerOpKHR))
try:
    vkGetPhysicalDeviceFragmentShadingRatesKHR = _libraries['FIXME_STUB'].vkGetPhysicalDeviceFragmentShadingRatesKHR
    vkGetPhysicalDeviceFragmentShadingRatesKHR.restype = VkResult
    vkGetPhysicalDeviceFragmentShadingRatesKHR.argtypes = [VkPhysicalDevice, ctypes.POINTER(ctypes.c_uint32), ctypes.POINTER(struct_VkPhysicalDeviceFragmentShadingRateKHR)]
except AttributeError:
    pass
try:
    vkCmdSetFragmentShadingRateKHR = _libraries['FIXME_STUB'].vkCmdSetFragmentShadingRateKHR
    vkCmdSetFragmentShadingRateKHR.restype = None
    vkCmdSetFragmentShadingRateKHR.argtypes = [VkCommandBuffer, ctypes.POINTER(struct_VkExtent2D), VkFragmentShadingRateCombinerOpKHR * 2]
except AttributeError:
    pass
class struct_VkSurfaceProtectedCapabilitiesKHR(Structure):
    pass

struct_VkSurfaceProtectedCapabilitiesKHR._pack_ = 1 # source:False
struct_VkSurfaceProtectedCapabilitiesKHR._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('supportsProtected', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkSurfaceProtectedCapabilitiesKHR = struct_VkSurfaceProtectedCapabilitiesKHR
VkPhysicalDeviceSeparateDepthStencilLayoutsFeaturesKHR = struct_VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures
VkAttachmentReferenceStencilLayoutKHR = struct_VkAttachmentReferenceStencilLayout
VkAttachmentDescriptionStencilLayoutKHR = struct_VkAttachmentDescriptionStencilLayout
class struct_VkPhysicalDevicePresentWaitFeaturesKHR(Structure):
    pass

struct_VkPhysicalDevicePresentWaitFeaturesKHR._pack_ = 1 # source:False
struct_VkPhysicalDevicePresentWaitFeaturesKHR._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('presentWait', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPhysicalDevicePresentWaitFeaturesKHR = struct_VkPhysicalDevicePresentWaitFeaturesKHR
PFN_vkWaitForPresentKHR = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkSwapchainKHR_T), ctypes.c_uint64, ctypes.c_uint64)
try:
    vkWaitForPresentKHR = _libraries['FIXME_STUB'].vkWaitForPresentKHR
    vkWaitForPresentKHR.restype = VkResult
    vkWaitForPresentKHR.argtypes = [VkDevice, VkSwapchainKHR, uint64_t, uint64_t]
except AttributeError:
    pass
VkPhysicalDeviceUniformBufferStandardLayoutFeaturesKHR = struct_VkPhysicalDeviceUniformBufferStandardLayoutFeatures
VkPhysicalDeviceBufferDeviceAddressFeaturesKHR = struct_VkPhysicalDeviceBufferDeviceAddressFeatures
VkBufferDeviceAddressInfoKHR = struct_VkBufferDeviceAddressInfo
VkBufferOpaqueCaptureAddressCreateInfoKHR = struct_VkBufferOpaqueCaptureAddressCreateInfo
VkMemoryOpaqueCaptureAddressAllocateInfoKHR = struct_VkMemoryOpaqueCaptureAddressAllocateInfo
VkDeviceMemoryOpaqueCaptureAddressInfoKHR = struct_VkDeviceMemoryOpaqueCaptureAddressInfo
PFN_vkGetBufferDeviceAddressKHR = ctypes.CFUNCTYPE(ctypes.c_uint64, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkBufferDeviceAddressInfo))
PFN_vkGetBufferOpaqueCaptureAddressKHR = ctypes.CFUNCTYPE(ctypes.c_uint64, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkBufferDeviceAddressInfo))
PFN_vkGetDeviceMemoryOpaqueCaptureAddressKHR = ctypes.CFUNCTYPE(ctypes.c_uint64, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkDeviceMemoryOpaqueCaptureAddressInfo))
try:
    vkGetBufferDeviceAddressKHR = _libraries['FIXME_STUB'].vkGetBufferDeviceAddressKHR
    vkGetBufferDeviceAddressKHR.restype = VkDeviceAddress
    vkGetBufferDeviceAddressKHR.argtypes = [VkDevice, ctypes.POINTER(struct_VkBufferDeviceAddressInfo)]
except AttributeError:
    pass
try:
    vkGetBufferOpaqueCaptureAddressKHR = _libraries['FIXME_STUB'].vkGetBufferOpaqueCaptureAddressKHR
    vkGetBufferOpaqueCaptureAddressKHR.restype = uint64_t
    vkGetBufferOpaqueCaptureAddressKHR.argtypes = [VkDevice, ctypes.POINTER(struct_VkBufferDeviceAddressInfo)]
except AttributeError:
    pass
try:
    vkGetDeviceMemoryOpaqueCaptureAddressKHR = _libraries['FIXME_STUB'].vkGetDeviceMemoryOpaqueCaptureAddressKHR
    vkGetDeviceMemoryOpaqueCaptureAddressKHR.restype = uint64_t
    vkGetDeviceMemoryOpaqueCaptureAddressKHR.argtypes = [VkDevice, ctypes.POINTER(struct_VkDeviceMemoryOpaqueCaptureAddressInfo)]
except AttributeError:
    pass
class struct_VkDeferredOperationKHR_T(Structure):
    pass

VkDeferredOperationKHR = ctypes.POINTER(struct_VkDeferredOperationKHR_T)
PFN_vkCreateDeferredOperationKHR = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkAllocationCallbacks), ctypes.POINTER(ctypes.POINTER(struct_VkDeferredOperationKHR_T)))
PFN_vkDestroyDeferredOperationKHR = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkDeferredOperationKHR_T), ctypes.POINTER(struct_VkAllocationCallbacks))
PFN_vkGetDeferredOperationMaxConcurrencyKHR = ctypes.CFUNCTYPE(ctypes.c_uint32, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkDeferredOperationKHR_T))
PFN_vkGetDeferredOperationResultKHR = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkDeferredOperationKHR_T))
PFN_vkDeferredOperationJoinKHR = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkDeferredOperationKHR_T))
try:
    vkCreateDeferredOperationKHR = _libraries['FIXME_STUB'].vkCreateDeferredOperationKHR
    vkCreateDeferredOperationKHR.restype = VkResult
    vkCreateDeferredOperationKHR.argtypes = [VkDevice, ctypes.POINTER(struct_VkAllocationCallbacks), ctypes.POINTER(ctypes.POINTER(struct_VkDeferredOperationKHR_T))]
except AttributeError:
    pass
try:
    vkDestroyDeferredOperationKHR = _libraries['FIXME_STUB'].vkDestroyDeferredOperationKHR
    vkDestroyDeferredOperationKHR.restype = None
    vkDestroyDeferredOperationKHR.argtypes = [VkDevice, VkDeferredOperationKHR, ctypes.POINTER(struct_VkAllocationCallbacks)]
except AttributeError:
    pass
try:
    vkGetDeferredOperationMaxConcurrencyKHR = _libraries['FIXME_STUB'].vkGetDeferredOperationMaxConcurrencyKHR
    vkGetDeferredOperationMaxConcurrencyKHR.restype = uint32_t
    vkGetDeferredOperationMaxConcurrencyKHR.argtypes = [VkDevice, VkDeferredOperationKHR]
except AttributeError:
    pass
try:
    vkGetDeferredOperationResultKHR = _libraries['FIXME_STUB'].vkGetDeferredOperationResultKHR
    vkGetDeferredOperationResultKHR.restype = VkResult
    vkGetDeferredOperationResultKHR.argtypes = [VkDevice, VkDeferredOperationKHR]
except AttributeError:
    pass
try:
    vkDeferredOperationJoinKHR = _libraries['FIXME_STUB'].vkDeferredOperationJoinKHR
    vkDeferredOperationJoinKHR.restype = VkResult
    vkDeferredOperationJoinKHR.argtypes = [VkDevice, VkDeferredOperationKHR]
except AttributeError:
    pass

# values for enumeration 'VkPipelineExecutableStatisticFormatKHR'
VkPipelineExecutableStatisticFormatKHR__enumvalues = {
    0: 'VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_BOOL32_KHR',
    1: 'VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_INT64_KHR',
    2: 'VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_UINT64_KHR',
    3: 'VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_FLOAT64_KHR',
    2147483647: 'VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_MAX_ENUM_KHR',
}
VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_BOOL32_KHR = 0
VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_INT64_KHR = 1
VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_UINT64_KHR = 2
VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_FLOAT64_KHR = 3
VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_MAX_ENUM_KHR = 2147483647
VkPipelineExecutableStatisticFormatKHR = ctypes.c_uint32 # enum
class struct_VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR(Structure):
    pass

struct_VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR._pack_ = 1 # source:False
struct_VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('pipelineExecutableInfo', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR = struct_VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR
class struct_VkPipelineInfoKHR(Structure):
    pass

struct_VkPipelineInfoKHR._pack_ = 1 # source:False
struct_VkPipelineInfoKHR._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('pipeline', ctypes.POINTER(struct_VkPipeline_T)),
]

VkPipelineInfoKHR = struct_VkPipelineInfoKHR
class struct_VkPipelineExecutablePropertiesKHR(Structure):
    pass

struct_VkPipelineExecutablePropertiesKHR._pack_ = 1 # source:False
struct_VkPipelineExecutablePropertiesKHR._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('stages', ctypes.c_uint32),
    ('name', ctypes.c_char * 256),
    ('description', ctypes.c_char * 256),
    ('subgroupSize', ctypes.c_uint32),
]

VkPipelineExecutablePropertiesKHR = struct_VkPipelineExecutablePropertiesKHR
class struct_VkPipelineExecutableInfoKHR(Structure):
    pass

struct_VkPipelineExecutableInfoKHR._pack_ = 1 # source:False
struct_VkPipelineExecutableInfoKHR._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('pipeline', ctypes.POINTER(struct_VkPipeline_T)),
    ('executableIndex', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPipelineExecutableInfoKHR = struct_VkPipelineExecutableInfoKHR
class union_VkPipelineExecutableStatisticValueKHR(Union):
    pass

union_VkPipelineExecutableStatisticValueKHR._pack_ = 1 # source:False
union_VkPipelineExecutableStatisticValueKHR._fields_ = [
    ('b32', ctypes.c_uint32),
    ('i64', ctypes.c_int64),
    ('u64', ctypes.c_uint64),
    ('f64', ctypes.c_double),
]

VkPipelineExecutableStatisticValueKHR = union_VkPipelineExecutableStatisticValueKHR
class struct_VkPipelineExecutableStatisticKHR(Structure):
    pass

struct_VkPipelineExecutableStatisticKHR._pack_ = 1 # source:False
struct_VkPipelineExecutableStatisticKHR._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('name', ctypes.c_char * 256),
    ('description', ctypes.c_char * 256),
    ('format', VkPipelineExecutableStatisticFormatKHR),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('value', VkPipelineExecutableStatisticValueKHR),
]

VkPipelineExecutableStatisticKHR = struct_VkPipelineExecutableStatisticKHR
class struct_VkPipelineExecutableInternalRepresentationKHR(Structure):
    pass

struct_VkPipelineExecutableInternalRepresentationKHR._pack_ = 1 # source:False
struct_VkPipelineExecutableInternalRepresentationKHR._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('name', ctypes.c_char * 256),
    ('description', ctypes.c_char * 256),
    ('isText', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('dataSize', ctypes.c_uint64),
    ('pData', ctypes.POINTER(None)),
]

VkPipelineExecutableInternalRepresentationKHR = struct_VkPipelineExecutableInternalRepresentationKHR
PFN_vkGetPipelineExecutablePropertiesKHR = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkPipelineInfoKHR), ctypes.POINTER(ctypes.c_uint32), ctypes.POINTER(struct_VkPipelineExecutablePropertiesKHR))
PFN_vkGetPipelineExecutableStatisticsKHR = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkPipelineExecutableInfoKHR), ctypes.POINTER(ctypes.c_uint32), ctypes.POINTER(struct_VkPipelineExecutableStatisticKHR))
PFN_vkGetPipelineExecutableInternalRepresentationsKHR = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkPipelineExecutableInfoKHR), ctypes.POINTER(ctypes.c_uint32), ctypes.POINTER(struct_VkPipelineExecutableInternalRepresentationKHR))
try:
    vkGetPipelineExecutablePropertiesKHR = _libraries['FIXME_STUB'].vkGetPipelineExecutablePropertiesKHR
    vkGetPipelineExecutablePropertiesKHR.restype = VkResult
    vkGetPipelineExecutablePropertiesKHR.argtypes = [VkDevice, ctypes.POINTER(struct_VkPipelineInfoKHR), ctypes.POINTER(ctypes.c_uint32), ctypes.POINTER(struct_VkPipelineExecutablePropertiesKHR)]
except AttributeError:
    pass
try:
    vkGetPipelineExecutableStatisticsKHR = _libraries['FIXME_STUB'].vkGetPipelineExecutableStatisticsKHR
    vkGetPipelineExecutableStatisticsKHR.restype = VkResult
    vkGetPipelineExecutableStatisticsKHR.argtypes = [VkDevice, ctypes.POINTER(struct_VkPipelineExecutableInfoKHR), ctypes.POINTER(ctypes.c_uint32), ctypes.POINTER(struct_VkPipelineExecutableStatisticKHR)]
except AttributeError:
    pass
try:
    vkGetPipelineExecutableInternalRepresentationsKHR = _libraries['FIXME_STUB'].vkGetPipelineExecutableInternalRepresentationsKHR
    vkGetPipelineExecutableInternalRepresentationsKHR.restype = VkResult
    vkGetPipelineExecutableInternalRepresentationsKHR.argtypes = [VkDevice, ctypes.POINTER(struct_VkPipelineExecutableInfoKHR), ctypes.POINTER(ctypes.c_uint32), ctypes.POINTER(struct_VkPipelineExecutableInternalRepresentationKHR)]
except AttributeError:
    pass
VkMemoryUnmapFlagsKHR = ctypes.c_uint32
class struct_VkMemoryMapInfoKHR(Structure):
    pass

struct_VkMemoryMapInfoKHR._pack_ = 1 # source:False
struct_VkMemoryMapInfoKHR._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('flags', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('memory', ctypes.POINTER(struct_VkDeviceMemory_T)),
    ('offset', ctypes.c_uint64),
    ('size', ctypes.c_uint64),
]

VkMemoryMapInfoKHR = struct_VkMemoryMapInfoKHR
class struct_VkMemoryUnmapInfoKHR(Structure):
    pass

struct_VkMemoryUnmapInfoKHR._pack_ = 1 # source:False
struct_VkMemoryUnmapInfoKHR._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('flags', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('memory', ctypes.POINTER(struct_VkDeviceMemory_T)),
]

VkMemoryUnmapInfoKHR = struct_VkMemoryUnmapInfoKHR
PFN_vkMapMemory2KHR = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkMemoryMapInfoKHR), ctypes.POINTER(ctypes.POINTER(None)))
PFN_vkUnmapMemory2KHR = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkMemoryUnmapInfoKHR))
try:
    vkMapMemory2KHR = _libraries['FIXME_STUB'].vkMapMemory2KHR
    vkMapMemory2KHR.restype = VkResult
    vkMapMemory2KHR.argtypes = [VkDevice, ctypes.POINTER(struct_VkMemoryMapInfoKHR), ctypes.POINTER(ctypes.POINTER(None))]
except AttributeError:
    pass
try:
    vkUnmapMemory2KHR = _libraries['FIXME_STUB'].vkUnmapMemory2KHR
    vkUnmapMemory2KHR.restype = VkResult
    vkUnmapMemory2KHR.argtypes = [VkDevice, ctypes.POINTER(struct_VkMemoryUnmapInfoKHR)]
except AttributeError:
    pass
VkPhysicalDeviceShaderIntegerDotProductFeaturesKHR = struct_VkPhysicalDeviceShaderIntegerDotProductFeatures
VkPhysicalDeviceShaderIntegerDotProductPropertiesKHR = struct_VkPhysicalDeviceShaderIntegerDotProductProperties
class struct_VkPipelineLibraryCreateInfoKHR(Structure):
    pass

struct_VkPipelineLibraryCreateInfoKHR._pack_ = 1 # source:False
struct_VkPipelineLibraryCreateInfoKHR._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('libraryCount', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('pLibraries', ctypes.POINTER(ctypes.POINTER(struct_VkPipeline_T))),
]

VkPipelineLibraryCreateInfoKHR = struct_VkPipelineLibraryCreateInfoKHR
class struct_VkPresentIdKHR(Structure):
    pass

struct_VkPresentIdKHR._pack_ = 1 # source:False
struct_VkPresentIdKHR._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('swapchainCount', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('pPresentIds', ctypes.POINTER(ctypes.c_uint64)),
]

VkPresentIdKHR = struct_VkPresentIdKHR
class struct_VkPhysicalDevicePresentIdFeaturesKHR(Structure):
    pass

struct_VkPhysicalDevicePresentIdFeaturesKHR._pack_ = 1 # source:False
struct_VkPhysicalDevicePresentIdFeaturesKHR._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('presentId', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPhysicalDevicePresentIdFeaturesKHR = struct_VkPhysicalDevicePresentIdFeaturesKHR

# values for enumeration 'VkVideoEncodeTuningModeKHR'
VkVideoEncodeTuningModeKHR__enumvalues = {
    0: 'VK_VIDEO_ENCODE_TUNING_MODE_DEFAULT_KHR',
    1: 'VK_VIDEO_ENCODE_TUNING_MODE_HIGH_QUALITY_KHR',
    2: 'VK_VIDEO_ENCODE_TUNING_MODE_LOW_LATENCY_KHR',
    3: 'VK_VIDEO_ENCODE_TUNING_MODE_ULTRA_LOW_LATENCY_KHR',
    4: 'VK_VIDEO_ENCODE_TUNING_MODE_LOSSLESS_KHR',
    2147483647: 'VK_VIDEO_ENCODE_TUNING_MODE_MAX_ENUM_KHR',
}
VK_VIDEO_ENCODE_TUNING_MODE_DEFAULT_KHR = 0
VK_VIDEO_ENCODE_TUNING_MODE_HIGH_QUALITY_KHR = 1
VK_VIDEO_ENCODE_TUNING_MODE_LOW_LATENCY_KHR = 2
VK_VIDEO_ENCODE_TUNING_MODE_ULTRA_LOW_LATENCY_KHR = 3
VK_VIDEO_ENCODE_TUNING_MODE_LOSSLESS_KHR = 4
VK_VIDEO_ENCODE_TUNING_MODE_MAX_ENUM_KHR = 2147483647
VkVideoEncodeTuningModeKHR = ctypes.c_uint32 # enum
VkVideoEncodeFlagsKHR = ctypes.c_uint32

# values for enumeration 'VkVideoEncodeCapabilityFlagBitsKHR'
VkVideoEncodeCapabilityFlagBitsKHR__enumvalues = {
    1: 'VK_VIDEO_ENCODE_CAPABILITY_PRECEDING_EXTERNALLY_ENCODED_BYTES_BIT_KHR',
    2: 'VK_VIDEO_ENCODE_CAPABILITY_INSUFFICIENT_BITSTREAM_BUFFER_RANGE_DETECTION_BIT_KHR',
    2147483647: 'VK_VIDEO_ENCODE_CAPABILITY_FLAG_BITS_MAX_ENUM_KHR',
}
VK_VIDEO_ENCODE_CAPABILITY_PRECEDING_EXTERNALLY_ENCODED_BYTES_BIT_KHR = 1
VK_VIDEO_ENCODE_CAPABILITY_INSUFFICIENT_BITSTREAM_BUFFER_RANGE_DETECTION_BIT_KHR = 2
VK_VIDEO_ENCODE_CAPABILITY_FLAG_BITS_MAX_ENUM_KHR = 2147483647
VkVideoEncodeCapabilityFlagBitsKHR = ctypes.c_uint32 # enum
VkVideoEncodeCapabilityFlagsKHR = ctypes.c_uint32

# values for enumeration 'VkVideoEncodeRateControlModeFlagBitsKHR'
VkVideoEncodeRateControlModeFlagBitsKHR__enumvalues = {
    0: 'VK_VIDEO_ENCODE_RATE_CONTROL_MODE_DEFAULT_KHR',
    1: 'VK_VIDEO_ENCODE_RATE_CONTROL_MODE_DISABLED_BIT_KHR',
    2: 'VK_VIDEO_ENCODE_RATE_CONTROL_MODE_CBR_BIT_KHR',
    4: 'VK_VIDEO_ENCODE_RATE_CONTROL_MODE_VBR_BIT_KHR',
    2147483647: 'VK_VIDEO_ENCODE_RATE_CONTROL_MODE_FLAG_BITS_MAX_ENUM_KHR',
}
VK_VIDEO_ENCODE_RATE_CONTROL_MODE_DEFAULT_KHR = 0
VK_VIDEO_ENCODE_RATE_CONTROL_MODE_DISABLED_BIT_KHR = 1
VK_VIDEO_ENCODE_RATE_CONTROL_MODE_CBR_BIT_KHR = 2
VK_VIDEO_ENCODE_RATE_CONTROL_MODE_VBR_BIT_KHR = 4
VK_VIDEO_ENCODE_RATE_CONTROL_MODE_FLAG_BITS_MAX_ENUM_KHR = 2147483647
VkVideoEncodeRateControlModeFlagBitsKHR = ctypes.c_uint32 # enum
VkVideoEncodeRateControlModeFlagsKHR = ctypes.c_uint32

# values for enumeration 'VkVideoEncodeFeedbackFlagBitsKHR'
VkVideoEncodeFeedbackFlagBitsKHR__enumvalues = {
    1: 'VK_VIDEO_ENCODE_FEEDBACK_BITSTREAM_BUFFER_OFFSET_BIT_KHR',
    2: 'VK_VIDEO_ENCODE_FEEDBACK_BITSTREAM_BYTES_WRITTEN_BIT_KHR',
    4: 'VK_VIDEO_ENCODE_FEEDBACK_BITSTREAM_HAS_OVERRIDES_BIT_KHR',
    2147483647: 'VK_VIDEO_ENCODE_FEEDBACK_FLAG_BITS_MAX_ENUM_KHR',
}
VK_VIDEO_ENCODE_FEEDBACK_BITSTREAM_BUFFER_OFFSET_BIT_KHR = 1
VK_VIDEO_ENCODE_FEEDBACK_BITSTREAM_BYTES_WRITTEN_BIT_KHR = 2
VK_VIDEO_ENCODE_FEEDBACK_BITSTREAM_HAS_OVERRIDES_BIT_KHR = 4
VK_VIDEO_ENCODE_FEEDBACK_FLAG_BITS_MAX_ENUM_KHR = 2147483647
VkVideoEncodeFeedbackFlagBitsKHR = ctypes.c_uint32 # enum
VkVideoEncodeFeedbackFlagsKHR = ctypes.c_uint32

# values for enumeration 'VkVideoEncodeUsageFlagBitsKHR'
VkVideoEncodeUsageFlagBitsKHR__enumvalues = {
    0: 'VK_VIDEO_ENCODE_USAGE_DEFAULT_KHR',
    1: 'VK_VIDEO_ENCODE_USAGE_TRANSCODING_BIT_KHR',
    2: 'VK_VIDEO_ENCODE_USAGE_STREAMING_BIT_KHR',
    4: 'VK_VIDEO_ENCODE_USAGE_RECORDING_BIT_KHR',
    8: 'VK_VIDEO_ENCODE_USAGE_CONFERENCING_BIT_KHR',
    2147483647: 'VK_VIDEO_ENCODE_USAGE_FLAG_BITS_MAX_ENUM_KHR',
}
VK_VIDEO_ENCODE_USAGE_DEFAULT_KHR = 0
VK_VIDEO_ENCODE_USAGE_TRANSCODING_BIT_KHR = 1
VK_VIDEO_ENCODE_USAGE_STREAMING_BIT_KHR = 2
VK_VIDEO_ENCODE_USAGE_RECORDING_BIT_KHR = 4
VK_VIDEO_ENCODE_USAGE_CONFERENCING_BIT_KHR = 8
VK_VIDEO_ENCODE_USAGE_FLAG_BITS_MAX_ENUM_KHR = 2147483647
VkVideoEncodeUsageFlagBitsKHR = ctypes.c_uint32 # enum
VkVideoEncodeUsageFlagsKHR = ctypes.c_uint32

# values for enumeration 'VkVideoEncodeContentFlagBitsKHR'
VkVideoEncodeContentFlagBitsKHR__enumvalues = {
    0: 'VK_VIDEO_ENCODE_CONTENT_DEFAULT_KHR',
    1: 'VK_VIDEO_ENCODE_CONTENT_CAMERA_BIT_KHR',
    2: 'VK_VIDEO_ENCODE_CONTENT_DESKTOP_BIT_KHR',
    4: 'VK_VIDEO_ENCODE_CONTENT_RENDERED_BIT_KHR',
    2147483647: 'VK_VIDEO_ENCODE_CONTENT_FLAG_BITS_MAX_ENUM_KHR',
}
VK_VIDEO_ENCODE_CONTENT_DEFAULT_KHR = 0
VK_VIDEO_ENCODE_CONTENT_CAMERA_BIT_KHR = 1
VK_VIDEO_ENCODE_CONTENT_DESKTOP_BIT_KHR = 2
VK_VIDEO_ENCODE_CONTENT_RENDERED_BIT_KHR = 4
VK_VIDEO_ENCODE_CONTENT_FLAG_BITS_MAX_ENUM_KHR = 2147483647
VkVideoEncodeContentFlagBitsKHR = ctypes.c_uint32 # enum
VkVideoEncodeContentFlagsKHR = ctypes.c_uint32
VkVideoEncodeRateControlFlagsKHR = ctypes.c_uint32
class struct_VkVideoEncodeInfoKHR(Structure):
    pass

struct_VkVideoEncodeInfoKHR._pack_ = 1 # source:False
struct_VkVideoEncodeInfoKHR._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('flags', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('dstBuffer', ctypes.POINTER(struct_VkBuffer_T)),
    ('dstBufferOffset', ctypes.c_uint64),
    ('dstBufferRange', ctypes.c_uint64),
    ('srcPictureResource', VkVideoPictureResourceInfoKHR),
    ('pSetupReferenceSlot', ctypes.POINTER(struct_VkVideoReferenceSlotInfoKHR)),
    ('referenceSlotCount', ctypes.c_uint32),
    ('PADDING_2', ctypes.c_ubyte * 4),
    ('pReferenceSlots', ctypes.POINTER(struct_VkVideoReferenceSlotInfoKHR)),
    ('precedingExternallyEncodedBytes', ctypes.c_uint32),
    ('PADDING_3', ctypes.c_ubyte * 4),
]

VkVideoEncodeInfoKHR = struct_VkVideoEncodeInfoKHR
class struct_VkVideoEncodeCapabilitiesKHR(Structure):
    pass

struct_VkVideoEncodeCapabilitiesKHR._pack_ = 1 # source:False
struct_VkVideoEncodeCapabilitiesKHR._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('flags', ctypes.c_uint32),
    ('rateControlModes', ctypes.c_uint32),
    ('maxRateControlLayers', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('maxBitrate', ctypes.c_uint64),
    ('maxQualityLevels', ctypes.c_uint32),
    ('encodeInputPictureGranularity', VkExtent2D),
    ('supportedEncodeFeedbackFlags', ctypes.c_uint32),
]

VkVideoEncodeCapabilitiesKHR = struct_VkVideoEncodeCapabilitiesKHR
class struct_VkQueryPoolVideoEncodeFeedbackCreateInfoKHR(Structure):
    pass

struct_VkQueryPoolVideoEncodeFeedbackCreateInfoKHR._pack_ = 1 # source:False
struct_VkQueryPoolVideoEncodeFeedbackCreateInfoKHR._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('encodeFeedbackFlags', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkQueryPoolVideoEncodeFeedbackCreateInfoKHR = struct_VkQueryPoolVideoEncodeFeedbackCreateInfoKHR
class struct_VkVideoEncodeUsageInfoKHR(Structure):
    pass

struct_VkVideoEncodeUsageInfoKHR._pack_ = 1 # source:False
struct_VkVideoEncodeUsageInfoKHR._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('videoUsageHints', ctypes.c_uint32),
    ('videoContentHints', ctypes.c_uint32),
    ('tuningMode', VkVideoEncodeTuningModeKHR),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkVideoEncodeUsageInfoKHR = struct_VkVideoEncodeUsageInfoKHR
class struct_VkVideoEncodeRateControlLayerInfoKHR(Structure):
    pass

struct_VkVideoEncodeRateControlLayerInfoKHR._pack_ = 1 # source:False
struct_VkVideoEncodeRateControlLayerInfoKHR._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('averageBitrate', ctypes.c_uint64),
    ('maxBitrate', ctypes.c_uint64),
    ('frameRateNumerator', ctypes.c_uint32),
    ('frameRateDenominator', ctypes.c_uint32),
]

VkVideoEncodeRateControlLayerInfoKHR = struct_VkVideoEncodeRateControlLayerInfoKHR
class struct_VkVideoEncodeRateControlInfoKHR(Structure):
    pass

struct_VkVideoEncodeRateControlInfoKHR._pack_ = 1 # source:False
struct_VkVideoEncodeRateControlInfoKHR._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('flags', ctypes.c_uint32),
    ('rateControlMode', VkVideoEncodeRateControlModeFlagBitsKHR),
    ('layerCount', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('pLayers', ctypes.POINTER(struct_VkVideoEncodeRateControlLayerInfoKHR)),
    ('virtualBufferSizeInMs', ctypes.c_uint32),
    ('initialVirtualBufferSizeInMs', ctypes.c_uint32),
]

VkVideoEncodeRateControlInfoKHR = struct_VkVideoEncodeRateControlInfoKHR
class struct_VkPhysicalDeviceVideoEncodeQualityLevelInfoKHR(Structure):
    pass

struct_VkPhysicalDeviceVideoEncodeQualityLevelInfoKHR._pack_ = 1 # source:False
struct_VkPhysicalDeviceVideoEncodeQualityLevelInfoKHR._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('pVideoProfile', ctypes.POINTER(struct_VkVideoProfileInfoKHR)),
    ('qualityLevel', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPhysicalDeviceVideoEncodeQualityLevelInfoKHR = struct_VkPhysicalDeviceVideoEncodeQualityLevelInfoKHR
class struct_VkVideoEncodeQualityLevelPropertiesKHR(Structure):
    pass

struct_VkVideoEncodeQualityLevelPropertiesKHR._pack_ = 1 # source:False
struct_VkVideoEncodeQualityLevelPropertiesKHR._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('preferredRateControlMode', VkVideoEncodeRateControlModeFlagBitsKHR),
    ('preferredRateControlLayerCount', ctypes.c_uint32),
]

VkVideoEncodeQualityLevelPropertiesKHR = struct_VkVideoEncodeQualityLevelPropertiesKHR
class struct_VkVideoEncodeQualityLevelInfoKHR(Structure):
    pass

struct_VkVideoEncodeQualityLevelInfoKHR._pack_ = 1 # source:False
struct_VkVideoEncodeQualityLevelInfoKHR._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('qualityLevel', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkVideoEncodeQualityLevelInfoKHR = struct_VkVideoEncodeQualityLevelInfoKHR
class struct_VkVideoEncodeSessionParametersGetInfoKHR(Structure):
    pass

struct_VkVideoEncodeSessionParametersGetInfoKHR._pack_ = 1 # source:False
struct_VkVideoEncodeSessionParametersGetInfoKHR._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('videoSessionParameters', ctypes.POINTER(struct_VkVideoSessionParametersKHR_T)),
]

VkVideoEncodeSessionParametersGetInfoKHR = struct_VkVideoEncodeSessionParametersGetInfoKHR
class struct_VkVideoEncodeSessionParametersFeedbackInfoKHR(Structure):
    pass

struct_VkVideoEncodeSessionParametersFeedbackInfoKHR._pack_ = 1 # source:False
struct_VkVideoEncodeSessionParametersFeedbackInfoKHR._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('hasOverrides', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkVideoEncodeSessionParametersFeedbackInfoKHR = struct_VkVideoEncodeSessionParametersFeedbackInfoKHR
PFN_vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkPhysicalDevice_T), ctypes.POINTER(struct_VkPhysicalDeviceVideoEncodeQualityLevelInfoKHR), ctypes.POINTER(struct_VkVideoEncodeQualityLevelPropertiesKHR))
PFN_vkGetEncodedVideoSessionParametersKHR = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkVideoEncodeSessionParametersGetInfoKHR), ctypes.POINTER(struct_VkVideoEncodeSessionParametersFeedbackInfoKHR), ctypes.POINTER(ctypes.c_uint64), ctypes.POINTER(None))
PFN_vkCmdEncodeVideoKHR = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.POINTER(struct_VkVideoEncodeInfoKHR))
try:
    vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR = _libraries['FIXME_STUB'].vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR
    vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR.restype = VkResult
    vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR.argtypes = [VkPhysicalDevice, ctypes.POINTER(struct_VkPhysicalDeviceVideoEncodeQualityLevelInfoKHR), ctypes.POINTER(struct_VkVideoEncodeQualityLevelPropertiesKHR)]
except AttributeError:
    pass
try:
    vkGetEncodedVideoSessionParametersKHR = _libraries['FIXME_STUB'].vkGetEncodedVideoSessionParametersKHR
    vkGetEncodedVideoSessionParametersKHR.restype = VkResult
    vkGetEncodedVideoSessionParametersKHR.argtypes = [VkDevice, ctypes.POINTER(struct_VkVideoEncodeSessionParametersGetInfoKHR), ctypes.POINTER(struct_VkVideoEncodeSessionParametersFeedbackInfoKHR), ctypes.POINTER(ctypes.c_uint64), ctypes.POINTER(None)]
except AttributeError:
    pass
try:
    vkCmdEncodeVideoKHR = _libraries['FIXME_STUB'].vkCmdEncodeVideoKHR
    vkCmdEncodeVideoKHR.restype = None
    vkCmdEncodeVideoKHR.argtypes = [VkCommandBuffer, ctypes.POINTER(struct_VkVideoEncodeInfoKHR)]
except AttributeError:
    pass
VkPipelineStageFlags2KHR = ctypes.c_uint64
VkPipelineStageFlagBits2KHR = ctypes.c_uint64
VkAccessFlags2KHR = ctypes.c_uint64
VkAccessFlagBits2KHR = ctypes.c_uint64
VkSubmitFlagBitsKHR = VkSubmitFlagBits
VkSubmitFlagBitsKHR__enumvalues = VkSubmitFlagBits__enumvalues
VkSubmitFlagsKHR = ctypes.c_uint32
VkMemoryBarrier2KHR = struct_VkMemoryBarrier2
VkBufferMemoryBarrier2KHR = struct_VkBufferMemoryBarrier2
VkImageMemoryBarrier2KHR = struct_VkImageMemoryBarrier2
VkDependencyInfoKHR = struct_VkDependencyInfo
VkSubmitInfo2KHR = struct_VkSubmitInfo2
VkSemaphoreSubmitInfoKHR = struct_VkSemaphoreSubmitInfo
VkCommandBufferSubmitInfoKHR = struct_VkCommandBufferSubmitInfo
VkPhysicalDeviceSynchronization2FeaturesKHR = struct_VkPhysicalDeviceSynchronization2Features
class struct_VkQueueFamilyCheckpointProperties2NV(Structure):
    pass

struct_VkQueueFamilyCheckpointProperties2NV._pack_ = 1 # source:False
struct_VkQueueFamilyCheckpointProperties2NV._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('checkpointExecutionStageMask', ctypes.c_uint64),
]

VkQueueFamilyCheckpointProperties2NV = struct_VkQueueFamilyCheckpointProperties2NV
class struct_VkCheckpointData2NV(Structure):
    pass

struct_VkCheckpointData2NV._pack_ = 1 # source:False
struct_VkCheckpointData2NV._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('stage', ctypes.c_uint64),
    ('pCheckpointMarker', ctypes.POINTER(None)),
]

VkCheckpointData2NV = struct_VkCheckpointData2NV
PFN_vkCmdSetEvent2KHR = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.POINTER(struct_VkEvent_T), ctypes.POINTER(struct_VkDependencyInfo))
PFN_vkCmdResetEvent2KHR = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.POINTER(struct_VkEvent_T), ctypes.c_uint64)
PFN_vkCmdWaitEvents2KHR = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.c_uint32, ctypes.POINTER(ctypes.POINTER(struct_VkEvent_T)), ctypes.POINTER(struct_VkDependencyInfo))
PFN_vkCmdPipelineBarrier2KHR = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.POINTER(struct_VkDependencyInfo))
PFN_vkCmdWriteTimestamp2KHR = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.c_uint64, ctypes.POINTER(struct_VkQueryPool_T), ctypes.c_uint32)
PFN_vkQueueSubmit2KHR = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkQueue_T), ctypes.c_uint32, ctypes.POINTER(struct_VkSubmitInfo2), ctypes.POINTER(struct_VkFence_T))
PFN_vkCmdWriteBufferMarker2AMD = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.c_uint64, ctypes.POINTER(struct_VkBuffer_T), ctypes.c_uint64, ctypes.c_uint32)
PFN_vkGetQueueCheckpointData2NV = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkQueue_T), ctypes.POINTER(ctypes.c_uint32), ctypes.POINTER(struct_VkCheckpointData2NV))
try:
    vkCmdSetEvent2KHR = _libraries['FIXME_STUB'].vkCmdSetEvent2KHR
    vkCmdSetEvent2KHR.restype = None
    vkCmdSetEvent2KHR.argtypes = [VkCommandBuffer, VkEvent, ctypes.POINTER(struct_VkDependencyInfo)]
except AttributeError:
    pass
try:
    vkCmdResetEvent2KHR = _libraries['FIXME_STUB'].vkCmdResetEvent2KHR
    vkCmdResetEvent2KHR.restype = None
    vkCmdResetEvent2KHR.argtypes = [VkCommandBuffer, VkEvent, VkPipelineStageFlags2]
except AttributeError:
    pass
try:
    vkCmdWaitEvents2KHR = _libraries['FIXME_STUB'].vkCmdWaitEvents2KHR
    vkCmdWaitEvents2KHR.restype = None
    vkCmdWaitEvents2KHR.argtypes = [VkCommandBuffer, uint32_t, ctypes.POINTER(ctypes.POINTER(struct_VkEvent_T)), ctypes.POINTER(struct_VkDependencyInfo)]
except AttributeError:
    pass
try:
    vkCmdPipelineBarrier2KHR = _libraries['FIXME_STUB'].vkCmdPipelineBarrier2KHR
    vkCmdPipelineBarrier2KHR.restype = None
    vkCmdPipelineBarrier2KHR.argtypes = [VkCommandBuffer, ctypes.POINTER(struct_VkDependencyInfo)]
except AttributeError:
    pass
try:
    vkCmdWriteTimestamp2KHR = _libraries['FIXME_STUB'].vkCmdWriteTimestamp2KHR
    vkCmdWriteTimestamp2KHR.restype = None
    vkCmdWriteTimestamp2KHR.argtypes = [VkCommandBuffer, VkPipelineStageFlags2, VkQueryPool, uint32_t]
except AttributeError:
    pass
try:
    vkQueueSubmit2KHR = _libraries['FIXME_STUB'].vkQueueSubmit2KHR
    vkQueueSubmit2KHR.restype = VkResult
    vkQueueSubmit2KHR.argtypes = [VkQueue, uint32_t, ctypes.POINTER(struct_VkSubmitInfo2), VkFence]
except AttributeError:
    pass
try:
    vkCmdWriteBufferMarker2AMD = _libraries['FIXME_STUB'].vkCmdWriteBufferMarker2AMD
    vkCmdWriteBufferMarker2AMD.restype = None
    vkCmdWriteBufferMarker2AMD.argtypes = [VkCommandBuffer, VkPipelineStageFlags2, VkBuffer, VkDeviceSize, uint32_t]
except AttributeError:
    pass
try:
    vkGetQueueCheckpointData2NV = _libraries['FIXME_STUB'].vkGetQueueCheckpointData2NV
    vkGetQueueCheckpointData2NV.restype = None
    vkGetQueueCheckpointData2NV.argtypes = [VkQueue, ctypes.POINTER(ctypes.c_uint32), ctypes.POINTER(struct_VkCheckpointData2NV)]
except AttributeError:
    pass
class struct_VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR(Structure):
    pass

struct_VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR._pack_ = 1 # source:False
struct_VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('fragmentShaderBarycentric', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR = struct_VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR
class struct_VkPhysicalDeviceFragmentShaderBarycentricPropertiesKHR(Structure):
    pass

struct_VkPhysicalDeviceFragmentShaderBarycentricPropertiesKHR._pack_ = 1 # source:False
struct_VkPhysicalDeviceFragmentShaderBarycentricPropertiesKHR._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('triStripVertexOrderIndependentOfProvokingVertex', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPhysicalDeviceFragmentShaderBarycentricPropertiesKHR = struct_VkPhysicalDeviceFragmentShaderBarycentricPropertiesKHR
class struct_VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR(Structure):
    pass

struct_VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR._pack_ = 1 # source:False
struct_VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('shaderSubgroupUniformControlFlow', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR = struct_VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR
VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeaturesKHR = struct_VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures
class struct_VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR(Structure):
    pass

struct_VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR._pack_ = 1 # source:False
struct_VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('workgroupMemoryExplicitLayout', ctypes.c_uint32),
    ('workgroupMemoryExplicitLayoutScalarBlockLayout', ctypes.c_uint32),
    ('workgroupMemoryExplicitLayout8BitAccess', ctypes.c_uint32),
    ('workgroupMemoryExplicitLayout16BitAccess', ctypes.c_uint32),
]

VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR = struct_VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR
VkCopyBufferInfo2KHR = struct_VkCopyBufferInfo2
VkCopyImageInfo2KHR = struct_VkCopyImageInfo2
VkCopyBufferToImageInfo2KHR = struct_VkCopyBufferToImageInfo2
VkCopyImageToBufferInfo2KHR = struct_VkCopyImageToBufferInfo2
VkBlitImageInfo2KHR = struct_VkBlitImageInfo2
VkResolveImageInfo2KHR = struct_VkResolveImageInfo2
VkBufferCopy2KHR = struct_VkBufferCopy2
VkImageCopy2KHR = struct_VkImageCopy2
VkImageBlit2KHR = struct_VkImageBlit2
VkBufferImageCopy2KHR = struct_VkBufferImageCopy2
VkImageResolve2KHR = struct_VkImageResolve2
PFN_vkCmdCopyBuffer2KHR = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.POINTER(struct_VkCopyBufferInfo2))
PFN_vkCmdCopyImage2KHR = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.POINTER(struct_VkCopyImageInfo2))
PFN_vkCmdCopyBufferToImage2KHR = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.POINTER(struct_VkCopyBufferToImageInfo2))
PFN_vkCmdCopyImageToBuffer2KHR = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.POINTER(struct_VkCopyImageToBufferInfo2))
PFN_vkCmdBlitImage2KHR = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.POINTER(struct_VkBlitImageInfo2))
PFN_vkCmdResolveImage2KHR = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.POINTER(struct_VkResolveImageInfo2))
try:
    vkCmdCopyBuffer2KHR = _libraries['FIXME_STUB'].vkCmdCopyBuffer2KHR
    vkCmdCopyBuffer2KHR.restype = None
    vkCmdCopyBuffer2KHR.argtypes = [VkCommandBuffer, ctypes.POINTER(struct_VkCopyBufferInfo2)]
except AttributeError:
    pass
try:
    vkCmdCopyImage2KHR = _libraries['FIXME_STUB'].vkCmdCopyImage2KHR
    vkCmdCopyImage2KHR.restype = None
    vkCmdCopyImage2KHR.argtypes = [VkCommandBuffer, ctypes.POINTER(struct_VkCopyImageInfo2)]
except AttributeError:
    pass
try:
    vkCmdCopyBufferToImage2KHR = _libraries['FIXME_STUB'].vkCmdCopyBufferToImage2KHR
    vkCmdCopyBufferToImage2KHR.restype = None
    vkCmdCopyBufferToImage2KHR.argtypes = [VkCommandBuffer, ctypes.POINTER(struct_VkCopyBufferToImageInfo2)]
except AttributeError:
    pass
try:
    vkCmdCopyImageToBuffer2KHR = _libraries['FIXME_STUB'].vkCmdCopyImageToBuffer2KHR
    vkCmdCopyImageToBuffer2KHR.restype = None
    vkCmdCopyImageToBuffer2KHR.argtypes = [VkCommandBuffer, ctypes.POINTER(struct_VkCopyImageToBufferInfo2)]
except AttributeError:
    pass
try:
    vkCmdBlitImage2KHR = _libraries['FIXME_STUB'].vkCmdBlitImage2KHR
    vkCmdBlitImage2KHR.restype = None
    vkCmdBlitImage2KHR.argtypes = [VkCommandBuffer, ctypes.POINTER(struct_VkBlitImageInfo2)]
except AttributeError:
    pass
try:
    vkCmdResolveImage2KHR = _libraries['FIXME_STUB'].vkCmdResolveImage2KHR
    vkCmdResolveImage2KHR.restype = None
    vkCmdResolveImage2KHR.argtypes = [VkCommandBuffer, ctypes.POINTER(struct_VkResolveImageInfo2)]
except AttributeError:
    pass
VkFormatFeatureFlags2KHR = ctypes.c_uint64
VkFormatFeatureFlagBits2KHR = ctypes.c_uint64
VkFormatProperties3KHR = struct_VkFormatProperties3
class struct_VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR(Structure):
    pass

struct_VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR._pack_ = 1 # source:False
struct_VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('rayTracingMaintenance1', ctypes.c_uint32),
    ('rayTracingPipelineTraceRaysIndirect2', ctypes.c_uint32),
]

VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR = struct_VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR
class struct_VkTraceRaysIndirectCommand2KHR(Structure):
    pass

struct_VkTraceRaysIndirectCommand2KHR._pack_ = 1 # source:False
struct_VkTraceRaysIndirectCommand2KHR._fields_ = [
    ('raygenShaderRecordAddress', ctypes.c_uint64),
    ('raygenShaderRecordSize', ctypes.c_uint64),
    ('missShaderBindingTableAddress', ctypes.c_uint64),
    ('missShaderBindingTableSize', ctypes.c_uint64),
    ('missShaderBindingTableStride', ctypes.c_uint64),
    ('hitShaderBindingTableAddress', ctypes.c_uint64),
    ('hitShaderBindingTableSize', ctypes.c_uint64),
    ('hitShaderBindingTableStride', ctypes.c_uint64),
    ('callableShaderBindingTableAddress', ctypes.c_uint64),
    ('callableShaderBindingTableSize', ctypes.c_uint64),
    ('callableShaderBindingTableStride', ctypes.c_uint64),
    ('width', ctypes.c_uint32),
    ('height', ctypes.c_uint32),
    ('depth', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
]

VkTraceRaysIndirectCommand2KHR = struct_VkTraceRaysIndirectCommand2KHR
PFN_vkCmdTraceRaysIndirect2KHR = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.c_uint64)
try:
    vkCmdTraceRaysIndirect2KHR = _libraries['FIXME_STUB'].vkCmdTraceRaysIndirect2KHR
    vkCmdTraceRaysIndirect2KHR.restype = None
    vkCmdTraceRaysIndirect2KHR.argtypes = [VkCommandBuffer, VkDeviceAddress]
except AttributeError:
    pass
VkPhysicalDeviceMaintenance4FeaturesKHR = struct_VkPhysicalDeviceMaintenance4Features
VkPhysicalDeviceMaintenance4PropertiesKHR = struct_VkPhysicalDeviceMaintenance4Properties
VkDeviceBufferMemoryRequirementsKHR = struct_VkDeviceBufferMemoryRequirements
VkDeviceImageMemoryRequirementsKHR = struct_VkDeviceImageMemoryRequirements
PFN_vkGetDeviceBufferMemoryRequirementsKHR = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkDeviceBufferMemoryRequirements), ctypes.POINTER(struct_VkMemoryRequirements2))
PFN_vkGetDeviceImageMemoryRequirementsKHR = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkDeviceImageMemoryRequirements), ctypes.POINTER(struct_VkMemoryRequirements2))
PFN_vkGetDeviceImageSparseMemoryRequirementsKHR = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkDeviceImageMemoryRequirements), ctypes.POINTER(ctypes.c_uint32), ctypes.POINTER(struct_VkSparseImageMemoryRequirements2))
try:
    vkGetDeviceBufferMemoryRequirementsKHR = _libraries['FIXME_STUB'].vkGetDeviceBufferMemoryRequirementsKHR
    vkGetDeviceBufferMemoryRequirementsKHR.restype = None
    vkGetDeviceBufferMemoryRequirementsKHR.argtypes = [VkDevice, ctypes.POINTER(struct_VkDeviceBufferMemoryRequirements), ctypes.POINTER(struct_VkMemoryRequirements2)]
except AttributeError:
    pass
try:
    vkGetDeviceImageMemoryRequirementsKHR = _libraries['FIXME_STUB'].vkGetDeviceImageMemoryRequirementsKHR
    vkGetDeviceImageMemoryRequirementsKHR.restype = None
    vkGetDeviceImageMemoryRequirementsKHR.argtypes = [VkDevice, ctypes.POINTER(struct_VkDeviceImageMemoryRequirements), ctypes.POINTER(struct_VkMemoryRequirements2)]
except AttributeError:
    pass
try:
    vkGetDeviceImageSparseMemoryRequirementsKHR = _libraries['FIXME_STUB'].vkGetDeviceImageSparseMemoryRequirementsKHR
    vkGetDeviceImageSparseMemoryRequirementsKHR.restype = None
    vkGetDeviceImageSparseMemoryRequirementsKHR.argtypes = [VkDevice, ctypes.POINTER(struct_VkDeviceImageMemoryRequirements), ctypes.POINTER(ctypes.c_uint32), ctypes.POINTER(struct_VkSparseImageMemoryRequirements2)]
except AttributeError:
    pass
VkPipelineCreateFlags2KHR = ctypes.c_uint64
VkPipelineCreateFlagBits2KHR = ctypes.c_uint64
VK_PIPELINE_CREATE_2_DISABLE_OPTIMIZATION_BIT_KHR = 0x00000001 # Variable ctypes.c_uint64
VK_PIPELINE_CREATE_2_ALLOW_DERIVATIVES_BIT_KHR = 0x00000002 # Variable ctypes.c_uint64
VK_PIPELINE_CREATE_2_DERIVATIVE_BIT_KHR = 0x00000004 # Variable ctypes.c_uint64
VK_PIPELINE_CREATE_2_VIEW_INDEX_FROM_DEVICE_INDEX_BIT_KHR = 0x00000008 # Variable ctypes.c_uint64
VK_PIPELINE_CREATE_2_DISPATCH_BASE_BIT_KHR = 0x00000010 # Variable ctypes.c_uint64
VK_PIPELINE_CREATE_2_DEFER_COMPILE_BIT_NV = 0x00000020 # Variable ctypes.c_uint64
VK_PIPELINE_CREATE_2_CAPTURE_STATISTICS_BIT_KHR = 0x00000040 # Variable ctypes.c_uint64
VK_PIPELINE_CREATE_2_CAPTURE_INTERNAL_REPRESENTATIONS_BIT_KHR = 0x00000080 # Variable ctypes.c_uint64
VK_PIPELINE_CREATE_2_FAIL_ON_PIPELINE_COMPILE_REQUIRED_BIT_KHR = 0x00000100 # Variable ctypes.c_uint64
VK_PIPELINE_CREATE_2_EARLY_RETURN_ON_FAILURE_BIT_KHR = 0x00000200 # Variable ctypes.c_uint64
VK_PIPELINE_CREATE_2_LINK_TIME_OPTIMIZATION_BIT_EXT = 0x00000400 # Variable ctypes.c_uint64
VK_PIPELINE_CREATE_2_RETAIN_LINK_TIME_OPTIMIZATION_INFO_BIT_EXT = 0x00800000 # Variable ctypes.c_uint64
VK_PIPELINE_CREATE_2_LIBRARY_BIT_KHR = 0x00000800 # Variable ctypes.c_uint64
VK_PIPELINE_CREATE_2_RAY_TRACING_SKIP_TRIANGLES_BIT_KHR = 0x00001000 # Variable ctypes.c_uint64
VK_PIPELINE_CREATE_2_RAY_TRACING_SKIP_AABBS_BIT_KHR = 0x00002000 # Variable ctypes.c_uint64
VK_PIPELINE_CREATE_2_RAY_TRACING_NO_NULL_ANY_HIT_SHADERS_BIT_KHR = 0x00004000 # Variable ctypes.c_uint64
VK_PIPELINE_CREATE_2_RAY_TRACING_NO_NULL_CLOSEST_HIT_SHADERS_BIT_KHR = 0x00008000 # Variable ctypes.c_uint64
VK_PIPELINE_CREATE_2_RAY_TRACING_NO_NULL_MISS_SHADERS_BIT_KHR = 0x00010000 # Variable ctypes.c_uint64
VK_PIPELINE_CREATE_2_RAY_TRACING_NO_NULL_INTERSECTION_SHADERS_BIT_KHR = 0x00020000 # Variable ctypes.c_uint64
VK_PIPELINE_CREATE_2_RAY_TRACING_SHADER_GROUP_HANDLE_CAPTURE_REPLAY_BIT_KHR = 0x00080000 # Variable ctypes.c_uint64
VK_PIPELINE_CREATE_2_INDIRECT_BINDABLE_BIT_NV = 0x00040000 # Variable ctypes.c_uint64
VK_PIPELINE_CREATE_2_RAY_TRACING_ALLOW_MOTION_BIT_NV = 0x00100000 # Variable ctypes.c_uint64
VK_PIPELINE_CREATE_2_RENDERING_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR = 0x00200000 # Variable ctypes.c_uint64
VK_PIPELINE_CREATE_2_RENDERING_FRAGMENT_DENSITY_MAP_ATTACHMENT_BIT_EXT = 0x00400000 # Variable ctypes.c_uint64
VK_PIPELINE_CREATE_2_RAY_TRACING_OPACITY_MICROMAP_BIT_EXT = 0x01000000 # Variable ctypes.c_uint64
VK_PIPELINE_CREATE_2_COLOR_ATTACHMENT_FEEDBACK_LOOP_BIT_EXT = 0x02000000 # Variable ctypes.c_uint64
VK_PIPELINE_CREATE_2_DEPTH_STENCIL_ATTACHMENT_FEEDBACK_LOOP_BIT_EXT = 0x04000000 # Variable ctypes.c_uint64
VK_PIPELINE_CREATE_2_NO_PROTECTED_ACCESS_BIT_EXT = 0x08000000 # Variable ctypes.c_uint64
VK_PIPELINE_CREATE_2_PROTECTED_ACCESS_ONLY_BIT_EXT = 0x40000000 # Variable ctypes.c_uint64
VK_PIPELINE_CREATE_2_RAY_TRACING_DISPLACEMENT_MICROMAP_BIT_NV = 0x10000000 # Variable ctypes.c_uint64
VK_PIPELINE_CREATE_2_DESCRIPTOR_BUFFER_BIT_EXT = 0x20000000 # Variable ctypes.c_uint64
VkBufferUsageFlags2KHR = ctypes.c_uint64
VkBufferUsageFlagBits2KHR = ctypes.c_uint64
VK_BUFFER_USAGE_2_TRANSFER_SRC_BIT_KHR = 0x00000001 # Variable ctypes.c_uint64
VK_BUFFER_USAGE_2_TRANSFER_DST_BIT_KHR = 0x00000002 # Variable ctypes.c_uint64
VK_BUFFER_USAGE_2_UNIFORM_TEXEL_BUFFER_BIT_KHR = 0x00000004 # Variable ctypes.c_uint64
VK_BUFFER_USAGE_2_STORAGE_TEXEL_BUFFER_BIT_KHR = 0x00000008 # Variable ctypes.c_uint64
VK_BUFFER_USAGE_2_UNIFORM_BUFFER_BIT_KHR = 0x00000010 # Variable ctypes.c_uint64
VK_BUFFER_USAGE_2_STORAGE_BUFFER_BIT_KHR = 0x00000020 # Variable ctypes.c_uint64
VK_BUFFER_USAGE_2_INDEX_BUFFER_BIT_KHR = 0x00000040 # Variable ctypes.c_uint64
VK_BUFFER_USAGE_2_VERTEX_BUFFER_BIT_KHR = 0x00000080 # Variable ctypes.c_uint64
VK_BUFFER_USAGE_2_INDIRECT_BUFFER_BIT_KHR = 0x00000100 # Variable ctypes.c_uint64
VK_BUFFER_USAGE_2_EXECUTION_GRAPH_SCRATCH_BIT_AMDX = 0x02000000 # Variable ctypes.c_uint64
VK_BUFFER_USAGE_2_CONDITIONAL_RENDERING_BIT_EXT = 0x00000200 # Variable ctypes.c_uint64
VK_BUFFER_USAGE_2_SHADER_BINDING_TABLE_BIT_KHR = 0x00000400 # Variable ctypes.c_uint64
VK_BUFFER_USAGE_2_RAY_TRACING_BIT_NV = 0x00000400 # Variable ctypes.c_uint64
VK_BUFFER_USAGE_2_TRANSFORM_FEEDBACK_BUFFER_BIT_EXT = 0x00000800 # Variable ctypes.c_uint64
VK_BUFFER_USAGE_2_TRANSFORM_FEEDBACK_COUNTER_BUFFER_BIT_EXT = 0x00001000 # Variable ctypes.c_uint64
VK_BUFFER_USAGE_2_VIDEO_DECODE_SRC_BIT_KHR = 0x00002000 # Variable ctypes.c_uint64
VK_BUFFER_USAGE_2_VIDEO_DECODE_DST_BIT_KHR = 0x00004000 # Variable ctypes.c_uint64
VK_BUFFER_USAGE_2_SHADER_DEVICE_ADDRESS_BIT_KHR = 0x00020000 # Variable ctypes.c_uint64
VK_BUFFER_USAGE_2_ACCELERATION_STRUCTURE_BUILD_INPUT_READ_ONLY_BIT_KHR = 0x00080000 # Variable ctypes.c_uint64
VK_BUFFER_USAGE_2_ACCELERATION_STRUCTURE_STORAGE_BIT_KHR = 0x00100000 # Variable ctypes.c_uint64
VK_BUFFER_USAGE_2_SAMPLER_DESCRIPTOR_BUFFER_BIT_EXT = 0x00200000 # Variable ctypes.c_uint64
VK_BUFFER_USAGE_2_RESOURCE_DESCRIPTOR_BUFFER_BIT_EXT = 0x00400000 # Variable ctypes.c_uint64
VK_BUFFER_USAGE_2_PUSH_DESCRIPTORS_DESCRIPTOR_BUFFER_BIT_EXT = 0x04000000 # Variable ctypes.c_uint64
VK_BUFFER_USAGE_2_MICROMAP_BUILD_INPUT_READ_ONLY_BIT_EXT = 0x00800000 # Variable ctypes.c_uint64
VK_BUFFER_USAGE_2_MICROMAP_STORAGE_BIT_EXT = 0x01000000 # Variable ctypes.c_uint64
class struct_VkPhysicalDeviceMaintenance5FeaturesKHR(Structure):
    pass

struct_VkPhysicalDeviceMaintenance5FeaturesKHR._pack_ = 1 # source:False
struct_VkPhysicalDeviceMaintenance5FeaturesKHR._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('maintenance5', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPhysicalDeviceMaintenance5FeaturesKHR = struct_VkPhysicalDeviceMaintenance5FeaturesKHR
class struct_VkPhysicalDeviceMaintenance5PropertiesKHR(Structure):
    pass

struct_VkPhysicalDeviceMaintenance5PropertiesKHR._pack_ = 1 # source:False
struct_VkPhysicalDeviceMaintenance5PropertiesKHR._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('earlyFragmentMultisampleCoverageAfterSampleCounting', ctypes.c_uint32),
    ('earlyFragmentSampleMaskTestBeforeSampleCounting', ctypes.c_uint32),
    ('depthStencilSwizzleOneSupport', ctypes.c_uint32),
    ('polygonModePointSize', ctypes.c_uint32),
    ('nonStrictSinglePixelWideLinesUseParallelogram', ctypes.c_uint32),
    ('nonStrictWideLinesUseParallelogram', ctypes.c_uint32),
]

VkPhysicalDeviceMaintenance5PropertiesKHR = struct_VkPhysicalDeviceMaintenance5PropertiesKHR
class struct_VkRenderingAreaInfoKHR(Structure):
    pass

struct_VkRenderingAreaInfoKHR._pack_ = 1 # source:False
struct_VkRenderingAreaInfoKHR._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('viewMask', ctypes.c_uint32),
    ('colorAttachmentCount', ctypes.c_uint32),
    ('pColorAttachmentFormats', ctypes.POINTER(VkFormat)),
    ('depthAttachmentFormat', VkFormat),
    ('stencilAttachmentFormat', VkFormat),
]

VkRenderingAreaInfoKHR = struct_VkRenderingAreaInfoKHR
class struct_VkImageSubresource2KHR(Structure):
    pass

struct_VkImageSubresource2KHR._pack_ = 1 # source:False
struct_VkImageSubresource2KHR._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('imageSubresource', VkImageSubresource),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkImageSubresource2KHR = struct_VkImageSubresource2KHR
class struct_VkDeviceImageSubresourceInfoKHR(Structure):
    pass

struct_VkDeviceImageSubresourceInfoKHR._pack_ = 1 # source:False
struct_VkDeviceImageSubresourceInfoKHR._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('pCreateInfo', ctypes.POINTER(struct_VkImageCreateInfo)),
    ('pSubresource', ctypes.POINTER(struct_VkImageSubresource2KHR)),
]

VkDeviceImageSubresourceInfoKHR = struct_VkDeviceImageSubresourceInfoKHR
class struct_VkSubresourceLayout2KHR(Structure):
    pass

struct_VkSubresourceLayout2KHR._pack_ = 1 # source:False
struct_VkSubresourceLayout2KHR._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('subresourceLayout', VkSubresourceLayout),
]

VkSubresourceLayout2KHR = struct_VkSubresourceLayout2KHR
class struct_VkPipelineCreateFlags2CreateInfoKHR(Structure):
    pass

struct_VkPipelineCreateFlags2CreateInfoKHR._pack_ = 1 # source:False
struct_VkPipelineCreateFlags2CreateInfoKHR._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('flags', ctypes.c_uint64),
]

VkPipelineCreateFlags2CreateInfoKHR = struct_VkPipelineCreateFlags2CreateInfoKHR
class struct_VkBufferUsageFlags2CreateInfoKHR(Structure):
    pass

struct_VkBufferUsageFlags2CreateInfoKHR._pack_ = 1 # source:False
struct_VkBufferUsageFlags2CreateInfoKHR._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('usage', ctypes.c_uint64),
]

VkBufferUsageFlags2CreateInfoKHR = struct_VkBufferUsageFlags2CreateInfoKHR
PFN_vkCmdBindIndexBuffer2KHR = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.POINTER(struct_VkBuffer_T), ctypes.c_uint64, ctypes.c_uint64, VkIndexType)
PFN_vkGetRenderingAreaGranularityKHR = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkRenderingAreaInfoKHR), ctypes.POINTER(struct_VkExtent2D))
PFN_vkGetDeviceImageSubresourceLayoutKHR = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkDeviceImageSubresourceInfoKHR), ctypes.POINTER(struct_VkSubresourceLayout2KHR))
PFN_vkGetImageSubresourceLayout2KHR = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkImage_T), ctypes.POINTER(struct_VkImageSubresource2KHR), ctypes.POINTER(struct_VkSubresourceLayout2KHR))
try:
    vkCmdBindIndexBuffer2KHR = _libraries['FIXME_STUB'].vkCmdBindIndexBuffer2KHR
    vkCmdBindIndexBuffer2KHR.restype = None
    vkCmdBindIndexBuffer2KHR.argtypes = [VkCommandBuffer, VkBuffer, VkDeviceSize, VkDeviceSize, VkIndexType]
except AttributeError:
    pass
try:
    vkGetRenderingAreaGranularityKHR = _libraries['FIXME_STUB'].vkGetRenderingAreaGranularityKHR
    vkGetRenderingAreaGranularityKHR.restype = None
    vkGetRenderingAreaGranularityKHR.argtypes = [VkDevice, ctypes.POINTER(struct_VkRenderingAreaInfoKHR), ctypes.POINTER(struct_VkExtent2D)]
except AttributeError:
    pass
try:
    vkGetDeviceImageSubresourceLayoutKHR = _libraries['FIXME_STUB'].vkGetDeviceImageSubresourceLayoutKHR
    vkGetDeviceImageSubresourceLayoutKHR.restype = None
    vkGetDeviceImageSubresourceLayoutKHR.argtypes = [VkDevice, ctypes.POINTER(struct_VkDeviceImageSubresourceInfoKHR), ctypes.POINTER(struct_VkSubresourceLayout2KHR)]
except AttributeError:
    pass
try:
    vkGetImageSubresourceLayout2KHR = _libraries['FIXME_STUB'].vkGetImageSubresourceLayout2KHR
    vkGetImageSubresourceLayout2KHR.restype = None
    vkGetImageSubresourceLayout2KHR.argtypes = [VkDevice, VkImage, ctypes.POINTER(struct_VkImageSubresource2KHR), ctypes.POINTER(struct_VkSubresourceLayout2KHR)]
except AttributeError:
    pass
class struct_VkPhysicalDeviceRayTracingPositionFetchFeaturesKHR(Structure):
    pass

struct_VkPhysicalDeviceRayTracingPositionFetchFeaturesKHR._pack_ = 1 # source:False
struct_VkPhysicalDeviceRayTracingPositionFetchFeaturesKHR._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('rayTracingPositionFetch', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPhysicalDeviceRayTracingPositionFetchFeaturesKHR = struct_VkPhysicalDeviceRayTracingPositionFetchFeaturesKHR

# values for enumeration 'VkComponentTypeKHR'
VkComponentTypeKHR__enumvalues = {
    0: 'VK_COMPONENT_TYPE_FLOAT16_KHR',
    1: 'VK_COMPONENT_TYPE_FLOAT32_KHR',
    2: 'VK_COMPONENT_TYPE_FLOAT64_KHR',
    3: 'VK_COMPONENT_TYPE_SINT8_KHR',
    4: 'VK_COMPONENT_TYPE_SINT16_KHR',
    5: 'VK_COMPONENT_TYPE_SINT32_KHR',
    6: 'VK_COMPONENT_TYPE_SINT64_KHR',
    7: 'VK_COMPONENT_TYPE_UINT8_KHR',
    8: 'VK_COMPONENT_TYPE_UINT16_KHR',
    9: 'VK_COMPONENT_TYPE_UINT32_KHR',
    10: 'VK_COMPONENT_TYPE_UINT64_KHR',
    0: 'VK_COMPONENT_TYPE_FLOAT16_NV',
    1: 'VK_COMPONENT_TYPE_FLOAT32_NV',
    2: 'VK_COMPONENT_TYPE_FLOAT64_NV',
    3: 'VK_COMPONENT_TYPE_SINT8_NV',
    4: 'VK_COMPONENT_TYPE_SINT16_NV',
    5: 'VK_COMPONENT_TYPE_SINT32_NV',
    6: 'VK_COMPONENT_TYPE_SINT64_NV',
    7: 'VK_COMPONENT_TYPE_UINT8_NV',
    8: 'VK_COMPONENT_TYPE_UINT16_NV',
    9: 'VK_COMPONENT_TYPE_UINT32_NV',
    10: 'VK_COMPONENT_TYPE_UINT64_NV',
    2147483647: 'VK_COMPONENT_TYPE_MAX_ENUM_KHR',
}
VK_COMPONENT_TYPE_FLOAT16_KHR = 0
VK_COMPONENT_TYPE_FLOAT32_KHR = 1
VK_COMPONENT_TYPE_FLOAT64_KHR = 2
VK_COMPONENT_TYPE_SINT8_KHR = 3
VK_COMPONENT_TYPE_SINT16_KHR = 4
VK_COMPONENT_TYPE_SINT32_KHR = 5
VK_COMPONENT_TYPE_SINT64_KHR = 6
VK_COMPONENT_TYPE_UINT8_KHR = 7
VK_COMPONENT_TYPE_UINT16_KHR = 8
VK_COMPONENT_TYPE_UINT32_KHR = 9
VK_COMPONENT_TYPE_UINT64_KHR = 10
VK_COMPONENT_TYPE_FLOAT16_NV = 0
VK_COMPONENT_TYPE_FLOAT32_NV = 1
VK_COMPONENT_TYPE_FLOAT64_NV = 2
VK_COMPONENT_TYPE_SINT8_NV = 3
VK_COMPONENT_TYPE_SINT16_NV = 4
VK_COMPONENT_TYPE_SINT32_NV = 5
VK_COMPONENT_TYPE_SINT64_NV = 6
VK_COMPONENT_TYPE_UINT8_NV = 7
VK_COMPONENT_TYPE_UINT16_NV = 8
VK_COMPONENT_TYPE_UINT32_NV = 9
VK_COMPONENT_TYPE_UINT64_NV = 10
VK_COMPONENT_TYPE_MAX_ENUM_KHR = 2147483647
VkComponentTypeKHR = ctypes.c_uint32 # enum

# values for enumeration 'VkScopeKHR'
VkScopeKHR__enumvalues = {
    1: 'VK_SCOPE_DEVICE_KHR',
    2: 'VK_SCOPE_WORKGROUP_KHR',
    3: 'VK_SCOPE_SUBGROUP_KHR',
    5: 'VK_SCOPE_QUEUE_FAMILY_KHR',
    1: 'VK_SCOPE_DEVICE_NV',
    2: 'VK_SCOPE_WORKGROUP_NV',
    3: 'VK_SCOPE_SUBGROUP_NV',
    5: 'VK_SCOPE_QUEUE_FAMILY_NV',
    2147483647: 'VK_SCOPE_MAX_ENUM_KHR',
}
VK_SCOPE_DEVICE_KHR = 1
VK_SCOPE_WORKGROUP_KHR = 2
VK_SCOPE_SUBGROUP_KHR = 3
VK_SCOPE_QUEUE_FAMILY_KHR = 5
VK_SCOPE_DEVICE_NV = 1
VK_SCOPE_WORKGROUP_NV = 2
VK_SCOPE_SUBGROUP_NV = 3
VK_SCOPE_QUEUE_FAMILY_NV = 5
VK_SCOPE_MAX_ENUM_KHR = 2147483647
VkScopeKHR = ctypes.c_uint32 # enum
class struct_VkCooperativeMatrixPropertiesKHR(Structure):
    pass

struct_VkCooperativeMatrixPropertiesKHR._pack_ = 1 # source:False
struct_VkCooperativeMatrixPropertiesKHR._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('MSize', ctypes.c_uint32),
    ('NSize', ctypes.c_uint32),
    ('KSize', ctypes.c_uint32),
    ('AType', VkComponentTypeKHR),
    ('BType', VkComponentTypeKHR),
    ('CType', VkComponentTypeKHR),
    ('ResultType', VkComponentTypeKHR),
    ('saturatingAccumulation', ctypes.c_uint32),
    ('scope', VkScopeKHR),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkCooperativeMatrixPropertiesKHR = struct_VkCooperativeMatrixPropertiesKHR
class struct_VkPhysicalDeviceCooperativeMatrixFeaturesKHR(Structure):
    pass

struct_VkPhysicalDeviceCooperativeMatrixFeaturesKHR._pack_ = 1 # source:False
struct_VkPhysicalDeviceCooperativeMatrixFeaturesKHR._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('cooperativeMatrix', ctypes.c_uint32),
    ('cooperativeMatrixRobustBufferAccess', ctypes.c_uint32),
]

VkPhysicalDeviceCooperativeMatrixFeaturesKHR = struct_VkPhysicalDeviceCooperativeMatrixFeaturesKHR
class struct_VkPhysicalDeviceCooperativeMatrixPropertiesKHR(Structure):
    pass

struct_VkPhysicalDeviceCooperativeMatrixPropertiesKHR._pack_ = 1 # source:False
struct_VkPhysicalDeviceCooperativeMatrixPropertiesKHR._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('cooperativeMatrixSupportedStages', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPhysicalDeviceCooperativeMatrixPropertiesKHR = struct_VkPhysicalDeviceCooperativeMatrixPropertiesKHR
PFN_vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkPhysicalDevice_T), ctypes.POINTER(ctypes.c_uint32), ctypes.POINTER(struct_VkCooperativeMatrixPropertiesKHR))
try:
    vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR = _libraries['FIXME_STUB'].vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR
    vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR.restype = VkResult
    vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR.argtypes = [VkPhysicalDevice, ctypes.POINTER(ctypes.c_uint32), ctypes.POINTER(struct_VkCooperativeMatrixPropertiesKHR)]
except AttributeError:
    pass
class struct_VkPhysicalDeviceVideoMaintenance1FeaturesKHR(Structure):
    pass

struct_VkPhysicalDeviceVideoMaintenance1FeaturesKHR._pack_ = 1 # source:False
struct_VkPhysicalDeviceVideoMaintenance1FeaturesKHR._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('videoMaintenance1', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPhysicalDeviceVideoMaintenance1FeaturesKHR = struct_VkPhysicalDeviceVideoMaintenance1FeaturesKHR
class struct_VkVideoInlineQueryInfoKHR(Structure):
    pass

struct_VkVideoInlineQueryInfoKHR._pack_ = 1 # source:False
struct_VkVideoInlineQueryInfoKHR._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('queryPool', ctypes.POINTER(struct_VkQueryPool_T)),
    ('firstQuery', ctypes.c_uint32),
    ('queryCount', ctypes.c_uint32),
]

VkVideoInlineQueryInfoKHR = struct_VkVideoInlineQueryInfoKHR
class struct_VkPhysicalDeviceVertexAttributeDivisorPropertiesKHR(Structure):
    pass

struct_VkPhysicalDeviceVertexAttributeDivisorPropertiesKHR._pack_ = 1 # source:False
struct_VkPhysicalDeviceVertexAttributeDivisorPropertiesKHR._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('maxVertexAttribDivisor', ctypes.c_uint32),
    ('supportsNonZeroFirstInstance', ctypes.c_uint32),
]

VkPhysicalDeviceVertexAttributeDivisorPropertiesKHR = struct_VkPhysicalDeviceVertexAttributeDivisorPropertiesKHR
class struct_VkVertexInputBindingDivisorDescriptionKHR(Structure):
    pass

struct_VkVertexInputBindingDivisorDescriptionKHR._pack_ = 1 # source:False
struct_VkVertexInputBindingDivisorDescriptionKHR._fields_ = [
    ('binding', ctypes.c_uint32),
    ('divisor', ctypes.c_uint32),
]

VkVertexInputBindingDivisorDescriptionKHR = struct_VkVertexInputBindingDivisorDescriptionKHR
class struct_VkPipelineVertexInputDivisorStateCreateInfoKHR(Structure):
    pass

struct_VkPipelineVertexInputDivisorStateCreateInfoKHR._pack_ = 1 # source:False
struct_VkPipelineVertexInputDivisorStateCreateInfoKHR._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('vertexBindingDivisorCount', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('pVertexBindingDivisors', ctypes.POINTER(struct_VkVertexInputBindingDivisorDescriptionKHR)),
]

VkPipelineVertexInputDivisorStateCreateInfoKHR = struct_VkPipelineVertexInputDivisorStateCreateInfoKHR
class struct_VkPhysicalDeviceVertexAttributeDivisorFeaturesKHR(Structure):
    pass

struct_VkPhysicalDeviceVertexAttributeDivisorFeaturesKHR._pack_ = 1 # source:False
struct_VkPhysicalDeviceVertexAttributeDivisorFeaturesKHR._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('vertexAttributeInstanceRateDivisor', ctypes.c_uint32),
    ('vertexAttributeInstanceRateZeroDivisor', ctypes.c_uint32),
]

VkPhysicalDeviceVertexAttributeDivisorFeaturesKHR = struct_VkPhysicalDeviceVertexAttributeDivisorFeaturesKHR

# values for enumeration 'VkTimeDomainKHR'
VkTimeDomainKHR__enumvalues = {
    0: 'VK_TIME_DOMAIN_DEVICE_KHR',
    1: 'VK_TIME_DOMAIN_CLOCK_MONOTONIC_KHR',
    2: 'VK_TIME_DOMAIN_CLOCK_MONOTONIC_RAW_KHR',
    3: 'VK_TIME_DOMAIN_QUERY_PERFORMANCE_COUNTER_KHR',
    0: 'VK_TIME_DOMAIN_DEVICE_EXT',
    1: 'VK_TIME_DOMAIN_CLOCK_MONOTONIC_EXT',
    2: 'VK_TIME_DOMAIN_CLOCK_MONOTONIC_RAW_EXT',
    3: 'VK_TIME_DOMAIN_QUERY_PERFORMANCE_COUNTER_EXT',
    2147483647: 'VK_TIME_DOMAIN_MAX_ENUM_KHR',
}
VK_TIME_DOMAIN_DEVICE_KHR = 0
VK_TIME_DOMAIN_CLOCK_MONOTONIC_KHR = 1
VK_TIME_DOMAIN_CLOCK_MONOTONIC_RAW_KHR = 2
VK_TIME_DOMAIN_QUERY_PERFORMANCE_COUNTER_KHR = 3
VK_TIME_DOMAIN_DEVICE_EXT = 0
VK_TIME_DOMAIN_CLOCK_MONOTONIC_EXT = 1
VK_TIME_DOMAIN_CLOCK_MONOTONIC_RAW_EXT = 2
VK_TIME_DOMAIN_QUERY_PERFORMANCE_COUNTER_EXT = 3
VK_TIME_DOMAIN_MAX_ENUM_KHR = 2147483647
VkTimeDomainKHR = ctypes.c_uint32 # enum
class struct_VkCalibratedTimestampInfoKHR(Structure):
    pass

struct_VkCalibratedTimestampInfoKHR._pack_ = 1 # source:False
struct_VkCalibratedTimestampInfoKHR._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('timeDomain', VkTimeDomainKHR),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkCalibratedTimestampInfoKHR = struct_VkCalibratedTimestampInfoKHR
PFN_vkGetPhysicalDeviceCalibrateableTimeDomainsKHR = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkPhysicalDevice_T), ctypes.POINTER(ctypes.c_uint32), ctypes.POINTER(VkTimeDomainKHR))
PFN_vkGetCalibratedTimestampsKHR = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkDevice_T), ctypes.c_uint32, ctypes.POINTER(struct_VkCalibratedTimestampInfoKHR), ctypes.POINTER(ctypes.c_uint64), ctypes.POINTER(ctypes.c_uint64))
try:
    vkGetPhysicalDeviceCalibrateableTimeDomainsKHR = _libraries['FIXME_STUB'].vkGetPhysicalDeviceCalibrateableTimeDomainsKHR
    vkGetPhysicalDeviceCalibrateableTimeDomainsKHR.restype = VkResult
    vkGetPhysicalDeviceCalibrateableTimeDomainsKHR.argtypes = [VkPhysicalDevice, ctypes.POINTER(ctypes.c_uint32), ctypes.POINTER(VkTimeDomainKHR)]
except AttributeError:
    pass
try:
    vkGetCalibratedTimestampsKHR = _libraries['FIXME_STUB'].vkGetCalibratedTimestampsKHR
    vkGetCalibratedTimestampsKHR.restype = VkResult
    vkGetCalibratedTimestampsKHR.argtypes = [VkDevice, uint32_t, ctypes.POINTER(struct_VkCalibratedTimestampInfoKHR), ctypes.POINTER(ctypes.c_uint64), ctypes.POINTER(ctypes.c_uint64)]
except AttributeError:
    pass
class struct_VkPhysicalDeviceMaintenance6FeaturesKHR(Structure):
    pass

struct_VkPhysicalDeviceMaintenance6FeaturesKHR._pack_ = 1 # source:False
struct_VkPhysicalDeviceMaintenance6FeaturesKHR._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('maintenance6', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPhysicalDeviceMaintenance6FeaturesKHR = struct_VkPhysicalDeviceMaintenance6FeaturesKHR
class struct_VkPhysicalDeviceMaintenance6PropertiesKHR(Structure):
    pass

struct_VkPhysicalDeviceMaintenance6PropertiesKHR._pack_ = 1 # source:False
struct_VkPhysicalDeviceMaintenance6PropertiesKHR._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('blockTexelViewCompatibleMultipleLayers', ctypes.c_uint32),
    ('maxCombinedImageSamplerDescriptorCount', ctypes.c_uint32),
    ('fragmentShadingRateClampCombinerInputs', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPhysicalDeviceMaintenance6PropertiesKHR = struct_VkPhysicalDeviceMaintenance6PropertiesKHR
class struct_VkBindMemoryStatusKHR(Structure):
    pass

struct_VkBindMemoryStatusKHR._pack_ = 1 # source:False
struct_VkBindMemoryStatusKHR._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('pResult', ctypes.POINTER(VkResult)),
]

VkBindMemoryStatusKHR = struct_VkBindMemoryStatusKHR
class struct_VkBindDescriptorSetsInfoKHR(Structure):
    pass

struct_VkBindDescriptorSetsInfoKHR._pack_ = 1 # source:False
struct_VkBindDescriptorSetsInfoKHR._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('stageFlags', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('layout', ctypes.POINTER(struct_VkPipelineLayout_T)),
    ('firstSet', ctypes.c_uint32),
    ('descriptorSetCount', ctypes.c_uint32),
    ('pDescriptorSets', ctypes.POINTER(ctypes.POINTER(struct_VkDescriptorSet_T))),
    ('dynamicOffsetCount', ctypes.c_uint32),
    ('PADDING_2', ctypes.c_ubyte * 4),
    ('pDynamicOffsets', ctypes.POINTER(ctypes.c_uint32)),
]

VkBindDescriptorSetsInfoKHR = struct_VkBindDescriptorSetsInfoKHR
class struct_VkPushConstantsInfoKHR(Structure):
    pass

struct_VkPushConstantsInfoKHR._pack_ = 1 # source:False
struct_VkPushConstantsInfoKHR._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('layout', ctypes.POINTER(struct_VkPipelineLayout_T)),
    ('stageFlags', ctypes.c_uint32),
    ('offset', ctypes.c_uint32),
    ('size', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('pValues', ctypes.POINTER(None)),
]

VkPushConstantsInfoKHR = struct_VkPushConstantsInfoKHR
class struct_VkPushDescriptorSetInfoKHR(Structure):
    pass

struct_VkPushDescriptorSetInfoKHR._pack_ = 1 # source:False
struct_VkPushDescriptorSetInfoKHR._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('stageFlags', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('layout', ctypes.POINTER(struct_VkPipelineLayout_T)),
    ('set', ctypes.c_uint32),
    ('descriptorWriteCount', ctypes.c_uint32),
    ('pDescriptorWrites', ctypes.POINTER(struct_VkWriteDescriptorSet)),
]

VkPushDescriptorSetInfoKHR = struct_VkPushDescriptorSetInfoKHR
class struct_VkPushDescriptorSetWithTemplateInfoKHR(Structure):
    pass

struct_VkPushDescriptorSetWithTemplateInfoKHR._pack_ = 1 # source:False
struct_VkPushDescriptorSetWithTemplateInfoKHR._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('descriptorUpdateTemplate', ctypes.POINTER(struct_VkDescriptorUpdateTemplate_T)),
    ('layout', ctypes.POINTER(struct_VkPipelineLayout_T)),
    ('set', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('pData', ctypes.POINTER(None)),
]

VkPushDescriptorSetWithTemplateInfoKHR = struct_VkPushDescriptorSetWithTemplateInfoKHR
class struct_VkSetDescriptorBufferOffsetsInfoEXT(Structure):
    pass

struct_VkSetDescriptorBufferOffsetsInfoEXT._pack_ = 1 # source:False
struct_VkSetDescriptorBufferOffsetsInfoEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('stageFlags', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('layout', ctypes.POINTER(struct_VkPipelineLayout_T)),
    ('firstSet', ctypes.c_uint32),
    ('setCount', ctypes.c_uint32),
    ('pBufferIndices', ctypes.POINTER(ctypes.c_uint32)),
    ('pOffsets', ctypes.POINTER(ctypes.c_uint64)),
]

VkSetDescriptorBufferOffsetsInfoEXT = struct_VkSetDescriptorBufferOffsetsInfoEXT
class struct_VkBindDescriptorBufferEmbeddedSamplersInfoEXT(Structure):
    pass

struct_VkBindDescriptorBufferEmbeddedSamplersInfoEXT._pack_ = 1 # source:False
struct_VkBindDescriptorBufferEmbeddedSamplersInfoEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('stageFlags', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('layout', ctypes.POINTER(struct_VkPipelineLayout_T)),
    ('set', ctypes.c_uint32),
    ('PADDING_2', ctypes.c_ubyte * 4),
]

VkBindDescriptorBufferEmbeddedSamplersInfoEXT = struct_VkBindDescriptorBufferEmbeddedSamplersInfoEXT
PFN_vkCmdBindDescriptorSets2KHR = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.POINTER(struct_VkBindDescriptorSetsInfoKHR))
PFN_vkCmdPushConstants2KHR = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.POINTER(struct_VkPushConstantsInfoKHR))
PFN_vkCmdPushDescriptorSet2KHR = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.POINTER(struct_VkPushDescriptorSetInfoKHR))
PFN_vkCmdPushDescriptorSetWithTemplate2KHR = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.POINTER(struct_VkPushDescriptorSetWithTemplateInfoKHR))
PFN_vkCmdSetDescriptorBufferOffsets2EXT = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.POINTER(struct_VkSetDescriptorBufferOffsetsInfoEXT))
PFN_vkCmdBindDescriptorBufferEmbeddedSamplers2EXT = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.POINTER(struct_VkBindDescriptorBufferEmbeddedSamplersInfoEXT))
try:
    vkCmdBindDescriptorSets2KHR = _libraries['FIXME_STUB'].vkCmdBindDescriptorSets2KHR
    vkCmdBindDescriptorSets2KHR.restype = None
    vkCmdBindDescriptorSets2KHR.argtypes = [VkCommandBuffer, ctypes.POINTER(struct_VkBindDescriptorSetsInfoKHR)]
except AttributeError:
    pass
try:
    vkCmdPushConstants2KHR = _libraries['FIXME_STUB'].vkCmdPushConstants2KHR
    vkCmdPushConstants2KHR.restype = None
    vkCmdPushConstants2KHR.argtypes = [VkCommandBuffer, ctypes.POINTER(struct_VkPushConstantsInfoKHR)]
except AttributeError:
    pass
try:
    vkCmdPushDescriptorSet2KHR = _libraries['FIXME_STUB'].vkCmdPushDescriptorSet2KHR
    vkCmdPushDescriptorSet2KHR.restype = None
    vkCmdPushDescriptorSet2KHR.argtypes = [VkCommandBuffer, ctypes.POINTER(struct_VkPushDescriptorSetInfoKHR)]
except AttributeError:
    pass
try:
    vkCmdPushDescriptorSetWithTemplate2KHR = _libraries['FIXME_STUB'].vkCmdPushDescriptorSetWithTemplate2KHR
    vkCmdPushDescriptorSetWithTemplate2KHR.restype = None
    vkCmdPushDescriptorSetWithTemplate2KHR.argtypes = [VkCommandBuffer, ctypes.POINTER(struct_VkPushDescriptorSetWithTemplateInfoKHR)]
except AttributeError:
    pass
try:
    vkCmdSetDescriptorBufferOffsets2EXT = _libraries['FIXME_STUB'].vkCmdSetDescriptorBufferOffsets2EXT
    vkCmdSetDescriptorBufferOffsets2EXT.restype = None
    vkCmdSetDescriptorBufferOffsets2EXT.argtypes = [VkCommandBuffer, ctypes.POINTER(struct_VkSetDescriptorBufferOffsetsInfoEXT)]
except AttributeError:
    pass
try:
    vkCmdBindDescriptorBufferEmbeddedSamplers2EXT = _libraries['FIXME_STUB'].vkCmdBindDescriptorBufferEmbeddedSamplers2EXT
    vkCmdBindDescriptorBufferEmbeddedSamplers2EXT.restype = None
    vkCmdBindDescriptorBufferEmbeddedSamplers2EXT.argtypes = [VkCommandBuffer, ctypes.POINTER(struct_VkBindDescriptorBufferEmbeddedSamplersInfoEXT)]
except AttributeError:
    pass
class struct_VkDebugReportCallbackEXT_T(Structure):
    pass

VkDebugReportCallbackEXT = ctypes.POINTER(struct_VkDebugReportCallbackEXT_T)

# values for enumeration 'VkDebugReportObjectTypeEXT'
VkDebugReportObjectTypeEXT__enumvalues = {
    0: 'VK_DEBUG_REPORT_OBJECT_TYPE_UNKNOWN_EXT',
    1: 'VK_DEBUG_REPORT_OBJECT_TYPE_INSTANCE_EXT',
    2: 'VK_DEBUG_REPORT_OBJECT_TYPE_PHYSICAL_DEVICE_EXT',
    3: 'VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_EXT',
    4: 'VK_DEBUG_REPORT_OBJECT_TYPE_QUEUE_EXT',
    5: 'VK_DEBUG_REPORT_OBJECT_TYPE_SEMAPHORE_EXT',
    6: 'VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_BUFFER_EXT',
    7: 'VK_DEBUG_REPORT_OBJECT_TYPE_FENCE_EXT',
    8: 'VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_MEMORY_EXT',
    9: 'VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_EXT',
    10: 'VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_EXT',
    11: 'VK_DEBUG_REPORT_OBJECT_TYPE_EVENT_EXT',
    12: 'VK_DEBUG_REPORT_OBJECT_TYPE_QUERY_POOL_EXT',
    13: 'VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_VIEW_EXT',
    14: 'VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_VIEW_EXT',
    15: 'VK_DEBUG_REPORT_OBJECT_TYPE_SHADER_MODULE_EXT',
    16: 'VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_CACHE_EXT',
    17: 'VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_LAYOUT_EXT',
    18: 'VK_DEBUG_REPORT_OBJECT_TYPE_RENDER_PASS_EXT',
    19: 'VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_EXT',
    20: 'VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT_EXT',
    21: 'VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_EXT',
    22: 'VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_POOL_EXT',
    23: 'VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_EXT',
    24: 'VK_DEBUG_REPORT_OBJECT_TYPE_FRAMEBUFFER_EXT',
    25: 'VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_POOL_EXT',
    26: 'VK_DEBUG_REPORT_OBJECT_TYPE_SURFACE_KHR_EXT',
    27: 'VK_DEBUG_REPORT_OBJECT_TYPE_SWAPCHAIN_KHR_EXT',
    28: 'VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT_EXT',
    29: 'VK_DEBUG_REPORT_OBJECT_TYPE_DISPLAY_KHR_EXT',
    30: 'VK_DEBUG_REPORT_OBJECT_TYPE_DISPLAY_MODE_KHR_EXT',
    33: 'VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT_EXT',
    1000156000: 'VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_EXT',
    1000085000: 'VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_EXT',
    1000029000: 'VK_DEBUG_REPORT_OBJECT_TYPE_CU_MODULE_NVX_EXT',
    1000029001: 'VK_DEBUG_REPORT_OBJECT_TYPE_CU_FUNCTION_NVX_EXT',
    1000150000: 'VK_DEBUG_REPORT_OBJECT_TYPE_ACCELERATION_STRUCTURE_KHR_EXT',
    1000165000: 'VK_DEBUG_REPORT_OBJECT_TYPE_ACCELERATION_STRUCTURE_NV_EXT',
    1000307000: 'VK_DEBUG_REPORT_OBJECT_TYPE_CUDA_MODULE_NV_EXT',
    1000307001: 'VK_DEBUG_REPORT_OBJECT_TYPE_CUDA_FUNCTION_NV_EXT',
    1000366000: 'VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_COLLECTION_FUCHSIA_EXT',
    28: 'VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_EXT',
    33: 'VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT',
    1000085000: 'VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_KHR_EXT',
    1000156000: 'VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_KHR_EXT',
    2147483647: 'VK_DEBUG_REPORT_OBJECT_TYPE_MAX_ENUM_EXT',
}
VK_DEBUG_REPORT_OBJECT_TYPE_UNKNOWN_EXT = 0
VK_DEBUG_REPORT_OBJECT_TYPE_INSTANCE_EXT = 1
VK_DEBUG_REPORT_OBJECT_TYPE_PHYSICAL_DEVICE_EXT = 2
VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_EXT = 3
VK_DEBUG_REPORT_OBJECT_TYPE_QUEUE_EXT = 4
VK_DEBUG_REPORT_OBJECT_TYPE_SEMAPHORE_EXT = 5
VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_BUFFER_EXT = 6
VK_DEBUG_REPORT_OBJECT_TYPE_FENCE_EXT = 7
VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_MEMORY_EXT = 8
VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_EXT = 9
VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_EXT = 10
VK_DEBUG_REPORT_OBJECT_TYPE_EVENT_EXT = 11
VK_DEBUG_REPORT_OBJECT_TYPE_QUERY_POOL_EXT = 12
VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_VIEW_EXT = 13
VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_VIEW_EXT = 14
VK_DEBUG_REPORT_OBJECT_TYPE_SHADER_MODULE_EXT = 15
VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_CACHE_EXT = 16
VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_LAYOUT_EXT = 17
VK_DEBUG_REPORT_OBJECT_TYPE_RENDER_PASS_EXT = 18
VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_EXT = 19
VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT_EXT = 20
VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_EXT = 21
VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_POOL_EXT = 22
VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_EXT = 23
VK_DEBUG_REPORT_OBJECT_TYPE_FRAMEBUFFER_EXT = 24
VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_POOL_EXT = 25
VK_DEBUG_REPORT_OBJECT_TYPE_SURFACE_KHR_EXT = 26
VK_DEBUG_REPORT_OBJECT_TYPE_SWAPCHAIN_KHR_EXT = 27
VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT_EXT = 28
VK_DEBUG_REPORT_OBJECT_TYPE_DISPLAY_KHR_EXT = 29
VK_DEBUG_REPORT_OBJECT_TYPE_DISPLAY_MODE_KHR_EXT = 30
VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT_EXT = 33
VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_EXT = 1000156000
VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_EXT = 1000085000
VK_DEBUG_REPORT_OBJECT_TYPE_CU_MODULE_NVX_EXT = 1000029000
VK_DEBUG_REPORT_OBJECT_TYPE_CU_FUNCTION_NVX_EXT = 1000029001
VK_DEBUG_REPORT_OBJECT_TYPE_ACCELERATION_STRUCTURE_KHR_EXT = 1000150000
VK_DEBUG_REPORT_OBJECT_TYPE_ACCELERATION_STRUCTURE_NV_EXT = 1000165000
VK_DEBUG_REPORT_OBJECT_TYPE_CUDA_MODULE_NV_EXT = 1000307000
VK_DEBUG_REPORT_OBJECT_TYPE_CUDA_FUNCTION_NV_EXT = 1000307001
VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_COLLECTION_FUCHSIA_EXT = 1000366000
VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_EXT = 28
VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT = 33
VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_KHR_EXT = 1000085000
VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_KHR_EXT = 1000156000
VK_DEBUG_REPORT_OBJECT_TYPE_MAX_ENUM_EXT = 2147483647
VkDebugReportObjectTypeEXT = ctypes.c_uint32 # enum

# values for enumeration 'VkDebugReportFlagBitsEXT'
VkDebugReportFlagBitsEXT__enumvalues = {
    1: 'VK_DEBUG_REPORT_INFORMATION_BIT_EXT',
    2: 'VK_DEBUG_REPORT_WARNING_BIT_EXT',
    4: 'VK_DEBUG_REPORT_PERFORMANCE_WARNING_BIT_EXT',
    8: 'VK_DEBUG_REPORT_ERROR_BIT_EXT',
    16: 'VK_DEBUG_REPORT_DEBUG_BIT_EXT',
    2147483647: 'VK_DEBUG_REPORT_FLAG_BITS_MAX_ENUM_EXT',
}
VK_DEBUG_REPORT_INFORMATION_BIT_EXT = 1
VK_DEBUG_REPORT_WARNING_BIT_EXT = 2
VK_DEBUG_REPORT_PERFORMANCE_WARNING_BIT_EXT = 4
VK_DEBUG_REPORT_ERROR_BIT_EXT = 8
VK_DEBUG_REPORT_DEBUG_BIT_EXT = 16
VK_DEBUG_REPORT_FLAG_BITS_MAX_ENUM_EXT = 2147483647
VkDebugReportFlagBitsEXT = ctypes.c_uint32 # enum
VkDebugReportFlagsEXT = ctypes.c_uint32
PFN_vkDebugReportCallbackEXT = ctypes.CFUNCTYPE(ctypes.c_uint32, ctypes.c_uint32, VkDebugReportObjectTypeEXT, ctypes.c_uint64, ctypes.c_uint64, ctypes.c_int32, ctypes.POINTER(ctypes.c_char), ctypes.POINTER(ctypes.c_char), ctypes.POINTER(None))
class struct_VkDebugReportCallbackCreateInfoEXT(Structure):
    pass

struct_VkDebugReportCallbackCreateInfoEXT._pack_ = 1 # source:False
struct_VkDebugReportCallbackCreateInfoEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('flags', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('pfnCallback', ctypes.CFUNCTYPE(ctypes.c_uint32, ctypes.c_uint32, VkDebugReportObjectTypeEXT, ctypes.c_uint64, ctypes.c_uint64, ctypes.c_int32, ctypes.POINTER(ctypes.c_char), ctypes.POINTER(ctypes.c_char), ctypes.POINTER(None))),
    ('pUserData', ctypes.POINTER(None)),
]

VkDebugReportCallbackCreateInfoEXT = struct_VkDebugReportCallbackCreateInfoEXT
PFN_vkCreateDebugReportCallbackEXT = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkInstance_T), ctypes.POINTER(struct_VkDebugReportCallbackCreateInfoEXT), ctypes.POINTER(struct_VkAllocationCallbacks), ctypes.POINTER(ctypes.POINTER(struct_VkDebugReportCallbackEXT_T)))
PFN_vkDestroyDebugReportCallbackEXT = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkInstance_T), ctypes.POINTER(struct_VkDebugReportCallbackEXT_T), ctypes.POINTER(struct_VkAllocationCallbacks))
PFN_vkDebugReportMessageEXT = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkInstance_T), ctypes.c_uint32, VkDebugReportObjectTypeEXT, ctypes.c_uint64, ctypes.c_uint64, ctypes.c_int32, ctypes.POINTER(ctypes.c_char), ctypes.POINTER(ctypes.c_char))
try:
    vkCreateDebugReportCallbackEXT = _libraries['FIXME_STUB'].vkCreateDebugReportCallbackEXT
    vkCreateDebugReportCallbackEXT.restype = VkResult
    vkCreateDebugReportCallbackEXT.argtypes = [VkInstance, ctypes.POINTER(struct_VkDebugReportCallbackCreateInfoEXT), ctypes.POINTER(struct_VkAllocationCallbacks), ctypes.POINTER(ctypes.POINTER(struct_VkDebugReportCallbackEXT_T))]
except AttributeError:
    pass
try:
    vkDestroyDebugReportCallbackEXT = _libraries['FIXME_STUB'].vkDestroyDebugReportCallbackEXT
    vkDestroyDebugReportCallbackEXT.restype = None
    vkDestroyDebugReportCallbackEXT.argtypes = [VkInstance, VkDebugReportCallbackEXT, ctypes.POINTER(struct_VkAllocationCallbacks)]
except AttributeError:
    pass
try:
    vkDebugReportMessageEXT = _libraries['FIXME_STUB'].vkDebugReportMessageEXT
    vkDebugReportMessageEXT.restype = None
    vkDebugReportMessageEXT.argtypes = [VkInstance, VkDebugReportFlagsEXT, VkDebugReportObjectTypeEXT, uint64_t, size_t, int32_t, ctypes.POINTER(ctypes.c_char), ctypes.POINTER(ctypes.c_char)]
except AttributeError:
    pass

# values for enumeration 'VkRasterizationOrderAMD'
VkRasterizationOrderAMD__enumvalues = {
    0: 'VK_RASTERIZATION_ORDER_STRICT_AMD',
    1: 'VK_RASTERIZATION_ORDER_RELAXED_AMD',
    2147483647: 'VK_RASTERIZATION_ORDER_MAX_ENUM_AMD',
}
VK_RASTERIZATION_ORDER_STRICT_AMD = 0
VK_RASTERIZATION_ORDER_RELAXED_AMD = 1
VK_RASTERIZATION_ORDER_MAX_ENUM_AMD = 2147483647
VkRasterizationOrderAMD = ctypes.c_uint32 # enum
class struct_VkPipelineRasterizationStateRasterizationOrderAMD(Structure):
    pass

struct_VkPipelineRasterizationStateRasterizationOrderAMD._pack_ = 1 # source:False
struct_VkPipelineRasterizationStateRasterizationOrderAMD._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('rasterizationOrder', VkRasterizationOrderAMD),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPipelineRasterizationStateRasterizationOrderAMD = struct_VkPipelineRasterizationStateRasterizationOrderAMD
class struct_VkDebugMarkerObjectNameInfoEXT(Structure):
    pass

struct_VkDebugMarkerObjectNameInfoEXT._pack_ = 1 # source:False
struct_VkDebugMarkerObjectNameInfoEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('objectType', VkDebugReportObjectTypeEXT),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('object', ctypes.c_uint64),
    ('pObjectName', ctypes.POINTER(ctypes.c_char)),
]

VkDebugMarkerObjectNameInfoEXT = struct_VkDebugMarkerObjectNameInfoEXT
class struct_VkDebugMarkerObjectTagInfoEXT(Structure):
    pass

struct_VkDebugMarkerObjectTagInfoEXT._pack_ = 1 # source:False
struct_VkDebugMarkerObjectTagInfoEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('objectType', VkDebugReportObjectTypeEXT),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('object', ctypes.c_uint64),
    ('tagName', ctypes.c_uint64),
    ('tagSize', ctypes.c_uint64),
    ('pTag', ctypes.POINTER(None)),
]

VkDebugMarkerObjectTagInfoEXT = struct_VkDebugMarkerObjectTagInfoEXT
class struct_VkDebugMarkerMarkerInfoEXT(Structure):
    pass

struct_VkDebugMarkerMarkerInfoEXT._pack_ = 1 # source:False
struct_VkDebugMarkerMarkerInfoEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('pMarkerName', ctypes.POINTER(ctypes.c_char)),
    ('color', ctypes.c_float * 4),
]

VkDebugMarkerMarkerInfoEXT = struct_VkDebugMarkerMarkerInfoEXT
PFN_vkDebugMarkerSetObjectTagEXT = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkDebugMarkerObjectTagInfoEXT))
PFN_vkDebugMarkerSetObjectNameEXT = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkDebugMarkerObjectNameInfoEXT))
PFN_vkCmdDebugMarkerBeginEXT = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.POINTER(struct_VkDebugMarkerMarkerInfoEXT))
PFN_vkCmdDebugMarkerEndEXT = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T))
PFN_vkCmdDebugMarkerInsertEXT = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.POINTER(struct_VkDebugMarkerMarkerInfoEXT))
try:
    vkDebugMarkerSetObjectTagEXT = _libraries['FIXME_STUB'].vkDebugMarkerSetObjectTagEXT
    vkDebugMarkerSetObjectTagEXT.restype = VkResult
    vkDebugMarkerSetObjectTagEXT.argtypes = [VkDevice, ctypes.POINTER(struct_VkDebugMarkerObjectTagInfoEXT)]
except AttributeError:
    pass
try:
    vkDebugMarkerSetObjectNameEXT = _libraries['FIXME_STUB'].vkDebugMarkerSetObjectNameEXT
    vkDebugMarkerSetObjectNameEXT.restype = VkResult
    vkDebugMarkerSetObjectNameEXT.argtypes = [VkDevice, ctypes.POINTER(struct_VkDebugMarkerObjectNameInfoEXT)]
except AttributeError:
    pass
try:
    vkCmdDebugMarkerBeginEXT = _libraries['FIXME_STUB'].vkCmdDebugMarkerBeginEXT
    vkCmdDebugMarkerBeginEXT.restype = None
    vkCmdDebugMarkerBeginEXT.argtypes = [VkCommandBuffer, ctypes.POINTER(struct_VkDebugMarkerMarkerInfoEXT)]
except AttributeError:
    pass
try:
    vkCmdDebugMarkerEndEXT = _libraries['FIXME_STUB'].vkCmdDebugMarkerEndEXT
    vkCmdDebugMarkerEndEXT.restype = None
    vkCmdDebugMarkerEndEXT.argtypes = [VkCommandBuffer]
except AttributeError:
    pass
try:
    vkCmdDebugMarkerInsertEXT = _libraries['FIXME_STUB'].vkCmdDebugMarkerInsertEXT
    vkCmdDebugMarkerInsertEXT.restype = None
    vkCmdDebugMarkerInsertEXT.argtypes = [VkCommandBuffer, ctypes.POINTER(struct_VkDebugMarkerMarkerInfoEXT)]
except AttributeError:
    pass
class struct_VkDedicatedAllocationImageCreateInfoNV(Structure):
    pass

struct_VkDedicatedAllocationImageCreateInfoNV._pack_ = 1 # source:False
struct_VkDedicatedAllocationImageCreateInfoNV._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('dedicatedAllocation', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkDedicatedAllocationImageCreateInfoNV = struct_VkDedicatedAllocationImageCreateInfoNV
class struct_VkDedicatedAllocationBufferCreateInfoNV(Structure):
    pass

struct_VkDedicatedAllocationBufferCreateInfoNV._pack_ = 1 # source:False
struct_VkDedicatedAllocationBufferCreateInfoNV._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('dedicatedAllocation', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkDedicatedAllocationBufferCreateInfoNV = struct_VkDedicatedAllocationBufferCreateInfoNV
class struct_VkDedicatedAllocationMemoryAllocateInfoNV(Structure):
    pass

struct_VkDedicatedAllocationMemoryAllocateInfoNV._pack_ = 1 # source:False
struct_VkDedicatedAllocationMemoryAllocateInfoNV._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('image', ctypes.POINTER(struct_VkImage_T)),
    ('buffer', ctypes.POINTER(struct_VkBuffer_T)),
]

VkDedicatedAllocationMemoryAllocateInfoNV = struct_VkDedicatedAllocationMemoryAllocateInfoNV
VkPipelineRasterizationStateStreamCreateFlagsEXT = ctypes.c_uint32
class struct_VkPhysicalDeviceTransformFeedbackFeaturesEXT(Structure):
    pass

struct_VkPhysicalDeviceTransformFeedbackFeaturesEXT._pack_ = 1 # source:False
struct_VkPhysicalDeviceTransformFeedbackFeaturesEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('transformFeedback', ctypes.c_uint32),
    ('geometryStreams', ctypes.c_uint32),
]

VkPhysicalDeviceTransformFeedbackFeaturesEXT = struct_VkPhysicalDeviceTransformFeedbackFeaturesEXT
class struct_VkPhysicalDeviceTransformFeedbackPropertiesEXT(Structure):
    pass

struct_VkPhysicalDeviceTransformFeedbackPropertiesEXT._pack_ = 1 # source:False
struct_VkPhysicalDeviceTransformFeedbackPropertiesEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('maxTransformFeedbackStreams', ctypes.c_uint32),
    ('maxTransformFeedbackBuffers', ctypes.c_uint32),
    ('maxTransformFeedbackBufferSize', ctypes.c_uint64),
    ('maxTransformFeedbackStreamDataSize', ctypes.c_uint32),
    ('maxTransformFeedbackBufferDataSize', ctypes.c_uint32),
    ('maxTransformFeedbackBufferDataStride', ctypes.c_uint32),
    ('transformFeedbackQueries', ctypes.c_uint32),
    ('transformFeedbackStreamsLinesTriangles', ctypes.c_uint32),
    ('transformFeedbackRasterizationStreamSelect', ctypes.c_uint32),
    ('transformFeedbackDraw', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPhysicalDeviceTransformFeedbackPropertiesEXT = struct_VkPhysicalDeviceTransformFeedbackPropertiesEXT
class struct_VkPipelineRasterizationStateStreamCreateInfoEXT(Structure):
    pass

struct_VkPipelineRasterizationStateStreamCreateInfoEXT._pack_ = 1 # source:False
struct_VkPipelineRasterizationStateStreamCreateInfoEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('flags', ctypes.c_uint32),
    ('rasterizationStream', ctypes.c_uint32),
]

VkPipelineRasterizationStateStreamCreateInfoEXT = struct_VkPipelineRasterizationStateStreamCreateInfoEXT
PFN_vkCmdBindTransformFeedbackBuffersEXT = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.c_uint32, ctypes.c_uint32, ctypes.POINTER(ctypes.POINTER(struct_VkBuffer_T)), ctypes.POINTER(ctypes.c_uint64), ctypes.POINTER(ctypes.c_uint64))
PFN_vkCmdBeginTransformFeedbackEXT = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.c_uint32, ctypes.c_uint32, ctypes.POINTER(ctypes.POINTER(struct_VkBuffer_T)), ctypes.POINTER(ctypes.c_uint64))
PFN_vkCmdEndTransformFeedbackEXT = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.c_uint32, ctypes.c_uint32, ctypes.POINTER(ctypes.POINTER(struct_VkBuffer_T)), ctypes.POINTER(ctypes.c_uint64))
PFN_vkCmdBeginQueryIndexedEXT = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.POINTER(struct_VkQueryPool_T), ctypes.c_uint32, ctypes.c_uint32, ctypes.c_uint32)
PFN_vkCmdEndQueryIndexedEXT = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.POINTER(struct_VkQueryPool_T), ctypes.c_uint32, ctypes.c_uint32)
PFN_vkCmdDrawIndirectByteCountEXT = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.c_uint32, ctypes.c_uint32, ctypes.POINTER(struct_VkBuffer_T), ctypes.c_uint64, ctypes.c_uint32, ctypes.c_uint32)
try:
    vkCmdBindTransformFeedbackBuffersEXT = _libraries['FIXME_STUB'].vkCmdBindTransformFeedbackBuffersEXT
    vkCmdBindTransformFeedbackBuffersEXT.restype = None
    vkCmdBindTransformFeedbackBuffersEXT.argtypes = [VkCommandBuffer, uint32_t, uint32_t, ctypes.POINTER(ctypes.POINTER(struct_VkBuffer_T)), ctypes.POINTER(ctypes.c_uint64), ctypes.POINTER(ctypes.c_uint64)]
except AttributeError:
    pass
try:
    vkCmdBeginTransformFeedbackEXT = _libraries['FIXME_STUB'].vkCmdBeginTransformFeedbackEXT
    vkCmdBeginTransformFeedbackEXT.restype = None
    vkCmdBeginTransformFeedbackEXT.argtypes = [VkCommandBuffer, uint32_t, uint32_t, ctypes.POINTER(ctypes.POINTER(struct_VkBuffer_T)), ctypes.POINTER(ctypes.c_uint64)]
except AttributeError:
    pass
try:
    vkCmdEndTransformFeedbackEXT = _libraries['FIXME_STUB'].vkCmdEndTransformFeedbackEXT
    vkCmdEndTransformFeedbackEXT.restype = None
    vkCmdEndTransformFeedbackEXT.argtypes = [VkCommandBuffer, uint32_t, uint32_t, ctypes.POINTER(ctypes.POINTER(struct_VkBuffer_T)), ctypes.POINTER(ctypes.c_uint64)]
except AttributeError:
    pass
try:
    vkCmdBeginQueryIndexedEXT = _libraries['FIXME_STUB'].vkCmdBeginQueryIndexedEXT
    vkCmdBeginQueryIndexedEXT.restype = None
    vkCmdBeginQueryIndexedEXT.argtypes = [VkCommandBuffer, VkQueryPool, uint32_t, VkQueryControlFlags, uint32_t]
except AttributeError:
    pass
try:
    vkCmdEndQueryIndexedEXT = _libraries['FIXME_STUB'].vkCmdEndQueryIndexedEXT
    vkCmdEndQueryIndexedEXT.restype = None
    vkCmdEndQueryIndexedEXT.argtypes = [VkCommandBuffer, VkQueryPool, uint32_t, uint32_t]
except AttributeError:
    pass
try:
    vkCmdDrawIndirectByteCountEXT = _libraries['FIXME_STUB'].vkCmdDrawIndirectByteCountEXT
    vkCmdDrawIndirectByteCountEXT.restype = None
    vkCmdDrawIndirectByteCountEXT.argtypes = [VkCommandBuffer, uint32_t, uint32_t, VkBuffer, VkDeviceSize, uint32_t, uint32_t]
except AttributeError:
    pass
class struct_VkCuModuleNVX_T(Structure):
    pass

VkCuModuleNVX = ctypes.POINTER(struct_VkCuModuleNVX_T)
class struct_VkCuFunctionNVX_T(Structure):
    pass

VkCuFunctionNVX = ctypes.POINTER(struct_VkCuFunctionNVX_T)
class struct_VkCuModuleCreateInfoNVX(Structure):
    pass

struct_VkCuModuleCreateInfoNVX._pack_ = 1 # source:False
struct_VkCuModuleCreateInfoNVX._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('dataSize', ctypes.c_uint64),
    ('pData', ctypes.POINTER(None)),
]

VkCuModuleCreateInfoNVX = struct_VkCuModuleCreateInfoNVX
class struct_VkCuFunctionCreateInfoNVX(Structure):
    pass

struct_VkCuFunctionCreateInfoNVX._pack_ = 1 # source:False
struct_VkCuFunctionCreateInfoNVX._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('module', ctypes.POINTER(struct_VkCuModuleNVX_T)),
    ('pName', ctypes.POINTER(ctypes.c_char)),
]

VkCuFunctionCreateInfoNVX = struct_VkCuFunctionCreateInfoNVX
class struct_VkCuLaunchInfoNVX(Structure):
    pass

struct_VkCuLaunchInfoNVX._pack_ = 1 # source:False
struct_VkCuLaunchInfoNVX._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('function', ctypes.POINTER(struct_VkCuFunctionNVX_T)),
    ('gridDimX', ctypes.c_uint32),
    ('gridDimY', ctypes.c_uint32),
    ('gridDimZ', ctypes.c_uint32),
    ('blockDimX', ctypes.c_uint32),
    ('blockDimY', ctypes.c_uint32),
    ('blockDimZ', ctypes.c_uint32),
    ('sharedMemBytes', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('paramCount', ctypes.c_uint64),
    ('pParams', ctypes.POINTER(ctypes.POINTER(None))),
    ('extraCount', ctypes.c_uint64),
    ('pExtras', ctypes.POINTER(ctypes.POINTER(None))),
]

VkCuLaunchInfoNVX = struct_VkCuLaunchInfoNVX
PFN_vkCreateCuModuleNVX = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkCuModuleCreateInfoNVX), ctypes.POINTER(struct_VkAllocationCallbacks), ctypes.POINTER(ctypes.POINTER(struct_VkCuModuleNVX_T)))
PFN_vkCreateCuFunctionNVX = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkCuFunctionCreateInfoNVX), ctypes.POINTER(struct_VkAllocationCallbacks), ctypes.POINTER(ctypes.POINTER(struct_VkCuFunctionNVX_T)))
PFN_vkDestroyCuModuleNVX = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkCuModuleNVX_T), ctypes.POINTER(struct_VkAllocationCallbacks))
PFN_vkDestroyCuFunctionNVX = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkCuFunctionNVX_T), ctypes.POINTER(struct_VkAllocationCallbacks))
PFN_vkCmdCuLaunchKernelNVX = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.POINTER(struct_VkCuLaunchInfoNVX))
try:
    vkCreateCuModuleNVX = _libraries['FIXME_STUB'].vkCreateCuModuleNVX
    vkCreateCuModuleNVX.restype = VkResult
    vkCreateCuModuleNVX.argtypes = [VkDevice, ctypes.POINTER(struct_VkCuModuleCreateInfoNVX), ctypes.POINTER(struct_VkAllocationCallbacks), ctypes.POINTER(ctypes.POINTER(struct_VkCuModuleNVX_T))]
except AttributeError:
    pass
try:
    vkCreateCuFunctionNVX = _libraries['FIXME_STUB'].vkCreateCuFunctionNVX
    vkCreateCuFunctionNVX.restype = VkResult
    vkCreateCuFunctionNVX.argtypes = [VkDevice, ctypes.POINTER(struct_VkCuFunctionCreateInfoNVX), ctypes.POINTER(struct_VkAllocationCallbacks), ctypes.POINTER(ctypes.POINTER(struct_VkCuFunctionNVX_T))]
except AttributeError:
    pass
try:
    vkDestroyCuModuleNVX = _libraries['FIXME_STUB'].vkDestroyCuModuleNVX
    vkDestroyCuModuleNVX.restype = None
    vkDestroyCuModuleNVX.argtypes = [VkDevice, VkCuModuleNVX, ctypes.POINTER(struct_VkAllocationCallbacks)]
except AttributeError:
    pass
try:
    vkDestroyCuFunctionNVX = _libraries['FIXME_STUB'].vkDestroyCuFunctionNVX
    vkDestroyCuFunctionNVX.restype = None
    vkDestroyCuFunctionNVX.argtypes = [VkDevice, VkCuFunctionNVX, ctypes.POINTER(struct_VkAllocationCallbacks)]
except AttributeError:
    pass
try:
    vkCmdCuLaunchKernelNVX = _libraries['FIXME_STUB'].vkCmdCuLaunchKernelNVX
    vkCmdCuLaunchKernelNVX.restype = None
    vkCmdCuLaunchKernelNVX.argtypes = [VkCommandBuffer, ctypes.POINTER(struct_VkCuLaunchInfoNVX)]
except AttributeError:
    pass
class struct_VkImageViewHandleInfoNVX(Structure):
    pass

struct_VkImageViewHandleInfoNVX._pack_ = 1 # source:False
struct_VkImageViewHandleInfoNVX._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('imageView', ctypes.POINTER(struct_VkImageView_T)),
    ('descriptorType', VkDescriptorType),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('sampler', ctypes.POINTER(struct_VkSampler_T)),
]

VkImageViewHandleInfoNVX = struct_VkImageViewHandleInfoNVX
class struct_VkImageViewAddressPropertiesNVX(Structure):
    pass

struct_VkImageViewAddressPropertiesNVX._pack_ = 1 # source:False
struct_VkImageViewAddressPropertiesNVX._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('deviceAddress', ctypes.c_uint64),
    ('size', ctypes.c_uint64),
]

VkImageViewAddressPropertiesNVX = struct_VkImageViewAddressPropertiesNVX
PFN_vkGetImageViewHandleNVX = ctypes.CFUNCTYPE(ctypes.c_uint32, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkImageViewHandleInfoNVX))
PFN_vkGetImageViewAddressNVX = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkImageView_T), ctypes.POINTER(struct_VkImageViewAddressPropertiesNVX))
try:
    vkGetImageViewHandleNVX = _libraries['FIXME_STUB'].vkGetImageViewHandleNVX
    vkGetImageViewHandleNVX.restype = uint32_t
    vkGetImageViewHandleNVX.argtypes = [VkDevice, ctypes.POINTER(struct_VkImageViewHandleInfoNVX)]
except AttributeError:
    pass
try:
    vkGetImageViewAddressNVX = _libraries['FIXME_STUB'].vkGetImageViewAddressNVX
    vkGetImageViewAddressNVX.restype = VkResult
    vkGetImageViewAddressNVX.argtypes = [VkDevice, VkImageView, ctypes.POINTER(struct_VkImageViewAddressPropertiesNVX)]
except AttributeError:
    pass
PFN_vkCmdDrawIndirectCountAMD = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.POINTER(struct_VkBuffer_T), ctypes.c_uint64, ctypes.POINTER(struct_VkBuffer_T), ctypes.c_uint64, ctypes.c_uint32, ctypes.c_uint32)
PFN_vkCmdDrawIndexedIndirectCountAMD = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.POINTER(struct_VkBuffer_T), ctypes.c_uint64, ctypes.POINTER(struct_VkBuffer_T), ctypes.c_uint64, ctypes.c_uint32, ctypes.c_uint32)
try:
    vkCmdDrawIndirectCountAMD = _libraries['FIXME_STUB'].vkCmdDrawIndirectCountAMD
    vkCmdDrawIndirectCountAMD.restype = None
    vkCmdDrawIndirectCountAMD.argtypes = [VkCommandBuffer, VkBuffer, VkDeviceSize, VkBuffer, VkDeviceSize, uint32_t, uint32_t]
except AttributeError:
    pass
try:
    vkCmdDrawIndexedIndirectCountAMD = _libraries['FIXME_STUB'].vkCmdDrawIndexedIndirectCountAMD
    vkCmdDrawIndexedIndirectCountAMD.restype = None
    vkCmdDrawIndexedIndirectCountAMD.argtypes = [VkCommandBuffer, VkBuffer, VkDeviceSize, VkBuffer, VkDeviceSize, uint32_t, uint32_t]
except AttributeError:
    pass
class struct_VkTextureLODGatherFormatPropertiesAMD(Structure):
    pass

struct_VkTextureLODGatherFormatPropertiesAMD._pack_ = 1 # source:False
struct_VkTextureLODGatherFormatPropertiesAMD._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('supportsTextureGatherLODBiasAMD', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkTextureLODGatherFormatPropertiesAMD = struct_VkTextureLODGatherFormatPropertiesAMD

# values for enumeration 'VkShaderInfoTypeAMD'
VkShaderInfoTypeAMD__enumvalues = {
    0: 'VK_SHADER_INFO_TYPE_STATISTICS_AMD',
    1: 'VK_SHADER_INFO_TYPE_BINARY_AMD',
    2: 'VK_SHADER_INFO_TYPE_DISASSEMBLY_AMD',
    2147483647: 'VK_SHADER_INFO_TYPE_MAX_ENUM_AMD',
}
VK_SHADER_INFO_TYPE_STATISTICS_AMD = 0
VK_SHADER_INFO_TYPE_BINARY_AMD = 1
VK_SHADER_INFO_TYPE_DISASSEMBLY_AMD = 2
VK_SHADER_INFO_TYPE_MAX_ENUM_AMD = 2147483647
VkShaderInfoTypeAMD = ctypes.c_uint32 # enum
class struct_VkShaderResourceUsageAMD(Structure):
    pass

struct_VkShaderResourceUsageAMD._pack_ = 1 # source:False
struct_VkShaderResourceUsageAMD._fields_ = [
    ('numUsedVgprs', ctypes.c_uint32),
    ('numUsedSgprs', ctypes.c_uint32),
    ('ldsSizePerLocalWorkGroup', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('ldsUsageSizeInBytes', ctypes.c_uint64),
    ('scratchMemUsageInBytes', ctypes.c_uint64),
]

VkShaderResourceUsageAMD = struct_VkShaderResourceUsageAMD
class struct_VkShaderStatisticsInfoAMD(Structure):
    pass

struct_VkShaderStatisticsInfoAMD._pack_ = 1 # source:False
struct_VkShaderStatisticsInfoAMD._fields_ = [
    ('shaderStageMask', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('resourceUsage', VkShaderResourceUsageAMD),
    ('numPhysicalVgprs', ctypes.c_uint32),
    ('numPhysicalSgprs', ctypes.c_uint32),
    ('numAvailableVgprs', ctypes.c_uint32),
    ('numAvailableSgprs', ctypes.c_uint32),
    ('computeWorkGroupSize', ctypes.c_uint32 * 3),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkShaderStatisticsInfoAMD = struct_VkShaderStatisticsInfoAMD
PFN_vkGetShaderInfoAMD = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkPipeline_T), VkShaderStageFlagBits, VkShaderInfoTypeAMD, ctypes.POINTER(ctypes.c_uint64), ctypes.POINTER(None))
try:
    vkGetShaderInfoAMD = _libraries['FIXME_STUB'].vkGetShaderInfoAMD
    vkGetShaderInfoAMD.restype = VkResult
    vkGetShaderInfoAMD.argtypes = [VkDevice, VkPipeline, VkShaderStageFlagBits, VkShaderInfoTypeAMD, ctypes.POINTER(ctypes.c_uint64), ctypes.POINTER(None)]
except AttributeError:
    pass
class struct_VkPhysicalDeviceCornerSampledImageFeaturesNV(Structure):
    pass

struct_VkPhysicalDeviceCornerSampledImageFeaturesNV._pack_ = 1 # source:False
struct_VkPhysicalDeviceCornerSampledImageFeaturesNV._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('cornerSampledImage', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPhysicalDeviceCornerSampledImageFeaturesNV = struct_VkPhysicalDeviceCornerSampledImageFeaturesNV

# values for enumeration 'VkExternalMemoryHandleTypeFlagBitsNV'
VkExternalMemoryHandleTypeFlagBitsNV__enumvalues = {
    1: 'VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT_NV',
    2: 'VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_NV',
    4: 'VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_BIT_NV',
    8: 'VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_KMT_BIT_NV',
    2147483647: 'VK_EXTERNAL_MEMORY_HANDLE_TYPE_FLAG_BITS_MAX_ENUM_NV',
}
VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT_NV = 1
VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_NV = 2
VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_BIT_NV = 4
VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_KMT_BIT_NV = 8
VK_EXTERNAL_MEMORY_HANDLE_TYPE_FLAG_BITS_MAX_ENUM_NV = 2147483647
VkExternalMemoryHandleTypeFlagBitsNV = ctypes.c_uint32 # enum
VkExternalMemoryHandleTypeFlagsNV = ctypes.c_uint32

# values for enumeration 'VkExternalMemoryFeatureFlagBitsNV'
VkExternalMemoryFeatureFlagBitsNV__enumvalues = {
    1: 'VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT_NV',
    2: 'VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT_NV',
    4: 'VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT_NV',
    2147483647: 'VK_EXTERNAL_MEMORY_FEATURE_FLAG_BITS_MAX_ENUM_NV',
}
VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT_NV = 1
VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT_NV = 2
VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT_NV = 4
VK_EXTERNAL_MEMORY_FEATURE_FLAG_BITS_MAX_ENUM_NV = 2147483647
VkExternalMemoryFeatureFlagBitsNV = ctypes.c_uint32 # enum
VkExternalMemoryFeatureFlagsNV = ctypes.c_uint32
class struct_VkExternalImageFormatPropertiesNV(Structure):
    pass

struct_VkExternalImageFormatPropertiesNV._pack_ = 1 # source:False
struct_VkExternalImageFormatPropertiesNV._fields_ = [
    ('imageFormatProperties', VkImageFormatProperties),
    ('externalMemoryFeatures', ctypes.c_uint32),
    ('exportFromImportedHandleTypes', ctypes.c_uint32),
    ('compatibleHandleTypes', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
]

VkExternalImageFormatPropertiesNV = struct_VkExternalImageFormatPropertiesNV
PFN_vkGetPhysicalDeviceExternalImageFormatPropertiesNV = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkPhysicalDevice_T), VkFormat, VkImageType, VkImageTiling, ctypes.c_uint32, ctypes.c_uint32, ctypes.c_uint32, ctypes.POINTER(struct_VkExternalImageFormatPropertiesNV))
try:
    vkGetPhysicalDeviceExternalImageFormatPropertiesNV = _libraries['FIXME_STUB'].vkGetPhysicalDeviceExternalImageFormatPropertiesNV
    vkGetPhysicalDeviceExternalImageFormatPropertiesNV.restype = VkResult
    vkGetPhysicalDeviceExternalImageFormatPropertiesNV.argtypes = [VkPhysicalDevice, VkFormat, VkImageType, VkImageTiling, VkImageUsageFlags, VkImageCreateFlags, VkExternalMemoryHandleTypeFlagsNV, ctypes.POINTER(struct_VkExternalImageFormatPropertiesNV)]
except AttributeError:
    pass
class struct_VkExternalMemoryImageCreateInfoNV(Structure):
    pass

struct_VkExternalMemoryImageCreateInfoNV._pack_ = 1 # source:False
struct_VkExternalMemoryImageCreateInfoNV._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('handleTypes', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkExternalMemoryImageCreateInfoNV = struct_VkExternalMemoryImageCreateInfoNV
class struct_VkExportMemoryAllocateInfoNV(Structure):
    pass

struct_VkExportMemoryAllocateInfoNV._pack_ = 1 # source:False
struct_VkExportMemoryAllocateInfoNV._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('handleTypes', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkExportMemoryAllocateInfoNV = struct_VkExportMemoryAllocateInfoNV

# values for enumeration 'VkValidationCheckEXT'
VkValidationCheckEXT__enumvalues = {
    0: 'VK_VALIDATION_CHECK_ALL_EXT',
    1: 'VK_VALIDATION_CHECK_SHADERS_EXT',
    2147483647: 'VK_VALIDATION_CHECK_MAX_ENUM_EXT',
}
VK_VALIDATION_CHECK_ALL_EXT = 0
VK_VALIDATION_CHECK_SHADERS_EXT = 1
VK_VALIDATION_CHECK_MAX_ENUM_EXT = 2147483647
VkValidationCheckEXT = ctypes.c_uint32 # enum
class struct_VkValidationFlagsEXT(Structure):
    pass

struct_VkValidationFlagsEXT._pack_ = 1 # source:False
struct_VkValidationFlagsEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('disabledValidationCheckCount', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('pDisabledValidationChecks', ctypes.POINTER(VkValidationCheckEXT)),
]

VkValidationFlagsEXT = struct_VkValidationFlagsEXT
VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT = struct_VkPhysicalDeviceTextureCompressionASTCHDRFeatures
class struct_VkImageViewASTCDecodeModeEXT(Structure):
    pass

struct_VkImageViewASTCDecodeModeEXT._pack_ = 1 # source:False
struct_VkImageViewASTCDecodeModeEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('decodeMode', VkFormat),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkImageViewASTCDecodeModeEXT = struct_VkImageViewASTCDecodeModeEXT
class struct_VkPhysicalDeviceASTCDecodeFeaturesEXT(Structure):
    pass

struct_VkPhysicalDeviceASTCDecodeFeaturesEXT._pack_ = 1 # source:False
struct_VkPhysicalDeviceASTCDecodeFeaturesEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('decodeModeSharedExponent', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPhysicalDeviceASTCDecodeFeaturesEXT = struct_VkPhysicalDeviceASTCDecodeFeaturesEXT

# values for enumeration 'VkPipelineRobustnessBufferBehaviorEXT'
VkPipelineRobustnessBufferBehaviorEXT__enumvalues = {
    0: 'VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_DEVICE_DEFAULT_EXT',
    1: 'VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_DISABLED_EXT',
    2: 'VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_ROBUST_BUFFER_ACCESS_EXT',
    3: 'VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_ROBUST_BUFFER_ACCESS_2_EXT',
    2147483647: 'VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_MAX_ENUM_EXT',
}
VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_DEVICE_DEFAULT_EXT = 0
VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_DISABLED_EXT = 1
VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_ROBUST_BUFFER_ACCESS_EXT = 2
VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_ROBUST_BUFFER_ACCESS_2_EXT = 3
VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_MAX_ENUM_EXT = 2147483647
VkPipelineRobustnessBufferBehaviorEXT = ctypes.c_uint32 # enum

# values for enumeration 'VkPipelineRobustnessImageBehaviorEXT'
VkPipelineRobustnessImageBehaviorEXT__enumvalues = {
    0: 'VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_DEVICE_DEFAULT_EXT',
    1: 'VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_DISABLED_EXT',
    2: 'VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_ROBUST_IMAGE_ACCESS_EXT',
    3: 'VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_ROBUST_IMAGE_ACCESS_2_EXT',
    2147483647: 'VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_MAX_ENUM_EXT',
}
VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_DEVICE_DEFAULT_EXT = 0
VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_DISABLED_EXT = 1
VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_ROBUST_IMAGE_ACCESS_EXT = 2
VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_ROBUST_IMAGE_ACCESS_2_EXT = 3
VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_MAX_ENUM_EXT = 2147483647
VkPipelineRobustnessImageBehaviorEXT = ctypes.c_uint32 # enum
class struct_VkPhysicalDevicePipelineRobustnessFeaturesEXT(Structure):
    pass

struct_VkPhysicalDevicePipelineRobustnessFeaturesEXT._pack_ = 1 # source:False
struct_VkPhysicalDevicePipelineRobustnessFeaturesEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('pipelineRobustness', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPhysicalDevicePipelineRobustnessFeaturesEXT = struct_VkPhysicalDevicePipelineRobustnessFeaturesEXT
class struct_VkPhysicalDevicePipelineRobustnessPropertiesEXT(Structure):
    pass

struct_VkPhysicalDevicePipelineRobustnessPropertiesEXT._pack_ = 1 # source:False
struct_VkPhysicalDevicePipelineRobustnessPropertiesEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('defaultRobustnessStorageBuffers', VkPipelineRobustnessBufferBehaviorEXT),
    ('defaultRobustnessUniformBuffers', VkPipelineRobustnessBufferBehaviorEXT),
    ('defaultRobustnessVertexInputs', VkPipelineRobustnessBufferBehaviorEXT),
    ('defaultRobustnessImages', VkPipelineRobustnessImageBehaviorEXT),
]

VkPhysicalDevicePipelineRobustnessPropertiesEXT = struct_VkPhysicalDevicePipelineRobustnessPropertiesEXT
class struct_VkPipelineRobustnessCreateInfoEXT(Structure):
    pass

struct_VkPipelineRobustnessCreateInfoEXT._pack_ = 1 # source:False
struct_VkPipelineRobustnessCreateInfoEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('storageBuffers', VkPipelineRobustnessBufferBehaviorEXT),
    ('uniformBuffers', VkPipelineRobustnessBufferBehaviorEXT),
    ('vertexInputs', VkPipelineRobustnessBufferBehaviorEXT),
    ('images', VkPipelineRobustnessImageBehaviorEXT),
]

VkPipelineRobustnessCreateInfoEXT = struct_VkPipelineRobustnessCreateInfoEXT

# values for enumeration 'VkConditionalRenderingFlagBitsEXT'
VkConditionalRenderingFlagBitsEXT__enumvalues = {
    1: 'VK_CONDITIONAL_RENDERING_INVERTED_BIT_EXT',
    2147483647: 'VK_CONDITIONAL_RENDERING_FLAG_BITS_MAX_ENUM_EXT',
}
VK_CONDITIONAL_RENDERING_INVERTED_BIT_EXT = 1
VK_CONDITIONAL_RENDERING_FLAG_BITS_MAX_ENUM_EXT = 2147483647
VkConditionalRenderingFlagBitsEXT = ctypes.c_uint32 # enum
VkConditionalRenderingFlagsEXT = ctypes.c_uint32
class struct_VkConditionalRenderingBeginInfoEXT(Structure):
    pass

struct_VkConditionalRenderingBeginInfoEXT._pack_ = 1 # source:False
struct_VkConditionalRenderingBeginInfoEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('buffer', ctypes.POINTER(struct_VkBuffer_T)),
    ('offset', ctypes.c_uint64),
    ('flags', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkConditionalRenderingBeginInfoEXT = struct_VkConditionalRenderingBeginInfoEXT
class struct_VkPhysicalDeviceConditionalRenderingFeaturesEXT(Structure):
    pass

struct_VkPhysicalDeviceConditionalRenderingFeaturesEXT._pack_ = 1 # source:False
struct_VkPhysicalDeviceConditionalRenderingFeaturesEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('conditionalRendering', ctypes.c_uint32),
    ('inheritedConditionalRendering', ctypes.c_uint32),
]

VkPhysicalDeviceConditionalRenderingFeaturesEXT = struct_VkPhysicalDeviceConditionalRenderingFeaturesEXT
class struct_VkCommandBufferInheritanceConditionalRenderingInfoEXT(Structure):
    pass

struct_VkCommandBufferInheritanceConditionalRenderingInfoEXT._pack_ = 1 # source:False
struct_VkCommandBufferInheritanceConditionalRenderingInfoEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('conditionalRenderingEnable', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkCommandBufferInheritanceConditionalRenderingInfoEXT = struct_VkCommandBufferInheritanceConditionalRenderingInfoEXT
PFN_vkCmdBeginConditionalRenderingEXT = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.POINTER(struct_VkConditionalRenderingBeginInfoEXT))
PFN_vkCmdEndConditionalRenderingEXT = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T))
try:
    vkCmdBeginConditionalRenderingEXT = _libraries['FIXME_STUB'].vkCmdBeginConditionalRenderingEXT
    vkCmdBeginConditionalRenderingEXT.restype = None
    vkCmdBeginConditionalRenderingEXT.argtypes = [VkCommandBuffer, ctypes.POINTER(struct_VkConditionalRenderingBeginInfoEXT)]
except AttributeError:
    pass
try:
    vkCmdEndConditionalRenderingEXT = _libraries['FIXME_STUB'].vkCmdEndConditionalRenderingEXT
    vkCmdEndConditionalRenderingEXT.restype = None
    vkCmdEndConditionalRenderingEXT.argtypes = [VkCommandBuffer]
except AttributeError:
    pass
class struct_VkViewportWScalingNV(Structure):
    pass

struct_VkViewportWScalingNV._pack_ = 1 # source:False
struct_VkViewportWScalingNV._fields_ = [
    ('xcoeff', ctypes.c_float),
    ('ycoeff', ctypes.c_float),
]

VkViewportWScalingNV = struct_VkViewportWScalingNV
class struct_VkPipelineViewportWScalingStateCreateInfoNV(Structure):
    pass

struct_VkPipelineViewportWScalingStateCreateInfoNV._pack_ = 1 # source:False
struct_VkPipelineViewportWScalingStateCreateInfoNV._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('viewportWScalingEnable', ctypes.c_uint32),
    ('viewportCount', ctypes.c_uint32),
    ('pViewportWScalings', ctypes.POINTER(struct_VkViewportWScalingNV)),
]

VkPipelineViewportWScalingStateCreateInfoNV = struct_VkPipelineViewportWScalingStateCreateInfoNV
PFN_vkCmdSetViewportWScalingNV = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.c_uint32, ctypes.c_uint32, ctypes.POINTER(struct_VkViewportWScalingNV))
try:
    vkCmdSetViewportWScalingNV = _libraries['FIXME_STUB'].vkCmdSetViewportWScalingNV
    vkCmdSetViewportWScalingNV.restype = None
    vkCmdSetViewportWScalingNV.argtypes = [VkCommandBuffer, uint32_t, uint32_t, ctypes.POINTER(struct_VkViewportWScalingNV)]
except AttributeError:
    pass
PFN_vkReleaseDisplayEXT = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkPhysicalDevice_T), ctypes.POINTER(struct_VkDisplayKHR_T))
try:
    vkReleaseDisplayEXT = _libraries['FIXME_STUB'].vkReleaseDisplayEXT
    vkReleaseDisplayEXT.restype = VkResult
    vkReleaseDisplayEXT.argtypes = [VkPhysicalDevice, VkDisplayKHR]
except AttributeError:
    pass

# values for enumeration 'VkSurfaceCounterFlagBitsEXT'
VkSurfaceCounterFlagBitsEXT__enumvalues = {
    1: 'VK_SURFACE_COUNTER_VBLANK_BIT_EXT',
    1: 'VK_SURFACE_COUNTER_VBLANK_EXT',
    2147483647: 'VK_SURFACE_COUNTER_FLAG_BITS_MAX_ENUM_EXT',
}
VK_SURFACE_COUNTER_VBLANK_BIT_EXT = 1
VK_SURFACE_COUNTER_VBLANK_EXT = 1
VK_SURFACE_COUNTER_FLAG_BITS_MAX_ENUM_EXT = 2147483647
VkSurfaceCounterFlagBitsEXT = ctypes.c_uint32 # enum
VkSurfaceCounterFlagsEXT = ctypes.c_uint32
class struct_VkSurfaceCapabilities2EXT(Structure):
    pass

struct_VkSurfaceCapabilities2EXT._pack_ = 1 # source:False
struct_VkSurfaceCapabilities2EXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('minImageCount', ctypes.c_uint32),
    ('maxImageCount', ctypes.c_uint32),
    ('currentExtent', VkExtent2D),
    ('minImageExtent', VkExtent2D),
    ('maxImageExtent', VkExtent2D),
    ('maxImageArrayLayers', ctypes.c_uint32),
    ('supportedTransforms', ctypes.c_uint32),
    ('currentTransform', VkSurfaceTransformFlagBitsKHR),
    ('supportedCompositeAlpha', ctypes.c_uint32),
    ('supportedUsageFlags', ctypes.c_uint32),
    ('supportedSurfaceCounters', ctypes.c_uint32),
]

VkSurfaceCapabilities2EXT = struct_VkSurfaceCapabilities2EXT
PFN_vkGetPhysicalDeviceSurfaceCapabilities2EXT = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkPhysicalDevice_T), ctypes.POINTER(struct_VkSurfaceKHR_T), ctypes.POINTER(struct_VkSurfaceCapabilities2EXT))
try:
    vkGetPhysicalDeviceSurfaceCapabilities2EXT = _libraries['FIXME_STUB'].vkGetPhysicalDeviceSurfaceCapabilities2EXT
    vkGetPhysicalDeviceSurfaceCapabilities2EXT.restype = VkResult
    vkGetPhysicalDeviceSurfaceCapabilities2EXT.argtypes = [VkPhysicalDevice, VkSurfaceKHR, ctypes.POINTER(struct_VkSurfaceCapabilities2EXT)]
except AttributeError:
    pass

# values for enumeration 'VkDisplayPowerStateEXT'
VkDisplayPowerStateEXT__enumvalues = {
    0: 'VK_DISPLAY_POWER_STATE_OFF_EXT',
    1: 'VK_DISPLAY_POWER_STATE_SUSPEND_EXT',
    2: 'VK_DISPLAY_POWER_STATE_ON_EXT',
    2147483647: 'VK_DISPLAY_POWER_STATE_MAX_ENUM_EXT',
}
VK_DISPLAY_POWER_STATE_OFF_EXT = 0
VK_DISPLAY_POWER_STATE_SUSPEND_EXT = 1
VK_DISPLAY_POWER_STATE_ON_EXT = 2
VK_DISPLAY_POWER_STATE_MAX_ENUM_EXT = 2147483647
VkDisplayPowerStateEXT = ctypes.c_uint32 # enum

# values for enumeration 'VkDeviceEventTypeEXT'
VkDeviceEventTypeEXT__enumvalues = {
    0: 'VK_DEVICE_EVENT_TYPE_DISPLAY_HOTPLUG_EXT',
    2147483647: 'VK_DEVICE_EVENT_TYPE_MAX_ENUM_EXT',
}
VK_DEVICE_EVENT_TYPE_DISPLAY_HOTPLUG_EXT = 0
VK_DEVICE_EVENT_TYPE_MAX_ENUM_EXT = 2147483647
VkDeviceEventTypeEXT = ctypes.c_uint32 # enum

# values for enumeration 'VkDisplayEventTypeEXT'
VkDisplayEventTypeEXT__enumvalues = {
    0: 'VK_DISPLAY_EVENT_TYPE_FIRST_PIXEL_OUT_EXT',
    2147483647: 'VK_DISPLAY_EVENT_TYPE_MAX_ENUM_EXT',
}
VK_DISPLAY_EVENT_TYPE_FIRST_PIXEL_OUT_EXT = 0
VK_DISPLAY_EVENT_TYPE_MAX_ENUM_EXT = 2147483647
VkDisplayEventTypeEXT = ctypes.c_uint32 # enum
class struct_VkDisplayPowerInfoEXT(Structure):
    pass

struct_VkDisplayPowerInfoEXT._pack_ = 1 # source:False
struct_VkDisplayPowerInfoEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('powerState', VkDisplayPowerStateEXT),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkDisplayPowerInfoEXT = struct_VkDisplayPowerInfoEXT
class struct_VkDeviceEventInfoEXT(Structure):
    pass

struct_VkDeviceEventInfoEXT._pack_ = 1 # source:False
struct_VkDeviceEventInfoEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('deviceEvent', VkDeviceEventTypeEXT),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkDeviceEventInfoEXT = struct_VkDeviceEventInfoEXT
class struct_VkDisplayEventInfoEXT(Structure):
    pass

struct_VkDisplayEventInfoEXT._pack_ = 1 # source:False
struct_VkDisplayEventInfoEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('displayEvent', VkDisplayEventTypeEXT),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkDisplayEventInfoEXT = struct_VkDisplayEventInfoEXT
class struct_VkSwapchainCounterCreateInfoEXT(Structure):
    pass

struct_VkSwapchainCounterCreateInfoEXT._pack_ = 1 # source:False
struct_VkSwapchainCounterCreateInfoEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('surfaceCounters', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkSwapchainCounterCreateInfoEXT = struct_VkSwapchainCounterCreateInfoEXT
PFN_vkDisplayPowerControlEXT = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkDisplayKHR_T), ctypes.POINTER(struct_VkDisplayPowerInfoEXT))
PFN_vkRegisterDeviceEventEXT = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkDeviceEventInfoEXT), ctypes.POINTER(struct_VkAllocationCallbacks), ctypes.POINTER(ctypes.POINTER(struct_VkFence_T)))
PFN_vkRegisterDisplayEventEXT = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkDisplayKHR_T), ctypes.POINTER(struct_VkDisplayEventInfoEXT), ctypes.POINTER(struct_VkAllocationCallbacks), ctypes.POINTER(ctypes.POINTER(struct_VkFence_T)))
PFN_vkGetSwapchainCounterEXT = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkSwapchainKHR_T), VkSurfaceCounterFlagBitsEXT, ctypes.POINTER(ctypes.c_uint64))
try:
    vkDisplayPowerControlEXT = _libraries['FIXME_STUB'].vkDisplayPowerControlEXT
    vkDisplayPowerControlEXT.restype = VkResult
    vkDisplayPowerControlEXT.argtypes = [VkDevice, VkDisplayKHR, ctypes.POINTER(struct_VkDisplayPowerInfoEXT)]
except AttributeError:
    pass
try:
    vkRegisterDeviceEventEXT = _libraries['FIXME_STUB'].vkRegisterDeviceEventEXT
    vkRegisterDeviceEventEXT.restype = VkResult
    vkRegisterDeviceEventEXT.argtypes = [VkDevice, ctypes.POINTER(struct_VkDeviceEventInfoEXT), ctypes.POINTER(struct_VkAllocationCallbacks), ctypes.POINTER(ctypes.POINTER(struct_VkFence_T))]
except AttributeError:
    pass
try:
    vkRegisterDisplayEventEXT = _libraries['FIXME_STUB'].vkRegisterDisplayEventEXT
    vkRegisterDisplayEventEXT.restype = VkResult
    vkRegisterDisplayEventEXT.argtypes = [VkDevice, VkDisplayKHR, ctypes.POINTER(struct_VkDisplayEventInfoEXT), ctypes.POINTER(struct_VkAllocationCallbacks), ctypes.POINTER(ctypes.POINTER(struct_VkFence_T))]
except AttributeError:
    pass
try:
    vkGetSwapchainCounterEXT = _libraries['FIXME_STUB'].vkGetSwapchainCounterEXT
    vkGetSwapchainCounterEXT.restype = VkResult
    vkGetSwapchainCounterEXT.argtypes = [VkDevice, VkSwapchainKHR, VkSurfaceCounterFlagBitsEXT, ctypes.POINTER(ctypes.c_uint64)]
except AttributeError:
    pass
class struct_VkRefreshCycleDurationGOOGLE(Structure):
    pass

struct_VkRefreshCycleDurationGOOGLE._pack_ = 1 # source:False
struct_VkRefreshCycleDurationGOOGLE._fields_ = [
    ('refreshDuration', ctypes.c_uint64),
]

VkRefreshCycleDurationGOOGLE = struct_VkRefreshCycleDurationGOOGLE
class struct_VkPastPresentationTimingGOOGLE(Structure):
    pass

struct_VkPastPresentationTimingGOOGLE._pack_ = 1 # source:False
struct_VkPastPresentationTimingGOOGLE._fields_ = [
    ('presentID', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('desiredPresentTime', ctypes.c_uint64),
    ('actualPresentTime', ctypes.c_uint64),
    ('earliestPresentTime', ctypes.c_uint64),
    ('presentMargin', ctypes.c_uint64),
]

VkPastPresentationTimingGOOGLE = struct_VkPastPresentationTimingGOOGLE
class struct_VkPresentTimeGOOGLE(Structure):
    pass

struct_VkPresentTimeGOOGLE._pack_ = 1 # source:False
struct_VkPresentTimeGOOGLE._fields_ = [
    ('presentID', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('desiredPresentTime', ctypes.c_uint64),
]

VkPresentTimeGOOGLE = struct_VkPresentTimeGOOGLE
class struct_VkPresentTimesInfoGOOGLE(Structure):
    pass

struct_VkPresentTimesInfoGOOGLE._pack_ = 1 # source:False
struct_VkPresentTimesInfoGOOGLE._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('swapchainCount', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('pTimes', ctypes.POINTER(struct_VkPresentTimeGOOGLE)),
]

VkPresentTimesInfoGOOGLE = struct_VkPresentTimesInfoGOOGLE
PFN_vkGetRefreshCycleDurationGOOGLE = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkSwapchainKHR_T), ctypes.POINTER(struct_VkRefreshCycleDurationGOOGLE))
PFN_vkGetPastPresentationTimingGOOGLE = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkSwapchainKHR_T), ctypes.POINTER(ctypes.c_uint32), ctypes.POINTER(struct_VkPastPresentationTimingGOOGLE))
try:
    vkGetRefreshCycleDurationGOOGLE = _libraries['FIXME_STUB'].vkGetRefreshCycleDurationGOOGLE
    vkGetRefreshCycleDurationGOOGLE.restype = VkResult
    vkGetRefreshCycleDurationGOOGLE.argtypes = [VkDevice, VkSwapchainKHR, ctypes.POINTER(struct_VkRefreshCycleDurationGOOGLE)]
except AttributeError:
    pass
try:
    vkGetPastPresentationTimingGOOGLE = _libraries['FIXME_STUB'].vkGetPastPresentationTimingGOOGLE
    vkGetPastPresentationTimingGOOGLE.restype = VkResult
    vkGetPastPresentationTimingGOOGLE.argtypes = [VkDevice, VkSwapchainKHR, ctypes.POINTER(ctypes.c_uint32), ctypes.POINTER(struct_VkPastPresentationTimingGOOGLE)]
except AttributeError:
    pass
class struct_VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX(Structure):
    pass

struct_VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX._pack_ = 1 # source:False
struct_VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('perViewPositionAllComponents', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX = struct_VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX

# values for enumeration 'VkViewportCoordinateSwizzleNV'
VkViewportCoordinateSwizzleNV__enumvalues = {
    0: 'VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_X_NV',
    1: 'VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_X_NV',
    2: 'VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Y_NV',
    3: 'VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Y_NV',
    4: 'VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Z_NV',
    5: 'VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Z_NV',
    6: 'VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_W_NV',
    7: 'VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_W_NV',
    2147483647: 'VK_VIEWPORT_COORDINATE_SWIZZLE_MAX_ENUM_NV',
}
VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_X_NV = 0
VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_X_NV = 1
VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Y_NV = 2
VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Y_NV = 3
VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Z_NV = 4
VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Z_NV = 5
VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_W_NV = 6
VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_W_NV = 7
VK_VIEWPORT_COORDINATE_SWIZZLE_MAX_ENUM_NV = 2147483647
VkViewportCoordinateSwizzleNV = ctypes.c_uint32 # enum
VkPipelineViewportSwizzleStateCreateFlagsNV = ctypes.c_uint32
class struct_VkViewportSwizzleNV(Structure):
    _pack_ = 1 # source:False
    _fields_ = [
    ('x', VkViewportCoordinateSwizzleNV),
    ('y', VkViewportCoordinateSwizzleNV),
    ('z', VkViewportCoordinateSwizzleNV),
    ('w', VkViewportCoordinateSwizzleNV),
     ]

VkViewportSwizzleNV = struct_VkViewportSwizzleNV
class struct_VkPipelineViewportSwizzleStateCreateInfoNV(Structure):
    pass

struct_VkPipelineViewportSwizzleStateCreateInfoNV._pack_ = 1 # source:False
struct_VkPipelineViewportSwizzleStateCreateInfoNV._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('flags', ctypes.c_uint32),
    ('viewportCount', ctypes.c_uint32),
    ('pViewportSwizzles', ctypes.POINTER(struct_VkViewportSwizzleNV)),
]

VkPipelineViewportSwizzleStateCreateInfoNV = struct_VkPipelineViewportSwizzleStateCreateInfoNV

# values for enumeration 'VkDiscardRectangleModeEXT'
VkDiscardRectangleModeEXT__enumvalues = {
    0: 'VK_DISCARD_RECTANGLE_MODE_INCLUSIVE_EXT',
    1: 'VK_DISCARD_RECTANGLE_MODE_EXCLUSIVE_EXT',
    2147483647: 'VK_DISCARD_RECTANGLE_MODE_MAX_ENUM_EXT',
}
VK_DISCARD_RECTANGLE_MODE_INCLUSIVE_EXT = 0
VK_DISCARD_RECTANGLE_MODE_EXCLUSIVE_EXT = 1
VK_DISCARD_RECTANGLE_MODE_MAX_ENUM_EXT = 2147483647
VkDiscardRectangleModeEXT = ctypes.c_uint32 # enum
VkPipelineDiscardRectangleStateCreateFlagsEXT = ctypes.c_uint32
class struct_VkPhysicalDeviceDiscardRectanglePropertiesEXT(Structure):
    pass

struct_VkPhysicalDeviceDiscardRectanglePropertiesEXT._pack_ = 1 # source:False
struct_VkPhysicalDeviceDiscardRectanglePropertiesEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('maxDiscardRectangles', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPhysicalDeviceDiscardRectanglePropertiesEXT = struct_VkPhysicalDeviceDiscardRectanglePropertiesEXT
class struct_VkPipelineDiscardRectangleStateCreateInfoEXT(Structure):
    pass

struct_VkPipelineDiscardRectangleStateCreateInfoEXT._pack_ = 1 # source:False
struct_VkPipelineDiscardRectangleStateCreateInfoEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('flags', ctypes.c_uint32),
    ('discardRectangleMode', VkDiscardRectangleModeEXT),
    ('discardRectangleCount', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('pDiscardRectangles', ctypes.POINTER(struct_VkRect2D)),
]

VkPipelineDiscardRectangleStateCreateInfoEXT = struct_VkPipelineDiscardRectangleStateCreateInfoEXT
PFN_vkCmdSetDiscardRectangleEXT = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.c_uint32, ctypes.c_uint32, ctypes.POINTER(struct_VkRect2D))
PFN_vkCmdSetDiscardRectangleEnableEXT = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.c_uint32)
PFN_vkCmdSetDiscardRectangleModeEXT = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), VkDiscardRectangleModeEXT)
try:
    vkCmdSetDiscardRectangleEXT = _libraries['FIXME_STUB'].vkCmdSetDiscardRectangleEXT
    vkCmdSetDiscardRectangleEXT.restype = None
    vkCmdSetDiscardRectangleEXT.argtypes = [VkCommandBuffer, uint32_t, uint32_t, ctypes.POINTER(struct_VkRect2D)]
except AttributeError:
    pass
try:
    vkCmdSetDiscardRectangleEnableEXT = _libraries['FIXME_STUB'].vkCmdSetDiscardRectangleEnableEXT
    vkCmdSetDiscardRectangleEnableEXT.restype = None
    vkCmdSetDiscardRectangleEnableEXT.argtypes = [VkCommandBuffer, VkBool32]
except AttributeError:
    pass
try:
    vkCmdSetDiscardRectangleModeEXT = _libraries['FIXME_STUB'].vkCmdSetDiscardRectangleModeEXT
    vkCmdSetDiscardRectangleModeEXT.restype = None
    vkCmdSetDiscardRectangleModeEXT.argtypes = [VkCommandBuffer, VkDiscardRectangleModeEXT]
except AttributeError:
    pass

# values for enumeration 'VkConservativeRasterizationModeEXT'
VkConservativeRasterizationModeEXT__enumvalues = {
    0: 'VK_CONSERVATIVE_RASTERIZATION_MODE_DISABLED_EXT',
    1: 'VK_CONSERVATIVE_RASTERIZATION_MODE_OVERESTIMATE_EXT',
    2: 'VK_CONSERVATIVE_RASTERIZATION_MODE_UNDERESTIMATE_EXT',
    2147483647: 'VK_CONSERVATIVE_RASTERIZATION_MODE_MAX_ENUM_EXT',
}
VK_CONSERVATIVE_RASTERIZATION_MODE_DISABLED_EXT = 0
VK_CONSERVATIVE_RASTERIZATION_MODE_OVERESTIMATE_EXT = 1
VK_CONSERVATIVE_RASTERIZATION_MODE_UNDERESTIMATE_EXT = 2
VK_CONSERVATIVE_RASTERIZATION_MODE_MAX_ENUM_EXT = 2147483647
VkConservativeRasterizationModeEXT = ctypes.c_uint32 # enum
VkPipelineRasterizationConservativeStateCreateFlagsEXT = ctypes.c_uint32
class struct_VkPhysicalDeviceConservativeRasterizationPropertiesEXT(Structure):
    pass

struct_VkPhysicalDeviceConservativeRasterizationPropertiesEXT._pack_ = 1 # source:False
struct_VkPhysicalDeviceConservativeRasterizationPropertiesEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('primitiveOverestimationSize', ctypes.c_float),
    ('maxExtraPrimitiveOverestimationSize', ctypes.c_float),
    ('extraPrimitiveOverestimationSizeGranularity', ctypes.c_float),
    ('primitiveUnderestimation', ctypes.c_uint32),
    ('conservativePointAndLineRasterization', ctypes.c_uint32),
    ('degenerateTrianglesRasterized', ctypes.c_uint32),
    ('degenerateLinesRasterized', ctypes.c_uint32),
    ('fullyCoveredFragmentShaderInputVariable', ctypes.c_uint32),
    ('conservativeRasterizationPostDepthCoverage', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPhysicalDeviceConservativeRasterizationPropertiesEXT = struct_VkPhysicalDeviceConservativeRasterizationPropertiesEXT
class struct_VkPipelineRasterizationConservativeStateCreateInfoEXT(Structure):
    pass

struct_VkPipelineRasterizationConservativeStateCreateInfoEXT._pack_ = 1 # source:False
struct_VkPipelineRasterizationConservativeStateCreateInfoEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('flags', ctypes.c_uint32),
    ('conservativeRasterizationMode', VkConservativeRasterizationModeEXT),
    ('extraPrimitiveOverestimationSize', ctypes.c_float),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPipelineRasterizationConservativeStateCreateInfoEXT = struct_VkPipelineRasterizationConservativeStateCreateInfoEXT
VkPipelineRasterizationDepthClipStateCreateFlagsEXT = ctypes.c_uint32
class struct_VkPhysicalDeviceDepthClipEnableFeaturesEXT(Structure):
    pass

struct_VkPhysicalDeviceDepthClipEnableFeaturesEXT._pack_ = 1 # source:False
struct_VkPhysicalDeviceDepthClipEnableFeaturesEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('depthClipEnable', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPhysicalDeviceDepthClipEnableFeaturesEXT = struct_VkPhysicalDeviceDepthClipEnableFeaturesEXT
class struct_VkPipelineRasterizationDepthClipStateCreateInfoEXT(Structure):
    pass

struct_VkPipelineRasterizationDepthClipStateCreateInfoEXT._pack_ = 1 # source:False
struct_VkPipelineRasterizationDepthClipStateCreateInfoEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('flags', ctypes.c_uint32),
    ('depthClipEnable', ctypes.c_uint32),
]

VkPipelineRasterizationDepthClipStateCreateInfoEXT = struct_VkPipelineRasterizationDepthClipStateCreateInfoEXT
class struct_VkXYColorEXT(Structure):
    pass

struct_VkXYColorEXT._pack_ = 1 # source:False
struct_VkXYColorEXT._fields_ = [
    ('x', ctypes.c_float),
    ('y', ctypes.c_float),
]

VkXYColorEXT = struct_VkXYColorEXT
class struct_VkHdrMetadataEXT(Structure):
    pass

struct_VkHdrMetadataEXT._pack_ = 1 # source:False
struct_VkHdrMetadataEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('displayPrimaryRed', VkXYColorEXT),
    ('displayPrimaryGreen', VkXYColorEXT),
    ('displayPrimaryBlue', VkXYColorEXT),
    ('whitePoint', VkXYColorEXT),
    ('maxLuminance', ctypes.c_float),
    ('minLuminance', ctypes.c_float),
    ('maxContentLightLevel', ctypes.c_float),
    ('maxFrameAverageLightLevel', ctypes.c_float),
]

VkHdrMetadataEXT = struct_VkHdrMetadataEXT
PFN_vkSetHdrMetadataEXT = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkDevice_T), ctypes.c_uint32, ctypes.POINTER(ctypes.POINTER(struct_VkSwapchainKHR_T)), ctypes.POINTER(struct_VkHdrMetadataEXT))
try:
    vkSetHdrMetadataEXT = _libraries['FIXME_STUB'].vkSetHdrMetadataEXT
    vkSetHdrMetadataEXT.restype = None
    vkSetHdrMetadataEXT.argtypes = [VkDevice, uint32_t, ctypes.POINTER(ctypes.POINTER(struct_VkSwapchainKHR_T)), ctypes.POINTER(struct_VkHdrMetadataEXT)]
except AttributeError:
    pass
class struct_VkPhysicalDeviceRelaxedLineRasterizationFeaturesIMG(Structure):
    pass

struct_VkPhysicalDeviceRelaxedLineRasterizationFeaturesIMG._pack_ = 1 # source:False
struct_VkPhysicalDeviceRelaxedLineRasterizationFeaturesIMG._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('relaxedLineRasterization', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPhysicalDeviceRelaxedLineRasterizationFeaturesIMG = struct_VkPhysicalDeviceRelaxedLineRasterizationFeaturesIMG
class struct_VkDebugUtilsMessengerEXT_T(Structure):
    pass

VkDebugUtilsMessengerEXT = ctypes.POINTER(struct_VkDebugUtilsMessengerEXT_T)
VkDebugUtilsMessengerCallbackDataFlagsEXT = ctypes.c_uint32

# values for enumeration 'VkDebugUtilsMessageSeverityFlagBitsEXT'
VkDebugUtilsMessageSeverityFlagBitsEXT__enumvalues = {
    1: 'VK_DEBUG_UTILS_MESSAGE_SEVERITY_VERBOSE_BIT_EXT',
    16: 'VK_DEBUG_UTILS_MESSAGE_SEVERITY_INFO_BIT_EXT',
    256: 'VK_DEBUG_UTILS_MESSAGE_SEVERITY_WARNING_BIT_EXT',
    4096: 'VK_DEBUG_UTILS_MESSAGE_SEVERITY_ERROR_BIT_EXT',
    2147483647: 'VK_DEBUG_UTILS_MESSAGE_SEVERITY_FLAG_BITS_MAX_ENUM_EXT',
}
VK_DEBUG_UTILS_MESSAGE_SEVERITY_VERBOSE_BIT_EXT = 1
VK_DEBUG_UTILS_MESSAGE_SEVERITY_INFO_BIT_EXT = 16
VK_DEBUG_UTILS_MESSAGE_SEVERITY_WARNING_BIT_EXT = 256
VK_DEBUG_UTILS_MESSAGE_SEVERITY_ERROR_BIT_EXT = 4096
VK_DEBUG_UTILS_MESSAGE_SEVERITY_FLAG_BITS_MAX_ENUM_EXT = 2147483647
VkDebugUtilsMessageSeverityFlagBitsEXT = ctypes.c_uint32 # enum

# values for enumeration 'VkDebugUtilsMessageTypeFlagBitsEXT'
VkDebugUtilsMessageTypeFlagBitsEXT__enumvalues = {
    1: 'VK_DEBUG_UTILS_MESSAGE_TYPE_GENERAL_BIT_EXT',
    2: 'VK_DEBUG_UTILS_MESSAGE_TYPE_VALIDATION_BIT_EXT',
    4: 'VK_DEBUG_UTILS_MESSAGE_TYPE_PERFORMANCE_BIT_EXT',
    8: 'VK_DEBUG_UTILS_MESSAGE_TYPE_DEVICE_ADDRESS_BINDING_BIT_EXT',
    2147483647: 'VK_DEBUG_UTILS_MESSAGE_TYPE_FLAG_BITS_MAX_ENUM_EXT',
}
VK_DEBUG_UTILS_MESSAGE_TYPE_GENERAL_BIT_EXT = 1
VK_DEBUG_UTILS_MESSAGE_TYPE_VALIDATION_BIT_EXT = 2
VK_DEBUG_UTILS_MESSAGE_TYPE_PERFORMANCE_BIT_EXT = 4
VK_DEBUG_UTILS_MESSAGE_TYPE_DEVICE_ADDRESS_BINDING_BIT_EXT = 8
VK_DEBUG_UTILS_MESSAGE_TYPE_FLAG_BITS_MAX_ENUM_EXT = 2147483647
VkDebugUtilsMessageTypeFlagBitsEXT = ctypes.c_uint32 # enum
VkDebugUtilsMessageTypeFlagsEXT = ctypes.c_uint32
VkDebugUtilsMessageSeverityFlagsEXT = ctypes.c_uint32
VkDebugUtilsMessengerCreateFlagsEXT = ctypes.c_uint32
class struct_VkDebugUtilsLabelEXT(Structure):
    pass

struct_VkDebugUtilsLabelEXT._pack_ = 1 # source:False
struct_VkDebugUtilsLabelEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('pLabelName', ctypes.POINTER(ctypes.c_char)),
    ('color', ctypes.c_float * 4),
]

VkDebugUtilsLabelEXT = struct_VkDebugUtilsLabelEXT
class struct_VkDebugUtilsObjectNameInfoEXT(Structure):
    pass

struct_VkDebugUtilsObjectNameInfoEXT._pack_ = 1 # source:False
struct_VkDebugUtilsObjectNameInfoEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('objectType', VkObjectType),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('objectHandle', ctypes.c_uint64),
    ('pObjectName', ctypes.POINTER(ctypes.c_char)),
]

VkDebugUtilsObjectNameInfoEXT = struct_VkDebugUtilsObjectNameInfoEXT
class struct_VkDebugUtilsMessengerCallbackDataEXT(Structure):
    pass

struct_VkDebugUtilsMessengerCallbackDataEXT._pack_ = 1 # source:False
struct_VkDebugUtilsMessengerCallbackDataEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('flags', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('pMessageIdName', ctypes.POINTER(ctypes.c_char)),
    ('messageIdNumber', ctypes.c_int32),
    ('PADDING_2', ctypes.c_ubyte * 4),
    ('pMessage', ctypes.POINTER(ctypes.c_char)),
    ('queueLabelCount', ctypes.c_uint32),
    ('PADDING_3', ctypes.c_ubyte * 4),
    ('pQueueLabels', ctypes.POINTER(struct_VkDebugUtilsLabelEXT)),
    ('cmdBufLabelCount', ctypes.c_uint32),
    ('PADDING_4', ctypes.c_ubyte * 4),
    ('pCmdBufLabels', ctypes.POINTER(struct_VkDebugUtilsLabelEXT)),
    ('objectCount', ctypes.c_uint32),
    ('PADDING_5', ctypes.c_ubyte * 4),
    ('pObjects', ctypes.POINTER(struct_VkDebugUtilsObjectNameInfoEXT)),
]

VkDebugUtilsMessengerCallbackDataEXT = struct_VkDebugUtilsMessengerCallbackDataEXT
PFN_vkDebugUtilsMessengerCallbackEXT = ctypes.CFUNCTYPE(ctypes.c_uint32, VkDebugUtilsMessageSeverityFlagBitsEXT, ctypes.c_uint32, ctypes.POINTER(struct_VkDebugUtilsMessengerCallbackDataEXT), ctypes.POINTER(None))
class struct_VkDebugUtilsMessengerCreateInfoEXT(Structure):
    pass

struct_VkDebugUtilsMessengerCreateInfoEXT._pack_ = 1 # source:False
struct_VkDebugUtilsMessengerCreateInfoEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('flags', ctypes.c_uint32),
    ('messageSeverity', ctypes.c_uint32),
    ('messageType', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('pfnUserCallback', ctypes.CFUNCTYPE(ctypes.c_uint32, VkDebugUtilsMessageSeverityFlagBitsEXT, ctypes.c_uint32, ctypes.POINTER(struct_VkDebugUtilsMessengerCallbackDataEXT), ctypes.POINTER(None))),
    ('pUserData', ctypes.POINTER(None)),
]

VkDebugUtilsMessengerCreateInfoEXT = struct_VkDebugUtilsMessengerCreateInfoEXT
class struct_VkDebugUtilsObjectTagInfoEXT(Structure):
    pass

struct_VkDebugUtilsObjectTagInfoEXT._pack_ = 1 # source:False
struct_VkDebugUtilsObjectTagInfoEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('objectType', VkObjectType),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('objectHandle', ctypes.c_uint64),
    ('tagName', ctypes.c_uint64),
    ('tagSize', ctypes.c_uint64),
    ('pTag', ctypes.POINTER(None)),
]

VkDebugUtilsObjectTagInfoEXT = struct_VkDebugUtilsObjectTagInfoEXT
PFN_vkSetDebugUtilsObjectNameEXT = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkDebugUtilsObjectNameInfoEXT))
PFN_vkSetDebugUtilsObjectTagEXT = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkDebugUtilsObjectTagInfoEXT))
PFN_vkQueueBeginDebugUtilsLabelEXT = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkQueue_T), ctypes.POINTER(struct_VkDebugUtilsLabelEXT))
PFN_vkQueueEndDebugUtilsLabelEXT = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkQueue_T))
PFN_vkQueueInsertDebugUtilsLabelEXT = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkQueue_T), ctypes.POINTER(struct_VkDebugUtilsLabelEXT))
PFN_vkCmdBeginDebugUtilsLabelEXT = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.POINTER(struct_VkDebugUtilsLabelEXT))
PFN_vkCmdEndDebugUtilsLabelEXT = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T))
PFN_vkCmdInsertDebugUtilsLabelEXT = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.POINTER(struct_VkDebugUtilsLabelEXT))
PFN_vkCreateDebugUtilsMessengerEXT = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkInstance_T), ctypes.POINTER(struct_VkDebugUtilsMessengerCreateInfoEXT), ctypes.POINTER(struct_VkAllocationCallbacks), ctypes.POINTER(ctypes.POINTER(struct_VkDebugUtilsMessengerEXT_T)))
PFN_vkDestroyDebugUtilsMessengerEXT = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkInstance_T), ctypes.POINTER(struct_VkDebugUtilsMessengerEXT_T), ctypes.POINTER(struct_VkAllocationCallbacks))
PFN_vkSubmitDebugUtilsMessageEXT = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkInstance_T), VkDebugUtilsMessageSeverityFlagBitsEXT, ctypes.c_uint32, ctypes.POINTER(struct_VkDebugUtilsMessengerCallbackDataEXT))
try:
    vkSetDebugUtilsObjectNameEXT = _libraries['FIXME_STUB'].vkSetDebugUtilsObjectNameEXT
    vkSetDebugUtilsObjectNameEXT.restype = VkResult
    vkSetDebugUtilsObjectNameEXT.argtypes = [VkDevice, ctypes.POINTER(struct_VkDebugUtilsObjectNameInfoEXT)]
except AttributeError:
    pass
try:
    vkSetDebugUtilsObjectTagEXT = _libraries['FIXME_STUB'].vkSetDebugUtilsObjectTagEXT
    vkSetDebugUtilsObjectTagEXT.restype = VkResult
    vkSetDebugUtilsObjectTagEXT.argtypes = [VkDevice, ctypes.POINTER(struct_VkDebugUtilsObjectTagInfoEXT)]
except AttributeError:
    pass
try:
    vkQueueBeginDebugUtilsLabelEXT = _libraries['FIXME_STUB'].vkQueueBeginDebugUtilsLabelEXT
    vkQueueBeginDebugUtilsLabelEXT.restype = None
    vkQueueBeginDebugUtilsLabelEXT.argtypes = [VkQueue, ctypes.POINTER(struct_VkDebugUtilsLabelEXT)]
except AttributeError:
    pass
try:
    vkQueueEndDebugUtilsLabelEXT = _libraries['FIXME_STUB'].vkQueueEndDebugUtilsLabelEXT
    vkQueueEndDebugUtilsLabelEXT.restype = None
    vkQueueEndDebugUtilsLabelEXT.argtypes = [VkQueue]
except AttributeError:
    pass
try:
    vkQueueInsertDebugUtilsLabelEXT = _libraries['FIXME_STUB'].vkQueueInsertDebugUtilsLabelEXT
    vkQueueInsertDebugUtilsLabelEXT.restype = None
    vkQueueInsertDebugUtilsLabelEXT.argtypes = [VkQueue, ctypes.POINTER(struct_VkDebugUtilsLabelEXT)]
except AttributeError:
    pass
try:
    vkCmdBeginDebugUtilsLabelEXT = _libraries['FIXME_STUB'].vkCmdBeginDebugUtilsLabelEXT
    vkCmdBeginDebugUtilsLabelEXT.restype = None
    vkCmdBeginDebugUtilsLabelEXT.argtypes = [VkCommandBuffer, ctypes.POINTER(struct_VkDebugUtilsLabelEXT)]
except AttributeError:
    pass
try:
    vkCmdEndDebugUtilsLabelEXT = _libraries['FIXME_STUB'].vkCmdEndDebugUtilsLabelEXT
    vkCmdEndDebugUtilsLabelEXT.restype = None
    vkCmdEndDebugUtilsLabelEXT.argtypes = [VkCommandBuffer]
except AttributeError:
    pass
try:
    vkCmdInsertDebugUtilsLabelEXT = _libraries['FIXME_STUB'].vkCmdInsertDebugUtilsLabelEXT
    vkCmdInsertDebugUtilsLabelEXT.restype = None
    vkCmdInsertDebugUtilsLabelEXT.argtypes = [VkCommandBuffer, ctypes.POINTER(struct_VkDebugUtilsLabelEXT)]
except AttributeError:
    pass
try:
    vkCreateDebugUtilsMessengerEXT = _libraries['FIXME_STUB'].vkCreateDebugUtilsMessengerEXT
    vkCreateDebugUtilsMessengerEXT.restype = VkResult
    vkCreateDebugUtilsMessengerEXT.argtypes = [VkInstance, ctypes.POINTER(struct_VkDebugUtilsMessengerCreateInfoEXT), ctypes.POINTER(struct_VkAllocationCallbacks), ctypes.POINTER(ctypes.POINTER(struct_VkDebugUtilsMessengerEXT_T))]
except AttributeError:
    pass
try:
    vkDestroyDebugUtilsMessengerEXT = _libraries['FIXME_STUB'].vkDestroyDebugUtilsMessengerEXT
    vkDestroyDebugUtilsMessengerEXT.restype = None
    vkDestroyDebugUtilsMessengerEXT.argtypes = [VkInstance, VkDebugUtilsMessengerEXT, ctypes.POINTER(struct_VkAllocationCallbacks)]
except AttributeError:
    pass
try:
    vkSubmitDebugUtilsMessageEXT = _libraries['FIXME_STUB'].vkSubmitDebugUtilsMessageEXT
    vkSubmitDebugUtilsMessageEXT.restype = None
    vkSubmitDebugUtilsMessageEXT.argtypes = [VkInstance, VkDebugUtilsMessageSeverityFlagBitsEXT, VkDebugUtilsMessageTypeFlagsEXT, ctypes.POINTER(struct_VkDebugUtilsMessengerCallbackDataEXT)]
except AttributeError:
    pass
VkSamplerReductionModeEXT = VkSamplerReductionMode
VkSamplerReductionModeEXT__enumvalues = VkSamplerReductionMode__enumvalues
VkSamplerReductionModeCreateInfoEXT = struct_VkSamplerReductionModeCreateInfo
VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT = struct_VkPhysicalDeviceSamplerFilterMinmaxProperties
VkPhysicalDeviceInlineUniformBlockFeaturesEXT = struct_VkPhysicalDeviceInlineUniformBlockFeatures
VkPhysicalDeviceInlineUniformBlockPropertiesEXT = struct_VkPhysicalDeviceInlineUniformBlockProperties
VkWriteDescriptorSetInlineUniformBlockEXT = struct_VkWriteDescriptorSetInlineUniformBlock
VkDescriptorPoolInlineUniformBlockCreateInfoEXT = struct_VkDescriptorPoolInlineUniformBlockCreateInfo
class struct_VkSampleLocationEXT(Structure):
    pass

struct_VkSampleLocationEXT._pack_ = 1 # source:False
struct_VkSampleLocationEXT._fields_ = [
    ('x', ctypes.c_float),
    ('y', ctypes.c_float),
]

VkSampleLocationEXT = struct_VkSampleLocationEXT
class struct_VkSampleLocationsInfoEXT(Structure):
    pass

struct_VkSampleLocationsInfoEXT._pack_ = 1 # source:False
struct_VkSampleLocationsInfoEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('sampleLocationsPerPixel', VkSampleCountFlagBits),
    ('sampleLocationGridSize', VkExtent2D),
    ('sampleLocationsCount', ctypes.c_uint32),
    ('pSampleLocations', ctypes.POINTER(struct_VkSampleLocationEXT)),
]

VkSampleLocationsInfoEXT = struct_VkSampleLocationsInfoEXT
class struct_VkAttachmentSampleLocationsEXT(Structure):
    pass

struct_VkAttachmentSampleLocationsEXT._pack_ = 1 # source:False
struct_VkAttachmentSampleLocationsEXT._fields_ = [
    ('attachmentIndex', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('sampleLocationsInfo', VkSampleLocationsInfoEXT),
]

VkAttachmentSampleLocationsEXT = struct_VkAttachmentSampleLocationsEXT
class struct_VkSubpassSampleLocationsEXT(Structure):
    pass

struct_VkSubpassSampleLocationsEXT._pack_ = 1 # source:False
struct_VkSubpassSampleLocationsEXT._fields_ = [
    ('subpassIndex', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('sampleLocationsInfo', VkSampleLocationsInfoEXT),
]

VkSubpassSampleLocationsEXT = struct_VkSubpassSampleLocationsEXT
class struct_VkRenderPassSampleLocationsBeginInfoEXT(Structure):
    pass

struct_VkRenderPassSampleLocationsBeginInfoEXT._pack_ = 1 # source:False
struct_VkRenderPassSampleLocationsBeginInfoEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('attachmentInitialSampleLocationsCount', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('pAttachmentInitialSampleLocations', ctypes.POINTER(struct_VkAttachmentSampleLocationsEXT)),
    ('postSubpassSampleLocationsCount', ctypes.c_uint32),
    ('PADDING_2', ctypes.c_ubyte * 4),
    ('pPostSubpassSampleLocations', ctypes.POINTER(struct_VkSubpassSampleLocationsEXT)),
]

VkRenderPassSampleLocationsBeginInfoEXT = struct_VkRenderPassSampleLocationsBeginInfoEXT
class struct_VkPipelineSampleLocationsStateCreateInfoEXT(Structure):
    pass

struct_VkPipelineSampleLocationsStateCreateInfoEXT._pack_ = 1 # source:False
struct_VkPipelineSampleLocationsStateCreateInfoEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('sampleLocationsEnable', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('sampleLocationsInfo', VkSampleLocationsInfoEXT),
]

VkPipelineSampleLocationsStateCreateInfoEXT = struct_VkPipelineSampleLocationsStateCreateInfoEXT
class struct_VkPhysicalDeviceSampleLocationsPropertiesEXT(Structure):
    pass

struct_VkPhysicalDeviceSampleLocationsPropertiesEXT._pack_ = 1 # source:False
struct_VkPhysicalDeviceSampleLocationsPropertiesEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('sampleLocationSampleCounts', ctypes.c_uint32),
    ('maxSampleLocationGridSize', VkExtent2D),
    ('sampleLocationCoordinateRange', ctypes.c_float * 2),
    ('sampleLocationSubPixelBits', ctypes.c_uint32),
    ('variableSampleLocations', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPhysicalDeviceSampleLocationsPropertiesEXT = struct_VkPhysicalDeviceSampleLocationsPropertiesEXT
class struct_VkMultisamplePropertiesEXT(Structure):
    pass

struct_VkMultisamplePropertiesEXT._pack_ = 1 # source:False
struct_VkMultisamplePropertiesEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('maxSampleLocationGridSize', VkExtent2D),
]

VkMultisamplePropertiesEXT = struct_VkMultisamplePropertiesEXT
PFN_vkCmdSetSampleLocationsEXT = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.POINTER(struct_VkSampleLocationsInfoEXT))
PFN_vkGetPhysicalDeviceMultisamplePropertiesEXT = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkPhysicalDevice_T), VkSampleCountFlagBits, ctypes.POINTER(struct_VkMultisamplePropertiesEXT))
try:
    vkCmdSetSampleLocationsEXT = _libraries['FIXME_STUB'].vkCmdSetSampleLocationsEXT
    vkCmdSetSampleLocationsEXT.restype = None
    vkCmdSetSampleLocationsEXT.argtypes = [VkCommandBuffer, ctypes.POINTER(struct_VkSampleLocationsInfoEXT)]
except AttributeError:
    pass
try:
    vkGetPhysicalDeviceMultisamplePropertiesEXT = _libraries['FIXME_STUB'].vkGetPhysicalDeviceMultisamplePropertiesEXT
    vkGetPhysicalDeviceMultisamplePropertiesEXT.restype = None
    vkGetPhysicalDeviceMultisamplePropertiesEXT.argtypes = [VkPhysicalDevice, VkSampleCountFlagBits, ctypes.POINTER(struct_VkMultisamplePropertiesEXT)]
except AttributeError:
    pass

# values for enumeration 'VkBlendOverlapEXT'
VkBlendOverlapEXT__enumvalues = {
    0: 'VK_BLEND_OVERLAP_UNCORRELATED_EXT',
    1: 'VK_BLEND_OVERLAP_DISJOINT_EXT',
    2: 'VK_BLEND_OVERLAP_CONJOINT_EXT',
    2147483647: 'VK_BLEND_OVERLAP_MAX_ENUM_EXT',
}
VK_BLEND_OVERLAP_UNCORRELATED_EXT = 0
VK_BLEND_OVERLAP_DISJOINT_EXT = 1
VK_BLEND_OVERLAP_CONJOINT_EXT = 2
VK_BLEND_OVERLAP_MAX_ENUM_EXT = 2147483647
VkBlendOverlapEXT = ctypes.c_uint32 # enum
class struct_VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT(Structure):
    pass

struct_VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT._pack_ = 1 # source:False
struct_VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('advancedBlendCoherentOperations', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT = struct_VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT
class struct_VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT(Structure):
    pass

struct_VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT._pack_ = 1 # source:False
struct_VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('advancedBlendMaxColorAttachments', ctypes.c_uint32),
    ('advancedBlendIndependentBlend', ctypes.c_uint32),
    ('advancedBlendNonPremultipliedSrcColor', ctypes.c_uint32),
    ('advancedBlendNonPremultipliedDstColor', ctypes.c_uint32),
    ('advancedBlendCorrelatedOverlap', ctypes.c_uint32),
    ('advancedBlendAllOperations', ctypes.c_uint32),
]

VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT = struct_VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT
class struct_VkPipelineColorBlendAdvancedStateCreateInfoEXT(Structure):
    pass

struct_VkPipelineColorBlendAdvancedStateCreateInfoEXT._pack_ = 1 # source:False
struct_VkPipelineColorBlendAdvancedStateCreateInfoEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('srcPremultiplied', ctypes.c_uint32),
    ('dstPremultiplied', ctypes.c_uint32),
    ('blendOverlap', VkBlendOverlapEXT),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPipelineColorBlendAdvancedStateCreateInfoEXT = struct_VkPipelineColorBlendAdvancedStateCreateInfoEXT
VkPipelineCoverageToColorStateCreateFlagsNV = ctypes.c_uint32
class struct_VkPipelineCoverageToColorStateCreateInfoNV(Structure):
    pass

struct_VkPipelineCoverageToColorStateCreateInfoNV._pack_ = 1 # source:False
struct_VkPipelineCoverageToColorStateCreateInfoNV._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('flags', ctypes.c_uint32),
    ('coverageToColorEnable', ctypes.c_uint32),
    ('coverageToColorLocation', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPipelineCoverageToColorStateCreateInfoNV = struct_VkPipelineCoverageToColorStateCreateInfoNV

# values for enumeration 'VkCoverageModulationModeNV'
VkCoverageModulationModeNV__enumvalues = {
    0: 'VK_COVERAGE_MODULATION_MODE_NONE_NV',
    1: 'VK_COVERAGE_MODULATION_MODE_RGB_NV',
    2: 'VK_COVERAGE_MODULATION_MODE_ALPHA_NV',
    3: 'VK_COVERAGE_MODULATION_MODE_RGBA_NV',
    2147483647: 'VK_COVERAGE_MODULATION_MODE_MAX_ENUM_NV',
}
VK_COVERAGE_MODULATION_MODE_NONE_NV = 0
VK_COVERAGE_MODULATION_MODE_RGB_NV = 1
VK_COVERAGE_MODULATION_MODE_ALPHA_NV = 2
VK_COVERAGE_MODULATION_MODE_RGBA_NV = 3
VK_COVERAGE_MODULATION_MODE_MAX_ENUM_NV = 2147483647
VkCoverageModulationModeNV = ctypes.c_uint32 # enum
VkPipelineCoverageModulationStateCreateFlagsNV = ctypes.c_uint32
class struct_VkPipelineCoverageModulationStateCreateInfoNV(Structure):
    pass

struct_VkPipelineCoverageModulationStateCreateInfoNV._pack_ = 1 # source:False
struct_VkPipelineCoverageModulationStateCreateInfoNV._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('flags', ctypes.c_uint32),
    ('coverageModulationMode', VkCoverageModulationModeNV),
    ('coverageModulationTableEnable', ctypes.c_uint32),
    ('coverageModulationTableCount', ctypes.c_uint32),
    ('pCoverageModulationTable', ctypes.POINTER(ctypes.c_float)),
]

VkPipelineCoverageModulationStateCreateInfoNV = struct_VkPipelineCoverageModulationStateCreateInfoNV
class struct_VkPhysicalDeviceShaderSMBuiltinsPropertiesNV(Structure):
    pass

struct_VkPhysicalDeviceShaderSMBuiltinsPropertiesNV._pack_ = 1 # source:False
struct_VkPhysicalDeviceShaderSMBuiltinsPropertiesNV._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('shaderSMCount', ctypes.c_uint32),
    ('shaderWarpsPerSM', ctypes.c_uint32),
]

VkPhysicalDeviceShaderSMBuiltinsPropertiesNV = struct_VkPhysicalDeviceShaderSMBuiltinsPropertiesNV
class struct_VkPhysicalDeviceShaderSMBuiltinsFeaturesNV(Structure):
    pass

struct_VkPhysicalDeviceShaderSMBuiltinsFeaturesNV._pack_ = 1 # source:False
struct_VkPhysicalDeviceShaderSMBuiltinsFeaturesNV._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('shaderSMBuiltins', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPhysicalDeviceShaderSMBuiltinsFeaturesNV = struct_VkPhysicalDeviceShaderSMBuiltinsFeaturesNV
class struct_VkDrmFormatModifierPropertiesEXT(Structure):
    pass

struct_VkDrmFormatModifierPropertiesEXT._pack_ = 1 # source:False
struct_VkDrmFormatModifierPropertiesEXT._fields_ = [
    ('drmFormatModifier', ctypes.c_uint64),
    ('drmFormatModifierPlaneCount', ctypes.c_uint32),
    ('drmFormatModifierTilingFeatures', ctypes.c_uint32),
]

VkDrmFormatModifierPropertiesEXT = struct_VkDrmFormatModifierPropertiesEXT
class struct_VkDrmFormatModifierPropertiesListEXT(Structure):
    pass

struct_VkDrmFormatModifierPropertiesListEXT._pack_ = 1 # source:False
struct_VkDrmFormatModifierPropertiesListEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('drmFormatModifierCount', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('pDrmFormatModifierProperties', ctypes.POINTER(struct_VkDrmFormatModifierPropertiesEXT)),
]

VkDrmFormatModifierPropertiesListEXT = struct_VkDrmFormatModifierPropertiesListEXT
class struct_VkPhysicalDeviceImageDrmFormatModifierInfoEXT(Structure):
    pass

struct_VkPhysicalDeviceImageDrmFormatModifierInfoEXT._pack_ = 1 # source:False
struct_VkPhysicalDeviceImageDrmFormatModifierInfoEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('drmFormatModifier', ctypes.c_uint64),
    ('sharingMode', VkSharingMode),
    ('queueFamilyIndexCount', ctypes.c_uint32),
    ('pQueueFamilyIndices', ctypes.POINTER(ctypes.c_uint32)),
]

VkPhysicalDeviceImageDrmFormatModifierInfoEXT = struct_VkPhysicalDeviceImageDrmFormatModifierInfoEXT
class struct_VkImageDrmFormatModifierListCreateInfoEXT(Structure):
    pass

struct_VkImageDrmFormatModifierListCreateInfoEXT._pack_ = 1 # source:False
struct_VkImageDrmFormatModifierListCreateInfoEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('drmFormatModifierCount', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('pDrmFormatModifiers', ctypes.POINTER(ctypes.c_uint64)),
]

VkImageDrmFormatModifierListCreateInfoEXT = struct_VkImageDrmFormatModifierListCreateInfoEXT
class struct_VkImageDrmFormatModifierExplicitCreateInfoEXT(Structure):
    pass

struct_VkImageDrmFormatModifierExplicitCreateInfoEXT._pack_ = 1 # source:False
struct_VkImageDrmFormatModifierExplicitCreateInfoEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('drmFormatModifier', ctypes.c_uint64),
    ('drmFormatModifierPlaneCount', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('pPlaneLayouts', ctypes.POINTER(struct_VkSubresourceLayout)),
]

VkImageDrmFormatModifierExplicitCreateInfoEXT = struct_VkImageDrmFormatModifierExplicitCreateInfoEXT
class struct_VkImageDrmFormatModifierPropertiesEXT(Structure):
    pass

struct_VkImageDrmFormatModifierPropertiesEXT._pack_ = 1 # source:False
struct_VkImageDrmFormatModifierPropertiesEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('drmFormatModifier', ctypes.c_uint64),
]

VkImageDrmFormatModifierPropertiesEXT = struct_VkImageDrmFormatModifierPropertiesEXT
class struct_VkDrmFormatModifierProperties2EXT(Structure):
    pass

struct_VkDrmFormatModifierProperties2EXT._pack_ = 1 # source:False
struct_VkDrmFormatModifierProperties2EXT._fields_ = [
    ('drmFormatModifier', ctypes.c_uint64),
    ('drmFormatModifierPlaneCount', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('drmFormatModifierTilingFeatures', ctypes.c_uint64),
]

VkDrmFormatModifierProperties2EXT = struct_VkDrmFormatModifierProperties2EXT
class struct_VkDrmFormatModifierPropertiesList2EXT(Structure):
    pass

struct_VkDrmFormatModifierPropertiesList2EXT._pack_ = 1 # source:False
struct_VkDrmFormatModifierPropertiesList2EXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('drmFormatModifierCount', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('pDrmFormatModifierProperties', ctypes.POINTER(struct_VkDrmFormatModifierProperties2EXT)),
]

VkDrmFormatModifierPropertiesList2EXT = struct_VkDrmFormatModifierPropertiesList2EXT
PFN_vkGetImageDrmFormatModifierPropertiesEXT = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkImage_T), ctypes.POINTER(struct_VkImageDrmFormatModifierPropertiesEXT))
try:
    vkGetImageDrmFormatModifierPropertiesEXT = _libraries['FIXME_STUB'].vkGetImageDrmFormatModifierPropertiesEXT
    vkGetImageDrmFormatModifierPropertiesEXT.restype = VkResult
    vkGetImageDrmFormatModifierPropertiesEXT.argtypes = [VkDevice, VkImage, ctypes.POINTER(struct_VkImageDrmFormatModifierPropertiesEXT)]
except AttributeError:
    pass
class struct_VkValidationCacheEXT_T(Structure):
    pass

VkValidationCacheEXT = ctypes.POINTER(struct_VkValidationCacheEXT_T)

# values for enumeration 'VkValidationCacheHeaderVersionEXT'
VkValidationCacheHeaderVersionEXT__enumvalues = {
    1: 'VK_VALIDATION_CACHE_HEADER_VERSION_ONE_EXT',
    2147483647: 'VK_VALIDATION_CACHE_HEADER_VERSION_MAX_ENUM_EXT',
}
VK_VALIDATION_CACHE_HEADER_VERSION_ONE_EXT = 1
VK_VALIDATION_CACHE_HEADER_VERSION_MAX_ENUM_EXT = 2147483647
VkValidationCacheHeaderVersionEXT = ctypes.c_uint32 # enum
VkValidationCacheCreateFlagsEXT = ctypes.c_uint32
class struct_VkValidationCacheCreateInfoEXT(Structure):
    pass

struct_VkValidationCacheCreateInfoEXT._pack_ = 1 # source:False
struct_VkValidationCacheCreateInfoEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('flags', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('initialDataSize', ctypes.c_uint64),
    ('pInitialData', ctypes.POINTER(None)),
]

VkValidationCacheCreateInfoEXT = struct_VkValidationCacheCreateInfoEXT
class struct_VkShaderModuleValidationCacheCreateInfoEXT(Structure):
    pass

struct_VkShaderModuleValidationCacheCreateInfoEXT._pack_ = 1 # source:False
struct_VkShaderModuleValidationCacheCreateInfoEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('validationCache', ctypes.POINTER(struct_VkValidationCacheEXT_T)),
]

VkShaderModuleValidationCacheCreateInfoEXT = struct_VkShaderModuleValidationCacheCreateInfoEXT
PFN_vkCreateValidationCacheEXT = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkValidationCacheCreateInfoEXT), ctypes.POINTER(struct_VkAllocationCallbacks), ctypes.POINTER(ctypes.POINTER(struct_VkValidationCacheEXT_T)))
PFN_vkDestroyValidationCacheEXT = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkValidationCacheEXT_T), ctypes.POINTER(struct_VkAllocationCallbacks))
PFN_vkMergeValidationCachesEXT = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkValidationCacheEXT_T), ctypes.c_uint32, ctypes.POINTER(ctypes.POINTER(struct_VkValidationCacheEXT_T)))
PFN_vkGetValidationCacheDataEXT = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkValidationCacheEXT_T), ctypes.POINTER(ctypes.c_uint64), ctypes.POINTER(None))
try:
    vkCreateValidationCacheEXT = _libraries['FIXME_STUB'].vkCreateValidationCacheEXT
    vkCreateValidationCacheEXT.restype = VkResult
    vkCreateValidationCacheEXT.argtypes = [VkDevice, ctypes.POINTER(struct_VkValidationCacheCreateInfoEXT), ctypes.POINTER(struct_VkAllocationCallbacks), ctypes.POINTER(ctypes.POINTER(struct_VkValidationCacheEXT_T))]
except AttributeError:
    pass
try:
    vkDestroyValidationCacheEXT = _libraries['FIXME_STUB'].vkDestroyValidationCacheEXT
    vkDestroyValidationCacheEXT.restype = None
    vkDestroyValidationCacheEXT.argtypes = [VkDevice, VkValidationCacheEXT, ctypes.POINTER(struct_VkAllocationCallbacks)]
except AttributeError:
    pass
try:
    vkMergeValidationCachesEXT = _libraries['FIXME_STUB'].vkMergeValidationCachesEXT
    vkMergeValidationCachesEXT.restype = VkResult
    vkMergeValidationCachesEXT.argtypes = [VkDevice, VkValidationCacheEXT, uint32_t, ctypes.POINTER(ctypes.POINTER(struct_VkValidationCacheEXT_T))]
except AttributeError:
    pass
try:
    vkGetValidationCacheDataEXT = _libraries['FIXME_STUB'].vkGetValidationCacheDataEXT
    vkGetValidationCacheDataEXT.restype = VkResult
    vkGetValidationCacheDataEXT.argtypes = [VkDevice, VkValidationCacheEXT, ctypes.POINTER(ctypes.c_uint64), ctypes.POINTER(None)]
except AttributeError:
    pass
VkDescriptorBindingFlagBitsEXT = VkDescriptorBindingFlagBits
VkDescriptorBindingFlagBitsEXT__enumvalues = VkDescriptorBindingFlagBits__enumvalues
VkDescriptorBindingFlagsEXT = ctypes.c_uint32
VkDescriptorSetLayoutBindingFlagsCreateInfoEXT = struct_VkDescriptorSetLayoutBindingFlagsCreateInfo
VkPhysicalDeviceDescriptorIndexingFeaturesEXT = struct_VkPhysicalDeviceDescriptorIndexingFeatures
VkPhysicalDeviceDescriptorIndexingPropertiesEXT = struct_VkPhysicalDeviceDescriptorIndexingProperties
VkDescriptorSetVariableDescriptorCountAllocateInfoEXT = struct_VkDescriptorSetVariableDescriptorCountAllocateInfo
VkDescriptorSetVariableDescriptorCountLayoutSupportEXT = struct_VkDescriptorSetVariableDescriptorCountLayoutSupport

# values for enumeration 'VkShadingRatePaletteEntryNV'
VkShadingRatePaletteEntryNV__enumvalues = {
    0: 'VK_SHADING_RATE_PALETTE_ENTRY_NO_INVOCATIONS_NV',
    1: 'VK_SHADING_RATE_PALETTE_ENTRY_16_INVOCATIONS_PER_PIXEL_NV',
    2: 'VK_SHADING_RATE_PALETTE_ENTRY_8_INVOCATIONS_PER_PIXEL_NV',
    3: 'VK_SHADING_RATE_PALETTE_ENTRY_4_INVOCATIONS_PER_PIXEL_NV',
    4: 'VK_SHADING_RATE_PALETTE_ENTRY_2_INVOCATIONS_PER_PIXEL_NV',
    5: 'VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_PIXEL_NV',
    6: 'VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X1_PIXELS_NV',
    7: 'VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_1X2_PIXELS_NV',
    8: 'VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X2_PIXELS_NV',
    9: 'VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X2_PIXELS_NV',
    10: 'VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X4_PIXELS_NV',
    11: 'VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X4_PIXELS_NV',
    2147483647: 'VK_SHADING_RATE_PALETTE_ENTRY_MAX_ENUM_NV',
}
VK_SHADING_RATE_PALETTE_ENTRY_NO_INVOCATIONS_NV = 0
VK_SHADING_RATE_PALETTE_ENTRY_16_INVOCATIONS_PER_PIXEL_NV = 1
VK_SHADING_RATE_PALETTE_ENTRY_8_INVOCATIONS_PER_PIXEL_NV = 2
VK_SHADING_RATE_PALETTE_ENTRY_4_INVOCATIONS_PER_PIXEL_NV = 3
VK_SHADING_RATE_PALETTE_ENTRY_2_INVOCATIONS_PER_PIXEL_NV = 4
VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_PIXEL_NV = 5
VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X1_PIXELS_NV = 6
VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_1X2_PIXELS_NV = 7
VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X2_PIXELS_NV = 8
VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X2_PIXELS_NV = 9
VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X4_PIXELS_NV = 10
VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X4_PIXELS_NV = 11
VK_SHADING_RATE_PALETTE_ENTRY_MAX_ENUM_NV = 2147483647
VkShadingRatePaletteEntryNV = ctypes.c_uint32 # enum

# values for enumeration 'VkCoarseSampleOrderTypeNV'
VkCoarseSampleOrderTypeNV__enumvalues = {
    0: 'VK_COARSE_SAMPLE_ORDER_TYPE_DEFAULT_NV',
    1: 'VK_COARSE_SAMPLE_ORDER_TYPE_CUSTOM_NV',
    2: 'VK_COARSE_SAMPLE_ORDER_TYPE_PIXEL_MAJOR_NV',
    3: 'VK_COARSE_SAMPLE_ORDER_TYPE_SAMPLE_MAJOR_NV',
    2147483647: 'VK_COARSE_SAMPLE_ORDER_TYPE_MAX_ENUM_NV',
}
VK_COARSE_SAMPLE_ORDER_TYPE_DEFAULT_NV = 0
VK_COARSE_SAMPLE_ORDER_TYPE_CUSTOM_NV = 1
VK_COARSE_SAMPLE_ORDER_TYPE_PIXEL_MAJOR_NV = 2
VK_COARSE_SAMPLE_ORDER_TYPE_SAMPLE_MAJOR_NV = 3
VK_COARSE_SAMPLE_ORDER_TYPE_MAX_ENUM_NV = 2147483647
VkCoarseSampleOrderTypeNV = ctypes.c_uint32 # enum
class struct_VkShadingRatePaletteNV(Structure):
    pass

struct_VkShadingRatePaletteNV._pack_ = 1 # source:False
struct_VkShadingRatePaletteNV._fields_ = [
    ('shadingRatePaletteEntryCount', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pShadingRatePaletteEntries', ctypes.POINTER(VkShadingRatePaletteEntryNV)),
]

VkShadingRatePaletteNV = struct_VkShadingRatePaletteNV
class struct_VkPipelineViewportShadingRateImageStateCreateInfoNV(Structure):
    pass

struct_VkPipelineViewportShadingRateImageStateCreateInfoNV._pack_ = 1 # source:False
struct_VkPipelineViewportShadingRateImageStateCreateInfoNV._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('shadingRateImageEnable', ctypes.c_uint32),
    ('viewportCount', ctypes.c_uint32),
    ('pShadingRatePalettes', ctypes.POINTER(struct_VkShadingRatePaletteNV)),
]

VkPipelineViewportShadingRateImageStateCreateInfoNV = struct_VkPipelineViewportShadingRateImageStateCreateInfoNV
class struct_VkPhysicalDeviceShadingRateImageFeaturesNV(Structure):
    pass

struct_VkPhysicalDeviceShadingRateImageFeaturesNV._pack_ = 1 # source:False
struct_VkPhysicalDeviceShadingRateImageFeaturesNV._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('shadingRateImage', ctypes.c_uint32),
    ('shadingRateCoarseSampleOrder', ctypes.c_uint32),
]

VkPhysicalDeviceShadingRateImageFeaturesNV = struct_VkPhysicalDeviceShadingRateImageFeaturesNV
class struct_VkPhysicalDeviceShadingRateImagePropertiesNV(Structure):
    pass

struct_VkPhysicalDeviceShadingRateImagePropertiesNV._pack_ = 1 # source:False
struct_VkPhysicalDeviceShadingRateImagePropertiesNV._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('shadingRateTexelSize', VkExtent2D),
    ('shadingRatePaletteSize', ctypes.c_uint32),
    ('shadingRateMaxCoarseSamples', ctypes.c_uint32),
]

VkPhysicalDeviceShadingRateImagePropertiesNV = struct_VkPhysicalDeviceShadingRateImagePropertiesNV
class struct_VkCoarseSampleLocationNV(Structure):
    pass

struct_VkCoarseSampleLocationNV._pack_ = 1 # source:False
struct_VkCoarseSampleLocationNV._fields_ = [
    ('pixelX', ctypes.c_uint32),
    ('pixelY', ctypes.c_uint32),
    ('sample', ctypes.c_uint32),
]

VkCoarseSampleLocationNV = struct_VkCoarseSampleLocationNV
class struct_VkCoarseSampleOrderCustomNV(Structure):
    pass

struct_VkCoarseSampleOrderCustomNV._pack_ = 1 # source:False
struct_VkCoarseSampleOrderCustomNV._fields_ = [
    ('shadingRate', VkShadingRatePaletteEntryNV),
    ('sampleCount', ctypes.c_uint32),
    ('sampleLocationCount', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pSampleLocations', ctypes.POINTER(struct_VkCoarseSampleLocationNV)),
]

VkCoarseSampleOrderCustomNV = struct_VkCoarseSampleOrderCustomNV
class struct_VkPipelineViewportCoarseSampleOrderStateCreateInfoNV(Structure):
    pass

struct_VkPipelineViewportCoarseSampleOrderStateCreateInfoNV._pack_ = 1 # source:False
struct_VkPipelineViewportCoarseSampleOrderStateCreateInfoNV._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('sampleOrderType', VkCoarseSampleOrderTypeNV),
    ('customSampleOrderCount', ctypes.c_uint32),
    ('pCustomSampleOrders', ctypes.POINTER(struct_VkCoarseSampleOrderCustomNV)),
]

VkPipelineViewportCoarseSampleOrderStateCreateInfoNV = struct_VkPipelineViewportCoarseSampleOrderStateCreateInfoNV
PFN_vkCmdBindShadingRateImageNV = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.POINTER(struct_VkImageView_T), VkImageLayout)
PFN_vkCmdSetViewportShadingRatePaletteNV = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.c_uint32, ctypes.c_uint32, ctypes.POINTER(struct_VkShadingRatePaletteNV))
PFN_vkCmdSetCoarseSampleOrderNV = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), VkCoarseSampleOrderTypeNV, ctypes.c_uint32, ctypes.POINTER(struct_VkCoarseSampleOrderCustomNV))
try:
    vkCmdBindShadingRateImageNV = _libraries['FIXME_STUB'].vkCmdBindShadingRateImageNV
    vkCmdBindShadingRateImageNV.restype = None
    vkCmdBindShadingRateImageNV.argtypes = [VkCommandBuffer, VkImageView, VkImageLayout]
except AttributeError:
    pass
try:
    vkCmdSetViewportShadingRatePaletteNV = _libraries['FIXME_STUB'].vkCmdSetViewportShadingRatePaletteNV
    vkCmdSetViewportShadingRatePaletteNV.restype = None
    vkCmdSetViewportShadingRatePaletteNV.argtypes = [VkCommandBuffer, uint32_t, uint32_t, ctypes.POINTER(struct_VkShadingRatePaletteNV)]
except AttributeError:
    pass
try:
    vkCmdSetCoarseSampleOrderNV = _libraries['FIXME_STUB'].vkCmdSetCoarseSampleOrderNV
    vkCmdSetCoarseSampleOrderNV.restype = None
    vkCmdSetCoarseSampleOrderNV.argtypes = [VkCommandBuffer, VkCoarseSampleOrderTypeNV, uint32_t, ctypes.POINTER(struct_VkCoarseSampleOrderCustomNV)]
except AttributeError:
    pass
class struct_VkAccelerationStructureNV_T(Structure):
    pass

VkAccelerationStructureNV = ctypes.POINTER(struct_VkAccelerationStructureNV_T)

# values for enumeration 'VkRayTracingShaderGroupTypeKHR'
VkRayTracingShaderGroupTypeKHR__enumvalues = {
    0: 'VK_RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_KHR',
    1: 'VK_RAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_KHR',
    2: 'VK_RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_KHR',
    0: 'VK_RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_NV',
    1: 'VK_RAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_NV',
    2: 'VK_RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_NV',
    2147483647: 'VK_RAY_TRACING_SHADER_GROUP_TYPE_MAX_ENUM_KHR',
}
VK_RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_KHR = 0
VK_RAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_KHR = 1
VK_RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_KHR = 2
VK_RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_NV = 0
VK_RAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_NV = 1
VK_RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_NV = 2
VK_RAY_TRACING_SHADER_GROUP_TYPE_MAX_ENUM_KHR = 2147483647
VkRayTracingShaderGroupTypeKHR = ctypes.c_uint32 # enum
VkRayTracingShaderGroupTypeNV = VkRayTracingShaderGroupTypeKHR
VkRayTracingShaderGroupTypeNV__enumvalues = VkRayTracingShaderGroupTypeKHR__enumvalues

# values for enumeration 'VkGeometryTypeKHR'
VkGeometryTypeKHR__enumvalues = {
    0: 'VK_GEOMETRY_TYPE_TRIANGLES_KHR',
    1: 'VK_GEOMETRY_TYPE_AABBS_KHR',
    2: 'VK_GEOMETRY_TYPE_INSTANCES_KHR',
    0: 'VK_GEOMETRY_TYPE_TRIANGLES_NV',
    1: 'VK_GEOMETRY_TYPE_AABBS_NV',
    2147483647: 'VK_GEOMETRY_TYPE_MAX_ENUM_KHR',
}
VK_GEOMETRY_TYPE_TRIANGLES_KHR = 0
VK_GEOMETRY_TYPE_AABBS_KHR = 1
VK_GEOMETRY_TYPE_INSTANCES_KHR = 2
VK_GEOMETRY_TYPE_TRIANGLES_NV = 0
VK_GEOMETRY_TYPE_AABBS_NV = 1
VK_GEOMETRY_TYPE_MAX_ENUM_KHR = 2147483647
VkGeometryTypeKHR = ctypes.c_uint32 # enum
VkGeometryTypeNV = VkGeometryTypeKHR
VkGeometryTypeNV__enumvalues = VkGeometryTypeKHR__enumvalues

# values for enumeration 'VkAccelerationStructureTypeKHR'
VkAccelerationStructureTypeKHR__enumvalues = {
    0: 'VK_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_KHR',
    1: 'VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_KHR',
    2: 'VK_ACCELERATION_STRUCTURE_TYPE_GENERIC_KHR',
    0: 'VK_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_NV',
    1: 'VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_NV',
    2147483647: 'VK_ACCELERATION_STRUCTURE_TYPE_MAX_ENUM_KHR',
}
VK_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_KHR = 0
VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_KHR = 1
VK_ACCELERATION_STRUCTURE_TYPE_GENERIC_KHR = 2
VK_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_NV = 0
VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_NV = 1
VK_ACCELERATION_STRUCTURE_TYPE_MAX_ENUM_KHR = 2147483647
VkAccelerationStructureTypeKHR = ctypes.c_uint32 # enum
VkAccelerationStructureTypeNV = VkAccelerationStructureTypeKHR
VkAccelerationStructureTypeNV__enumvalues = VkAccelerationStructureTypeKHR__enumvalues

# values for enumeration 'VkCopyAccelerationStructureModeKHR'
VkCopyAccelerationStructureModeKHR__enumvalues = {
    0: 'VK_COPY_ACCELERATION_STRUCTURE_MODE_CLONE_KHR',
    1: 'VK_COPY_ACCELERATION_STRUCTURE_MODE_COMPACT_KHR',
    2: 'VK_COPY_ACCELERATION_STRUCTURE_MODE_SERIALIZE_KHR',
    3: 'VK_COPY_ACCELERATION_STRUCTURE_MODE_DESERIALIZE_KHR',
    0: 'VK_COPY_ACCELERATION_STRUCTURE_MODE_CLONE_NV',
    1: 'VK_COPY_ACCELERATION_STRUCTURE_MODE_COMPACT_NV',
    2147483647: 'VK_COPY_ACCELERATION_STRUCTURE_MODE_MAX_ENUM_KHR',
}
VK_COPY_ACCELERATION_STRUCTURE_MODE_CLONE_KHR = 0
VK_COPY_ACCELERATION_STRUCTURE_MODE_COMPACT_KHR = 1
VK_COPY_ACCELERATION_STRUCTURE_MODE_SERIALIZE_KHR = 2
VK_COPY_ACCELERATION_STRUCTURE_MODE_DESERIALIZE_KHR = 3
VK_COPY_ACCELERATION_STRUCTURE_MODE_CLONE_NV = 0
VK_COPY_ACCELERATION_STRUCTURE_MODE_COMPACT_NV = 1
VK_COPY_ACCELERATION_STRUCTURE_MODE_MAX_ENUM_KHR = 2147483647
VkCopyAccelerationStructureModeKHR = ctypes.c_uint32 # enum
VkCopyAccelerationStructureModeNV = VkCopyAccelerationStructureModeKHR
VkCopyAccelerationStructureModeNV__enumvalues = VkCopyAccelerationStructureModeKHR__enumvalues

# values for enumeration 'VkAccelerationStructureMemoryRequirementsTypeNV'
VkAccelerationStructureMemoryRequirementsTypeNV__enumvalues = {
    0: 'VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_OBJECT_NV',
    1: 'VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_BUILD_SCRATCH_NV',
    2: 'VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_UPDATE_SCRATCH_NV',
    2147483647: 'VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_MAX_ENUM_NV',
}
VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_OBJECT_NV = 0
VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_BUILD_SCRATCH_NV = 1
VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_UPDATE_SCRATCH_NV = 2
VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_MAX_ENUM_NV = 2147483647
VkAccelerationStructureMemoryRequirementsTypeNV = ctypes.c_uint32 # enum

# values for enumeration 'VkGeometryFlagBitsKHR'
VkGeometryFlagBitsKHR__enumvalues = {
    1: 'VK_GEOMETRY_OPAQUE_BIT_KHR',
    2: 'VK_GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_KHR',
    1: 'VK_GEOMETRY_OPAQUE_BIT_NV',
    2: 'VK_GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_NV',
    2147483647: 'VK_GEOMETRY_FLAG_BITS_MAX_ENUM_KHR',
}
VK_GEOMETRY_OPAQUE_BIT_KHR = 1
VK_GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_KHR = 2
VK_GEOMETRY_OPAQUE_BIT_NV = 1
VK_GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_NV = 2
VK_GEOMETRY_FLAG_BITS_MAX_ENUM_KHR = 2147483647
VkGeometryFlagBitsKHR = ctypes.c_uint32 # enum
VkGeometryFlagsKHR = ctypes.c_uint32
VkGeometryFlagsNV = ctypes.c_uint32
VkGeometryFlagBitsNV = VkGeometryFlagBitsKHR
VkGeometryFlagBitsNV__enumvalues = VkGeometryFlagBitsKHR__enumvalues

# values for enumeration 'VkGeometryInstanceFlagBitsKHR'
VkGeometryInstanceFlagBitsKHR__enumvalues = {
    1: 'VK_GEOMETRY_INSTANCE_TRIANGLE_FACING_CULL_DISABLE_BIT_KHR',
    2: 'VK_GEOMETRY_INSTANCE_TRIANGLE_FLIP_FACING_BIT_KHR',
    4: 'VK_GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_KHR',
    8: 'VK_GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_KHR',
    16: 'VK_GEOMETRY_INSTANCE_FORCE_OPACITY_MICROMAP_2_STATE_EXT',
    32: 'VK_GEOMETRY_INSTANCE_DISABLE_OPACITY_MICROMAPS_EXT',
    2: 'VK_GEOMETRY_INSTANCE_TRIANGLE_FRONT_COUNTERCLOCKWISE_BIT_KHR',
    1: 'VK_GEOMETRY_INSTANCE_TRIANGLE_CULL_DISABLE_BIT_NV',
    2: 'VK_GEOMETRY_INSTANCE_TRIANGLE_FRONT_COUNTERCLOCKWISE_BIT_NV',
    4: 'VK_GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_NV',
    8: 'VK_GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_NV',
    2147483647: 'VK_GEOMETRY_INSTANCE_FLAG_BITS_MAX_ENUM_KHR',
}
VK_GEOMETRY_INSTANCE_TRIANGLE_FACING_CULL_DISABLE_BIT_KHR = 1
VK_GEOMETRY_INSTANCE_TRIANGLE_FLIP_FACING_BIT_KHR = 2
VK_GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_KHR = 4
VK_GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_KHR = 8
VK_GEOMETRY_INSTANCE_FORCE_OPACITY_MICROMAP_2_STATE_EXT = 16
VK_GEOMETRY_INSTANCE_DISABLE_OPACITY_MICROMAPS_EXT = 32
VK_GEOMETRY_INSTANCE_TRIANGLE_FRONT_COUNTERCLOCKWISE_BIT_KHR = 2
VK_GEOMETRY_INSTANCE_TRIANGLE_CULL_DISABLE_BIT_NV = 1
VK_GEOMETRY_INSTANCE_TRIANGLE_FRONT_COUNTERCLOCKWISE_BIT_NV = 2
VK_GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_NV = 4
VK_GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_NV = 8
VK_GEOMETRY_INSTANCE_FLAG_BITS_MAX_ENUM_KHR = 2147483647
VkGeometryInstanceFlagBitsKHR = ctypes.c_uint32 # enum
VkGeometryInstanceFlagsKHR = ctypes.c_uint32
VkGeometryInstanceFlagsNV = ctypes.c_uint32
VkGeometryInstanceFlagBitsNV = VkGeometryInstanceFlagBitsKHR
VkGeometryInstanceFlagBitsNV__enumvalues = VkGeometryInstanceFlagBitsKHR__enumvalues

# values for enumeration 'VkBuildAccelerationStructureFlagBitsKHR'
VkBuildAccelerationStructureFlagBitsKHR__enumvalues = {
    1: 'VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_KHR',
    2: 'VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_KHR',
    4: 'VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_KHR',
    8: 'VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_KHR',
    16: 'VK_BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_BIT_KHR',
    32: 'VK_BUILD_ACCELERATION_STRUCTURE_MOTION_BIT_NV',
    64: 'VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_OPACITY_MICROMAP_UPDATE_EXT',
    128: 'VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_DISABLE_OPACITY_MICROMAPS_EXT',
    256: 'VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_OPACITY_MICROMAP_DATA_UPDATE_EXT',
    2048: 'VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_DATA_ACCESS_KHR',
    1: 'VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_NV',
    2: 'VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_NV',
    4: 'VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_NV',
    8: 'VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_NV',
    16: 'VK_BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_BIT_NV',
    2147483647: 'VK_BUILD_ACCELERATION_STRUCTURE_FLAG_BITS_MAX_ENUM_KHR',
}
VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_KHR = 1
VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_KHR = 2
VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_KHR = 4
VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_KHR = 8
VK_BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_BIT_KHR = 16
VK_BUILD_ACCELERATION_STRUCTURE_MOTION_BIT_NV = 32
VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_OPACITY_MICROMAP_UPDATE_EXT = 64
VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_DISABLE_OPACITY_MICROMAPS_EXT = 128
VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_OPACITY_MICROMAP_DATA_UPDATE_EXT = 256
VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_DATA_ACCESS_KHR = 2048
VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_NV = 1
VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_NV = 2
VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_NV = 4
VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_NV = 8
VK_BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_BIT_NV = 16
VK_BUILD_ACCELERATION_STRUCTURE_FLAG_BITS_MAX_ENUM_KHR = 2147483647
VkBuildAccelerationStructureFlagBitsKHR = ctypes.c_uint32 # enum
VkBuildAccelerationStructureFlagsKHR = ctypes.c_uint32
VkBuildAccelerationStructureFlagsNV = ctypes.c_uint32
VkBuildAccelerationStructureFlagBitsNV = VkBuildAccelerationStructureFlagBitsKHR
VkBuildAccelerationStructureFlagBitsNV__enumvalues = VkBuildAccelerationStructureFlagBitsKHR__enumvalues
class struct_VkRayTracingShaderGroupCreateInfoNV(Structure):
    pass

struct_VkRayTracingShaderGroupCreateInfoNV._pack_ = 1 # source:False
struct_VkRayTracingShaderGroupCreateInfoNV._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('type', VkRayTracingShaderGroupTypeKHR),
    ('generalShader', ctypes.c_uint32),
    ('closestHitShader', ctypes.c_uint32),
    ('anyHitShader', ctypes.c_uint32),
    ('intersectionShader', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkRayTracingShaderGroupCreateInfoNV = struct_VkRayTracingShaderGroupCreateInfoNV
class struct_VkRayTracingPipelineCreateInfoNV(Structure):
    pass

struct_VkRayTracingPipelineCreateInfoNV._pack_ = 1 # source:False
struct_VkRayTracingPipelineCreateInfoNV._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('flags', ctypes.c_uint32),
    ('stageCount', ctypes.c_uint32),
    ('pStages', ctypes.POINTER(struct_VkPipelineShaderStageCreateInfo)),
    ('groupCount', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('pGroups', ctypes.POINTER(struct_VkRayTracingShaderGroupCreateInfoNV)),
    ('maxRecursionDepth', ctypes.c_uint32),
    ('PADDING_2', ctypes.c_ubyte * 4),
    ('layout', ctypes.POINTER(struct_VkPipelineLayout_T)),
    ('basePipelineHandle', ctypes.POINTER(struct_VkPipeline_T)),
    ('basePipelineIndex', ctypes.c_int32),
    ('PADDING_3', ctypes.c_ubyte * 4),
]

VkRayTracingPipelineCreateInfoNV = struct_VkRayTracingPipelineCreateInfoNV
class struct_VkGeometryTrianglesNV(Structure):
    pass

struct_VkGeometryTrianglesNV._pack_ = 1 # source:False
struct_VkGeometryTrianglesNV._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('vertexData', ctypes.POINTER(struct_VkBuffer_T)),
    ('vertexOffset', ctypes.c_uint64),
    ('vertexCount', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('vertexStride', ctypes.c_uint64),
    ('vertexFormat', VkFormat),
    ('PADDING_2', ctypes.c_ubyte * 4),
    ('indexData', ctypes.POINTER(struct_VkBuffer_T)),
    ('indexOffset', ctypes.c_uint64),
    ('indexCount', ctypes.c_uint32),
    ('indexType', VkIndexType),
    ('transformData', ctypes.POINTER(struct_VkBuffer_T)),
    ('transformOffset', ctypes.c_uint64),
]

VkGeometryTrianglesNV = struct_VkGeometryTrianglesNV
class struct_VkGeometryAABBNV(Structure):
    pass

struct_VkGeometryAABBNV._pack_ = 1 # source:False
struct_VkGeometryAABBNV._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('aabbData', ctypes.POINTER(struct_VkBuffer_T)),
    ('numAABBs', ctypes.c_uint32),
    ('stride', ctypes.c_uint32),
    ('offset', ctypes.c_uint64),
]

VkGeometryAABBNV = struct_VkGeometryAABBNV
class struct_VkGeometryDataNV(Structure):
    _pack_ = 1 # source:False
    _fields_ = [
    ('triangles', VkGeometryTrianglesNV),
    ('aabbs', VkGeometryAABBNV),
     ]

VkGeometryDataNV = struct_VkGeometryDataNV
class struct_VkGeometryNV(Structure):
    pass

struct_VkGeometryNV._pack_ = 1 # source:False
struct_VkGeometryNV._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('geometryType', VkGeometryTypeKHR),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('geometry', VkGeometryDataNV),
    ('flags', ctypes.c_uint32),
    ('PADDING_2', ctypes.c_ubyte * 4),
]

VkGeometryNV = struct_VkGeometryNV
class struct_VkAccelerationStructureInfoNV(Structure):
    pass

struct_VkAccelerationStructureInfoNV._pack_ = 1 # source:False
struct_VkAccelerationStructureInfoNV._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('type', VkAccelerationStructureTypeNV),
    ('flags', ctypes.c_uint32),
    ('instanceCount', ctypes.c_uint32),
    ('geometryCount', ctypes.c_uint32),
    ('pGeometries', ctypes.POINTER(struct_VkGeometryNV)),
]

VkAccelerationStructureInfoNV = struct_VkAccelerationStructureInfoNV
class struct_VkAccelerationStructureCreateInfoNV(Structure):
    pass

struct_VkAccelerationStructureCreateInfoNV._pack_ = 1 # source:False
struct_VkAccelerationStructureCreateInfoNV._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('compactedSize', ctypes.c_uint64),
    ('info', VkAccelerationStructureInfoNV),
]

VkAccelerationStructureCreateInfoNV = struct_VkAccelerationStructureCreateInfoNV
class struct_VkBindAccelerationStructureMemoryInfoNV(Structure):
    pass

struct_VkBindAccelerationStructureMemoryInfoNV._pack_ = 1 # source:False
struct_VkBindAccelerationStructureMemoryInfoNV._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('accelerationStructure', ctypes.POINTER(struct_VkAccelerationStructureNV_T)),
    ('memory', ctypes.POINTER(struct_VkDeviceMemory_T)),
    ('memoryOffset', ctypes.c_uint64),
    ('deviceIndexCount', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('pDeviceIndices', ctypes.POINTER(ctypes.c_uint32)),
]

VkBindAccelerationStructureMemoryInfoNV = struct_VkBindAccelerationStructureMemoryInfoNV
class struct_VkWriteDescriptorSetAccelerationStructureNV(Structure):
    pass

struct_VkWriteDescriptorSetAccelerationStructureNV._pack_ = 1 # source:False
struct_VkWriteDescriptorSetAccelerationStructureNV._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('accelerationStructureCount', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('pAccelerationStructures', ctypes.POINTER(ctypes.POINTER(struct_VkAccelerationStructureNV_T))),
]

VkWriteDescriptorSetAccelerationStructureNV = struct_VkWriteDescriptorSetAccelerationStructureNV
class struct_VkAccelerationStructureMemoryRequirementsInfoNV(Structure):
    pass

struct_VkAccelerationStructureMemoryRequirementsInfoNV._pack_ = 1 # source:False
struct_VkAccelerationStructureMemoryRequirementsInfoNV._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('type', VkAccelerationStructureMemoryRequirementsTypeNV),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('accelerationStructure', ctypes.POINTER(struct_VkAccelerationStructureNV_T)),
]

VkAccelerationStructureMemoryRequirementsInfoNV = struct_VkAccelerationStructureMemoryRequirementsInfoNV
class struct_VkPhysicalDeviceRayTracingPropertiesNV(Structure):
    pass

struct_VkPhysicalDeviceRayTracingPropertiesNV._pack_ = 1 # source:False
struct_VkPhysicalDeviceRayTracingPropertiesNV._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('shaderGroupHandleSize', ctypes.c_uint32),
    ('maxRecursionDepth', ctypes.c_uint32),
    ('maxShaderGroupStride', ctypes.c_uint32),
    ('shaderGroupBaseAlignment', ctypes.c_uint32),
    ('maxGeometryCount', ctypes.c_uint64),
    ('maxInstanceCount', ctypes.c_uint64),
    ('maxTriangleCount', ctypes.c_uint64),
    ('maxDescriptorSetAccelerationStructures', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPhysicalDeviceRayTracingPropertiesNV = struct_VkPhysicalDeviceRayTracingPropertiesNV
class struct_VkTransformMatrixKHR(Structure):
    pass

struct_VkTransformMatrixKHR._pack_ = 1 # source:False
struct_VkTransformMatrixKHR._fields_ = [
    ('matrix', ctypes.c_float * 4 * 3),
]

VkTransformMatrixKHR = struct_VkTransformMatrixKHR
VkTransformMatrixNV = struct_VkTransformMatrixKHR
class struct_VkAabbPositionsKHR(Structure):
    pass

struct_VkAabbPositionsKHR._pack_ = 1 # source:False
struct_VkAabbPositionsKHR._fields_ = [
    ('minX', ctypes.c_float),
    ('minY', ctypes.c_float),
    ('minZ', ctypes.c_float),
    ('maxX', ctypes.c_float),
    ('maxY', ctypes.c_float),
    ('maxZ', ctypes.c_float),
]

VkAabbPositionsKHR = struct_VkAabbPositionsKHR
VkAabbPositionsNV = struct_VkAabbPositionsKHR
class struct_VkAccelerationStructureInstanceKHR(Structure):
    pass

struct_VkAccelerationStructureInstanceKHR._pack_ = 1 # source:False
struct_VkAccelerationStructureInstanceKHR._fields_ = [
    ('transform', VkTransformMatrixKHR),
    ('instanceCustomIndex', ctypes.c_uint64, 24),
    ('mask', ctypes.c_uint64, 8),
    ('instanceShaderBindingTableRecordOffset', ctypes.c_uint64, 24),
    ('flags', ctypes.c_uint64, 8),
    ('accelerationStructureReference', ctypes.c_uint64),
]

VkAccelerationStructureInstanceKHR = struct_VkAccelerationStructureInstanceKHR
VkAccelerationStructureInstanceNV = struct_VkAccelerationStructureInstanceKHR
PFN_vkCreateAccelerationStructureNV = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkAccelerationStructureCreateInfoNV), ctypes.POINTER(struct_VkAllocationCallbacks), ctypes.POINTER(ctypes.POINTER(struct_VkAccelerationStructureNV_T)))
PFN_vkDestroyAccelerationStructureNV = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkAccelerationStructureNV_T), ctypes.POINTER(struct_VkAllocationCallbacks))
PFN_vkGetAccelerationStructureMemoryRequirementsNV = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkAccelerationStructureMemoryRequirementsInfoNV), ctypes.POINTER(struct_VkMemoryRequirements2))
PFN_vkBindAccelerationStructureMemoryNV = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkDevice_T), ctypes.c_uint32, ctypes.POINTER(struct_VkBindAccelerationStructureMemoryInfoNV))
PFN_vkCmdBuildAccelerationStructureNV = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.POINTER(struct_VkAccelerationStructureInfoNV), ctypes.POINTER(struct_VkBuffer_T), ctypes.c_uint64, ctypes.c_uint32, ctypes.POINTER(struct_VkAccelerationStructureNV_T), ctypes.POINTER(struct_VkAccelerationStructureNV_T), ctypes.POINTER(struct_VkBuffer_T), ctypes.c_uint64)
PFN_vkCmdCopyAccelerationStructureNV = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.POINTER(struct_VkAccelerationStructureNV_T), ctypes.POINTER(struct_VkAccelerationStructureNV_T), VkCopyAccelerationStructureModeKHR)
PFN_vkCmdTraceRaysNV = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.POINTER(struct_VkBuffer_T), ctypes.c_uint64, ctypes.POINTER(struct_VkBuffer_T), ctypes.c_uint64, ctypes.c_uint64, ctypes.POINTER(struct_VkBuffer_T), ctypes.c_uint64, ctypes.c_uint64, ctypes.POINTER(struct_VkBuffer_T), ctypes.c_uint64, ctypes.c_uint64, ctypes.c_uint32, ctypes.c_uint32, ctypes.c_uint32)
PFN_vkCreateRayTracingPipelinesNV = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkPipelineCache_T), ctypes.c_uint32, ctypes.POINTER(struct_VkRayTracingPipelineCreateInfoNV), ctypes.POINTER(struct_VkAllocationCallbacks), ctypes.POINTER(ctypes.POINTER(struct_VkPipeline_T)))
PFN_vkGetRayTracingShaderGroupHandlesKHR = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkPipeline_T), ctypes.c_uint32, ctypes.c_uint32, ctypes.c_uint64, ctypes.POINTER(None))
PFN_vkGetRayTracingShaderGroupHandlesNV = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkPipeline_T), ctypes.c_uint32, ctypes.c_uint32, ctypes.c_uint64, ctypes.POINTER(None))
PFN_vkGetAccelerationStructureHandleNV = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkAccelerationStructureNV_T), ctypes.c_uint64, ctypes.POINTER(None))
PFN_vkCmdWriteAccelerationStructuresPropertiesNV = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.c_uint32, ctypes.POINTER(ctypes.POINTER(struct_VkAccelerationStructureNV_T)), VkQueryType, ctypes.POINTER(struct_VkQueryPool_T), ctypes.c_uint32)
PFN_vkCompileDeferredNV = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkPipeline_T), ctypes.c_uint32)
try:
    vkCreateAccelerationStructureNV = _libraries['FIXME_STUB'].vkCreateAccelerationStructureNV
    vkCreateAccelerationStructureNV.restype = VkResult
    vkCreateAccelerationStructureNV.argtypes = [VkDevice, ctypes.POINTER(struct_VkAccelerationStructureCreateInfoNV), ctypes.POINTER(struct_VkAllocationCallbacks), ctypes.POINTER(ctypes.POINTER(struct_VkAccelerationStructureNV_T))]
except AttributeError:
    pass
try:
    vkDestroyAccelerationStructureNV = _libraries['FIXME_STUB'].vkDestroyAccelerationStructureNV
    vkDestroyAccelerationStructureNV.restype = None
    vkDestroyAccelerationStructureNV.argtypes = [VkDevice, VkAccelerationStructureNV, ctypes.POINTER(struct_VkAllocationCallbacks)]
except AttributeError:
    pass
try:
    vkGetAccelerationStructureMemoryRequirementsNV = _libraries['FIXME_STUB'].vkGetAccelerationStructureMemoryRequirementsNV
    vkGetAccelerationStructureMemoryRequirementsNV.restype = None
    vkGetAccelerationStructureMemoryRequirementsNV.argtypes = [VkDevice, ctypes.POINTER(struct_VkAccelerationStructureMemoryRequirementsInfoNV), ctypes.POINTER(struct_VkMemoryRequirements2)]
except AttributeError:
    pass
try:
    vkBindAccelerationStructureMemoryNV = _libraries['FIXME_STUB'].vkBindAccelerationStructureMemoryNV
    vkBindAccelerationStructureMemoryNV.restype = VkResult
    vkBindAccelerationStructureMemoryNV.argtypes = [VkDevice, uint32_t, ctypes.POINTER(struct_VkBindAccelerationStructureMemoryInfoNV)]
except AttributeError:
    pass
try:
    vkCmdBuildAccelerationStructureNV = _libraries['FIXME_STUB'].vkCmdBuildAccelerationStructureNV
    vkCmdBuildAccelerationStructureNV.restype = None
    vkCmdBuildAccelerationStructureNV.argtypes = [VkCommandBuffer, ctypes.POINTER(struct_VkAccelerationStructureInfoNV), VkBuffer, VkDeviceSize, VkBool32, VkAccelerationStructureNV, VkAccelerationStructureNV, VkBuffer, VkDeviceSize]
except AttributeError:
    pass
try:
    vkCmdCopyAccelerationStructureNV = _libraries['FIXME_STUB'].vkCmdCopyAccelerationStructureNV
    vkCmdCopyAccelerationStructureNV.restype = None
    vkCmdCopyAccelerationStructureNV.argtypes = [VkCommandBuffer, VkAccelerationStructureNV, VkAccelerationStructureNV, VkCopyAccelerationStructureModeKHR]
except AttributeError:
    pass
try:
    vkCmdTraceRaysNV = _libraries['FIXME_STUB'].vkCmdTraceRaysNV
    vkCmdTraceRaysNV.restype = None
    vkCmdTraceRaysNV.argtypes = [VkCommandBuffer, VkBuffer, VkDeviceSize, VkBuffer, VkDeviceSize, VkDeviceSize, VkBuffer, VkDeviceSize, VkDeviceSize, VkBuffer, VkDeviceSize, VkDeviceSize, uint32_t, uint32_t, uint32_t]
except AttributeError:
    pass
try:
    vkCreateRayTracingPipelinesNV = _libraries['FIXME_STUB'].vkCreateRayTracingPipelinesNV
    vkCreateRayTracingPipelinesNV.restype = VkResult
    vkCreateRayTracingPipelinesNV.argtypes = [VkDevice, VkPipelineCache, uint32_t, ctypes.POINTER(struct_VkRayTracingPipelineCreateInfoNV), ctypes.POINTER(struct_VkAllocationCallbacks), ctypes.POINTER(ctypes.POINTER(struct_VkPipeline_T))]
except AttributeError:
    pass
try:
    vkGetRayTracingShaderGroupHandlesKHR = _libraries['FIXME_STUB'].vkGetRayTracingShaderGroupHandlesKHR
    vkGetRayTracingShaderGroupHandlesKHR.restype = VkResult
    vkGetRayTracingShaderGroupHandlesKHR.argtypes = [VkDevice, VkPipeline, uint32_t, uint32_t, size_t, ctypes.POINTER(None)]
except AttributeError:
    pass
try:
    vkGetRayTracingShaderGroupHandlesNV = _libraries['FIXME_STUB'].vkGetRayTracingShaderGroupHandlesNV
    vkGetRayTracingShaderGroupHandlesNV.restype = VkResult
    vkGetRayTracingShaderGroupHandlesNV.argtypes = [VkDevice, VkPipeline, uint32_t, uint32_t, size_t, ctypes.POINTER(None)]
except AttributeError:
    pass
try:
    vkGetAccelerationStructureHandleNV = _libraries['FIXME_STUB'].vkGetAccelerationStructureHandleNV
    vkGetAccelerationStructureHandleNV.restype = VkResult
    vkGetAccelerationStructureHandleNV.argtypes = [VkDevice, VkAccelerationStructureNV, size_t, ctypes.POINTER(None)]
except AttributeError:
    pass
try:
    vkCmdWriteAccelerationStructuresPropertiesNV = _libraries['FIXME_STUB'].vkCmdWriteAccelerationStructuresPropertiesNV
    vkCmdWriteAccelerationStructuresPropertiesNV.restype = None
    vkCmdWriteAccelerationStructuresPropertiesNV.argtypes = [VkCommandBuffer, uint32_t, ctypes.POINTER(ctypes.POINTER(struct_VkAccelerationStructureNV_T)), VkQueryType, VkQueryPool, uint32_t]
except AttributeError:
    pass
try:
    vkCompileDeferredNV = _libraries['FIXME_STUB'].vkCompileDeferredNV
    vkCompileDeferredNV.restype = VkResult
    vkCompileDeferredNV.argtypes = [VkDevice, VkPipeline, uint32_t]
except AttributeError:
    pass
class struct_VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV(Structure):
    pass

struct_VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV._pack_ = 1 # source:False
struct_VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('representativeFragmentTest', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV = struct_VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV
class struct_VkPipelineRepresentativeFragmentTestStateCreateInfoNV(Structure):
    pass

struct_VkPipelineRepresentativeFragmentTestStateCreateInfoNV._pack_ = 1 # source:False
struct_VkPipelineRepresentativeFragmentTestStateCreateInfoNV._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('representativeFragmentTestEnable', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPipelineRepresentativeFragmentTestStateCreateInfoNV = struct_VkPipelineRepresentativeFragmentTestStateCreateInfoNV
class struct_VkPhysicalDeviceImageViewImageFormatInfoEXT(Structure):
    pass

struct_VkPhysicalDeviceImageViewImageFormatInfoEXT._pack_ = 1 # source:False
struct_VkPhysicalDeviceImageViewImageFormatInfoEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('imageViewType', VkImageViewType),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPhysicalDeviceImageViewImageFormatInfoEXT = struct_VkPhysicalDeviceImageViewImageFormatInfoEXT
class struct_VkFilterCubicImageViewImageFormatPropertiesEXT(Structure):
    pass

struct_VkFilterCubicImageViewImageFormatPropertiesEXT._pack_ = 1 # source:False
struct_VkFilterCubicImageViewImageFormatPropertiesEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('filterCubic', ctypes.c_uint32),
    ('filterCubicMinmax', ctypes.c_uint32),
]

VkFilterCubicImageViewImageFormatPropertiesEXT = struct_VkFilterCubicImageViewImageFormatPropertiesEXT
VkQueueGlobalPriorityEXT = VkQueueGlobalPriorityKHR
VkQueueGlobalPriorityEXT__enumvalues = VkQueueGlobalPriorityKHR__enumvalues
VkDeviceQueueGlobalPriorityCreateInfoEXT = struct_VkDeviceQueueGlobalPriorityCreateInfoKHR
class struct_VkImportMemoryHostPointerInfoEXT(Structure):
    pass

struct_VkImportMemoryHostPointerInfoEXT._pack_ = 1 # source:False
struct_VkImportMemoryHostPointerInfoEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('handleType', VkExternalMemoryHandleTypeFlagBits),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('pHostPointer', ctypes.POINTER(None)),
]

VkImportMemoryHostPointerInfoEXT = struct_VkImportMemoryHostPointerInfoEXT
class struct_VkMemoryHostPointerPropertiesEXT(Structure):
    pass

struct_VkMemoryHostPointerPropertiesEXT._pack_ = 1 # source:False
struct_VkMemoryHostPointerPropertiesEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('memoryTypeBits', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkMemoryHostPointerPropertiesEXT = struct_VkMemoryHostPointerPropertiesEXT
class struct_VkPhysicalDeviceExternalMemoryHostPropertiesEXT(Structure):
    pass

struct_VkPhysicalDeviceExternalMemoryHostPropertiesEXT._pack_ = 1 # source:False
struct_VkPhysicalDeviceExternalMemoryHostPropertiesEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('minImportedHostPointerAlignment', ctypes.c_uint64),
]

VkPhysicalDeviceExternalMemoryHostPropertiesEXT = struct_VkPhysicalDeviceExternalMemoryHostPropertiesEXT
PFN_vkGetMemoryHostPointerPropertiesEXT = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkDevice_T), VkExternalMemoryHandleTypeFlagBits, ctypes.POINTER(None), ctypes.POINTER(struct_VkMemoryHostPointerPropertiesEXT))
try:
    vkGetMemoryHostPointerPropertiesEXT = _libraries['FIXME_STUB'].vkGetMemoryHostPointerPropertiesEXT
    vkGetMemoryHostPointerPropertiesEXT.restype = VkResult
    vkGetMemoryHostPointerPropertiesEXT.argtypes = [VkDevice, VkExternalMemoryHandleTypeFlagBits, ctypes.POINTER(None), ctypes.POINTER(struct_VkMemoryHostPointerPropertiesEXT)]
except AttributeError:
    pass
PFN_vkCmdWriteBufferMarkerAMD = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), VkPipelineStageFlagBits, ctypes.POINTER(struct_VkBuffer_T), ctypes.c_uint64, ctypes.c_uint32)
try:
    vkCmdWriteBufferMarkerAMD = _libraries['FIXME_STUB'].vkCmdWriteBufferMarkerAMD
    vkCmdWriteBufferMarkerAMD.restype = None
    vkCmdWriteBufferMarkerAMD.argtypes = [VkCommandBuffer, VkPipelineStageFlagBits, VkBuffer, VkDeviceSize, uint32_t]
except AttributeError:
    pass

# values for enumeration 'VkPipelineCompilerControlFlagBitsAMD'
VkPipelineCompilerControlFlagBitsAMD__enumvalues = {
    2147483647: 'VK_PIPELINE_COMPILER_CONTROL_FLAG_BITS_MAX_ENUM_AMD',
}
VK_PIPELINE_COMPILER_CONTROL_FLAG_BITS_MAX_ENUM_AMD = 2147483647
VkPipelineCompilerControlFlagBitsAMD = ctypes.c_uint32 # enum
VkPipelineCompilerControlFlagsAMD = ctypes.c_uint32
class struct_VkPipelineCompilerControlCreateInfoAMD(Structure):
    pass

struct_VkPipelineCompilerControlCreateInfoAMD._pack_ = 1 # source:False
struct_VkPipelineCompilerControlCreateInfoAMD._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('compilerControlFlags', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPipelineCompilerControlCreateInfoAMD = struct_VkPipelineCompilerControlCreateInfoAMD
VkTimeDomainEXT = VkTimeDomainKHR
VkTimeDomainEXT__enumvalues = VkTimeDomainKHR__enumvalues
VkCalibratedTimestampInfoEXT = struct_VkCalibratedTimestampInfoKHR
PFN_vkGetPhysicalDeviceCalibrateableTimeDomainsEXT = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkPhysicalDevice_T), ctypes.POINTER(ctypes.c_uint32), ctypes.POINTER(VkTimeDomainKHR))
PFN_vkGetCalibratedTimestampsEXT = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkDevice_T), ctypes.c_uint32, ctypes.POINTER(struct_VkCalibratedTimestampInfoKHR), ctypes.POINTER(ctypes.c_uint64), ctypes.POINTER(ctypes.c_uint64))
try:
    vkGetPhysicalDeviceCalibrateableTimeDomainsEXT = _libraries['FIXME_STUB'].vkGetPhysicalDeviceCalibrateableTimeDomainsEXT
    vkGetPhysicalDeviceCalibrateableTimeDomainsEXT.restype = VkResult
    vkGetPhysicalDeviceCalibrateableTimeDomainsEXT.argtypes = [VkPhysicalDevice, ctypes.POINTER(ctypes.c_uint32), ctypes.POINTER(VkTimeDomainKHR)]
except AttributeError:
    pass
try:
    vkGetCalibratedTimestampsEXT = _libraries['FIXME_STUB'].vkGetCalibratedTimestampsEXT
    vkGetCalibratedTimestampsEXT.restype = VkResult
    vkGetCalibratedTimestampsEXT.argtypes = [VkDevice, uint32_t, ctypes.POINTER(struct_VkCalibratedTimestampInfoKHR), ctypes.POINTER(ctypes.c_uint64), ctypes.POINTER(ctypes.c_uint64)]
except AttributeError:
    pass
class struct_VkPhysicalDeviceShaderCorePropertiesAMD(Structure):
    pass

struct_VkPhysicalDeviceShaderCorePropertiesAMD._pack_ = 1 # source:False
struct_VkPhysicalDeviceShaderCorePropertiesAMD._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('shaderEngineCount', ctypes.c_uint32),
    ('shaderArraysPerEngineCount', ctypes.c_uint32),
    ('computeUnitsPerShaderArray', ctypes.c_uint32),
    ('simdPerComputeUnit', ctypes.c_uint32),
    ('wavefrontsPerSimd', ctypes.c_uint32),
    ('wavefrontSize', ctypes.c_uint32),
    ('sgprsPerSimd', ctypes.c_uint32),
    ('minSgprAllocation', ctypes.c_uint32),
    ('maxSgprAllocation', ctypes.c_uint32),
    ('sgprAllocationGranularity', ctypes.c_uint32),
    ('vgprsPerSimd', ctypes.c_uint32),
    ('minVgprAllocation', ctypes.c_uint32),
    ('maxVgprAllocation', ctypes.c_uint32),
    ('vgprAllocationGranularity', ctypes.c_uint32),
]

VkPhysicalDeviceShaderCorePropertiesAMD = struct_VkPhysicalDeviceShaderCorePropertiesAMD

# values for enumeration 'VkMemoryOverallocationBehaviorAMD'
VkMemoryOverallocationBehaviorAMD__enumvalues = {
    0: 'VK_MEMORY_OVERALLOCATION_BEHAVIOR_DEFAULT_AMD',
    1: 'VK_MEMORY_OVERALLOCATION_BEHAVIOR_ALLOWED_AMD',
    2: 'VK_MEMORY_OVERALLOCATION_BEHAVIOR_DISALLOWED_AMD',
    2147483647: 'VK_MEMORY_OVERALLOCATION_BEHAVIOR_MAX_ENUM_AMD',
}
VK_MEMORY_OVERALLOCATION_BEHAVIOR_DEFAULT_AMD = 0
VK_MEMORY_OVERALLOCATION_BEHAVIOR_ALLOWED_AMD = 1
VK_MEMORY_OVERALLOCATION_BEHAVIOR_DISALLOWED_AMD = 2
VK_MEMORY_OVERALLOCATION_BEHAVIOR_MAX_ENUM_AMD = 2147483647
VkMemoryOverallocationBehaviorAMD = ctypes.c_uint32 # enum
class struct_VkDeviceMemoryOverallocationCreateInfoAMD(Structure):
    pass

struct_VkDeviceMemoryOverallocationCreateInfoAMD._pack_ = 1 # source:False
struct_VkDeviceMemoryOverallocationCreateInfoAMD._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('overallocationBehavior', VkMemoryOverallocationBehaviorAMD),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkDeviceMemoryOverallocationCreateInfoAMD = struct_VkDeviceMemoryOverallocationCreateInfoAMD
class struct_VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT(Structure):
    pass

struct_VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT._pack_ = 1 # source:False
struct_VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('maxVertexAttribDivisor', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT = struct_VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT
VkVertexInputBindingDivisorDescriptionEXT = struct_VkVertexInputBindingDivisorDescriptionKHR
VkPipelineVertexInputDivisorStateCreateInfoEXT = struct_VkPipelineVertexInputDivisorStateCreateInfoKHR
VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT = struct_VkPhysicalDeviceVertexAttributeDivisorFeaturesKHR
VkPipelineCreationFeedbackFlagBitsEXT = VkPipelineCreationFeedbackFlagBits
VkPipelineCreationFeedbackFlagBitsEXT__enumvalues = VkPipelineCreationFeedbackFlagBits__enumvalues
VkPipelineCreationFeedbackFlagsEXT = ctypes.c_uint32
VkPipelineCreationFeedbackCreateInfoEXT = struct_VkPipelineCreationFeedbackCreateInfo
VkPipelineCreationFeedbackEXT = struct_VkPipelineCreationFeedback
class struct_VkPhysicalDeviceComputeShaderDerivativesFeaturesNV(Structure):
    pass

struct_VkPhysicalDeviceComputeShaderDerivativesFeaturesNV._pack_ = 1 # source:False
struct_VkPhysicalDeviceComputeShaderDerivativesFeaturesNV._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('computeDerivativeGroupQuads', ctypes.c_uint32),
    ('computeDerivativeGroupLinear', ctypes.c_uint32),
]

VkPhysicalDeviceComputeShaderDerivativesFeaturesNV = struct_VkPhysicalDeviceComputeShaderDerivativesFeaturesNV
class struct_VkPhysicalDeviceMeshShaderFeaturesNV(Structure):
    pass

struct_VkPhysicalDeviceMeshShaderFeaturesNV._pack_ = 1 # source:False
struct_VkPhysicalDeviceMeshShaderFeaturesNV._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('taskShader', ctypes.c_uint32),
    ('meshShader', ctypes.c_uint32),
]

VkPhysicalDeviceMeshShaderFeaturesNV = struct_VkPhysicalDeviceMeshShaderFeaturesNV
class struct_VkPhysicalDeviceMeshShaderPropertiesNV(Structure):
    pass

struct_VkPhysicalDeviceMeshShaderPropertiesNV._pack_ = 1 # source:False
struct_VkPhysicalDeviceMeshShaderPropertiesNV._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('maxDrawMeshTasksCount', ctypes.c_uint32),
    ('maxTaskWorkGroupInvocations', ctypes.c_uint32),
    ('maxTaskWorkGroupSize', ctypes.c_uint32 * 3),
    ('maxTaskTotalMemorySize', ctypes.c_uint32),
    ('maxTaskOutputCount', ctypes.c_uint32),
    ('maxMeshWorkGroupInvocations', ctypes.c_uint32),
    ('maxMeshWorkGroupSize', ctypes.c_uint32 * 3),
    ('maxMeshTotalMemorySize', ctypes.c_uint32),
    ('maxMeshOutputVertices', ctypes.c_uint32),
    ('maxMeshOutputPrimitives', ctypes.c_uint32),
    ('maxMeshMultiviewViewCount', ctypes.c_uint32),
    ('meshOutputPerVertexGranularity', ctypes.c_uint32),
    ('meshOutputPerPrimitiveGranularity', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPhysicalDeviceMeshShaderPropertiesNV = struct_VkPhysicalDeviceMeshShaderPropertiesNV
class struct_VkDrawMeshTasksIndirectCommandNV(Structure):
    pass

struct_VkDrawMeshTasksIndirectCommandNV._pack_ = 1 # source:False
struct_VkDrawMeshTasksIndirectCommandNV._fields_ = [
    ('taskCount', ctypes.c_uint32),
    ('firstTask', ctypes.c_uint32),
]

VkDrawMeshTasksIndirectCommandNV = struct_VkDrawMeshTasksIndirectCommandNV
PFN_vkCmdDrawMeshTasksNV = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.c_uint32, ctypes.c_uint32)
PFN_vkCmdDrawMeshTasksIndirectNV = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.POINTER(struct_VkBuffer_T), ctypes.c_uint64, ctypes.c_uint32, ctypes.c_uint32)
PFN_vkCmdDrawMeshTasksIndirectCountNV = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.POINTER(struct_VkBuffer_T), ctypes.c_uint64, ctypes.POINTER(struct_VkBuffer_T), ctypes.c_uint64, ctypes.c_uint32, ctypes.c_uint32)
try:
    vkCmdDrawMeshTasksNV = _libraries['FIXME_STUB'].vkCmdDrawMeshTasksNV
    vkCmdDrawMeshTasksNV.restype = None
    vkCmdDrawMeshTasksNV.argtypes = [VkCommandBuffer, uint32_t, uint32_t]
except AttributeError:
    pass
try:
    vkCmdDrawMeshTasksIndirectNV = _libraries['FIXME_STUB'].vkCmdDrawMeshTasksIndirectNV
    vkCmdDrawMeshTasksIndirectNV.restype = None
    vkCmdDrawMeshTasksIndirectNV.argtypes = [VkCommandBuffer, VkBuffer, VkDeviceSize, uint32_t, uint32_t]
except AttributeError:
    pass
try:
    vkCmdDrawMeshTasksIndirectCountNV = _libraries['FIXME_STUB'].vkCmdDrawMeshTasksIndirectCountNV
    vkCmdDrawMeshTasksIndirectCountNV.restype = None
    vkCmdDrawMeshTasksIndirectCountNV.argtypes = [VkCommandBuffer, VkBuffer, VkDeviceSize, VkBuffer, VkDeviceSize, uint32_t, uint32_t]
except AttributeError:
    pass
VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV = struct_VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR
class struct_VkPhysicalDeviceShaderImageFootprintFeaturesNV(Structure):
    pass

struct_VkPhysicalDeviceShaderImageFootprintFeaturesNV._pack_ = 1 # source:False
struct_VkPhysicalDeviceShaderImageFootprintFeaturesNV._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('imageFootprint', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPhysicalDeviceShaderImageFootprintFeaturesNV = struct_VkPhysicalDeviceShaderImageFootprintFeaturesNV
class struct_VkPipelineViewportExclusiveScissorStateCreateInfoNV(Structure):
    pass

struct_VkPipelineViewportExclusiveScissorStateCreateInfoNV._pack_ = 1 # source:False
struct_VkPipelineViewportExclusiveScissorStateCreateInfoNV._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('exclusiveScissorCount', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('pExclusiveScissors', ctypes.POINTER(struct_VkRect2D)),
]

VkPipelineViewportExclusiveScissorStateCreateInfoNV = struct_VkPipelineViewportExclusiveScissorStateCreateInfoNV
class struct_VkPhysicalDeviceExclusiveScissorFeaturesNV(Structure):
    pass

struct_VkPhysicalDeviceExclusiveScissorFeaturesNV._pack_ = 1 # source:False
struct_VkPhysicalDeviceExclusiveScissorFeaturesNV._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('exclusiveScissor', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPhysicalDeviceExclusiveScissorFeaturesNV = struct_VkPhysicalDeviceExclusiveScissorFeaturesNV
PFN_vkCmdSetExclusiveScissorEnableNV = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.c_uint32, ctypes.c_uint32, ctypes.POINTER(ctypes.c_uint32))
PFN_vkCmdSetExclusiveScissorNV = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.c_uint32, ctypes.c_uint32, ctypes.POINTER(struct_VkRect2D))
try:
    vkCmdSetExclusiveScissorEnableNV = _libraries['FIXME_STUB'].vkCmdSetExclusiveScissorEnableNV
    vkCmdSetExclusiveScissorEnableNV.restype = None
    vkCmdSetExclusiveScissorEnableNV.argtypes = [VkCommandBuffer, uint32_t, uint32_t, ctypes.POINTER(ctypes.c_uint32)]
except AttributeError:
    pass
try:
    vkCmdSetExclusiveScissorNV = _libraries['FIXME_STUB'].vkCmdSetExclusiveScissorNV
    vkCmdSetExclusiveScissorNV.restype = None
    vkCmdSetExclusiveScissorNV.argtypes = [VkCommandBuffer, uint32_t, uint32_t, ctypes.POINTER(struct_VkRect2D)]
except AttributeError:
    pass
class struct_VkQueueFamilyCheckpointPropertiesNV(Structure):
    pass

struct_VkQueueFamilyCheckpointPropertiesNV._pack_ = 1 # source:False
struct_VkQueueFamilyCheckpointPropertiesNV._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('checkpointExecutionStageMask', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkQueueFamilyCheckpointPropertiesNV = struct_VkQueueFamilyCheckpointPropertiesNV
class struct_VkCheckpointDataNV(Structure):
    pass

struct_VkCheckpointDataNV._pack_ = 1 # source:False
struct_VkCheckpointDataNV._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('stage', VkPipelineStageFlagBits),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('pCheckpointMarker', ctypes.POINTER(None)),
]

VkCheckpointDataNV = struct_VkCheckpointDataNV
PFN_vkCmdSetCheckpointNV = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.POINTER(None))
PFN_vkGetQueueCheckpointDataNV = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkQueue_T), ctypes.POINTER(ctypes.c_uint32), ctypes.POINTER(struct_VkCheckpointDataNV))
try:
    vkCmdSetCheckpointNV = _libraries['FIXME_STUB'].vkCmdSetCheckpointNV
    vkCmdSetCheckpointNV.restype = None
    vkCmdSetCheckpointNV.argtypes = [VkCommandBuffer, ctypes.POINTER(None)]
except AttributeError:
    pass
try:
    vkGetQueueCheckpointDataNV = _libraries['FIXME_STUB'].vkGetQueueCheckpointDataNV
    vkGetQueueCheckpointDataNV.restype = None
    vkGetQueueCheckpointDataNV.argtypes = [VkQueue, ctypes.POINTER(ctypes.c_uint32), ctypes.POINTER(struct_VkCheckpointDataNV)]
except AttributeError:
    pass
class struct_VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL(Structure):
    pass

struct_VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL._pack_ = 1 # source:False
struct_VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('shaderIntegerFunctions2', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL = struct_VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL
class struct_VkPerformanceConfigurationINTEL_T(Structure):
    pass

VkPerformanceConfigurationINTEL = ctypes.POINTER(struct_VkPerformanceConfigurationINTEL_T)

# values for enumeration 'VkPerformanceConfigurationTypeINTEL'
VkPerformanceConfigurationTypeINTEL__enumvalues = {
    0: 'VK_PERFORMANCE_CONFIGURATION_TYPE_COMMAND_QUEUE_METRICS_DISCOVERY_ACTIVATED_INTEL',
    2147483647: 'VK_PERFORMANCE_CONFIGURATION_TYPE_MAX_ENUM_INTEL',
}
VK_PERFORMANCE_CONFIGURATION_TYPE_COMMAND_QUEUE_METRICS_DISCOVERY_ACTIVATED_INTEL = 0
VK_PERFORMANCE_CONFIGURATION_TYPE_MAX_ENUM_INTEL = 2147483647
VkPerformanceConfigurationTypeINTEL = ctypes.c_uint32 # enum

# values for enumeration 'VkQueryPoolSamplingModeINTEL'
VkQueryPoolSamplingModeINTEL__enumvalues = {
    0: 'VK_QUERY_POOL_SAMPLING_MODE_MANUAL_INTEL',
    2147483647: 'VK_QUERY_POOL_SAMPLING_MODE_MAX_ENUM_INTEL',
}
VK_QUERY_POOL_SAMPLING_MODE_MANUAL_INTEL = 0
VK_QUERY_POOL_SAMPLING_MODE_MAX_ENUM_INTEL = 2147483647
VkQueryPoolSamplingModeINTEL = ctypes.c_uint32 # enum

# values for enumeration 'VkPerformanceOverrideTypeINTEL'
VkPerformanceOverrideTypeINTEL__enumvalues = {
    0: 'VK_PERFORMANCE_OVERRIDE_TYPE_NULL_HARDWARE_INTEL',
    1: 'VK_PERFORMANCE_OVERRIDE_TYPE_FLUSH_GPU_CACHES_INTEL',
    2147483647: 'VK_PERFORMANCE_OVERRIDE_TYPE_MAX_ENUM_INTEL',
}
VK_PERFORMANCE_OVERRIDE_TYPE_NULL_HARDWARE_INTEL = 0
VK_PERFORMANCE_OVERRIDE_TYPE_FLUSH_GPU_CACHES_INTEL = 1
VK_PERFORMANCE_OVERRIDE_TYPE_MAX_ENUM_INTEL = 2147483647
VkPerformanceOverrideTypeINTEL = ctypes.c_uint32 # enum

# values for enumeration 'VkPerformanceParameterTypeINTEL'
VkPerformanceParameterTypeINTEL__enumvalues = {
    0: 'VK_PERFORMANCE_PARAMETER_TYPE_HW_COUNTERS_SUPPORTED_INTEL',
    1: 'VK_PERFORMANCE_PARAMETER_TYPE_STREAM_MARKER_VALID_BITS_INTEL',
    2147483647: 'VK_PERFORMANCE_PARAMETER_TYPE_MAX_ENUM_INTEL',
}
VK_PERFORMANCE_PARAMETER_TYPE_HW_COUNTERS_SUPPORTED_INTEL = 0
VK_PERFORMANCE_PARAMETER_TYPE_STREAM_MARKER_VALID_BITS_INTEL = 1
VK_PERFORMANCE_PARAMETER_TYPE_MAX_ENUM_INTEL = 2147483647
VkPerformanceParameterTypeINTEL = ctypes.c_uint32 # enum

# values for enumeration 'VkPerformanceValueTypeINTEL'
VkPerformanceValueTypeINTEL__enumvalues = {
    0: 'VK_PERFORMANCE_VALUE_TYPE_UINT32_INTEL',
    1: 'VK_PERFORMANCE_VALUE_TYPE_UINT64_INTEL',
    2: 'VK_PERFORMANCE_VALUE_TYPE_FLOAT_INTEL',
    3: 'VK_PERFORMANCE_VALUE_TYPE_BOOL_INTEL',
    4: 'VK_PERFORMANCE_VALUE_TYPE_STRING_INTEL',
    2147483647: 'VK_PERFORMANCE_VALUE_TYPE_MAX_ENUM_INTEL',
}
VK_PERFORMANCE_VALUE_TYPE_UINT32_INTEL = 0
VK_PERFORMANCE_VALUE_TYPE_UINT64_INTEL = 1
VK_PERFORMANCE_VALUE_TYPE_FLOAT_INTEL = 2
VK_PERFORMANCE_VALUE_TYPE_BOOL_INTEL = 3
VK_PERFORMANCE_VALUE_TYPE_STRING_INTEL = 4
VK_PERFORMANCE_VALUE_TYPE_MAX_ENUM_INTEL = 2147483647
VkPerformanceValueTypeINTEL = ctypes.c_uint32 # enum
class union_VkPerformanceValueDataINTEL(Union):
    pass

union_VkPerformanceValueDataINTEL._pack_ = 1 # source:False
union_VkPerformanceValueDataINTEL._fields_ = [
    ('value32', ctypes.c_uint32),
    ('value64', ctypes.c_uint64),
    ('valueFloat', ctypes.c_float),
    ('valueBool', ctypes.c_uint32),
    ('valueString', ctypes.POINTER(ctypes.c_char)),
]

VkPerformanceValueDataINTEL = union_VkPerformanceValueDataINTEL
class struct_VkPerformanceValueINTEL(Structure):
    pass

struct_VkPerformanceValueINTEL._pack_ = 1 # source:False
struct_VkPerformanceValueINTEL._fields_ = [
    ('type', VkPerformanceValueTypeINTEL),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('data', VkPerformanceValueDataINTEL),
]

VkPerformanceValueINTEL = struct_VkPerformanceValueINTEL
class struct_VkInitializePerformanceApiInfoINTEL(Structure):
    pass

struct_VkInitializePerformanceApiInfoINTEL._pack_ = 1 # source:False
struct_VkInitializePerformanceApiInfoINTEL._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('pUserData', ctypes.POINTER(None)),
]

VkInitializePerformanceApiInfoINTEL = struct_VkInitializePerformanceApiInfoINTEL
class struct_VkQueryPoolPerformanceQueryCreateInfoINTEL(Structure):
    pass

struct_VkQueryPoolPerformanceQueryCreateInfoINTEL._pack_ = 1 # source:False
struct_VkQueryPoolPerformanceQueryCreateInfoINTEL._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('performanceCountersSampling', VkQueryPoolSamplingModeINTEL),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkQueryPoolPerformanceQueryCreateInfoINTEL = struct_VkQueryPoolPerformanceQueryCreateInfoINTEL
VkQueryPoolCreateInfoINTEL = struct_VkQueryPoolPerformanceQueryCreateInfoINTEL
class struct_VkPerformanceMarkerInfoINTEL(Structure):
    pass

struct_VkPerformanceMarkerInfoINTEL._pack_ = 1 # source:False
struct_VkPerformanceMarkerInfoINTEL._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('marker', ctypes.c_uint64),
]

VkPerformanceMarkerInfoINTEL = struct_VkPerformanceMarkerInfoINTEL
class struct_VkPerformanceStreamMarkerInfoINTEL(Structure):
    pass

struct_VkPerformanceStreamMarkerInfoINTEL._pack_ = 1 # source:False
struct_VkPerformanceStreamMarkerInfoINTEL._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('marker', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPerformanceStreamMarkerInfoINTEL = struct_VkPerformanceStreamMarkerInfoINTEL
class struct_VkPerformanceOverrideInfoINTEL(Structure):
    pass

struct_VkPerformanceOverrideInfoINTEL._pack_ = 1 # source:False
struct_VkPerformanceOverrideInfoINTEL._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('type', VkPerformanceOverrideTypeINTEL),
    ('enable', ctypes.c_uint32),
    ('parameter', ctypes.c_uint64),
]

VkPerformanceOverrideInfoINTEL = struct_VkPerformanceOverrideInfoINTEL
class struct_VkPerformanceConfigurationAcquireInfoINTEL(Structure):
    pass

struct_VkPerformanceConfigurationAcquireInfoINTEL._pack_ = 1 # source:False
struct_VkPerformanceConfigurationAcquireInfoINTEL._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('type', VkPerformanceConfigurationTypeINTEL),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPerformanceConfigurationAcquireInfoINTEL = struct_VkPerformanceConfigurationAcquireInfoINTEL
PFN_vkInitializePerformanceApiINTEL = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkInitializePerformanceApiInfoINTEL))
PFN_vkUninitializePerformanceApiINTEL = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkDevice_T))
PFN_vkCmdSetPerformanceMarkerINTEL = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.POINTER(struct_VkPerformanceMarkerInfoINTEL))
PFN_vkCmdSetPerformanceStreamMarkerINTEL = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.POINTER(struct_VkPerformanceStreamMarkerInfoINTEL))
PFN_vkCmdSetPerformanceOverrideINTEL = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.POINTER(struct_VkPerformanceOverrideInfoINTEL))
PFN_vkAcquirePerformanceConfigurationINTEL = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkPerformanceConfigurationAcquireInfoINTEL), ctypes.POINTER(ctypes.POINTER(struct_VkPerformanceConfigurationINTEL_T)))
PFN_vkReleasePerformanceConfigurationINTEL = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkPerformanceConfigurationINTEL_T))
PFN_vkQueueSetPerformanceConfigurationINTEL = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkQueue_T), ctypes.POINTER(struct_VkPerformanceConfigurationINTEL_T))
PFN_vkGetPerformanceParameterINTEL = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkDevice_T), VkPerformanceParameterTypeINTEL, ctypes.POINTER(struct_VkPerformanceValueINTEL))
try:
    vkInitializePerformanceApiINTEL = _libraries['FIXME_STUB'].vkInitializePerformanceApiINTEL
    vkInitializePerformanceApiINTEL.restype = VkResult
    vkInitializePerformanceApiINTEL.argtypes = [VkDevice, ctypes.POINTER(struct_VkInitializePerformanceApiInfoINTEL)]
except AttributeError:
    pass
try:
    vkUninitializePerformanceApiINTEL = _libraries['FIXME_STUB'].vkUninitializePerformanceApiINTEL
    vkUninitializePerformanceApiINTEL.restype = None
    vkUninitializePerformanceApiINTEL.argtypes = [VkDevice]
except AttributeError:
    pass
try:
    vkCmdSetPerformanceMarkerINTEL = _libraries['FIXME_STUB'].vkCmdSetPerformanceMarkerINTEL
    vkCmdSetPerformanceMarkerINTEL.restype = VkResult
    vkCmdSetPerformanceMarkerINTEL.argtypes = [VkCommandBuffer, ctypes.POINTER(struct_VkPerformanceMarkerInfoINTEL)]
except AttributeError:
    pass
try:
    vkCmdSetPerformanceStreamMarkerINTEL = _libraries['FIXME_STUB'].vkCmdSetPerformanceStreamMarkerINTEL
    vkCmdSetPerformanceStreamMarkerINTEL.restype = VkResult
    vkCmdSetPerformanceStreamMarkerINTEL.argtypes = [VkCommandBuffer, ctypes.POINTER(struct_VkPerformanceStreamMarkerInfoINTEL)]
except AttributeError:
    pass
try:
    vkCmdSetPerformanceOverrideINTEL = _libraries['FIXME_STUB'].vkCmdSetPerformanceOverrideINTEL
    vkCmdSetPerformanceOverrideINTEL.restype = VkResult
    vkCmdSetPerformanceOverrideINTEL.argtypes = [VkCommandBuffer, ctypes.POINTER(struct_VkPerformanceOverrideInfoINTEL)]
except AttributeError:
    pass
try:
    vkAcquirePerformanceConfigurationINTEL = _libraries['FIXME_STUB'].vkAcquirePerformanceConfigurationINTEL
    vkAcquirePerformanceConfigurationINTEL.restype = VkResult
    vkAcquirePerformanceConfigurationINTEL.argtypes = [VkDevice, ctypes.POINTER(struct_VkPerformanceConfigurationAcquireInfoINTEL), ctypes.POINTER(ctypes.POINTER(struct_VkPerformanceConfigurationINTEL_T))]
except AttributeError:
    pass
try:
    vkReleasePerformanceConfigurationINTEL = _libraries['FIXME_STUB'].vkReleasePerformanceConfigurationINTEL
    vkReleasePerformanceConfigurationINTEL.restype = VkResult
    vkReleasePerformanceConfigurationINTEL.argtypes = [VkDevice, VkPerformanceConfigurationINTEL]
except AttributeError:
    pass
try:
    vkQueueSetPerformanceConfigurationINTEL = _libraries['FIXME_STUB'].vkQueueSetPerformanceConfigurationINTEL
    vkQueueSetPerformanceConfigurationINTEL.restype = VkResult
    vkQueueSetPerformanceConfigurationINTEL.argtypes = [VkQueue, VkPerformanceConfigurationINTEL]
except AttributeError:
    pass
try:
    vkGetPerformanceParameterINTEL = _libraries['FIXME_STUB'].vkGetPerformanceParameterINTEL
    vkGetPerformanceParameterINTEL.restype = VkResult
    vkGetPerformanceParameterINTEL.argtypes = [VkDevice, VkPerformanceParameterTypeINTEL, ctypes.POINTER(struct_VkPerformanceValueINTEL)]
except AttributeError:
    pass
class struct_VkPhysicalDevicePCIBusInfoPropertiesEXT(Structure):
    pass

struct_VkPhysicalDevicePCIBusInfoPropertiesEXT._pack_ = 1 # source:False
struct_VkPhysicalDevicePCIBusInfoPropertiesEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('pciDomain', ctypes.c_uint32),
    ('pciBus', ctypes.c_uint32),
    ('pciDevice', ctypes.c_uint32),
    ('pciFunction', ctypes.c_uint32),
]

VkPhysicalDevicePCIBusInfoPropertiesEXT = struct_VkPhysicalDevicePCIBusInfoPropertiesEXT
class struct_VkDisplayNativeHdrSurfaceCapabilitiesAMD(Structure):
    pass

struct_VkDisplayNativeHdrSurfaceCapabilitiesAMD._pack_ = 1 # source:False
struct_VkDisplayNativeHdrSurfaceCapabilitiesAMD._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('localDimmingSupport', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkDisplayNativeHdrSurfaceCapabilitiesAMD = struct_VkDisplayNativeHdrSurfaceCapabilitiesAMD
class struct_VkSwapchainDisplayNativeHdrCreateInfoAMD(Structure):
    pass

struct_VkSwapchainDisplayNativeHdrCreateInfoAMD._pack_ = 1 # source:False
struct_VkSwapchainDisplayNativeHdrCreateInfoAMD._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('localDimmingEnable', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkSwapchainDisplayNativeHdrCreateInfoAMD = struct_VkSwapchainDisplayNativeHdrCreateInfoAMD
PFN_vkSetLocalDimmingAMD = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkSwapchainKHR_T), ctypes.c_uint32)
try:
    vkSetLocalDimmingAMD = _libraries['FIXME_STUB'].vkSetLocalDimmingAMD
    vkSetLocalDimmingAMD.restype = None
    vkSetLocalDimmingAMD.argtypes = [VkDevice, VkSwapchainKHR, VkBool32]
except AttributeError:
    pass
class struct_VkPhysicalDeviceFragmentDensityMapFeaturesEXT(Structure):
    pass

struct_VkPhysicalDeviceFragmentDensityMapFeaturesEXT._pack_ = 1 # source:False
struct_VkPhysicalDeviceFragmentDensityMapFeaturesEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('fragmentDensityMap', ctypes.c_uint32),
    ('fragmentDensityMapDynamic', ctypes.c_uint32),
    ('fragmentDensityMapNonSubsampledImages', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPhysicalDeviceFragmentDensityMapFeaturesEXT = struct_VkPhysicalDeviceFragmentDensityMapFeaturesEXT
class struct_VkPhysicalDeviceFragmentDensityMapPropertiesEXT(Structure):
    pass

struct_VkPhysicalDeviceFragmentDensityMapPropertiesEXT._pack_ = 1 # source:False
struct_VkPhysicalDeviceFragmentDensityMapPropertiesEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('minFragmentDensityTexelSize', VkExtent2D),
    ('maxFragmentDensityTexelSize', VkExtent2D),
    ('fragmentDensityInvocations', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPhysicalDeviceFragmentDensityMapPropertiesEXT = struct_VkPhysicalDeviceFragmentDensityMapPropertiesEXT
class struct_VkRenderPassFragmentDensityMapCreateInfoEXT(Structure):
    pass

struct_VkRenderPassFragmentDensityMapCreateInfoEXT._pack_ = 1 # source:False
struct_VkRenderPassFragmentDensityMapCreateInfoEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('fragmentDensityMapAttachment', VkAttachmentReference),
]

VkRenderPassFragmentDensityMapCreateInfoEXT = struct_VkRenderPassFragmentDensityMapCreateInfoEXT
VkPhysicalDeviceScalarBlockLayoutFeaturesEXT = struct_VkPhysicalDeviceScalarBlockLayoutFeatures
VkPhysicalDeviceSubgroupSizeControlFeaturesEXT = struct_VkPhysicalDeviceSubgroupSizeControlFeatures
VkPhysicalDeviceSubgroupSizeControlPropertiesEXT = struct_VkPhysicalDeviceSubgroupSizeControlProperties
VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT = struct_VkPipelineShaderStageRequiredSubgroupSizeCreateInfo

# values for enumeration 'VkShaderCorePropertiesFlagBitsAMD'
VkShaderCorePropertiesFlagBitsAMD__enumvalues = {
    2147483647: 'VK_SHADER_CORE_PROPERTIES_FLAG_BITS_MAX_ENUM_AMD',
}
VK_SHADER_CORE_PROPERTIES_FLAG_BITS_MAX_ENUM_AMD = 2147483647
VkShaderCorePropertiesFlagBitsAMD = ctypes.c_uint32 # enum
VkShaderCorePropertiesFlagsAMD = ctypes.c_uint32
class struct_VkPhysicalDeviceShaderCoreProperties2AMD(Structure):
    pass

struct_VkPhysicalDeviceShaderCoreProperties2AMD._pack_ = 1 # source:False
struct_VkPhysicalDeviceShaderCoreProperties2AMD._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('shaderCoreFeatures', ctypes.c_uint32),
    ('activeComputeUnitCount', ctypes.c_uint32),
]

VkPhysicalDeviceShaderCoreProperties2AMD = struct_VkPhysicalDeviceShaderCoreProperties2AMD
class struct_VkPhysicalDeviceCoherentMemoryFeaturesAMD(Structure):
    pass

struct_VkPhysicalDeviceCoherentMemoryFeaturesAMD._pack_ = 1 # source:False
struct_VkPhysicalDeviceCoherentMemoryFeaturesAMD._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('deviceCoherentMemory', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPhysicalDeviceCoherentMemoryFeaturesAMD = struct_VkPhysicalDeviceCoherentMemoryFeaturesAMD
class struct_VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT(Structure):
    pass

struct_VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT._pack_ = 1 # source:False
struct_VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('shaderImageInt64Atomics', ctypes.c_uint32),
    ('sparseImageInt64Atomics', ctypes.c_uint32),
]

VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT = struct_VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT
class struct_VkPhysicalDeviceMemoryBudgetPropertiesEXT(Structure):
    pass

struct_VkPhysicalDeviceMemoryBudgetPropertiesEXT._pack_ = 1 # source:False
struct_VkPhysicalDeviceMemoryBudgetPropertiesEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('heapBudget', ctypes.c_uint64 * 16),
    ('heapUsage', ctypes.c_uint64 * 16),
]

VkPhysicalDeviceMemoryBudgetPropertiesEXT = struct_VkPhysicalDeviceMemoryBudgetPropertiesEXT
class struct_VkPhysicalDeviceMemoryPriorityFeaturesEXT(Structure):
    pass

struct_VkPhysicalDeviceMemoryPriorityFeaturesEXT._pack_ = 1 # source:False
struct_VkPhysicalDeviceMemoryPriorityFeaturesEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('memoryPriority', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPhysicalDeviceMemoryPriorityFeaturesEXT = struct_VkPhysicalDeviceMemoryPriorityFeaturesEXT
class struct_VkMemoryPriorityAllocateInfoEXT(Structure):
    pass

struct_VkMemoryPriorityAllocateInfoEXT._pack_ = 1 # source:False
struct_VkMemoryPriorityAllocateInfoEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('priority', ctypes.c_float),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkMemoryPriorityAllocateInfoEXT = struct_VkMemoryPriorityAllocateInfoEXT
class struct_VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV(Structure):
    pass

struct_VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV._pack_ = 1 # source:False
struct_VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('dedicatedAllocationImageAliasing', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV = struct_VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV
class struct_VkPhysicalDeviceBufferDeviceAddressFeaturesEXT(Structure):
    pass

struct_VkPhysicalDeviceBufferDeviceAddressFeaturesEXT._pack_ = 1 # source:False
struct_VkPhysicalDeviceBufferDeviceAddressFeaturesEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('bufferDeviceAddress', ctypes.c_uint32),
    ('bufferDeviceAddressCaptureReplay', ctypes.c_uint32),
    ('bufferDeviceAddressMultiDevice', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPhysicalDeviceBufferDeviceAddressFeaturesEXT = struct_VkPhysicalDeviceBufferDeviceAddressFeaturesEXT
VkPhysicalDeviceBufferAddressFeaturesEXT = struct_VkPhysicalDeviceBufferDeviceAddressFeaturesEXT
VkBufferDeviceAddressInfoEXT = struct_VkBufferDeviceAddressInfo
class struct_VkBufferDeviceAddressCreateInfoEXT(Structure):
    pass

struct_VkBufferDeviceAddressCreateInfoEXT._pack_ = 1 # source:False
struct_VkBufferDeviceAddressCreateInfoEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('deviceAddress', ctypes.c_uint64),
]

VkBufferDeviceAddressCreateInfoEXT = struct_VkBufferDeviceAddressCreateInfoEXT
PFN_vkGetBufferDeviceAddressEXT = ctypes.CFUNCTYPE(ctypes.c_uint64, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkBufferDeviceAddressInfo))
try:
    vkGetBufferDeviceAddressEXT = _libraries['FIXME_STUB'].vkGetBufferDeviceAddressEXT
    vkGetBufferDeviceAddressEXT.restype = VkDeviceAddress
    vkGetBufferDeviceAddressEXT.argtypes = [VkDevice, ctypes.POINTER(struct_VkBufferDeviceAddressInfo)]
except AttributeError:
    pass
VkToolPurposeFlagBitsEXT = VkToolPurposeFlagBits
VkToolPurposeFlagBitsEXT__enumvalues = VkToolPurposeFlagBits__enumvalues
VkToolPurposeFlagsEXT = ctypes.c_uint32
VkPhysicalDeviceToolPropertiesEXT = struct_VkPhysicalDeviceToolProperties
PFN_vkGetPhysicalDeviceToolPropertiesEXT = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkPhysicalDevice_T), ctypes.POINTER(ctypes.c_uint32), ctypes.POINTER(struct_VkPhysicalDeviceToolProperties))
try:
    vkGetPhysicalDeviceToolPropertiesEXT = _libraries['FIXME_STUB'].vkGetPhysicalDeviceToolPropertiesEXT
    vkGetPhysicalDeviceToolPropertiesEXT.restype = VkResult
    vkGetPhysicalDeviceToolPropertiesEXT.argtypes = [VkPhysicalDevice, ctypes.POINTER(ctypes.c_uint32), ctypes.POINTER(struct_VkPhysicalDeviceToolProperties)]
except AttributeError:
    pass
VkImageStencilUsageCreateInfoEXT = struct_VkImageStencilUsageCreateInfo

# values for enumeration 'VkValidationFeatureEnableEXT'
VkValidationFeatureEnableEXT__enumvalues = {
    0: 'VK_VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_EXT',
    1: 'VK_VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_RESERVE_BINDING_SLOT_EXT',
    2: 'VK_VALIDATION_FEATURE_ENABLE_BEST_PRACTICES_EXT',
    3: 'VK_VALIDATION_FEATURE_ENABLE_DEBUG_PRINTF_EXT',
    4: 'VK_VALIDATION_FEATURE_ENABLE_SYNCHRONIZATION_VALIDATION_EXT',
    2147483647: 'VK_VALIDATION_FEATURE_ENABLE_MAX_ENUM_EXT',
}
VK_VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_EXT = 0
VK_VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_RESERVE_BINDING_SLOT_EXT = 1
VK_VALIDATION_FEATURE_ENABLE_BEST_PRACTICES_EXT = 2
VK_VALIDATION_FEATURE_ENABLE_DEBUG_PRINTF_EXT = 3
VK_VALIDATION_FEATURE_ENABLE_SYNCHRONIZATION_VALIDATION_EXT = 4
VK_VALIDATION_FEATURE_ENABLE_MAX_ENUM_EXT = 2147483647
VkValidationFeatureEnableEXT = ctypes.c_uint32 # enum

# values for enumeration 'VkValidationFeatureDisableEXT'
VkValidationFeatureDisableEXT__enumvalues = {
    0: 'VK_VALIDATION_FEATURE_DISABLE_ALL_EXT',
    1: 'VK_VALIDATION_FEATURE_DISABLE_SHADERS_EXT',
    2: 'VK_VALIDATION_FEATURE_DISABLE_THREAD_SAFETY_EXT',
    3: 'VK_VALIDATION_FEATURE_DISABLE_API_PARAMETERS_EXT',
    4: 'VK_VALIDATION_FEATURE_DISABLE_OBJECT_LIFETIMES_EXT',
    5: 'VK_VALIDATION_FEATURE_DISABLE_CORE_CHECKS_EXT',
    6: 'VK_VALIDATION_FEATURE_DISABLE_UNIQUE_HANDLES_EXT',
    7: 'VK_VALIDATION_FEATURE_DISABLE_SHADER_VALIDATION_CACHE_EXT',
    2147483647: 'VK_VALIDATION_FEATURE_DISABLE_MAX_ENUM_EXT',
}
VK_VALIDATION_FEATURE_DISABLE_ALL_EXT = 0
VK_VALIDATION_FEATURE_DISABLE_SHADERS_EXT = 1
VK_VALIDATION_FEATURE_DISABLE_THREAD_SAFETY_EXT = 2
VK_VALIDATION_FEATURE_DISABLE_API_PARAMETERS_EXT = 3
VK_VALIDATION_FEATURE_DISABLE_OBJECT_LIFETIMES_EXT = 4
VK_VALIDATION_FEATURE_DISABLE_CORE_CHECKS_EXT = 5
VK_VALIDATION_FEATURE_DISABLE_UNIQUE_HANDLES_EXT = 6
VK_VALIDATION_FEATURE_DISABLE_SHADER_VALIDATION_CACHE_EXT = 7
VK_VALIDATION_FEATURE_DISABLE_MAX_ENUM_EXT = 2147483647
VkValidationFeatureDisableEXT = ctypes.c_uint32 # enum
class struct_VkValidationFeaturesEXT(Structure):
    pass

struct_VkValidationFeaturesEXT._pack_ = 1 # source:False
struct_VkValidationFeaturesEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('enabledValidationFeatureCount', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('pEnabledValidationFeatures', ctypes.POINTER(VkValidationFeatureEnableEXT)),
    ('disabledValidationFeatureCount', ctypes.c_uint32),
    ('PADDING_2', ctypes.c_ubyte * 4),
    ('pDisabledValidationFeatures', ctypes.POINTER(VkValidationFeatureDisableEXT)),
]

VkValidationFeaturesEXT = struct_VkValidationFeaturesEXT
VkComponentTypeNV = VkComponentTypeKHR
VkComponentTypeNV__enumvalues = VkComponentTypeKHR__enumvalues
VkScopeNV = VkScopeKHR
VkScopeNV__enumvalues = VkScopeKHR__enumvalues
class struct_VkCooperativeMatrixPropertiesNV(Structure):
    pass

struct_VkCooperativeMatrixPropertiesNV._pack_ = 1 # source:False
struct_VkCooperativeMatrixPropertiesNV._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('MSize', ctypes.c_uint32),
    ('NSize', ctypes.c_uint32),
    ('KSize', ctypes.c_uint32),
    ('AType', VkComponentTypeNV),
    ('BType', VkComponentTypeNV),
    ('CType', VkComponentTypeNV),
    ('DType', VkComponentTypeNV),
    ('scope', VkScopeNV),
]

VkCooperativeMatrixPropertiesNV = struct_VkCooperativeMatrixPropertiesNV
class struct_VkPhysicalDeviceCooperativeMatrixFeaturesNV(Structure):
    pass

struct_VkPhysicalDeviceCooperativeMatrixFeaturesNV._pack_ = 1 # source:False
struct_VkPhysicalDeviceCooperativeMatrixFeaturesNV._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('cooperativeMatrix', ctypes.c_uint32),
    ('cooperativeMatrixRobustBufferAccess', ctypes.c_uint32),
]

VkPhysicalDeviceCooperativeMatrixFeaturesNV = struct_VkPhysicalDeviceCooperativeMatrixFeaturesNV
class struct_VkPhysicalDeviceCooperativeMatrixPropertiesNV(Structure):
    pass

struct_VkPhysicalDeviceCooperativeMatrixPropertiesNV._pack_ = 1 # source:False
struct_VkPhysicalDeviceCooperativeMatrixPropertiesNV._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('cooperativeMatrixSupportedStages', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPhysicalDeviceCooperativeMatrixPropertiesNV = struct_VkPhysicalDeviceCooperativeMatrixPropertiesNV
PFN_vkGetPhysicalDeviceCooperativeMatrixPropertiesNV = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkPhysicalDevice_T), ctypes.POINTER(ctypes.c_uint32), ctypes.POINTER(struct_VkCooperativeMatrixPropertiesNV))
try:
    vkGetPhysicalDeviceCooperativeMatrixPropertiesNV = _libraries['FIXME_STUB'].vkGetPhysicalDeviceCooperativeMatrixPropertiesNV
    vkGetPhysicalDeviceCooperativeMatrixPropertiesNV.restype = VkResult
    vkGetPhysicalDeviceCooperativeMatrixPropertiesNV.argtypes = [VkPhysicalDevice, ctypes.POINTER(ctypes.c_uint32), ctypes.POINTER(struct_VkCooperativeMatrixPropertiesNV)]
except AttributeError:
    pass

# values for enumeration 'VkCoverageReductionModeNV'
VkCoverageReductionModeNV__enumvalues = {
    0: 'VK_COVERAGE_REDUCTION_MODE_MERGE_NV',
    1: 'VK_COVERAGE_REDUCTION_MODE_TRUNCATE_NV',
    2147483647: 'VK_COVERAGE_REDUCTION_MODE_MAX_ENUM_NV',
}
VK_COVERAGE_REDUCTION_MODE_MERGE_NV = 0
VK_COVERAGE_REDUCTION_MODE_TRUNCATE_NV = 1
VK_COVERAGE_REDUCTION_MODE_MAX_ENUM_NV = 2147483647
VkCoverageReductionModeNV = ctypes.c_uint32 # enum
VkPipelineCoverageReductionStateCreateFlagsNV = ctypes.c_uint32
class struct_VkPhysicalDeviceCoverageReductionModeFeaturesNV(Structure):
    pass

struct_VkPhysicalDeviceCoverageReductionModeFeaturesNV._pack_ = 1 # source:False
struct_VkPhysicalDeviceCoverageReductionModeFeaturesNV._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('coverageReductionMode', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPhysicalDeviceCoverageReductionModeFeaturesNV = struct_VkPhysicalDeviceCoverageReductionModeFeaturesNV
class struct_VkPipelineCoverageReductionStateCreateInfoNV(Structure):
    pass

struct_VkPipelineCoverageReductionStateCreateInfoNV._pack_ = 1 # source:False
struct_VkPipelineCoverageReductionStateCreateInfoNV._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('flags', ctypes.c_uint32),
    ('coverageReductionMode', VkCoverageReductionModeNV),
]

VkPipelineCoverageReductionStateCreateInfoNV = struct_VkPipelineCoverageReductionStateCreateInfoNV
class struct_VkFramebufferMixedSamplesCombinationNV(Structure):
    pass

struct_VkFramebufferMixedSamplesCombinationNV._pack_ = 1 # source:False
struct_VkFramebufferMixedSamplesCombinationNV._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('coverageReductionMode', VkCoverageReductionModeNV),
    ('rasterizationSamples', VkSampleCountFlagBits),
    ('depthStencilSamples', ctypes.c_uint32),
    ('colorSamples', ctypes.c_uint32),
]

VkFramebufferMixedSamplesCombinationNV = struct_VkFramebufferMixedSamplesCombinationNV
PFN_vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkPhysicalDevice_T), ctypes.POINTER(ctypes.c_uint32), ctypes.POINTER(struct_VkFramebufferMixedSamplesCombinationNV))
try:
    vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV = _libraries['FIXME_STUB'].vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV
    vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV.restype = VkResult
    vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV.argtypes = [VkPhysicalDevice, ctypes.POINTER(ctypes.c_uint32), ctypes.POINTER(struct_VkFramebufferMixedSamplesCombinationNV)]
except AttributeError:
    pass
class struct_VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT(Structure):
    pass

struct_VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT._pack_ = 1 # source:False
struct_VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('fragmentShaderSampleInterlock', ctypes.c_uint32),
    ('fragmentShaderPixelInterlock', ctypes.c_uint32),
    ('fragmentShaderShadingRateInterlock', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT = struct_VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT
class struct_VkPhysicalDeviceYcbcrImageArraysFeaturesEXT(Structure):
    pass

struct_VkPhysicalDeviceYcbcrImageArraysFeaturesEXT._pack_ = 1 # source:False
struct_VkPhysicalDeviceYcbcrImageArraysFeaturesEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('ycbcrImageArrays', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPhysicalDeviceYcbcrImageArraysFeaturesEXT = struct_VkPhysicalDeviceYcbcrImageArraysFeaturesEXT

# values for enumeration 'VkProvokingVertexModeEXT'
VkProvokingVertexModeEXT__enumvalues = {
    0: 'VK_PROVOKING_VERTEX_MODE_FIRST_VERTEX_EXT',
    1: 'VK_PROVOKING_VERTEX_MODE_LAST_VERTEX_EXT',
    2147483647: 'VK_PROVOKING_VERTEX_MODE_MAX_ENUM_EXT',
}
VK_PROVOKING_VERTEX_MODE_FIRST_VERTEX_EXT = 0
VK_PROVOKING_VERTEX_MODE_LAST_VERTEX_EXT = 1
VK_PROVOKING_VERTEX_MODE_MAX_ENUM_EXT = 2147483647
VkProvokingVertexModeEXT = ctypes.c_uint32 # enum
class struct_VkPhysicalDeviceProvokingVertexFeaturesEXT(Structure):
    pass

struct_VkPhysicalDeviceProvokingVertexFeaturesEXT._pack_ = 1 # source:False
struct_VkPhysicalDeviceProvokingVertexFeaturesEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('provokingVertexLast', ctypes.c_uint32),
    ('transformFeedbackPreservesProvokingVertex', ctypes.c_uint32),
]

VkPhysicalDeviceProvokingVertexFeaturesEXT = struct_VkPhysicalDeviceProvokingVertexFeaturesEXT
class struct_VkPhysicalDeviceProvokingVertexPropertiesEXT(Structure):
    pass

struct_VkPhysicalDeviceProvokingVertexPropertiesEXT._pack_ = 1 # source:False
struct_VkPhysicalDeviceProvokingVertexPropertiesEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('provokingVertexModePerPipeline', ctypes.c_uint32),
    ('transformFeedbackPreservesTriangleFanProvokingVertex', ctypes.c_uint32),
]

VkPhysicalDeviceProvokingVertexPropertiesEXT = struct_VkPhysicalDeviceProvokingVertexPropertiesEXT
class struct_VkPipelineRasterizationProvokingVertexStateCreateInfoEXT(Structure):
    pass

struct_VkPipelineRasterizationProvokingVertexStateCreateInfoEXT._pack_ = 1 # source:False
struct_VkPipelineRasterizationProvokingVertexStateCreateInfoEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('provokingVertexMode', VkProvokingVertexModeEXT),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPipelineRasterizationProvokingVertexStateCreateInfoEXT = struct_VkPipelineRasterizationProvokingVertexStateCreateInfoEXT
VkHeadlessSurfaceCreateFlagsEXT = ctypes.c_uint32
class struct_VkHeadlessSurfaceCreateInfoEXT(Structure):
    pass

struct_VkHeadlessSurfaceCreateInfoEXT._pack_ = 1 # source:False
struct_VkHeadlessSurfaceCreateInfoEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('flags', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkHeadlessSurfaceCreateInfoEXT = struct_VkHeadlessSurfaceCreateInfoEXT
PFN_vkCreateHeadlessSurfaceEXT = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkInstance_T), ctypes.POINTER(struct_VkHeadlessSurfaceCreateInfoEXT), ctypes.POINTER(struct_VkAllocationCallbacks), ctypes.POINTER(ctypes.POINTER(struct_VkSurfaceKHR_T)))
try:
    vkCreateHeadlessSurfaceEXT = _libraries['libvulkan.so.1'].vkCreateHeadlessSurfaceEXT
    vkCreateHeadlessSurfaceEXT.restype = VkResult
    vkCreateHeadlessSurfaceEXT.argtypes = [VkInstance, ctypes.POINTER(struct_VkHeadlessSurfaceCreateInfoEXT), ctypes.POINTER(struct_VkAllocationCallbacks), ctypes.POINTER(ctypes.POINTER(struct_VkSurfaceKHR_T))]
except AttributeError:
    pass

# values for enumeration 'VkLineRasterizationModeEXT'
VkLineRasterizationModeEXT__enumvalues = {
    0: 'VK_LINE_RASTERIZATION_MODE_DEFAULT_EXT',
    1: 'VK_LINE_RASTERIZATION_MODE_RECTANGULAR_EXT',
    2: 'VK_LINE_RASTERIZATION_MODE_BRESENHAM_EXT',
    3: 'VK_LINE_RASTERIZATION_MODE_RECTANGULAR_SMOOTH_EXT',
    2147483647: 'VK_LINE_RASTERIZATION_MODE_MAX_ENUM_EXT',
}
VK_LINE_RASTERIZATION_MODE_DEFAULT_EXT = 0
VK_LINE_RASTERIZATION_MODE_RECTANGULAR_EXT = 1
VK_LINE_RASTERIZATION_MODE_BRESENHAM_EXT = 2
VK_LINE_RASTERIZATION_MODE_RECTANGULAR_SMOOTH_EXT = 3
VK_LINE_RASTERIZATION_MODE_MAX_ENUM_EXT = 2147483647
VkLineRasterizationModeEXT = ctypes.c_uint32 # enum
class struct_VkPhysicalDeviceLineRasterizationFeaturesEXT(Structure):
    pass

struct_VkPhysicalDeviceLineRasterizationFeaturesEXT._pack_ = 1 # source:False
struct_VkPhysicalDeviceLineRasterizationFeaturesEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('rectangularLines', ctypes.c_uint32),
    ('bresenhamLines', ctypes.c_uint32),
    ('smoothLines', ctypes.c_uint32),
    ('stippledRectangularLines', ctypes.c_uint32),
    ('stippledBresenhamLines', ctypes.c_uint32),
    ('stippledSmoothLines', ctypes.c_uint32),
]

VkPhysicalDeviceLineRasterizationFeaturesEXT = struct_VkPhysicalDeviceLineRasterizationFeaturesEXT
class struct_VkPhysicalDeviceLineRasterizationPropertiesEXT(Structure):
    pass

struct_VkPhysicalDeviceLineRasterizationPropertiesEXT._pack_ = 1 # source:False
struct_VkPhysicalDeviceLineRasterizationPropertiesEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('lineSubPixelPrecisionBits', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPhysicalDeviceLineRasterizationPropertiesEXT = struct_VkPhysicalDeviceLineRasterizationPropertiesEXT
class struct_VkPipelineRasterizationLineStateCreateInfoEXT(Structure):
    pass

struct_VkPipelineRasterizationLineStateCreateInfoEXT._pack_ = 1 # source:False
struct_VkPipelineRasterizationLineStateCreateInfoEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('lineRasterizationMode', VkLineRasterizationModeEXT),
    ('stippledLineEnable', ctypes.c_uint32),
    ('lineStippleFactor', ctypes.c_uint32),
    ('lineStipplePattern', ctypes.c_uint16),
    ('PADDING_1', ctypes.c_ubyte * 2),
]

VkPipelineRasterizationLineStateCreateInfoEXT = struct_VkPipelineRasterizationLineStateCreateInfoEXT
PFN_vkCmdSetLineStippleEXT = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.c_uint32, ctypes.c_uint16)
uint16_t = ctypes.c_uint16
try:
    vkCmdSetLineStippleEXT = _libraries['FIXME_STUB'].vkCmdSetLineStippleEXT
    vkCmdSetLineStippleEXT.restype = None
    vkCmdSetLineStippleEXT.argtypes = [VkCommandBuffer, uint32_t, uint16_t]
except AttributeError:
    pass
class struct_VkPhysicalDeviceShaderAtomicFloatFeaturesEXT(Structure):
    pass

struct_VkPhysicalDeviceShaderAtomicFloatFeaturesEXT._pack_ = 1 # source:False
struct_VkPhysicalDeviceShaderAtomicFloatFeaturesEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('shaderBufferFloat32Atomics', ctypes.c_uint32),
    ('shaderBufferFloat32AtomicAdd', ctypes.c_uint32),
    ('shaderBufferFloat64Atomics', ctypes.c_uint32),
    ('shaderBufferFloat64AtomicAdd', ctypes.c_uint32),
    ('shaderSharedFloat32Atomics', ctypes.c_uint32),
    ('shaderSharedFloat32AtomicAdd', ctypes.c_uint32),
    ('shaderSharedFloat64Atomics', ctypes.c_uint32),
    ('shaderSharedFloat64AtomicAdd', ctypes.c_uint32),
    ('shaderImageFloat32Atomics', ctypes.c_uint32),
    ('shaderImageFloat32AtomicAdd', ctypes.c_uint32),
    ('sparseImageFloat32Atomics', ctypes.c_uint32),
    ('sparseImageFloat32AtomicAdd', ctypes.c_uint32),
]

VkPhysicalDeviceShaderAtomicFloatFeaturesEXT = struct_VkPhysicalDeviceShaderAtomicFloatFeaturesEXT
VkPhysicalDeviceHostQueryResetFeaturesEXT = struct_VkPhysicalDeviceHostQueryResetFeatures
PFN_vkResetQueryPoolEXT = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkQueryPool_T), ctypes.c_uint32, ctypes.c_uint32)
try:
    vkResetQueryPoolEXT = _libraries['FIXME_STUB'].vkResetQueryPoolEXT
    vkResetQueryPoolEXT.restype = None
    vkResetQueryPoolEXT.argtypes = [VkDevice, VkQueryPool, uint32_t, uint32_t]
except AttributeError:
    pass
class struct_VkPhysicalDeviceIndexTypeUint8FeaturesEXT(Structure):
    pass

struct_VkPhysicalDeviceIndexTypeUint8FeaturesEXT._pack_ = 1 # source:False
struct_VkPhysicalDeviceIndexTypeUint8FeaturesEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('indexTypeUint8', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPhysicalDeviceIndexTypeUint8FeaturesEXT = struct_VkPhysicalDeviceIndexTypeUint8FeaturesEXT
class struct_VkPhysicalDeviceExtendedDynamicStateFeaturesEXT(Structure):
    pass

struct_VkPhysicalDeviceExtendedDynamicStateFeaturesEXT._pack_ = 1 # source:False
struct_VkPhysicalDeviceExtendedDynamicStateFeaturesEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('extendedDynamicState', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPhysicalDeviceExtendedDynamicStateFeaturesEXT = struct_VkPhysicalDeviceExtendedDynamicStateFeaturesEXT
PFN_vkCmdSetCullModeEXT = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.c_uint32)
PFN_vkCmdSetFrontFaceEXT = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), VkFrontFace)
PFN_vkCmdSetPrimitiveTopologyEXT = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), VkPrimitiveTopology)
PFN_vkCmdSetViewportWithCountEXT = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.c_uint32, ctypes.POINTER(struct_VkViewport))
PFN_vkCmdSetScissorWithCountEXT = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.c_uint32, ctypes.POINTER(struct_VkRect2D))
PFN_vkCmdBindVertexBuffers2EXT = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.c_uint32, ctypes.c_uint32, ctypes.POINTER(ctypes.POINTER(struct_VkBuffer_T)), ctypes.POINTER(ctypes.c_uint64), ctypes.POINTER(ctypes.c_uint64), ctypes.POINTER(ctypes.c_uint64))
PFN_vkCmdSetDepthTestEnableEXT = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.c_uint32)
PFN_vkCmdSetDepthWriteEnableEXT = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.c_uint32)
PFN_vkCmdSetDepthCompareOpEXT = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), VkCompareOp)
PFN_vkCmdSetDepthBoundsTestEnableEXT = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.c_uint32)
PFN_vkCmdSetStencilTestEnableEXT = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.c_uint32)
PFN_vkCmdSetStencilOpEXT = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.c_uint32, VkStencilOp, VkStencilOp, VkStencilOp, VkCompareOp)
try:
    vkCmdSetCullModeEXT = _libraries['FIXME_STUB'].vkCmdSetCullModeEXT
    vkCmdSetCullModeEXT.restype = None
    vkCmdSetCullModeEXT.argtypes = [VkCommandBuffer, VkCullModeFlags]
except AttributeError:
    pass
try:
    vkCmdSetFrontFaceEXT = _libraries['FIXME_STUB'].vkCmdSetFrontFaceEXT
    vkCmdSetFrontFaceEXT.restype = None
    vkCmdSetFrontFaceEXT.argtypes = [VkCommandBuffer, VkFrontFace]
except AttributeError:
    pass
try:
    vkCmdSetPrimitiveTopologyEXT = _libraries['FIXME_STUB'].vkCmdSetPrimitiveTopologyEXT
    vkCmdSetPrimitiveTopologyEXT.restype = None
    vkCmdSetPrimitiveTopologyEXT.argtypes = [VkCommandBuffer, VkPrimitiveTopology]
except AttributeError:
    pass
try:
    vkCmdSetViewportWithCountEXT = _libraries['FIXME_STUB'].vkCmdSetViewportWithCountEXT
    vkCmdSetViewportWithCountEXT.restype = None
    vkCmdSetViewportWithCountEXT.argtypes = [VkCommandBuffer, uint32_t, ctypes.POINTER(struct_VkViewport)]
except AttributeError:
    pass
try:
    vkCmdSetScissorWithCountEXT = _libraries['FIXME_STUB'].vkCmdSetScissorWithCountEXT
    vkCmdSetScissorWithCountEXT.restype = None
    vkCmdSetScissorWithCountEXT.argtypes = [VkCommandBuffer, uint32_t, ctypes.POINTER(struct_VkRect2D)]
except AttributeError:
    pass
try:
    vkCmdBindVertexBuffers2EXT = _libraries['FIXME_STUB'].vkCmdBindVertexBuffers2EXT
    vkCmdBindVertexBuffers2EXT.restype = None
    vkCmdBindVertexBuffers2EXT.argtypes = [VkCommandBuffer, uint32_t, uint32_t, ctypes.POINTER(ctypes.POINTER(struct_VkBuffer_T)), ctypes.POINTER(ctypes.c_uint64), ctypes.POINTER(ctypes.c_uint64), ctypes.POINTER(ctypes.c_uint64)]
except AttributeError:
    pass
try:
    vkCmdSetDepthTestEnableEXT = _libraries['FIXME_STUB'].vkCmdSetDepthTestEnableEXT
    vkCmdSetDepthTestEnableEXT.restype = None
    vkCmdSetDepthTestEnableEXT.argtypes = [VkCommandBuffer, VkBool32]
except AttributeError:
    pass
try:
    vkCmdSetDepthWriteEnableEXT = _libraries['FIXME_STUB'].vkCmdSetDepthWriteEnableEXT
    vkCmdSetDepthWriteEnableEXT.restype = None
    vkCmdSetDepthWriteEnableEXT.argtypes = [VkCommandBuffer, VkBool32]
except AttributeError:
    pass
try:
    vkCmdSetDepthCompareOpEXT = _libraries['FIXME_STUB'].vkCmdSetDepthCompareOpEXT
    vkCmdSetDepthCompareOpEXT.restype = None
    vkCmdSetDepthCompareOpEXT.argtypes = [VkCommandBuffer, VkCompareOp]
except AttributeError:
    pass
try:
    vkCmdSetDepthBoundsTestEnableEXT = _libraries['FIXME_STUB'].vkCmdSetDepthBoundsTestEnableEXT
    vkCmdSetDepthBoundsTestEnableEXT.restype = None
    vkCmdSetDepthBoundsTestEnableEXT.argtypes = [VkCommandBuffer, VkBool32]
except AttributeError:
    pass
try:
    vkCmdSetStencilTestEnableEXT = _libraries['FIXME_STUB'].vkCmdSetStencilTestEnableEXT
    vkCmdSetStencilTestEnableEXT.restype = None
    vkCmdSetStencilTestEnableEXT.argtypes = [VkCommandBuffer, VkBool32]
except AttributeError:
    pass
try:
    vkCmdSetStencilOpEXT = _libraries['FIXME_STUB'].vkCmdSetStencilOpEXT
    vkCmdSetStencilOpEXT.restype = None
    vkCmdSetStencilOpEXT.argtypes = [VkCommandBuffer, VkStencilFaceFlags, VkStencilOp, VkStencilOp, VkStencilOp, VkCompareOp]
except AttributeError:
    pass

# values for enumeration 'VkHostImageCopyFlagBitsEXT'
VkHostImageCopyFlagBitsEXT__enumvalues = {
    1: 'VK_HOST_IMAGE_COPY_MEMCPY_EXT',
    2147483647: 'VK_HOST_IMAGE_COPY_FLAG_BITS_MAX_ENUM_EXT',
}
VK_HOST_IMAGE_COPY_MEMCPY_EXT = 1
VK_HOST_IMAGE_COPY_FLAG_BITS_MAX_ENUM_EXT = 2147483647
VkHostImageCopyFlagBitsEXT = ctypes.c_uint32 # enum
VkHostImageCopyFlagsEXT = ctypes.c_uint32
class struct_VkPhysicalDeviceHostImageCopyFeaturesEXT(Structure):
    pass

struct_VkPhysicalDeviceHostImageCopyFeaturesEXT._pack_ = 1 # source:False
struct_VkPhysicalDeviceHostImageCopyFeaturesEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('hostImageCopy', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPhysicalDeviceHostImageCopyFeaturesEXT = struct_VkPhysicalDeviceHostImageCopyFeaturesEXT
class struct_VkPhysicalDeviceHostImageCopyPropertiesEXT(Structure):
    pass

struct_VkPhysicalDeviceHostImageCopyPropertiesEXT._pack_ = 1 # source:False
struct_VkPhysicalDeviceHostImageCopyPropertiesEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('copySrcLayoutCount', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('pCopySrcLayouts', ctypes.POINTER(VkImageLayout)),
    ('copyDstLayoutCount', ctypes.c_uint32),
    ('PADDING_2', ctypes.c_ubyte * 4),
    ('pCopyDstLayouts', ctypes.POINTER(VkImageLayout)),
    ('optimalTilingLayoutUUID', ctypes.c_ubyte * 16),
    ('identicalMemoryTypeRequirements', ctypes.c_uint32),
    ('PADDING_3', ctypes.c_ubyte * 4),
]

VkPhysicalDeviceHostImageCopyPropertiesEXT = struct_VkPhysicalDeviceHostImageCopyPropertiesEXT
class struct_VkMemoryToImageCopyEXT(Structure):
    pass

struct_VkMemoryToImageCopyEXT._pack_ = 1 # source:False
struct_VkMemoryToImageCopyEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('pHostPointer', ctypes.POINTER(None)),
    ('memoryRowLength', ctypes.c_uint32),
    ('memoryImageHeight', ctypes.c_uint32),
    ('imageSubresource', VkImageSubresourceLayers),
    ('imageOffset', VkOffset3D),
    ('imageExtent', VkExtent3D),
]

VkMemoryToImageCopyEXT = struct_VkMemoryToImageCopyEXT
class struct_VkImageToMemoryCopyEXT(Structure):
    pass

struct_VkImageToMemoryCopyEXT._pack_ = 1 # source:False
struct_VkImageToMemoryCopyEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('pHostPointer', ctypes.POINTER(None)),
    ('memoryRowLength', ctypes.c_uint32),
    ('memoryImageHeight', ctypes.c_uint32),
    ('imageSubresource', VkImageSubresourceLayers),
    ('imageOffset', VkOffset3D),
    ('imageExtent', VkExtent3D),
]

VkImageToMemoryCopyEXT = struct_VkImageToMemoryCopyEXT
class struct_VkCopyMemoryToImageInfoEXT(Structure):
    pass

struct_VkCopyMemoryToImageInfoEXT._pack_ = 1 # source:False
struct_VkCopyMemoryToImageInfoEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('flags', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('dstImage', ctypes.POINTER(struct_VkImage_T)),
    ('dstImageLayout', VkImageLayout),
    ('regionCount', ctypes.c_uint32),
    ('pRegions', ctypes.POINTER(struct_VkMemoryToImageCopyEXT)),
]

VkCopyMemoryToImageInfoEXT = struct_VkCopyMemoryToImageInfoEXT
class struct_VkCopyImageToMemoryInfoEXT(Structure):
    pass

struct_VkCopyImageToMemoryInfoEXT._pack_ = 1 # source:False
struct_VkCopyImageToMemoryInfoEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('flags', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('srcImage', ctypes.POINTER(struct_VkImage_T)),
    ('srcImageLayout', VkImageLayout),
    ('regionCount', ctypes.c_uint32),
    ('pRegions', ctypes.POINTER(struct_VkImageToMemoryCopyEXT)),
]

VkCopyImageToMemoryInfoEXT = struct_VkCopyImageToMemoryInfoEXT
class struct_VkCopyImageToImageInfoEXT(Structure):
    pass

struct_VkCopyImageToImageInfoEXT._pack_ = 1 # source:False
struct_VkCopyImageToImageInfoEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('flags', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('srcImage', ctypes.POINTER(struct_VkImage_T)),
    ('srcImageLayout', VkImageLayout),
    ('PADDING_2', ctypes.c_ubyte * 4),
    ('dstImage', ctypes.POINTER(struct_VkImage_T)),
    ('dstImageLayout', VkImageLayout),
    ('regionCount', ctypes.c_uint32),
    ('pRegions', ctypes.POINTER(struct_VkImageCopy2)),
]

VkCopyImageToImageInfoEXT = struct_VkCopyImageToImageInfoEXT
class struct_VkHostImageLayoutTransitionInfoEXT(Structure):
    pass

struct_VkHostImageLayoutTransitionInfoEXT._pack_ = 1 # source:False
struct_VkHostImageLayoutTransitionInfoEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('image', ctypes.POINTER(struct_VkImage_T)),
    ('oldLayout', VkImageLayout),
    ('newLayout', VkImageLayout),
    ('subresourceRange', VkImageSubresourceRange),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkHostImageLayoutTransitionInfoEXT = struct_VkHostImageLayoutTransitionInfoEXT
class struct_VkSubresourceHostMemcpySizeEXT(Structure):
    pass

struct_VkSubresourceHostMemcpySizeEXT._pack_ = 1 # source:False
struct_VkSubresourceHostMemcpySizeEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('size', ctypes.c_uint64),
]

VkSubresourceHostMemcpySizeEXT = struct_VkSubresourceHostMemcpySizeEXT
class struct_VkHostImageCopyDevicePerformanceQueryEXT(Structure):
    pass

struct_VkHostImageCopyDevicePerformanceQueryEXT._pack_ = 1 # source:False
struct_VkHostImageCopyDevicePerformanceQueryEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('optimalDeviceAccess', ctypes.c_uint32),
    ('identicalMemoryLayout', ctypes.c_uint32),
]

VkHostImageCopyDevicePerformanceQueryEXT = struct_VkHostImageCopyDevicePerformanceQueryEXT
VkSubresourceLayout2EXT = struct_VkSubresourceLayout2KHR
VkImageSubresource2EXT = struct_VkImageSubresource2KHR
PFN_vkCopyMemoryToImageEXT = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkCopyMemoryToImageInfoEXT))
PFN_vkCopyImageToMemoryEXT = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkCopyImageToMemoryInfoEXT))
PFN_vkCopyImageToImageEXT = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkCopyImageToImageInfoEXT))
PFN_vkTransitionImageLayoutEXT = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkDevice_T), ctypes.c_uint32, ctypes.POINTER(struct_VkHostImageLayoutTransitionInfoEXT))
PFN_vkGetImageSubresourceLayout2EXT = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkImage_T), ctypes.POINTER(struct_VkImageSubresource2KHR), ctypes.POINTER(struct_VkSubresourceLayout2KHR))
try:
    vkCopyMemoryToImageEXT = _libraries['FIXME_STUB'].vkCopyMemoryToImageEXT
    vkCopyMemoryToImageEXT.restype = VkResult
    vkCopyMemoryToImageEXT.argtypes = [VkDevice, ctypes.POINTER(struct_VkCopyMemoryToImageInfoEXT)]
except AttributeError:
    pass
try:
    vkCopyImageToMemoryEXT = _libraries['FIXME_STUB'].vkCopyImageToMemoryEXT
    vkCopyImageToMemoryEXT.restype = VkResult
    vkCopyImageToMemoryEXT.argtypes = [VkDevice, ctypes.POINTER(struct_VkCopyImageToMemoryInfoEXT)]
except AttributeError:
    pass
try:
    vkCopyImageToImageEXT = _libraries['FIXME_STUB'].vkCopyImageToImageEXT
    vkCopyImageToImageEXT.restype = VkResult
    vkCopyImageToImageEXT.argtypes = [VkDevice, ctypes.POINTER(struct_VkCopyImageToImageInfoEXT)]
except AttributeError:
    pass
try:
    vkTransitionImageLayoutEXT = _libraries['FIXME_STUB'].vkTransitionImageLayoutEXT
    vkTransitionImageLayoutEXT.restype = VkResult
    vkTransitionImageLayoutEXT.argtypes = [VkDevice, uint32_t, ctypes.POINTER(struct_VkHostImageLayoutTransitionInfoEXT)]
except AttributeError:
    pass
try:
    vkGetImageSubresourceLayout2EXT = _libraries['FIXME_STUB'].vkGetImageSubresourceLayout2EXT
    vkGetImageSubresourceLayout2EXT.restype = None
    vkGetImageSubresourceLayout2EXT.argtypes = [VkDevice, VkImage, ctypes.POINTER(struct_VkImageSubresource2KHR), ctypes.POINTER(struct_VkSubresourceLayout2KHR)]
except AttributeError:
    pass
class struct_VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT(Structure):
    pass

struct_VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT._pack_ = 1 # source:False
struct_VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('shaderBufferFloat16Atomics', ctypes.c_uint32),
    ('shaderBufferFloat16AtomicAdd', ctypes.c_uint32),
    ('shaderBufferFloat16AtomicMinMax', ctypes.c_uint32),
    ('shaderBufferFloat32AtomicMinMax', ctypes.c_uint32),
    ('shaderBufferFloat64AtomicMinMax', ctypes.c_uint32),
    ('shaderSharedFloat16Atomics', ctypes.c_uint32),
    ('shaderSharedFloat16AtomicAdd', ctypes.c_uint32),
    ('shaderSharedFloat16AtomicMinMax', ctypes.c_uint32),
    ('shaderSharedFloat32AtomicMinMax', ctypes.c_uint32),
    ('shaderSharedFloat64AtomicMinMax', ctypes.c_uint32),
    ('shaderImageFloat32AtomicMinMax', ctypes.c_uint32),
    ('sparseImageFloat32AtomicMinMax', ctypes.c_uint32),
]

VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT = struct_VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT

# values for enumeration 'VkPresentScalingFlagBitsEXT'
VkPresentScalingFlagBitsEXT__enumvalues = {
    1: 'VK_PRESENT_SCALING_ONE_TO_ONE_BIT_EXT',
    2: 'VK_PRESENT_SCALING_ASPECT_RATIO_STRETCH_BIT_EXT',
    4: 'VK_PRESENT_SCALING_STRETCH_BIT_EXT',
    2147483647: 'VK_PRESENT_SCALING_FLAG_BITS_MAX_ENUM_EXT',
}
VK_PRESENT_SCALING_ONE_TO_ONE_BIT_EXT = 1
VK_PRESENT_SCALING_ASPECT_RATIO_STRETCH_BIT_EXT = 2
VK_PRESENT_SCALING_STRETCH_BIT_EXT = 4
VK_PRESENT_SCALING_FLAG_BITS_MAX_ENUM_EXT = 2147483647
VkPresentScalingFlagBitsEXT = ctypes.c_uint32 # enum
VkPresentScalingFlagsEXT = ctypes.c_uint32

# values for enumeration 'VkPresentGravityFlagBitsEXT'
VkPresentGravityFlagBitsEXT__enumvalues = {
    1: 'VK_PRESENT_GRAVITY_MIN_BIT_EXT',
    2: 'VK_PRESENT_GRAVITY_MAX_BIT_EXT',
    4: 'VK_PRESENT_GRAVITY_CENTERED_BIT_EXT',
    2147483647: 'VK_PRESENT_GRAVITY_FLAG_BITS_MAX_ENUM_EXT',
}
VK_PRESENT_GRAVITY_MIN_BIT_EXT = 1
VK_PRESENT_GRAVITY_MAX_BIT_EXT = 2
VK_PRESENT_GRAVITY_CENTERED_BIT_EXT = 4
VK_PRESENT_GRAVITY_FLAG_BITS_MAX_ENUM_EXT = 2147483647
VkPresentGravityFlagBitsEXT = ctypes.c_uint32 # enum
VkPresentGravityFlagsEXT = ctypes.c_uint32
class struct_VkSurfacePresentModeEXT(Structure):
    pass

struct_VkSurfacePresentModeEXT._pack_ = 1 # source:False
struct_VkSurfacePresentModeEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('presentMode', VkPresentModeKHR),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkSurfacePresentModeEXT = struct_VkSurfacePresentModeEXT
class struct_VkSurfacePresentScalingCapabilitiesEXT(Structure):
    pass

struct_VkSurfacePresentScalingCapabilitiesEXT._pack_ = 1 # source:False
struct_VkSurfacePresentScalingCapabilitiesEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('supportedPresentScaling', ctypes.c_uint32),
    ('supportedPresentGravityX', ctypes.c_uint32),
    ('supportedPresentGravityY', ctypes.c_uint32),
    ('minScaledImageExtent', VkExtent2D),
    ('maxScaledImageExtent', VkExtent2D),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkSurfacePresentScalingCapabilitiesEXT = struct_VkSurfacePresentScalingCapabilitiesEXT
class struct_VkSurfacePresentModeCompatibilityEXT(Structure):
    pass

struct_VkSurfacePresentModeCompatibilityEXT._pack_ = 1 # source:False
struct_VkSurfacePresentModeCompatibilityEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('presentModeCount', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('pPresentModes', ctypes.POINTER(VkPresentModeKHR)),
]

VkSurfacePresentModeCompatibilityEXT = struct_VkSurfacePresentModeCompatibilityEXT
class struct_VkPhysicalDeviceSwapchainMaintenance1FeaturesEXT(Structure):
    pass

struct_VkPhysicalDeviceSwapchainMaintenance1FeaturesEXT._pack_ = 1 # source:False
struct_VkPhysicalDeviceSwapchainMaintenance1FeaturesEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('swapchainMaintenance1', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPhysicalDeviceSwapchainMaintenance1FeaturesEXT = struct_VkPhysicalDeviceSwapchainMaintenance1FeaturesEXT
class struct_VkSwapchainPresentFenceInfoEXT(Structure):
    pass

struct_VkSwapchainPresentFenceInfoEXT._pack_ = 1 # source:False
struct_VkSwapchainPresentFenceInfoEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('swapchainCount', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('pFences', ctypes.POINTER(ctypes.POINTER(struct_VkFence_T))),
]

VkSwapchainPresentFenceInfoEXT = struct_VkSwapchainPresentFenceInfoEXT
class struct_VkSwapchainPresentModesCreateInfoEXT(Structure):
    pass

struct_VkSwapchainPresentModesCreateInfoEXT._pack_ = 1 # source:False
struct_VkSwapchainPresentModesCreateInfoEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('presentModeCount', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('pPresentModes', ctypes.POINTER(VkPresentModeKHR)),
]

VkSwapchainPresentModesCreateInfoEXT = struct_VkSwapchainPresentModesCreateInfoEXT
class struct_VkSwapchainPresentModeInfoEXT(Structure):
    pass

struct_VkSwapchainPresentModeInfoEXT._pack_ = 1 # source:False
struct_VkSwapchainPresentModeInfoEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('swapchainCount', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('pPresentModes', ctypes.POINTER(VkPresentModeKHR)),
]

VkSwapchainPresentModeInfoEXT = struct_VkSwapchainPresentModeInfoEXT
class struct_VkSwapchainPresentScalingCreateInfoEXT(Structure):
    pass

struct_VkSwapchainPresentScalingCreateInfoEXT._pack_ = 1 # source:False
struct_VkSwapchainPresentScalingCreateInfoEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('scalingBehavior', ctypes.c_uint32),
    ('presentGravityX', ctypes.c_uint32),
    ('presentGravityY', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkSwapchainPresentScalingCreateInfoEXT = struct_VkSwapchainPresentScalingCreateInfoEXT
class struct_VkReleaseSwapchainImagesInfoEXT(Structure):
    pass

struct_VkReleaseSwapchainImagesInfoEXT._pack_ = 1 # source:False
struct_VkReleaseSwapchainImagesInfoEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('swapchain', ctypes.POINTER(struct_VkSwapchainKHR_T)),
    ('imageIndexCount', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('pImageIndices', ctypes.POINTER(ctypes.c_uint32)),
]

VkReleaseSwapchainImagesInfoEXT = struct_VkReleaseSwapchainImagesInfoEXT
PFN_vkReleaseSwapchainImagesEXT = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkReleaseSwapchainImagesInfoEXT))
try:
    vkReleaseSwapchainImagesEXT = _libraries['FIXME_STUB'].vkReleaseSwapchainImagesEXT
    vkReleaseSwapchainImagesEXT.restype = VkResult
    vkReleaseSwapchainImagesEXT.argtypes = [VkDevice, ctypes.POINTER(struct_VkReleaseSwapchainImagesInfoEXT)]
except AttributeError:
    pass
VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT = struct_VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures
class struct_VkIndirectCommandsLayoutNV_T(Structure):
    pass

VkIndirectCommandsLayoutNV = ctypes.POINTER(struct_VkIndirectCommandsLayoutNV_T)

# values for enumeration 'VkIndirectCommandsTokenTypeNV'
VkIndirectCommandsTokenTypeNV__enumvalues = {
    0: 'VK_INDIRECT_COMMANDS_TOKEN_TYPE_SHADER_GROUP_NV',
    1: 'VK_INDIRECT_COMMANDS_TOKEN_TYPE_STATE_FLAGS_NV',
    2: 'VK_INDIRECT_COMMANDS_TOKEN_TYPE_INDEX_BUFFER_NV',
    3: 'VK_INDIRECT_COMMANDS_TOKEN_TYPE_VERTEX_BUFFER_NV',
    4: 'VK_INDIRECT_COMMANDS_TOKEN_TYPE_PUSH_CONSTANT_NV',
    5: 'VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_INDEXED_NV',
    6: 'VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_NV',
    7: 'VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_TASKS_NV',
    1000328000: 'VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_MESH_TASKS_NV',
    1000428003: 'VK_INDIRECT_COMMANDS_TOKEN_TYPE_PIPELINE_NV',
    1000428004: 'VK_INDIRECT_COMMANDS_TOKEN_TYPE_DISPATCH_NV',
    2147483647: 'VK_INDIRECT_COMMANDS_TOKEN_TYPE_MAX_ENUM_NV',
}
VK_INDIRECT_COMMANDS_TOKEN_TYPE_SHADER_GROUP_NV = 0
VK_INDIRECT_COMMANDS_TOKEN_TYPE_STATE_FLAGS_NV = 1
VK_INDIRECT_COMMANDS_TOKEN_TYPE_INDEX_BUFFER_NV = 2
VK_INDIRECT_COMMANDS_TOKEN_TYPE_VERTEX_BUFFER_NV = 3
VK_INDIRECT_COMMANDS_TOKEN_TYPE_PUSH_CONSTANT_NV = 4
VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_INDEXED_NV = 5
VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_NV = 6
VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_TASKS_NV = 7
VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_MESH_TASKS_NV = 1000328000
VK_INDIRECT_COMMANDS_TOKEN_TYPE_PIPELINE_NV = 1000428003
VK_INDIRECT_COMMANDS_TOKEN_TYPE_DISPATCH_NV = 1000428004
VK_INDIRECT_COMMANDS_TOKEN_TYPE_MAX_ENUM_NV = 2147483647
VkIndirectCommandsTokenTypeNV = ctypes.c_uint32 # enum

# values for enumeration 'VkIndirectStateFlagBitsNV'
VkIndirectStateFlagBitsNV__enumvalues = {
    1: 'VK_INDIRECT_STATE_FLAG_FRONTFACE_BIT_NV',
    2147483647: 'VK_INDIRECT_STATE_FLAG_BITS_MAX_ENUM_NV',
}
VK_INDIRECT_STATE_FLAG_FRONTFACE_BIT_NV = 1
VK_INDIRECT_STATE_FLAG_BITS_MAX_ENUM_NV = 2147483647
VkIndirectStateFlagBitsNV = ctypes.c_uint32 # enum
VkIndirectStateFlagsNV = ctypes.c_uint32

# values for enumeration 'VkIndirectCommandsLayoutUsageFlagBitsNV'
VkIndirectCommandsLayoutUsageFlagBitsNV__enumvalues = {
    1: 'VK_INDIRECT_COMMANDS_LAYOUT_USAGE_EXPLICIT_PREPROCESS_BIT_NV',
    2: 'VK_INDIRECT_COMMANDS_LAYOUT_USAGE_INDEXED_SEQUENCES_BIT_NV',
    4: 'VK_INDIRECT_COMMANDS_LAYOUT_USAGE_UNORDERED_SEQUENCES_BIT_NV',
    2147483647: 'VK_INDIRECT_COMMANDS_LAYOUT_USAGE_FLAG_BITS_MAX_ENUM_NV',
}
VK_INDIRECT_COMMANDS_LAYOUT_USAGE_EXPLICIT_PREPROCESS_BIT_NV = 1
VK_INDIRECT_COMMANDS_LAYOUT_USAGE_INDEXED_SEQUENCES_BIT_NV = 2
VK_INDIRECT_COMMANDS_LAYOUT_USAGE_UNORDERED_SEQUENCES_BIT_NV = 4
VK_INDIRECT_COMMANDS_LAYOUT_USAGE_FLAG_BITS_MAX_ENUM_NV = 2147483647
VkIndirectCommandsLayoutUsageFlagBitsNV = ctypes.c_uint32 # enum
VkIndirectCommandsLayoutUsageFlagsNV = ctypes.c_uint32
class struct_VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV(Structure):
    pass

struct_VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV._pack_ = 1 # source:False
struct_VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('maxGraphicsShaderGroupCount', ctypes.c_uint32),
    ('maxIndirectSequenceCount', ctypes.c_uint32),
    ('maxIndirectCommandsTokenCount', ctypes.c_uint32),
    ('maxIndirectCommandsStreamCount', ctypes.c_uint32),
    ('maxIndirectCommandsTokenOffset', ctypes.c_uint32),
    ('maxIndirectCommandsStreamStride', ctypes.c_uint32),
    ('minSequencesCountBufferOffsetAlignment', ctypes.c_uint32),
    ('minSequencesIndexBufferOffsetAlignment', ctypes.c_uint32),
    ('minIndirectCommandsBufferOffsetAlignment', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV = struct_VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV
class struct_VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV(Structure):
    pass

struct_VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV._pack_ = 1 # source:False
struct_VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('deviceGeneratedCommands', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV = struct_VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV
class struct_VkGraphicsShaderGroupCreateInfoNV(Structure):
    pass

struct_VkGraphicsShaderGroupCreateInfoNV._pack_ = 1 # source:False
struct_VkGraphicsShaderGroupCreateInfoNV._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('stageCount', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('pStages', ctypes.POINTER(struct_VkPipelineShaderStageCreateInfo)),
    ('pVertexInputState', ctypes.POINTER(struct_VkPipelineVertexInputStateCreateInfo)),
    ('pTessellationState', ctypes.POINTER(struct_VkPipelineTessellationStateCreateInfo)),
]

VkGraphicsShaderGroupCreateInfoNV = struct_VkGraphicsShaderGroupCreateInfoNV
class struct_VkGraphicsPipelineShaderGroupsCreateInfoNV(Structure):
    pass

struct_VkGraphicsPipelineShaderGroupsCreateInfoNV._pack_ = 1 # source:False
struct_VkGraphicsPipelineShaderGroupsCreateInfoNV._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('groupCount', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('pGroups', ctypes.POINTER(struct_VkGraphicsShaderGroupCreateInfoNV)),
    ('pipelineCount', ctypes.c_uint32),
    ('PADDING_2', ctypes.c_ubyte * 4),
    ('pPipelines', ctypes.POINTER(ctypes.POINTER(struct_VkPipeline_T))),
]

VkGraphicsPipelineShaderGroupsCreateInfoNV = struct_VkGraphicsPipelineShaderGroupsCreateInfoNV
class struct_VkBindShaderGroupIndirectCommandNV(Structure):
    pass

struct_VkBindShaderGroupIndirectCommandNV._pack_ = 1 # source:False
struct_VkBindShaderGroupIndirectCommandNV._fields_ = [
    ('groupIndex', ctypes.c_uint32),
]

VkBindShaderGroupIndirectCommandNV = struct_VkBindShaderGroupIndirectCommandNV
class struct_VkBindIndexBufferIndirectCommandNV(Structure):
    pass

struct_VkBindIndexBufferIndirectCommandNV._pack_ = 1 # source:False
struct_VkBindIndexBufferIndirectCommandNV._fields_ = [
    ('bufferAddress', ctypes.c_uint64),
    ('size', ctypes.c_uint32),
    ('indexType', VkIndexType),
]

VkBindIndexBufferIndirectCommandNV = struct_VkBindIndexBufferIndirectCommandNV
class struct_VkBindVertexBufferIndirectCommandNV(Structure):
    pass

struct_VkBindVertexBufferIndirectCommandNV._pack_ = 1 # source:False
struct_VkBindVertexBufferIndirectCommandNV._fields_ = [
    ('bufferAddress', ctypes.c_uint64),
    ('size', ctypes.c_uint32),
    ('stride', ctypes.c_uint32),
]

VkBindVertexBufferIndirectCommandNV = struct_VkBindVertexBufferIndirectCommandNV
class struct_VkSetStateFlagsIndirectCommandNV(Structure):
    pass

struct_VkSetStateFlagsIndirectCommandNV._pack_ = 1 # source:False
struct_VkSetStateFlagsIndirectCommandNV._fields_ = [
    ('data', ctypes.c_uint32),
]

VkSetStateFlagsIndirectCommandNV = struct_VkSetStateFlagsIndirectCommandNV
class struct_VkIndirectCommandsStreamNV(Structure):
    pass

struct_VkIndirectCommandsStreamNV._pack_ = 1 # source:False
struct_VkIndirectCommandsStreamNV._fields_ = [
    ('buffer', ctypes.POINTER(struct_VkBuffer_T)),
    ('offset', ctypes.c_uint64),
]

VkIndirectCommandsStreamNV = struct_VkIndirectCommandsStreamNV
class struct_VkIndirectCommandsLayoutTokenNV(Structure):
    pass

struct_VkIndirectCommandsLayoutTokenNV._pack_ = 1 # source:False
struct_VkIndirectCommandsLayoutTokenNV._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('tokenType', VkIndirectCommandsTokenTypeNV),
    ('stream', ctypes.c_uint32),
    ('offset', ctypes.c_uint32),
    ('vertexBindingUnit', ctypes.c_uint32),
    ('vertexDynamicStride', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('pushconstantPipelineLayout', ctypes.POINTER(struct_VkPipelineLayout_T)),
    ('pushconstantShaderStageFlags', ctypes.c_uint32),
    ('pushconstantOffset', ctypes.c_uint32),
    ('pushconstantSize', ctypes.c_uint32),
    ('indirectStateFlags', ctypes.c_uint32),
    ('indexTypeCount', ctypes.c_uint32),
    ('PADDING_2', ctypes.c_ubyte * 4),
    ('pIndexTypes', ctypes.POINTER(VkIndexType)),
    ('pIndexTypeValues', ctypes.POINTER(ctypes.c_uint32)),
]

VkIndirectCommandsLayoutTokenNV = struct_VkIndirectCommandsLayoutTokenNV
class struct_VkIndirectCommandsLayoutCreateInfoNV(Structure):
    pass

struct_VkIndirectCommandsLayoutCreateInfoNV._pack_ = 1 # source:False
struct_VkIndirectCommandsLayoutCreateInfoNV._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('flags', ctypes.c_uint32),
    ('pipelineBindPoint', VkPipelineBindPoint),
    ('tokenCount', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('pTokens', ctypes.POINTER(struct_VkIndirectCommandsLayoutTokenNV)),
    ('streamCount', ctypes.c_uint32),
    ('PADDING_2', ctypes.c_ubyte * 4),
    ('pStreamStrides', ctypes.POINTER(ctypes.c_uint32)),
]

VkIndirectCommandsLayoutCreateInfoNV = struct_VkIndirectCommandsLayoutCreateInfoNV
class struct_VkGeneratedCommandsInfoNV(Structure):
    pass

struct_VkGeneratedCommandsInfoNV._pack_ = 1 # source:False
struct_VkGeneratedCommandsInfoNV._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('pipelineBindPoint', VkPipelineBindPoint),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('pipeline', ctypes.POINTER(struct_VkPipeline_T)),
    ('indirectCommandsLayout', ctypes.POINTER(struct_VkIndirectCommandsLayoutNV_T)),
    ('streamCount', ctypes.c_uint32),
    ('PADDING_2', ctypes.c_ubyte * 4),
    ('pStreams', ctypes.POINTER(struct_VkIndirectCommandsStreamNV)),
    ('sequencesCount', ctypes.c_uint32),
    ('PADDING_3', ctypes.c_ubyte * 4),
    ('preprocessBuffer', ctypes.POINTER(struct_VkBuffer_T)),
    ('preprocessOffset', ctypes.c_uint64),
    ('preprocessSize', ctypes.c_uint64),
    ('sequencesCountBuffer', ctypes.POINTER(struct_VkBuffer_T)),
    ('sequencesCountOffset', ctypes.c_uint64),
    ('sequencesIndexBuffer', ctypes.POINTER(struct_VkBuffer_T)),
    ('sequencesIndexOffset', ctypes.c_uint64),
]

VkGeneratedCommandsInfoNV = struct_VkGeneratedCommandsInfoNV
class struct_VkGeneratedCommandsMemoryRequirementsInfoNV(Structure):
    pass

struct_VkGeneratedCommandsMemoryRequirementsInfoNV._pack_ = 1 # source:False
struct_VkGeneratedCommandsMemoryRequirementsInfoNV._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('pipelineBindPoint', VkPipelineBindPoint),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('pipeline', ctypes.POINTER(struct_VkPipeline_T)),
    ('indirectCommandsLayout', ctypes.POINTER(struct_VkIndirectCommandsLayoutNV_T)),
    ('maxSequencesCount', ctypes.c_uint32),
    ('PADDING_2', ctypes.c_ubyte * 4),
]

VkGeneratedCommandsMemoryRequirementsInfoNV = struct_VkGeneratedCommandsMemoryRequirementsInfoNV
PFN_vkGetGeneratedCommandsMemoryRequirementsNV = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkGeneratedCommandsMemoryRequirementsInfoNV), ctypes.POINTER(struct_VkMemoryRequirements2))
PFN_vkCmdPreprocessGeneratedCommandsNV = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.POINTER(struct_VkGeneratedCommandsInfoNV))
PFN_vkCmdExecuteGeneratedCommandsNV = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.c_uint32, ctypes.POINTER(struct_VkGeneratedCommandsInfoNV))
PFN_vkCmdBindPipelineShaderGroupNV = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), VkPipelineBindPoint, ctypes.POINTER(struct_VkPipeline_T), ctypes.c_uint32)
PFN_vkCreateIndirectCommandsLayoutNV = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkIndirectCommandsLayoutCreateInfoNV), ctypes.POINTER(struct_VkAllocationCallbacks), ctypes.POINTER(ctypes.POINTER(struct_VkIndirectCommandsLayoutNV_T)))
PFN_vkDestroyIndirectCommandsLayoutNV = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkIndirectCommandsLayoutNV_T), ctypes.POINTER(struct_VkAllocationCallbacks))
try:
    vkGetGeneratedCommandsMemoryRequirementsNV = _libraries['FIXME_STUB'].vkGetGeneratedCommandsMemoryRequirementsNV
    vkGetGeneratedCommandsMemoryRequirementsNV.restype = None
    vkGetGeneratedCommandsMemoryRequirementsNV.argtypes = [VkDevice, ctypes.POINTER(struct_VkGeneratedCommandsMemoryRequirementsInfoNV), ctypes.POINTER(struct_VkMemoryRequirements2)]
except AttributeError:
    pass
try:
    vkCmdPreprocessGeneratedCommandsNV = _libraries['FIXME_STUB'].vkCmdPreprocessGeneratedCommandsNV
    vkCmdPreprocessGeneratedCommandsNV.restype = None
    vkCmdPreprocessGeneratedCommandsNV.argtypes = [VkCommandBuffer, ctypes.POINTER(struct_VkGeneratedCommandsInfoNV)]
except AttributeError:
    pass
try:
    vkCmdExecuteGeneratedCommandsNV = _libraries['FIXME_STUB'].vkCmdExecuteGeneratedCommandsNV
    vkCmdExecuteGeneratedCommandsNV.restype = None
    vkCmdExecuteGeneratedCommandsNV.argtypes = [VkCommandBuffer, VkBool32, ctypes.POINTER(struct_VkGeneratedCommandsInfoNV)]
except AttributeError:
    pass
try:
    vkCmdBindPipelineShaderGroupNV = _libraries['FIXME_STUB'].vkCmdBindPipelineShaderGroupNV
    vkCmdBindPipelineShaderGroupNV.restype = None
    vkCmdBindPipelineShaderGroupNV.argtypes = [VkCommandBuffer, VkPipelineBindPoint, VkPipeline, uint32_t]
except AttributeError:
    pass
try:
    vkCreateIndirectCommandsLayoutNV = _libraries['FIXME_STUB'].vkCreateIndirectCommandsLayoutNV
    vkCreateIndirectCommandsLayoutNV.restype = VkResult
    vkCreateIndirectCommandsLayoutNV.argtypes = [VkDevice, ctypes.POINTER(struct_VkIndirectCommandsLayoutCreateInfoNV), ctypes.POINTER(struct_VkAllocationCallbacks), ctypes.POINTER(ctypes.POINTER(struct_VkIndirectCommandsLayoutNV_T))]
except AttributeError:
    pass
try:
    vkDestroyIndirectCommandsLayoutNV = _libraries['FIXME_STUB'].vkDestroyIndirectCommandsLayoutNV
    vkDestroyIndirectCommandsLayoutNV.restype = None
    vkDestroyIndirectCommandsLayoutNV.argtypes = [VkDevice, VkIndirectCommandsLayoutNV, ctypes.POINTER(struct_VkAllocationCallbacks)]
except AttributeError:
    pass
class struct_VkPhysicalDeviceInheritedViewportScissorFeaturesNV(Structure):
    pass

struct_VkPhysicalDeviceInheritedViewportScissorFeaturesNV._pack_ = 1 # source:False
struct_VkPhysicalDeviceInheritedViewportScissorFeaturesNV._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('inheritedViewportScissor2D', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPhysicalDeviceInheritedViewportScissorFeaturesNV = struct_VkPhysicalDeviceInheritedViewportScissorFeaturesNV
class struct_VkCommandBufferInheritanceViewportScissorInfoNV(Structure):
    pass

struct_VkCommandBufferInheritanceViewportScissorInfoNV._pack_ = 1 # source:False
struct_VkCommandBufferInheritanceViewportScissorInfoNV._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('viewportScissor2D', ctypes.c_uint32),
    ('viewportDepthCount', ctypes.c_uint32),
    ('pViewportDepths', ctypes.POINTER(struct_VkViewport)),
]

VkCommandBufferInheritanceViewportScissorInfoNV = struct_VkCommandBufferInheritanceViewportScissorInfoNV
class struct_VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT(Structure):
    pass

struct_VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT._pack_ = 1 # source:False
struct_VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('texelBufferAlignment', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT = struct_VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT
VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT = struct_VkPhysicalDeviceTexelBufferAlignmentProperties
class struct_VkRenderPassTransformBeginInfoQCOM(Structure):
    pass

struct_VkRenderPassTransformBeginInfoQCOM._pack_ = 1 # source:False
struct_VkRenderPassTransformBeginInfoQCOM._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('transform', VkSurfaceTransformFlagBitsKHR),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkRenderPassTransformBeginInfoQCOM = struct_VkRenderPassTransformBeginInfoQCOM
class struct_VkCommandBufferInheritanceRenderPassTransformInfoQCOM(Structure):
    pass

struct_VkCommandBufferInheritanceRenderPassTransformInfoQCOM._pack_ = 1 # source:False
struct_VkCommandBufferInheritanceRenderPassTransformInfoQCOM._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('transform', VkSurfaceTransformFlagBitsKHR),
    ('renderArea', VkRect2D),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkCommandBufferInheritanceRenderPassTransformInfoQCOM = struct_VkCommandBufferInheritanceRenderPassTransformInfoQCOM

# values for enumeration 'VkDepthBiasRepresentationEXT'
VkDepthBiasRepresentationEXT__enumvalues = {
    0: 'VK_DEPTH_BIAS_REPRESENTATION_LEAST_REPRESENTABLE_VALUE_FORMAT_EXT',
    1: 'VK_DEPTH_BIAS_REPRESENTATION_LEAST_REPRESENTABLE_VALUE_FORCE_UNORM_EXT',
    2: 'VK_DEPTH_BIAS_REPRESENTATION_FLOAT_EXT',
    2147483647: 'VK_DEPTH_BIAS_REPRESENTATION_MAX_ENUM_EXT',
}
VK_DEPTH_BIAS_REPRESENTATION_LEAST_REPRESENTABLE_VALUE_FORMAT_EXT = 0
VK_DEPTH_BIAS_REPRESENTATION_LEAST_REPRESENTABLE_VALUE_FORCE_UNORM_EXT = 1
VK_DEPTH_BIAS_REPRESENTATION_FLOAT_EXT = 2
VK_DEPTH_BIAS_REPRESENTATION_MAX_ENUM_EXT = 2147483647
VkDepthBiasRepresentationEXT = ctypes.c_uint32 # enum
class struct_VkPhysicalDeviceDepthBiasControlFeaturesEXT(Structure):
    pass

struct_VkPhysicalDeviceDepthBiasControlFeaturesEXT._pack_ = 1 # source:False
struct_VkPhysicalDeviceDepthBiasControlFeaturesEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('depthBiasControl', ctypes.c_uint32),
    ('leastRepresentableValueForceUnormRepresentation', ctypes.c_uint32),
    ('floatRepresentation', ctypes.c_uint32),
    ('depthBiasExact', ctypes.c_uint32),
]

VkPhysicalDeviceDepthBiasControlFeaturesEXT = struct_VkPhysicalDeviceDepthBiasControlFeaturesEXT
class struct_VkDepthBiasInfoEXT(Structure):
    pass

struct_VkDepthBiasInfoEXT._pack_ = 1 # source:False
struct_VkDepthBiasInfoEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('depthBiasConstantFactor', ctypes.c_float),
    ('depthBiasClamp', ctypes.c_float),
    ('depthBiasSlopeFactor', ctypes.c_float),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkDepthBiasInfoEXT = struct_VkDepthBiasInfoEXT
class struct_VkDepthBiasRepresentationInfoEXT(Structure):
    pass

struct_VkDepthBiasRepresentationInfoEXT._pack_ = 1 # source:False
struct_VkDepthBiasRepresentationInfoEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('depthBiasRepresentation', VkDepthBiasRepresentationEXT),
    ('depthBiasExact', ctypes.c_uint32),
]

VkDepthBiasRepresentationInfoEXT = struct_VkDepthBiasRepresentationInfoEXT
PFN_vkCmdSetDepthBias2EXT = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.POINTER(struct_VkDepthBiasInfoEXT))
try:
    vkCmdSetDepthBias2EXT = _libraries['FIXME_STUB'].vkCmdSetDepthBias2EXT
    vkCmdSetDepthBias2EXT.restype = None
    vkCmdSetDepthBias2EXT.argtypes = [VkCommandBuffer, ctypes.POINTER(struct_VkDepthBiasInfoEXT)]
except AttributeError:
    pass

# values for enumeration 'VkDeviceMemoryReportEventTypeEXT'
VkDeviceMemoryReportEventTypeEXT__enumvalues = {
    0: 'VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_ALLOCATE_EXT',
    1: 'VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_FREE_EXT',
    2: 'VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_IMPORT_EXT',
    3: 'VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_UNIMPORT_EXT',
    4: 'VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_ALLOCATION_FAILED_EXT',
    2147483647: 'VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_MAX_ENUM_EXT',
}
VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_ALLOCATE_EXT = 0
VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_FREE_EXT = 1
VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_IMPORT_EXT = 2
VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_UNIMPORT_EXT = 3
VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_ALLOCATION_FAILED_EXT = 4
VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_MAX_ENUM_EXT = 2147483647
VkDeviceMemoryReportEventTypeEXT = ctypes.c_uint32 # enum
VkDeviceMemoryReportFlagsEXT = ctypes.c_uint32
class struct_VkPhysicalDeviceDeviceMemoryReportFeaturesEXT(Structure):
    pass

struct_VkPhysicalDeviceDeviceMemoryReportFeaturesEXT._pack_ = 1 # source:False
struct_VkPhysicalDeviceDeviceMemoryReportFeaturesEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('deviceMemoryReport', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPhysicalDeviceDeviceMemoryReportFeaturesEXT = struct_VkPhysicalDeviceDeviceMemoryReportFeaturesEXT
class struct_VkDeviceMemoryReportCallbackDataEXT(Structure):
    pass

struct_VkDeviceMemoryReportCallbackDataEXT._pack_ = 1 # source:False
struct_VkDeviceMemoryReportCallbackDataEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('flags', ctypes.c_uint32),
    ('type', VkDeviceMemoryReportEventTypeEXT),
    ('memoryObjectId', ctypes.c_uint64),
    ('size', ctypes.c_uint64),
    ('objectType', VkObjectType),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('objectHandle', ctypes.c_uint64),
    ('heapIndex', ctypes.c_uint32),
    ('PADDING_2', ctypes.c_ubyte * 4),
]

VkDeviceMemoryReportCallbackDataEXT = struct_VkDeviceMemoryReportCallbackDataEXT
PFN_vkDeviceMemoryReportCallbackEXT = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkDeviceMemoryReportCallbackDataEXT), ctypes.POINTER(None))
class struct_VkDeviceDeviceMemoryReportCreateInfoEXT(Structure):
    pass

struct_VkDeviceDeviceMemoryReportCreateInfoEXT._pack_ = 1 # source:False
struct_VkDeviceDeviceMemoryReportCreateInfoEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('flags', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('pfnUserCallback', ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkDeviceMemoryReportCallbackDataEXT), ctypes.POINTER(None))),
    ('pUserData', ctypes.POINTER(None)),
]

VkDeviceDeviceMemoryReportCreateInfoEXT = struct_VkDeviceDeviceMemoryReportCreateInfoEXT
PFN_vkAcquireDrmDisplayEXT = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkPhysicalDevice_T), ctypes.c_int32, ctypes.POINTER(struct_VkDisplayKHR_T))
PFN_vkGetDrmDisplayEXT = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkPhysicalDevice_T), ctypes.c_int32, ctypes.c_uint32, ctypes.POINTER(ctypes.POINTER(struct_VkDisplayKHR_T)))
try:
    vkAcquireDrmDisplayEXT = _libraries['FIXME_STUB'].vkAcquireDrmDisplayEXT
    vkAcquireDrmDisplayEXT.restype = VkResult
    vkAcquireDrmDisplayEXT.argtypes = [VkPhysicalDevice, int32_t, VkDisplayKHR]
except AttributeError:
    pass
try:
    vkGetDrmDisplayEXT = _libraries['FIXME_STUB'].vkGetDrmDisplayEXT
    vkGetDrmDisplayEXT.restype = VkResult
    vkGetDrmDisplayEXT.argtypes = [VkPhysicalDevice, int32_t, uint32_t, ctypes.POINTER(ctypes.POINTER(struct_VkDisplayKHR_T))]
except AttributeError:
    pass
class struct_VkPhysicalDeviceRobustness2FeaturesEXT(Structure):
    pass

struct_VkPhysicalDeviceRobustness2FeaturesEXT._pack_ = 1 # source:False
struct_VkPhysicalDeviceRobustness2FeaturesEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('robustBufferAccess2', ctypes.c_uint32),
    ('robustImageAccess2', ctypes.c_uint32),
    ('nullDescriptor', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPhysicalDeviceRobustness2FeaturesEXT = struct_VkPhysicalDeviceRobustness2FeaturesEXT
class struct_VkPhysicalDeviceRobustness2PropertiesEXT(Structure):
    pass

struct_VkPhysicalDeviceRobustness2PropertiesEXT._pack_ = 1 # source:False
struct_VkPhysicalDeviceRobustness2PropertiesEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('robustStorageBufferAccessSizeAlignment', ctypes.c_uint64),
    ('robustUniformBufferAccessSizeAlignment', ctypes.c_uint64),
]

VkPhysicalDeviceRobustness2PropertiesEXT = struct_VkPhysicalDeviceRobustness2PropertiesEXT
class struct_VkSamplerCustomBorderColorCreateInfoEXT(Structure):
    pass

struct_VkSamplerCustomBorderColorCreateInfoEXT._pack_ = 1 # source:False
struct_VkSamplerCustomBorderColorCreateInfoEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('customBorderColor', VkClearColorValue),
    ('format', VkFormat),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkSamplerCustomBorderColorCreateInfoEXT = struct_VkSamplerCustomBorderColorCreateInfoEXT
class struct_VkPhysicalDeviceCustomBorderColorPropertiesEXT(Structure):
    pass

struct_VkPhysicalDeviceCustomBorderColorPropertiesEXT._pack_ = 1 # source:False
struct_VkPhysicalDeviceCustomBorderColorPropertiesEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('maxCustomBorderColorSamplers', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPhysicalDeviceCustomBorderColorPropertiesEXT = struct_VkPhysicalDeviceCustomBorderColorPropertiesEXT
class struct_VkPhysicalDeviceCustomBorderColorFeaturesEXT(Structure):
    pass

struct_VkPhysicalDeviceCustomBorderColorFeaturesEXT._pack_ = 1 # source:False
struct_VkPhysicalDeviceCustomBorderColorFeaturesEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('customBorderColors', ctypes.c_uint32),
    ('customBorderColorWithoutFormat', ctypes.c_uint32),
]

VkPhysicalDeviceCustomBorderColorFeaturesEXT = struct_VkPhysicalDeviceCustomBorderColorFeaturesEXT
class struct_VkPhysicalDevicePresentBarrierFeaturesNV(Structure):
    pass

struct_VkPhysicalDevicePresentBarrierFeaturesNV._pack_ = 1 # source:False
struct_VkPhysicalDevicePresentBarrierFeaturesNV._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('presentBarrier', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPhysicalDevicePresentBarrierFeaturesNV = struct_VkPhysicalDevicePresentBarrierFeaturesNV
class struct_VkSurfaceCapabilitiesPresentBarrierNV(Structure):
    pass

struct_VkSurfaceCapabilitiesPresentBarrierNV._pack_ = 1 # source:False
struct_VkSurfaceCapabilitiesPresentBarrierNV._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('presentBarrierSupported', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkSurfaceCapabilitiesPresentBarrierNV = struct_VkSurfaceCapabilitiesPresentBarrierNV
class struct_VkSwapchainPresentBarrierCreateInfoNV(Structure):
    pass

struct_VkSwapchainPresentBarrierCreateInfoNV._pack_ = 1 # source:False
struct_VkSwapchainPresentBarrierCreateInfoNV._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('presentBarrierEnable', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkSwapchainPresentBarrierCreateInfoNV = struct_VkSwapchainPresentBarrierCreateInfoNV
VkPrivateDataSlotEXT = ctypes.POINTER(struct_VkPrivateDataSlot_T)
VkPrivateDataSlotCreateFlagsEXT = ctypes.c_uint32
VkPhysicalDevicePrivateDataFeaturesEXT = struct_VkPhysicalDevicePrivateDataFeatures
VkDevicePrivateDataCreateInfoEXT = struct_VkDevicePrivateDataCreateInfo
VkPrivateDataSlotCreateInfoEXT = struct_VkPrivateDataSlotCreateInfo
PFN_vkCreatePrivateDataSlotEXT = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkPrivateDataSlotCreateInfo), ctypes.POINTER(struct_VkAllocationCallbacks), ctypes.POINTER(ctypes.POINTER(struct_VkPrivateDataSlot_T)))
PFN_vkDestroyPrivateDataSlotEXT = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkPrivateDataSlot_T), ctypes.POINTER(struct_VkAllocationCallbacks))
PFN_vkSetPrivateDataEXT = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkDevice_T), VkObjectType, ctypes.c_uint64, ctypes.POINTER(struct_VkPrivateDataSlot_T), ctypes.c_uint64)
PFN_vkGetPrivateDataEXT = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkDevice_T), VkObjectType, ctypes.c_uint64, ctypes.POINTER(struct_VkPrivateDataSlot_T), ctypes.POINTER(ctypes.c_uint64))
try:
    vkCreatePrivateDataSlotEXT = _libraries['FIXME_STUB'].vkCreatePrivateDataSlotEXT
    vkCreatePrivateDataSlotEXT.restype = VkResult
    vkCreatePrivateDataSlotEXT.argtypes = [VkDevice, ctypes.POINTER(struct_VkPrivateDataSlotCreateInfo), ctypes.POINTER(struct_VkAllocationCallbacks), ctypes.POINTER(ctypes.POINTER(struct_VkPrivateDataSlot_T))]
except AttributeError:
    pass
try:
    vkDestroyPrivateDataSlotEXT = _libraries['FIXME_STUB'].vkDestroyPrivateDataSlotEXT
    vkDestroyPrivateDataSlotEXT.restype = None
    vkDestroyPrivateDataSlotEXT.argtypes = [VkDevice, VkPrivateDataSlot, ctypes.POINTER(struct_VkAllocationCallbacks)]
except AttributeError:
    pass
try:
    vkSetPrivateDataEXT = _libraries['FIXME_STUB'].vkSetPrivateDataEXT
    vkSetPrivateDataEXT.restype = VkResult
    vkSetPrivateDataEXT.argtypes = [VkDevice, VkObjectType, uint64_t, VkPrivateDataSlot, uint64_t]
except AttributeError:
    pass
try:
    vkGetPrivateDataEXT = _libraries['FIXME_STUB'].vkGetPrivateDataEXT
    vkGetPrivateDataEXT.restype = None
    vkGetPrivateDataEXT.argtypes = [VkDevice, VkObjectType, uint64_t, VkPrivateDataSlot, ctypes.POINTER(ctypes.c_uint64)]
except AttributeError:
    pass
VkPhysicalDevicePipelineCreationCacheControlFeaturesEXT = struct_VkPhysicalDevicePipelineCreationCacheControlFeatures

# values for enumeration 'VkDeviceDiagnosticsConfigFlagBitsNV'
VkDeviceDiagnosticsConfigFlagBitsNV__enumvalues = {
    1: 'VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_SHADER_DEBUG_INFO_BIT_NV',
    2: 'VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_RESOURCE_TRACKING_BIT_NV',
    4: 'VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_AUTOMATIC_CHECKPOINTS_BIT_NV',
    8: 'VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_SHADER_ERROR_REPORTING_BIT_NV',
    2147483647: 'VK_DEVICE_DIAGNOSTICS_CONFIG_FLAG_BITS_MAX_ENUM_NV',
}
VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_SHADER_DEBUG_INFO_BIT_NV = 1
VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_RESOURCE_TRACKING_BIT_NV = 2
VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_AUTOMATIC_CHECKPOINTS_BIT_NV = 4
VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_SHADER_ERROR_REPORTING_BIT_NV = 8
VK_DEVICE_DIAGNOSTICS_CONFIG_FLAG_BITS_MAX_ENUM_NV = 2147483647
VkDeviceDiagnosticsConfigFlagBitsNV = ctypes.c_uint32 # enum
VkDeviceDiagnosticsConfigFlagsNV = ctypes.c_uint32
class struct_VkPhysicalDeviceDiagnosticsConfigFeaturesNV(Structure):
    pass

struct_VkPhysicalDeviceDiagnosticsConfigFeaturesNV._pack_ = 1 # source:False
struct_VkPhysicalDeviceDiagnosticsConfigFeaturesNV._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('diagnosticsConfig', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPhysicalDeviceDiagnosticsConfigFeaturesNV = struct_VkPhysicalDeviceDiagnosticsConfigFeaturesNV
class struct_VkDeviceDiagnosticsConfigCreateInfoNV(Structure):
    pass

struct_VkDeviceDiagnosticsConfigCreateInfoNV._pack_ = 1 # source:False
struct_VkDeviceDiagnosticsConfigCreateInfoNV._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('flags', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkDeviceDiagnosticsConfigCreateInfoNV = struct_VkDeviceDiagnosticsConfigCreateInfoNV
class struct_VkCudaModuleNV_T(Structure):
    pass

VkCudaModuleNV = ctypes.POINTER(struct_VkCudaModuleNV_T)
class struct_VkCudaFunctionNV_T(Structure):
    pass

VkCudaFunctionNV = ctypes.POINTER(struct_VkCudaFunctionNV_T)
class struct_VkCudaModuleCreateInfoNV(Structure):
    pass

struct_VkCudaModuleCreateInfoNV._pack_ = 1 # source:False
struct_VkCudaModuleCreateInfoNV._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('dataSize', ctypes.c_uint64),
    ('pData', ctypes.POINTER(None)),
]

VkCudaModuleCreateInfoNV = struct_VkCudaModuleCreateInfoNV
class struct_VkCudaFunctionCreateInfoNV(Structure):
    pass

struct_VkCudaFunctionCreateInfoNV._pack_ = 1 # source:False
struct_VkCudaFunctionCreateInfoNV._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('module', ctypes.POINTER(struct_VkCudaModuleNV_T)),
    ('pName', ctypes.POINTER(ctypes.c_char)),
]

VkCudaFunctionCreateInfoNV = struct_VkCudaFunctionCreateInfoNV
class struct_VkCudaLaunchInfoNV(Structure):
    pass

struct_VkCudaLaunchInfoNV._pack_ = 1 # source:False
struct_VkCudaLaunchInfoNV._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('function', ctypes.POINTER(struct_VkCudaFunctionNV_T)),
    ('gridDimX', ctypes.c_uint32),
    ('gridDimY', ctypes.c_uint32),
    ('gridDimZ', ctypes.c_uint32),
    ('blockDimX', ctypes.c_uint32),
    ('blockDimY', ctypes.c_uint32),
    ('blockDimZ', ctypes.c_uint32),
    ('sharedMemBytes', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('paramCount', ctypes.c_uint64),
    ('pParams', ctypes.POINTER(ctypes.POINTER(None))),
    ('extraCount', ctypes.c_uint64),
    ('pExtras', ctypes.POINTER(ctypes.POINTER(None))),
]

VkCudaLaunchInfoNV = struct_VkCudaLaunchInfoNV
class struct_VkPhysicalDeviceCudaKernelLaunchFeaturesNV(Structure):
    pass

struct_VkPhysicalDeviceCudaKernelLaunchFeaturesNV._pack_ = 1 # source:False
struct_VkPhysicalDeviceCudaKernelLaunchFeaturesNV._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('cudaKernelLaunchFeatures', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPhysicalDeviceCudaKernelLaunchFeaturesNV = struct_VkPhysicalDeviceCudaKernelLaunchFeaturesNV
class struct_VkPhysicalDeviceCudaKernelLaunchPropertiesNV(Structure):
    pass

struct_VkPhysicalDeviceCudaKernelLaunchPropertiesNV._pack_ = 1 # source:False
struct_VkPhysicalDeviceCudaKernelLaunchPropertiesNV._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('computeCapabilityMinor', ctypes.c_uint32),
    ('computeCapabilityMajor', ctypes.c_uint32),
]

VkPhysicalDeviceCudaKernelLaunchPropertiesNV = struct_VkPhysicalDeviceCudaKernelLaunchPropertiesNV
PFN_vkCreateCudaModuleNV = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkCudaModuleCreateInfoNV), ctypes.POINTER(struct_VkAllocationCallbacks), ctypes.POINTER(ctypes.POINTER(struct_VkCudaModuleNV_T)))
PFN_vkGetCudaModuleCacheNV = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkCudaModuleNV_T), ctypes.POINTER(ctypes.c_uint64), ctypes.POINTER(None))
PFN_vkCreateCudaFunctionNV = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkCudaFunctionCreateInfoNV), ctypes.POINTER(struct_VkAllocationCallbacks), ctypes.POINTER(ctypes.POINTER(struct_VkCudaFunctionNV_T)))
PFN_vkDestroyCudaModuleNV = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkCudaModuleNV_T), ctypes.POINTER(struct_VkAllocationCallbacks))
PFN_vkDestroyCudaFunctionNV = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkCudaFunctionNV_T), ctypes.POINTER(struct_VkAllocationCallbacks))
PFN_vkCmdCudaLaunchKernelNV = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.POINTER(struct_VkCudaLaunchInfoNV))
try:
    vkCreateCudaModuleNV = _libraries['FIXME_STUB'].vkCreateCudaModuleNV
    vkCreateCudaModuleNV.restype = VkResult
    vkCreateCudaModuleNV.argtypes = [VkDevice, ctypes.POINTER(struct_VkCudaModuleCreateInfoNV), ctypes.POINTER(struct_VkAllocationCallbacks), ctypes.POINTER(ctypes.POINTER(struct_VkCudaModuleNV_T))]
except AttributeError:
    pass
try:
    vkGetCudaModuleCacheNV = _libraries['FIXME_STUB'].vkGetCudaModuleCacheNV
    vkGetCudaModuleCacheNV.restype = VkResult
    vkGetCudaModuleCacheNV.argtypes = [VkDevice, VkCudaModuleNV, ctypes.POINTER(ctypes.c_uint64), ctypes.POINTER(None)]
except AttributeError:
    pass
try:
    vkCreateCudaFunctionNV = _libraries['FIXME_STUB'].vkCreateCudaFunctionNV
    vkCreateCudaFunctionNV.restype = VkResult
    vkCreateCudaFunctionNV.argtypes = [VkDevice, ctypes.POINTER(struct_VkCudaFunctionCreateInfoNV), ctypes.POINTER(struct_VkAllocationCallbacks), ctypes.POINTER(ctypes.POINTER(struct_VkCudaFunctionNV_T))]
except AttributeError:
    pass
try:
    vkDestroyCudaModuleNV = _libraries['FIXME_STUB'].vkDestroyCudaModuleNV
    vkDestroyCudaModuleNV.restype = None
    vkDestroyCudaModuleNV.argtypes = [VkDevice, VkCudaModuleNV, ctypes.POINTER(struct_VkAllocationCallbacks)]
except AttributeError:
    pass
try:
    vkDestroyCudaFunctionNV = _libraries['FIXME_STUB'].vkDestroyCudaFunctionNV
    vkDestroyCudaFunctionNV.restype = None
    vkDestroyCudaFunctionNV.argtypes = [VkDevice, VkCudaFunctionNV, ctypes.POINTER(struct_VkAllocationCallbacks)]
except AttributeError:
    pass
try:
    vkCmdCudaLaunchKernelNV = _libraries['FIXME_STUB'].vkCmdCudaLaunchKernelNV
    vkCmdCudaLaunchKernelNV.restype = None
    vkCmdCudaLaunchKernelNV.argtypes = [VkCommandBuffer, ctypes.POINTER(struct_VkCudaLaunchInfoNV)]
except AttributeError:
    pass
class struct_VkQueryLowLatencySupportNV(Structure):
    pass

struct_VkQueryLowLatencySupportNV._pack_ = 1 # source:False
struct_VkQueryLowLatencySupportNV._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('pQueriedLowLatencyData', ctypes.POINTER(None)),
]

VkQueryLowLatencySupportNV = struct_VkQueryLowLatencySupportNV
class struct_VkAccelerationStructureKHR_T(Structure):
    pass

VkAccelerationStructureKHR = ctypes.POINTER(struct_VkAccelerationStructureKHR_T)
class struct_VkPhysicalDeviceDescriptorBufferPropertiesEXT(Structure):
    pass

struct_VkPhysicalDeviceDescriptorBufferPropertiesEXT._pack_ = 1 # source:False
struct_VkPhysicalDeviceDescriptorBufferPropertiesEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('combinedImageSamplerDescriptorSingleArray', ctypes.c_uint32),
    ('bufferlessPushDescriptors', ctypes.c_uint32),
    ('allowSamplerImageViewPostSubmitCreation', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('descriptorBufferOffsetAlignment', ctypes.c_uint64),
    ('maxDescriptorBufferBindings', ctypes.c_uint32),
    ('maxResourceDescriptorBufferBindings', ctypes.c_uint32),
    ('maxSamplerDescriptorBufferBindings', ctypes.c_uint32),
    ('maxEmbeddedImmutableSamplerBindings', ctypes.c_uint32),
    ('maxEmbeddedImmutableSamplers', ctypes.c_uint32),
    ('PADDING_2', ctypes.c_ubyte * 4),
    ('bufferCaptureReplayDescriptorDataSize', ctypes.c_uint64),
    ('imageCaptureReplayDescriptorDataSize', ctypes.c_uint64),
    ('imageViewCaptureReplayDescriptorDataSize', ctypes.c_uint64),
    ('samplerCaptureReplayDescriptorDataSize', ctypes.c_uint64),
    ('accelerationStructureCaptureReplayDescriptorDataSize', ctypes.c_uint64),
    ('samplerDescriptorSize', ctypes.c_uint64),
    ('combinedImageSamplerDescriptorSize', ctypes.c_uint64),
    ('sampledImageDescriptorSize', ctypes.c_uint64),
    ('storageImageDescriptorSize', ctypes.c_uint64),
    ('uniformTexelBufferDescriptorSize', ctypes.c_uint64),
    ('robustUniformTexelBufferDescriptorSize', ctypes.c_uint64),
    ('storageTexelBufferDescriptorSize', ctypes.c_uint64),
    ('robustStorageTexelBufferDescriptorSize', ctypes.c_uint64),
    ('uniformBufferDescriptorSize', ctypes.c_uint64),
    ('robustUniformBufferDescriptorSize', ctypes.c_uint64),
    ('storageBufferDescriptorSize', ctypes.c_uint64),
    ('robustStorageBufferDescriptorSize', ctypes.c_uint64),
    ('inputAttachmentDescriptorSize', ctypes.c_uint64),
    ('accelerationStructureDescriptorSize', ctypes.c_uint64),
    ('maxSamplerDescriptorBufferRange', ctypes.c_uint64),
    ('maxResourceDescriptorBufferRange', ctypes.c_uint64),
    ('samplerDescriptorBufferAddressSpaceSize', ctypes.c_uint64),
    ('resourceDescriptorBufferAddressSpaceSize', ctypes.c_uint64),
    ('descriptorBufferAddressSpaceSize', ctypes.c_uint64),
]

VkPhysicalDeviceDescriptorBufferPropertiesEXT = struct_VkPhysicalDeviceDescriptorBufferPropertiesEXT
class struct_VkPhysicalDeviceDescriptorBufferDensityMapPropertiesEXT(Structure):
    pass

struct_VkPhysicalDeviceDescriptorBufferDensityMapPropertiesEXT._pack_ = 1 # source:False
struct_VkPhysicalDeviceDescriptorBufferDensityMapPropertiesEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('combinedImageSamplerDensityMapDescriptorSize', ctypes.c_uint64),
]

VkPhysicalDeviceDescriptorBufferDensityMapPropertiesEXT = struct_VkPhysicalDeviceDescriptorBufferDensityMapPropertiesEXT
class struct_VkPhysicalDeviceDescriptorBufferFeaturesEXT(Structure):
    pass

struct_VkPhysicalDeviceDescriptorBufferFeaturesEXT._pack_ = 1 # source:False
struct_VkPhysicalDeviceDescriptorBufferFeaturesEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('descriptorBuffer', ctypes.c_uint32),
    ('descriptorBufferCaptureReplay', ctypes.c_uint32),
    ('descriptorBufferImageLayoutIgnored', ctypes.c_uint32),
    ('descriptorBufferPushDescriptors', ctypes.c_uint32),
]

VkPhysicalDeviceDescriptorBufferFeaturesEXT = struct_VkPhysicalDeviceDescriptorBufferFeaturesEXT
class struct_VkDescriptorAddressInfoEXT(Structure):
    pass

struct_VkDescriptorAddressInfoEXT._pack_ = 1 # source:False
struct_VkDescriptorAddressInfoEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('address', ctypes.c_uint64),
    ('range', ctypes.c_uint64),
    ('format', VkFormat),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkDescriptorAddressInfoEXT = struct_VkDescriptorAddressInfoEXT
class struct_VkDescriptorBufferBindingInfoEXT(Structure):
    pass

struct_VkDescriptorBufferBindingInfoEXT._pack_ = 1 # source:False
struct_VkDescriptorBufferBindingInfoEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('address', ctypes.c_uint64),
    ('usage', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkDescriptorBufferBindingInfoEXT = struct_VkDescriptorBufferBindingInfoEXT
class struct_VkDescriptorBufferBindingPushDescriptorBufferHandleEXT(Structure):
    pass

struct_VkDescriptorBufferBindingPushDescriptorBufferHandleEXT._pack_ = 1 # source:False
struct_VkDescriptorBufferBindingPushDescriptorBufferHandleEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('buffer', ctypes.POINTER(struct_VkBuffer_T)),
]

VkDescriptorBufferBindingPushDescriptorBufferHandleEXT = struct_VkDescriptorBufferBindingPushDescriptorBufferHandleEXT
class union_VkDescriptorDataEXT(Union):
    pass

union_VkDescriptorDataEXT._pack_ = 1 # source:False
union_VkDescriptorDataEXT._fields_ = [
    ('pSampler', ctypes.POINTER(ctypes.POINTER(struct_VkSampler_T))),
    ('pCombinedImageSampler', ctypes.POINTER(struct_VkDescriptorImageInfo)),
    ('pInputAttachmentImage', ctypes.POINTER(struct_VkDescriptorImageInfo)),
    ('pSampledImage', ctypes.POINTER(struct_VkDescriptorImageInfo)),
    ('pStorageImage', ctypes.POINTER(struct_VkDescriptorImageInfo)),
    ('pUniformTexelBuffer', ctypes.POINTER(struct_VkDescriptorAddressInfoEXT)),
    ('pStorageTexelBuffer', ctypes.POINTER(struct_VkDescriptorAddressInfoEXT)),
    ('pUniformBuffer', ctypes.POINTER(struct_VkDescriptorAddressInfoEXT)),
    ('pStorageBuffer', ctypes.POINTER(struct_VkDescriptorAddressInfoEXT)),
    ('accelerationStructure', ctypes.c_uint64),
]

VkDescriptorDataEXT = union_VkDescriptorDataEXT
class struct_VkDescriptorGetInfoEXT(Structure):
    pass

struct_VkDescriptorGetInfoEXT._pack_ = 1 # source:False
struct_VkDescriptorGetInfoEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('type', VkDescriptorType),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('data', VkDescriptorDataEXT),
]

VkDescriptorGetInfoEXT = struct_VkDescriptorGetInfoEXT
class struct_VkBufferCaptureDescriptorDataInfoEXT(Structure):
    pass

struct_VkBufferCaptureDescriptorDataInfoEXT._pack_ = 1 # source:False
struct_VkBufferCaptureDescriptorDataInfoEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('buffer', ctypes.POINTER(struct_VkBuffer_T)),
]

VkBufferCaptureDescriptorDataInfoEXT = struct_VkBufferCaptureDescriptorDataInfoEXT
class struct_VkImageCaptureDescriptorDataInfoEXT(Structure):
    pass

struct_VkImageCaptureDescriptorDataInfoEXT._pack_ = 1 # source:False
struct_VkImageCaptureDescriptorDataInfoEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('image', ctypes.POINTER(struct_VkImage_T)),
]

VkImageCaptureDescriptorDataInfoEXT = struct_VkImageCaptureDescriptorDataInfoEXT
class struct_VkImageViewCaptureDescriptorDataInfoEXT(Structure):
    pass

struct_VkImageViewCaptureDescriptorDataInfoEXT._pack_ = 1 # source:False
struct_VkImageViewCaptureDescriptorDataInfoEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('imageView', ctypes.POINTER(struct_VkImageView_T)),
]

VkImageViewCaptureDescriptorDataInfoEXT = struct_VkImageViewCaptureDescriptorDataInfoEXT
class struct_VkSamplerCaptureDescriptorDataInfoEXT(Structure):
    pass

struct_VkSamplerCaptureDescriptorDataInfoEXT._pack_ = 1 # source:False
struct_VkSamplerCaptureDescriptorDataInfoEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('sampler', ctypes.POINTER(struct_VkSampler_T)),
]

VkSamplerCaptureDescriptorDataInfoEXT = struct_VkSamplerCaptureDescriptorDataInfoEXT
class struct_VkOpaqueCaptureDescriptorDataCreateInfoEXT(Structure):
    pass

struct_VkOpaqueCaptureDescriptorDataCreateInfoEXT._pack_ = 1 # source:False
struct_VkOpaqueCaptureDescriptorDataCreateInfoEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('opaqueCaptureDescriptorData', ctypes.POINTER(None)),
]

VkOpaqueCaptureDescriptorDataCreateInfoEXT = struct_VkOpaqueCaptureDescriptorDataCreateInfoEXT
class struct_VkAccelerationStructureCaptureDescriptorDataInfoEXT(Structure):
    pass

struct_VkAccelerationStructureCaptureDescriptorDataInfoEXT._pack_ = 1 # source:False
struct_VkAccelerationStructureCaptureDescriptorDataInfoEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('accelerationStructure', ctypes.POINTER(struct_VkAccelerationStructureKHR_T)),
    ('accelerationStructureNV', ctypes.POINTER(struct_VkAccelerationStructureNV_T)),
]

VkAccelerationStructureCaptureDescriptorDataInfoEXT = struct_VkAccelerationStructureCaptureDescriptorDataInfoEXT
PFN_vkGetDescriptorSetLayoutSizeEXT = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkDescriptorSetLayout_T), ctypes.POINTER(ctypes.c_uint64))
PFN_vkGetDescriptorSetLayoutBindingOffsetEXT = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkDescriptorSetLayout_T), ctypes.c_uint32, ctypes.POINTER(ctypes.c_uint64))
PFN_vkGetDescriptorEXT = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkDescriptorGetInfoEXT), ctypes.c_uint64, ctypes.POINTER(None))
PFN_vkCmdBindDescriptorBuffersEXT = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.c_uint32, ctypes.POINTER(struct_VkDescriptorBufferBindingInfoEXT))
PFN_vkCmdSetDescriptorBufferOffsetsEXT = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), VkPipelineBindPoint, ctypes.POINTER(struct_VkPipelineLayout_T), ctypes.c_uint32, ctypes.c_uint32, ctypes.POINTER(ctypes.c_uint32), ctypes.POINTER(ctypes.c_uint64))
PFN_vkCmdBindDescriptorBufferEmbeddedSamplersEXT = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), VkPipelineBindPoint, ctypes.POINTER(struct_VkPipelineLayout_T), ctypes.c_uint32)
PFN_vkGetBufferOpaqueCaptureDescriptorDataEXT = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkBufferCaptureDescriptorDataInfoEXT), ctypes.POINTER(None))
PFN_vkGetImageOpaqueCaptureDescriptorDataEXT = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkImageCaptureDescriptorDataInfoEXT), ctypes.POINTER(None))
PFN_vkGetImageViewOpaqueCaptureDescriptorDataEXT = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkImageViewCaptureDescriptorDataInfoEXT), ctypes.POINTER(None))
PFN_vkGetSamplerOpaqueCaptureDescriptorDataEXT = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkSamplerCaptureDescriptorDataInfoEXT), ctypes.POINTER(None))
PFN_vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkAccelerationStructureCaptureDescriptorDataInfoEXT), ctypes.POINTER(None))
try:
    vkGetDescriptorSetLayoutSizeEXT = _libraries['FIXME_STUB'].vkGetDescriptorSetLayoutSizeEXT
    vkGetDescriptorSetLayoutSizeEXT.restype = None
    vkGetDescriptorSetLayoutSizeEXT.argtypes = [VkDevice, VkDescriptorSetLayout, ctypes.POINTER(ctypes.c_uint64)]
except AttributeError:
    pass
try:
    vkGetDescriptorSetLayoutBindingOffsetEXT = _libraries['FIXME_STUB'].vkGetDescriptorSetLayoutBindingOffsetEXT
    vkGetDescriptorSetLayoutBindingOffsetEXT.restype = None
    vkGetDescriptorSetLayoutBindingOffsetEXT.argtypes = [VkDevice, VkDescriptorSetLayout, uint32_t, ctypes.POINTER(ctypes.c_uint64)]
except AttributeError:
    pass
try:
    vkGetDescriptorEXT = _libraries['FIXME_STUB'].vkGetDescriptorEXT
    vkGetDescriptorEXT.restype = None
    vkGetDescriptorEXT.argtypes = [VkDevice, ctypes.POINTER(struct_VkDescriptorGetInfoEXT), size_t, ctypes.POINTER(None)]
except AttributeError:
    pass
try:
    vkCmdBindDescriptorBuffersEXT = _libraries['FIXME_STUB'].vkCmdBindDescriptorBuffersEXT
    vkCmdBindDescriptorBuffersEXT.restype = None
    vkCmdBindDescriptorBuffersEXT.argtypes = [VkCommandBuffer, uint32_t, ctypes.POINTER(struct_VkDescriptorBufferBindingInfoEXT)]
except AttributeError:
    pass
try:
    vkCmdSetDescriptorBufferOffsetsEXT = _libraries['FIXME_STUB'].vkCmdSetDescriptorBufferOffsetsEXT
    vkCmdSetDescriptorBufferOffsetsEXT.restype = None
    vkCmdSetDescriptorBufferOffsetsEXT.argtypes = [VkCommandBuffer, VkPipelineBindPoint, VkPipelineLayout, uint32_t, uint32_t, ctypes.POINTER(ctypes.c_uint32), ctypes.POINTER(ctypes.c_uint64)]
except AttributeError:
    pass
try:
    vkCmdBindDescriptorBufferEmbeddedSamplersEXT = _libraries['FIXME_STUB'].vkCmdBindDescriptorBufferEmbeddedSamplersEXT
    vkCmdBindDescriptorBufferEmbeddedSamplersEXT.restype = None
    vkCmdBindDescriptorBufferEmbeddedSamplersEXT.argtypes = [VkCommandBuffer, VkPipelineBindPoint, VkPipelineLayout, uint32_t]
except AttributeError:
    pass
try:
    vkGetBufferOpaqueCaptureDescriptorDataEXT = _libraries['FIXME_STUB'].vkGetBufferOpaqueCaptureDescriptorDataEXT
    vkGetBufferOpaqueCaptureDescriptorDataEXT.restype = VkResult
    vkGetBufferOpaqueCaptureDescriptorDataEXT.argtypes = [VkDevice, ctypes.POINTER(struct_VkBufferCaptureDescriptorDataInfoEXT), ctypes.POINTER(None)]
except AttributeError:
    pass
try:
    vkGetImageOpaqueCaptureDescriptorDataEXT = _libraries['FIXME_STUB'].vkGetImageOpaqueCaptureDescriptorDataEXT
    vkGetImageOpaqueCaptureDescriptorDataEXT.restype = VkResult
    vkGetImageOpaqueCaptureDescriptorDataEXT.argtypes = [VkDevice, ctypes.POINTER(struct_VkImageCaptureDescriptorDataInfoEXT), ctypes.POINTER(None)]
except AttributeError:
    pass
try:
    vkGetImageViewOpaqueCaptureDescriptorDataEXT = _libraries['FIXME_STUB'].vkGetImageViewOpaqueCaptureDescriptorDataEXT
    vkGetImageViewOpaqueCaptureDescriptorDataEXT.restype = VkResult
    vkGetImageViewOpaqueCaptureDescriptorDataEXT.argtypes = [VkDevice, ctypes.POINTER(struct_VkImageViewCaptureDescriptorDataInfoEXT), ctypes.POINTER(None)]
except AttributeError:
    pass
try:
    vkGetSamplerOpaqueCaptureDescriptorDataEXT = _libraries['FIXME_STUB'].vkGetSamplerOpaqueCaptureDescriptorDataEXT
    vkGetSamplerOpaqueCaptureDescriptorDataEXT.restype = VkResult
    vkGetSamplerOpaqueCaptureDescriptorDataEXT.argtypes = [VkDevice, ctypes.POINTER(struct_VkSamplerCaptureDescriptorDataInfoEXT), ctypes.POINTER(None)]
except AttributeError:
    pass
try:
    vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT = _libraries['FIXME_STUB'].vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT
    vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT.restype = VkResult
    vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT.argtypes = [VkDevice, ctypes.POINTER(struct_VkAccelerationStructureCaptureDescriptorDataInfoEXT), ctypes.POINTER(None)]
except AttributeError:
    pass

# values for enumeration 'VkGraphicsPipelineLibraryFlagBitsEXT'
VkGraphicsPipelineLibraryFlagBitsEXT__enumvalues = {
    1: 'VK_GRAPHICS_PIPELINE_LIBRARY_VERTEX_INPUT_INTERFACE_BIT_EXT',
    2: 'VK_GRAPHICS_PIPELINE_LIBRARY_PRE_RASTERIZATION_SHADERS_BIT_EXT',
    4: 'VK_GRAPHICS_PIPELINE_LIBRARY_FRAGMENT_SHADER_BIT_EXT',
    8: 'VK_GRAPHICS_PIPELINE_LIBRARY_FRAGMENT_OUTPUT_INTERFACE_BIT_EXT',
    2147483647: 'VK_GRAPHICS_PIPELINE_LIBRARY_FLAG_BITS_MAX_ENUM_EXT',
}
VK_GRAPHICS_PIPELINE_LIBRARY_VERTEX_INPUT_INTERFACE_BIT_EXT = 1
VK_GRAPHICS_PIPELINE_LIBRARY_PRE_RASTERIZATION_SHADERS_BIT_EXT = 2
VK_GRAPHICS_PIPELINE_LIBRARY_FRAGMENT_SHADER_BIT_EXT = 4
VK_GRAPHICS_PIPELINE_LIBRARY_FRAGMENT_OUTPUT_INTERFACE_BIT_EXT = 8
VK_GRAPHICS_PIPELINE_LIBRARY_FLAG_BITS_MAX_ENUM_EXT = 2147483647
VkGraphicsPipelineLibraryFlagBitsEXT = ctypes.c_uint32 # enum
VkGraphicsPipelineLibraryFlagsEXT = ctypes.c_uint32
class struct_VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT(Structure):
    pass

struct_VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT._pack_ = 1 # source:False
struct_VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('graphicsPipelineLibrary', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT = struct_VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT
class struct_VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT(Structure):
    pass

struct_VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT._pack_ = 1 # source:False
struct_VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('graphicsPipelineLibraryFastLinking', ctypes.c_uint32),
    ('graphicsPipelineLibraryIndependentInterpolationDecoration', ctypes.c_uint32),
]

VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT = struct_VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT
class struct_VkGraphicsPipelineLibraryCreateInfoEXT(Structure):
    pass

struct_VkGraphicsPipelineLibraryCreateInfoEXT._pack_ = 1 # source:False
struct_VkGraphicsPipelineLibraryCreateInfoEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('flags', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkGraphicsPipelineLibraryCreateInfoEXT = struct_VkGraphicsPipelineLibraryCreateInfoEXT
class struct_VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD(Structure):
    pass

struct_VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD._pack_ = 1 # source:False
struct_VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('shaderEarlyAndLateFragmentTests', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD = struct_VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD

# values for enumeration 'VkFragmentShadingRateTypeNV'
VkFragmentShadingRateTypeNV__enumvalues = {
    0: 'VK_FRAGMENT_SHADING_RATE_TYPE_FRAGMENT_SIZE_NV',
    1: 'VK_FRAGMENT_SHADING_RATE_TYPE_ENUMS_NV',
    2147483647: 'VK_FRAGMENT_SHADING_RATE_TYPE_MAX_ENUM_NV',
}
VK_FRAGMENT_SHADING_RATE_TYPE_FRAGMENT_SIZE_NV = 0
VK_FRAGMENT_SHADING_RATE_TYPE_ENUMS_NV = 1
VK_FRAGMENT_SHADING_RATE_TYPE_MAX_ENUM_NV = 2147483647
VkFragmentShadingRateTypeNV = ctypes.c_uint32 # enum

# values for enumeration 'VkFragmentShadingRateNV'
VkFragmentShadingRateNV__enumvalues = {
    0: 'VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_PIXEL_NV',
    1: 'VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_1X2_PIXELS_NV',
    4: 'VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X1_PIXELS_NV',
    5: 'VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X2_PIXELS_NV',
    6: 'VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X4_PIXELS_NV',
    9: 'VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_4X2_PIXELS_NV',
    10: 'VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_4X4_PIXELS_NV',
    11: 'VK_FRAGMENT_SHADING_RATE_2_INVOCATIONS_PER_PIXEL_NV',
    12: 'VK_FRAGMENT_SHADING_RATE_4_INVOCATIONS_PER_PIXEL_NV',
    13: 'VK_FRAGMENT_SHADING_RATE_8_INVOCATIONS_PER_PIXEL_NV',
    14: 'VK_FRAGMENT_SHADING_RATE_16_INVOCATIONS_PER_PIXEL_NV',
    15: 'VK_FRAGMENT_SHADING_RATE_NO_INVOCATIONS_NV',
    2147483647: 'VK_FRAGMENT_SHADING_RATE_MAX_ENUM_NV',
}
VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_PIXEL_NV = 0
VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_1X2_PIXELS_NV = 1
VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X1_PIXELS_NV = 4
VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X2_PIXELS_NV = 5
VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X4_PIXELS_NV = 6
VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_4X2_PIXELS_NV = 9
VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_4X4_PIXELS_NV = 10
VK_FRAGMENT_SHADING_RATE_2_INVOCATIONS_PER_PIXEL_NV = 11
VK_FRAGMENT_SHADING_RATE_4_INVOCATIONS_PER_PIXEL_NV = 12
VK_FRAGMENT_SHADING_RATE_8_INVOCATIONS_PER_PIXEL_NV = 13
VK_FRAGMENT_SHADING_RATE_16_INVOCATIONS_PER_PIXEL_NV = 14
VK_FRAGMENT_SHADING_RATE_NO_INVOCATIONS_NV = 15
VK_FRAGMENT_SHADING_RATE_MAX_ENUM_NV = 2147483647
VkFragmentShadingRateNV = ctypes.c_uint32 # enum
class struct_VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV(Structure):
    pass

struct_VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV._pack_ = 1 # source:False
struct_VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('fragmentShadingRateEnums', ctypes.c_uint32),
    ('supersampleFragmentShadingRates', ctypes.c_uint32),
    ('noInvocationFragmentShadingRates', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV = struct_VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV
class struct_VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV(Structure):
    pass

struct_VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV._pack_ = 1 # source:False
struct_VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('maxFragmentShadingRateInvocationCount', VkSampleCountFlagBits),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV = struct_VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV
class struct_VkPipelineFragmentShadingRateEnumStateCreateInfoNV(Structure):
    pass

struct_VkPipelineFragmentShadingRateEnumStateCreateInfoNV._pack_ = 1 # source:False
struct_VkPipelineFragmentShadingRateEnumStateCreateInfoNV._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('shadingRateType', VkFragmentShadingRateTypeNV),
    ('shadingRate', VkFragmentShadingRateNV),
    ('combinerOps', VkFragmentShadingRateCombinerOpKHR * 2),
]

VkPipelineFragmentShadingRateEnumStateCreateInfoNV = struct_VkPipelineFragmentShadingRateEnumStateCreateInfoNV
PFN_vkCmdSetFragmentShadingRateEnumNV = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), VkFragmentShadingRateNV, ctypes.POINTER(VkFragmentShadingRateCombinerOpKHR))
try:
    vkCmdSetFragmentShadingRateEnumNV = _libraries['FIXME_STUB'].vkCmdSetFragmentShadingRateEnumNV
    vkCmdSetFragmentShadingRateEnumNV.restype = None
    vkCmdSetFragmentShadingRateEnumNV.argtypes = [VkCommandBuffer, VkFragmentShadingRateNV, VkFragmentShadingRateCombinerOpKHR * 2]
except AttributeError:
    pass

# values for enumeration 'VkAccelerationStructureMotionInstanceTypeNV'
VkAccelerationStructureMotionInstanceTypeNV__enumvalues = {
    0: 'VK_ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_STATIC_NV',
    1: 'VK_ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_MATRIX_MOTION_NV',
    2: 'VK_ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_SRT_MOTION_NV',
    2147483647: 'VK_ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_MAX_ENUM_NV',
}
VK_ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_STATIC_NV = 0
VK_ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_MATRIX_MOTION_NV = 1
VK_ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_SRT_MOTION_NV = 2
VK_ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_MAX_ENUM_NV = 2147483647
VkAccelerationStructureMotionInstanceTypeNV = ctypes.c_uint32 # enum
VkAccelerationStructureMotionInfoFlagsNV = ctypes.c_uint32
VkAccelerationStructureMotionInstanceFlagsNV = ctypes.c_uint32
class union_VkDeviceOrHostAddressConstKHR(Union):
    pass

union_VkDeviceOrHostAddressConstKHR._pack_ = 1 # source:False
union_VkDeviceOrHostAddressConstKHR._fields_ = [
    ('deviceAddress', ctypes.c_uint64),
    ('hostAddress', ctypes.POINTER(None)),
]

VkDeviceOrHostAddressConstKHR = union_VkDeviceOrHostAddressConstKHR
class struct_VkAccelerationStructureGeometryMotionTrianglesDataNV(Structure):
    pass

struct_VkAccelerationStructureGeometryMotionTrianglesDataNV._pack_ = 1 # source:False
struct_VkAccelerationStructureGeometryMotionTrianglesDataNV._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('vertexData', VkDeviceOrHostAddressConstKHR),
]

VkAccelerationStructureGeometryMotionTrianglesDataNV = struct_VkAccelerationStructureGeometryMotionTrianglesDataNV
class struct_VkAccelerationStructureMotionInfoNV(Structure):
    pass

struct_VkAccelerationStructureMotionInfoNV._pack_ = 1 # source:False
struct_VkAccelerationStructureMotionInfoNV._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('maxInstances', ctypes.c_uint32),
    ('flags', ctypes.c_uint32),
]

VkAccelerationStructureMotionInfoNV = struct_VkAccelerationStructureMotionInfoNV
class struct_VkAccelerationStructureMatrixMotionInstanceNV(Structure):
    pass

struct_VkAccelerationStructureMatrixMotionInstanceNV._pack_ = 1 # source:False
struct_VkAccelerationStructureMatrixMotionInstanceNV._fields_ = [
    ('transformT0', VkTransformMatrixKHR),
    ('transformT1', VkTransformMatrixKHR),
    ('instanceCustomIndex', ctypes.c_uint64, 24),
    ('mask', ctypes.c_uint64, 8),
    ('instanceShaderBindingTableRecordOffset', ctypes.c_uint64, 24),
    ('flags', ctypes.c_uint64, 8),
    ('accelerationStructureReference', ctypes.c_uint64),
]

VkAccelerationStructureMatrixMotionInstanceNV = struct_VkAccelerationStructureMatrixMotionInstanceNV
class struct_VkSRTDataNV(Structure):
    pass

struct_VkSRTDataNV._pack_ = 1 # source:False
struct_VkSRTDataNV._fields_ = [
    ('sx', ctypes.c_float),
    ('a', ctypes.c_float),
    ('b', ctypes.c_float),
    ('pvx', ctypes.c_float),
    ('sy', ctypes.c_float),
    ('c', ctypes.c_float),
    ('pvy', ctypes.c_float),
    ('sz', ctypes.c_float),
    ('pvz', ctypes.c_float),
    ('qx', ctypes.c_float),
    ('qy', ctypes.c_float),
    ('qz', ctypes.c_float),
    ('qw', ctypes.c_float),
    ('tx', ctypes.c_float),
    ('ty', ctypes.c_float),
    ('tz', ctypes.c_float),
]

VkSRTDataNV = struct_VkSRTDataNV
class struct_VkAccelerationStructureSRTMotionInstanceNV(Structure):
    pass

struct_VkAccelerationStructureSRTMotionInstanceNV._pack_ = 1 # source:False
struct_VkAccelerationStructureSRTMotionInstanceNV._fields_ = [
    ('transformT0', VkSRTDataNV),
    ('transformT1', VkSRTDataNV),
    ('instanceCustomIndex', ctypes.c_uint64, 24),
    ('mask', ctypes.c_uint64, 8),
    ('instanceShaderBindingTableRecordOffset', ctypes.c_uint64, 24),
    ('flags', ctypes.c_uint64, 8),
    ('accelerationStructureReference', ctypes.c_uint64),
]

VkAccelerationStructureSRTMotionInstanceNV = struct_VkAccelerationStructureSRTMotionInstanceNV
class union_VkAccelerationStructureMotionInstanceDataNV(Union):
    _pack_ = 1 # source:False
    _fields_ = [
    ('staticInstance', VkAccelerationStructureInstanceKHR),
    ('matrixMotionInstance', VkAccelerationStructureMatrixMotionInstanceNV),
    ('srtMotionInstance', VkAccelerationStructureSRTMotionInstanceNV),
     ]

VkAccelerationStructureMotionInstanceDataNV = union_VkAccelerationStructureMotionInstanceDataNV
class struct_VkAccelerationStructureMotionInstanceNV(Structure):
    pass

struct_VkAccelerationStructureMotionInstanceNV._pack_ = 1 # source:False
struct_VkAccelerationStructureMotionInstanceNV._fields_ = [
    ('type', VkAccelerationStructureMotionInstanceTypeNV),
    ('flags', ctypes.c_uint32),
    ('data', VkAccelerationStructureMotionInstanceDataNV),
]

VkAccelerationStructureMotionInstanceNV = struct_VkAccelerationStructureMotionInstanceNV
class struct_VkPhysicalDeviceRayTracingMotionBlurFeaturesNV(Structure):
    pass

struct_VkPhysicalDeviceRayTracingMotionBlurFeaturesNV._pack_ = 1 # source:False
struct_VkPhysicalDeviceRayTracingMotionBlurFeaturesNV._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('rayTracingMotionBlur', ctypes.c_uint32),
    ('rayTracingMotionBlurPipelineTraceRaysIndirect', ctypes.c_uint32),
]

VkPhysicalDeviceRayTracingMotionBlurFeaturesNV = struct_VkPhysicalDeviceRayTracingMotionBlurFeaturesNV
class struct_VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT(Structure):
    pass

struct_VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT._pack_ = 1 # source:False
struct_VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('ycbcr2plane444Formats', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT = struct_VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT
class struct_VkPhysicalDeviceFragmentDensityMap2FeaturesEXT(Structure):
    pass

struct_VkPhysicalDeviceFragmentDensityMap2FeaturesEXT._pack_ = 1 # source:False
struct_VkPhysicalDeviceFragmentDensityMap2FeaturesEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('fragmentDensityMapDeferred', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPhysicalDeviceFragmentDensityMap2FeaturesEXT = struct_VkPhysicalDeviceFragmentDensityMap2FeaturesEXT
class struct_VkPhysicalDeviceFragmentDensityMap2PropertiesEXT(Structure):
    pass

struct_VkPhysicalDeviceFragmentDensityMap2PropertiesEXT._pack_ = 1 # source:False
struct_VkPhysicalDeviceFragmentDensityMap2PropertiesEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('subsampledLoads', ctypes.c_uint32),
    ('subsampledCoarseReconstructionEarlyAccess', ctypes.c_uint32),
    ('maxSubsampledArrayLayers', ctypes.c_uint32),
    ('maxDescriptorSetSubsampledSamplers', ctypes.c_uint32),
]

VkPhysicalDeviceFragmentDensityMap2PropertiesEXT = struct_VkPhysicalDeviceFragmentDensityMap2PropertiesEXT
class struct_VkCopyCommandTransformInfoQCOM(Structure):
    pass

struct_VkCopyCommandTransformInfoQCOM._pack_ = 1 # source:False
struct_VkCopyCommandTransformInfoQCOM._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('transform', VkSurfaceTransformFlagBitsKHR),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkCopyCommandTransformInfoQCOM = struct_VkCopyCommandTransformInfoQCOM
VkPhysicalDeviceImageRobustnessFeaturesEXT = struct_VkPhysicalDeviceImageRobustnessFeatures

# values for enumeration 'VkImageCompressionFlagBitsEXT'
VkImageCompressionFlagBitsEXT__enumvalues = {
    0: 'VK_IMAGE_COMPRESSION_DEFAULT_EXT',
    1: 'VK_IMAGE_COMPRESSION_FIXED_RATE_DEFAULT_EXT',
    2: 'VK_IMAGE_COMPRESSION_FIXED_RATE_EXPLICIT_EXT',
    4: 'VK_IMAGE_COMPRESSION_DISABLED_EXT',
    2147483647: 'VK_IMAGE_COMPRESSION_FLAG_BITS_MAX_ENUM_EXT',
}
VK_IMAGE_COMPRESSION_DEFAULT_EXT = 0
VK_IMAGE_COMPRESSION_FIXED_RATE_DEFAULT_EXT = 1
VK_IMAGE_COMPRESSION_FIXED_RATE_EXPLICIT_EXT = 2
VK_IMAGE_COMPRESSION_DISABLED_EXT = 4
VK_IMAGE_COMPRESSION_FLAG_BITS_MAX_ENUM_EXT = 2147483647
VkImageCompressionFlagBitsEXT = ctypes.c_uint32 # enum
VkImageCompressionFlagsEXT = ctypes.c_uint32

# values for enumeration 'VkImageCompressionFixedRateFlagBitsEXT'
VkImageCompressionFixedRateFlagBitsEXT__enumvalues = {
    0: 'VK_IMAGE_COMPRESSION_FIXED_RATE_NONE_EXT',
    1: 'VK_IMAGE_COMPRESSION_FIXED_RATE_1BPC_BIT_EXT',
    2: 'VK_IMAGE_COMPRESSION_FIXED_RATE_2BPC_BIT_EXT',
    4: 'VK_IMAGE_COMPRESSION_FIXED_RATE_3BPC_BIT_EXT',
    8: 'VK_IMAGE_COMPRESSION_FIXED_RATE_4BPC_BIT_EXT',
    16: 'VK_IMAGE_COMPRESSION_FIXED_RATE_5BPC_BIT_EXT',
    32: 'VK_IMAGE_COMPRESSION_FIXED_RATE_6BPC_BIT_EXT',
    64: 'VK_IMAGE_COMPRESSION_FIXED_RATE_7BPC_BIT_EXT',
    128: 'VK_IMAGE_COMPRESSION_FIXED_RATE_8BPC_BIT_EXT',
    256: 'VK_IMAGE_COMPRESSION_FIXED_RATE_9BPC_BIT_EXT',
    512: 'VK_IMAGE_COMPRESSION_FIXED_RATE_10BPC_BIT_EXT',
    1024: 'VK_IMAGE_COMPRESSION_FIXED_RATE_11BPC_BIT_EXT',
    2048: 'VK_IMAGE_COMPRESSION_FIXED_RATE_12BPC_BIT_EXT',
    4096: 'VK_IMAGE_COMPRESSION_FIXED_RATE_13BPC_BIT_EXT',
    8192: 'VK_IMAGE_COMPRESSION_FIXED_RATE_14BPC_BIT_EXT',
    16384: 'VK_IMAGE_COMPRESSION_FIXED_RATE_15BPC_BIT_EXT',
    32768: 'VK_IMAGE_COMPRESSION_FIXED_RATE_16BPC_BIT_EXT',
    65536: 'VK_IMAGE_COMPRESSION_FIXED_RATE_17BPC_BIT_EXT',
    131072: 'VK_IMAGE_COMPRESSION_FIXED_RATE_18BPC_BIT_EXT',
    262144: 'VK_IMAGE_COMPRESSION_FIXED_RATE_19BPC_BIT_EXT',
    524288: 'VK_IMAGE_COMPRESSION_FIXED_RATE_20BPC_BIT_EXT',
    1048576: 'VK_IMAGE_COMPRESSION_FIXED_RATE_21BPC_BIT_EXT',
    2097152: 'VK_IMAGE_COMPRESSION_FIXED_RATE_22BPC_BIT_EXT',
    4194304: 'VK_IMAGE_COMPRESSION_FIXED_RATE_23BPC_BIT_EXT',
    8388608: 'VK_IMAGE_COMPRESSION_FIXED_RATE_24BPC_BIT_EXT',
    2147483647: 'VK_IMAGE_COMPRESSION_FIXED_RATE_FLAG_BITS_MAX_ENUM_EXT',
}
VK_IMAGE_COMPRESSION_FIXED_RATE_NONE_EXT = 0
VK_IMAGE_COMPRESSION_FIXED_RATE_1BPC_BIT_EXT = 1
VK_IMAGE_COMPRESSION_FIXED_RATE_2BPC_BIT_EXT = 2
VK_IMAGE_COMPRESSION_FIXED_RATE_3BPC_BIT_EXT = 4
VK_IMAGE_COMPRESSION_FIXED_RATE_4BPC_BIT_EXT = 8
VK_IMAGE_COMPRESSION_FIXED_RATE_5BPC_BIT_EXT = 16
VK_IMAGE_COMPRESSION_FIXED_RATE_6BPC_BIT_EXT = 32
VK_IMAGE_COMPRESSION_FIXED_RATE_7BPC_BIT_EXT = 64
VK_IMAGE_COMPRESSION_FIXED_RATE_8BPC_BIT_EXT = 128
VK_IMAGE_COMPRESSION_FIXED_RATE_9BPC_BIT_EXT = 256
VK_IMAGE_COMPRESSION_FIXED_RATE_10BPC_BIT_EXT = 512
VK_IMAGE_COMPRESSION_FIXED_RATE_11BPC_BIT_EXT = 1024
VK_IMAGE_COMPRESSION_FIXED_RATE_12BPC_BIT_EXT = 2048
VK_IMAGE_COMPRESSION_FIXED_RATE_13BPC_BIT_EXT = 4096
VK_IMAGE_COMPRESSION_FIXED_RATE_14BPC_BIT_EXT = 8192
VK_IMAGE_COMPRESSION_FIXED_RATE_15BPC_BIT_EXT = 16384
VK_IMAGE_COMPRESSION_FIXED_RATE_16BPC_BIT_EXT = 32768
VK_IMAGE_COMPRESSION_FIXED_RATE_17BPC_BIT_EXT = 65536
VK_IMAGE_COMPRESSION_FIXED_RATE_18BPC_BIT_EXT = 131072
VK_IMAGE_COMPRESSION_FIXED_RATE_19BPC_BIT_EXT = 262144
VK_IMAGE_COMPRESSION_FIXED_RATE_20BPC_BIT_EXT = 524288
VK_IMAGE_COMPRESSION_FIXED_RATE_21BPC_BIT_EXT = 1048576
VK_IMAGE_COMPRESSION_FIXED_RATE_22BPC_BIT_EXT = 2097152
VK_IMAGE_COMPRESSION_FIXED_RATE_23BPC_BIT_EXT = 4194304
VK_IMAGE_COMPRESSION_FIXED_RATE_24BPC_BIT_EXT = 8388608
VK_IMAGE_COMPRESSION_FIXED_RATE_FLAG_BITS_MAX_ENUM_EXT = 2147483647
VkImageCompressionFixedRateFlagBitsEXT = ctypes.c_uint32 # enum
VkImageCompressionFixedRateFlagsEXT = ctypes.c_uint32
class struct_VkPhysicalDeviceImageCompressionControlFeaturesEXT(Structure):
    pass

struct_VkPhysicalDeviceImageCompressionControlFeaturesEXT._pack_ = 1 # source:False
struct_VkPhysicalDeviceImageCompressionControlFeaturesEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('imageCompressionControl', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPhysicalDeviceImageCompressionControlFeaturesEXT = struct_VkPhysicalDeviceImageCompressionControlFeaturesEXT
class struct_VkImageCompressionControlEXT(Structure):
    pass

struct_VkImageCompressionControlEXT._pack_ = 1 # source:False
struct_VkImageCompressionControlEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('flags', ctypes.c_uint32),
    ('compressionControlPlaneCount', ctypes.c_uint32),
    ('pFixedRateFlags', ctypes.POINTER(ctypes.c_uint32)),
]

VkImageCompressionControlEXT = struct_VkImageCompressionControlEXT
class struct_VkImageCompressionPropertiesEXT(Structure):
    pass

struct_VkImageCompressionPropertiesEXT._pack_ = 1 # source:False
struct_VkImageCompressionPropertiesEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('imageCompressionFlags', ctypes.c_uint32),
    ('imageCompressionFixedRateFlags', ctypes.c_uint32),
]

VkImageCompressionPropertiesEXT = struct_VkImageCompressionPropertiesEXT
class struct_VkPhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT(Structure):
    pass

struct_VkPhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT._pack_ = 1 # source:False
struct_VkPhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('attachmentFeedbackLoopLayout', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT = struct_VkPhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT
class struct_VkPhysicalDevice4444FormatsFeaturesEXT(Structure):
    pass

struct_VkPhysicalDevice4444FormatsFeaturesEXT._pack_ = 1 # source:False
struct_VkPhysicalDevice4444FormatsFeaturesEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('formatA4R4G4B4', ctypes.c_uint32),
    ('formatA4B4G4R4', ctypes.c_uint32),
]

VkPhysicalDevice4444FormatsFeaturesEXT = struct_VkPhysicalDevice4444FormatsFeaturesEXT

# values for enumeration 'VkDeviceFaultAddressTypeEXT'
VkDeviceFaultAddressTypeEXT__enumvalues = {
    0: 'VK_DEVICE_FAULT_ADDRESS_TYPE_NONE_EXT',
    1: 'VK_DEVICE_FAULT_ADDRESS_TYPE_READ_INVALID_EXT',
    2: 'VK_DEVICE_FAULT_ADDRESS_TYPE_WRITE_INVALID_EXT',
    3: 'VK_DEVICE_FAULT_ADDRESS_TYPE_EXECUTE_INVALID_EXT',
    4: 'VK_DEVICE_FAULT_ADDRESS_TYPE_INSTRUCTION_POINTER_UNKNOWN_EXT',
    5: 'VK_DEVICE_FAULT_ADDRESS_TYPE_INSTRUCTION_POINTER_INVALID_EXT',
    6: 'VK_DEVICE_FAULT_ADDRESS_TYPE_INSTRUCTION_POINTER_FAULT_EXT',
    2147483647: 'VK_DEVICE_FAULT_ADDRESS_TYPE_MAX_ENUM_EXT',
}
VK_DEVICE_FAULT_ADDRESS_TYPE_NONE_EXT = 0
VK_DEVICE_FAULT_ADDRESS_TYPE_READ_INVALID_EXT = 1
VK_DEVICE_FAULT_ADDRESS_TYPE_WRITE_INVALID_EXT = 2
VK_DEVICE_FAULT_ADDRESS_TYPE_EXECUTE_INVALID_EXT = 3
VK_DEVICE_FAULT_ADDRESS_TYPE_INSTRUCTION_POINTER_UNKNOWN_EXT = 4
VK_DEVICE_FAULT_ADDRESS_TYPE_INSTRUCTION_POINTER_INVALID_EXT = 5
VK_DEVICE_FAULT_ADDRESS_TYPE_INSTRUCTION_POINTER_FAULT_EXT = 6
VK_DEVICE_FAULT_ADDRESS_TYPE_MAX_ENUM_EXT = 2147483647
VkDeviceFaultAddressTypeEXT = ctypes.c_uint32 # enum

# values for enumeration 'VkDeviceFaultVendorBinaryHeaderVersionEXT'
VkDeviceFaultVendorBinaryHeaderVersionEXT__enumvalues = {
    1: 'VK_DEVICE_FAULT_VENDOR_BINARY_HEADER_VERSION_ONE_EXT',
    2147483647: 'VK_DEVICE_FAULT_VENDOR_BINARY_HEADER_VERSION_MAX_ENUM_EXT',
}
VK_DEVICE_FAULT_VENDOR_BINARY_HEADER_VERSION_ONE_EXT = 1
VK_DEVICE_FAULT_VENDOR_BINARY_HEADER_VERSION_MAX_ENUM_EXT = 2147483647
VkDeviceFaultVendorBinaryHeaderVersionEXT = ctypes.c_uint32 # enum
class struct_VkPhysicalDeviceFaultFeaturesEXT(Structure):
    pass

struct_VkPhysicalDeviceFaultFeaturesEXT._pack_ = 1 # source:False
struct_VkPhysicalDeviceFaultFeaturesEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('deviceFault', ctypes.c_uint32),
    ('deviceFaultVendorBinary', ctypes.c_uint32),
]

VkPhysicalDeviceFaultFeaturesEXT = struct_VkPhysicalDeviceFaultFeaturesEXT
class struct_VkDeviceFaultCountsEXT(Structure):
    pass

struct_VkDeviceFaultCountsEXT._pack_ = 1 # source:False
struct_VkDeviceFaultCountsEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('addressInfoCount', ctypes.c_uint32),
    ('vendorInfoCount', ctypes.c_uint32),
    ('vendorBinarySize', ctypes.c_uint64),
]

VkDeviceFaultCountsEXT = struct_VkDeviceFaultCountsEXT
class struct_VkDeviceFaultAddressInfoEXT(Structure):
    pass

struct_VkDeviceFaultAddressInfoEXT._pack_ = 1 # source:False
struct_VkDeviceFaultAddressInfoEXT._fields_ = [
    ('addressType', VkDeviceFaultAddressTypeEXT),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('reportedAddress', ctypes.c_uint64),
    ('addressPrecision', ctypes.c_uint64),
]

VkDeviceFaultAddressInfoEXT = struct_VkDeviceFaultAddressInfoEXT
class struct_VkDeviceFaultVendorInfoEXT(Structure):
    pass

struct_VkDeviceFaultVendorInfoEXT._pack_ = 1 # source:False
struct_VkDeviceFaultVendorInfoEXT._fields_ = [
    ('description', ctypes.c_char * 256),
    ('vendorFaultCode', ctypes.c_uint64),
    ('vendorFaultData', ctypes.c_uint64),
]

VkDeviceFaultVendorInfoEXT = struct_VkDeviceFaultVendorInfoEXT
class struct_VkDeviceFaultInfoEXT(Structure):
    pass

struct_VkDeviceFaultInfoEXT._pack_ = 1 # source:False
struct_VkDeviceFaultInfoEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('description', ctypes.c_char * 256),
    ('pAddressInfos', ctypes.POINTER(struct_VkDeviceFaultAddressInfoEXT)),
    ('pVendorInfos', ctypes.POINTER(struct_VkDeviceFaultVendorInfoEXT)),
    ('pVendorBinaryData', ctypes.POINTER(None)),
]

VkDeviceFaultInfoEXT = struct_VkDeviceFaultInfoEXT
class struct_VkDeviceFaultVendorBinaryHeaderVersionOneEXT(Structure):
    pass

struct_VkDeviceFaultVendorBinaryHeaderVersionOneEXT._pack_ = 1 # source:False
struct_VkDeviceFaultVendorBinaryHeaderVersionOneEXT._fields_ = [
    ('headerSize', ctypes.c_uint32),
    ('headerVersion', VkDeviceFaultVendorBinaryHeaderVersionEXT),
    ('vendorID', ctypes.c_uint32),
    ('deviceID', ctypes.c_uint32),
    ('driverVersion', ctypes.c_uint32),
    ('pipelineCacheUUID', ctypes.c_ubyte * 16),
    ('applicationNameOffset', ctypes.c_uint32),
    ('applicationVersion', ctypes.c_uint32),
    ('engineNameOffset', ctypes.c_uint32),
    ('engineVersion', ctypes.c_uint32),
    ('apiVersion', ctypes.c_uint32),
]

VkDeviceFaultVendorBinaryHeaderVersionOneEXT = struct_VkDeviceFaultVendorBinaryHeaderVersionOneEXT
PFN_vkGetDeviceFaultInfoEXT = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkDeviceFaultCountsEXT), ctypes.POINTER(struct_VkDeviceFaultInfoEXT))
try:
    vkGetDeviceFaultInfoEXT = _libraries['FIXME_STUB'].vkGetDeviceFaultInfoEXT
    vkGetDeviceFaultInfoEXT.restype = VkResult
    vkGetDeviceFaultInfoEXT.argtypes = [VkDevice, ctypes.POINTER(struct_VkDeviceFaultCountsEXT), ctypes.POINTER(struct_VkDeviceFaultInfoEXT)]
except AttributeError:
    pass
class struct_VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT(Structure):
    pass

struct_VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT._pack_ = 1 # source:False
struct_VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('rasterizationOrderColorAttachmentAccess', ctypes.c_uint32),
    ('rasterizationOrderDepthAttachmentAccess', ctypes.c_uint32),
    ('rasterizationOrderStencilAttachmentAccess', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT = struct_VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT
VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesARM = struct_VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT
class struct_VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT(Structure):
    pass

struct_VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT._pack_ = 1 # source:False
struct_VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('formatRgba10x6WithoutYCbCrSampler', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT = struct_VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT
class struct_VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT(Structure):
    pass

struct_VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT._pack_ = 1 # source:False
struct_VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('mutableDescriptorType', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT = struct_VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT
VkPhysicalDeviceMutableDescriptorTypeFeaturesVALVE = struct_VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT
class struct_VkMutableDescriptorTypeListEXT(Structure):
    pass

struct_VkMutableDescriptorTypeListEXT._pack_ = 1 # source:False
struct_VkMutableDescriptorTypeListEXT._fields_ = [
    ('descriptorTypeCount', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pDescriptorTypes', ctypes.POINTER(VkDescriptorType)),
]

VkMutableDescriptorTypeListEXT = struct_VkMutableDescriptorTypeListEXT
VkMutableDescriptorTypeListVALVE = struct_VkMutableDescriptorTypeListEXT
class struct_VkMutableDescriptorTypeCreateInfoEXT(Structure):
    pass

struct_VkMutableDescriptorTypeCreateInfoEXT._pack_ = 1 # source:False
struct_VkMutableDescriptorTypeCreateInfoEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('mutableDescriptorTypeListCount', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('pMutableDescriptorTypeLists', ctypes.POINTER(struct_VkMutableDescriptorTypeListEXT)),
]

VkMutableDescriptorTypeCreateInfoEXT = struct_VkMutableDescriptorTypeCreateInfoEXT
VkMutableDescriptorTypeCreateInfoVALVE = struct_VkMutableDescriptorTypeCreateInfoEXT
class struct_VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT(Structure):
    pass

struct_VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT._pack_ = 1 # source:False
struct_VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('vertexInputDynamicState', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT = struct_VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT
class struct_VkVertexInputBindingDescription2EXT(Structure):
    pass

struct_VkVertexInputBindingDescription2EXT._pack_ = 1 # source:False
struct_VkVertexInputBindingDescription2EXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('binding', ctypes.c_uint32),
    ('stride', ctypes.c_uint32),
    ('inputRate', VkVertexInputRate),
    ('divisor', ctypes.c_uint32),
]

VkVertexInputBindingDescription2EXT = struct_VkVertexInputBindingDescription2EXT
class struct_VkVertexInputAttributeDescription2EXT(Structure):
    pass

struct_VkVertexInputAttributeDescription2EXT._pack_ = 1 # source:False
struct_VkVertexInputAttributeDescription2EXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('location', ctypes.c_uint32),
    ('binding', ctypes.c_uint32),
    ('format', VkFormat),
    ('offset', ctypes.c_uint32),
]

VkVertexInputAttributeDescription2EXT = struct_VkVertexInputAttributeDescription2EXT
PFN_vkCmdSetVertexInputEXT = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.c_uint32, ctypes.POINTER(struct_VkVertexInputBindingDescription2EXT), ctypes.c_uint32, ctypes.POINTER(struct_VkVertexInputAttributeDescription2EXT))
try:
    vkCmdSetVertexInputEXT = _libraries['FIXME_STUB'].vkCmdSetVertexInputEXT
    vkCmdSetVertexInputEXT.restype = None
    vkCmdSetVertexInputEXT.argtypes = [VkCommandBuffer, uint32_t, ctypes.POINTER(struct_VkVertexInputBindingDescription2EXT), uint32_t, ctypes.POINTER(struct_VkVertexInputAttributeDescription2EXT)]
except AttributeError:
    pass
class struct_VkPhysicalDeviceDrmPropertiesEXT(Structure):
    pass

struct_VkPhysicalDeviceDrmPropertiesEXT._pack_ = 1 # source:False
struct_VkPhysicalDeviceDrmPropertiesEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('hasPrimary', ctypes.c_uint32),
    ('hasRender', ctypes.c_uint32),
    ('primaryMajor', ctypes.c_int64),
    ('primaryMinor', ctypes.c_int64),
    ('renderMajor', ctypes.c_int64),
    ('renderMinor', ctypes.c_int64),
]

VkPhysicalDeviceDrmPropertiesEXT = struct_VkPhysicalDeviceDrmPropertiesEXT

# values for enumeration 'VkDeviceAddressBindingTypeEXT'
VkDeviceAddressBindingTypeEXT__enumvalues = {
    0: 'VK_DEVICE_ADDRESS_BINDING_TYPE_BIND_EXT',
    1: 'VK_DEVICE_ADDRESS_BINDING_TYPE_UNBIND_EXT',
    2147483647: 'VK_DEVICE_ADDRESS_BINDING_TYPE_MAX_ENUM_EXT',
}
VK_DEVICE_ADDRESS_BINDING_TYPE_BIND_EXT = 0
VK_DEVICE_ADDRESS_BINDING_TYPE_UNBIND_EXT = 1
VK_DEVICE_ADDRESS_BINDING_TYPE_MAX_ENUM_EXT = 2147483647
VkDeviceAddressBindingTypeEXT = ctypes.c_uint32 # enum

# values for enumeration 'VkDeviceAddressBindingFlagBitsEXT'
VkDeviceAddressBindingFlagBitsEXT__enumvalues = {
    1: 'VK_DEVICE_ADDRESS_BINDING_INTERNAL_OBJECT_BIT_EXT',
    2147483647: 'VK_DEVICE_ADDRESS_BINDING_FLAG_BITS_MAX_ENUM_EXT',
}
VK_DEVICE_ADDRESS_BINDING_INTERNAL_OBJECT_BIT_EXT = 1
VK_DEVICE_ADDRESS_BINDING_FLAG_BITS_MAX_ENUM_EXT = 2147483647
VkDeviceAddressBindingFlagBitsEXT = ctypes.c_uint32 # enum
VkDeviceAddressBindingFlagsEXT = ctypes.c_uint32
class struct_VkPhysicalDeviceAddressBindingReportFeaturesEXT(Structure):
    pass

struct_VkPhysicalDeviceAddressBindingReportFeaturesEXT._pack_ = 1 # source:False
struct_VkPhysicalDeviceAddressBindingReportFeaturesEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('reportAddressBinding', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPhysicalDeviceAddressBindingReportFeaturesEXT = struct_VkPhysicalDeviceAddressBindingReportFeaturesEXT
class struct_VkDeviceAddressBindingCallbackDataEXT(Structure):
    pass

struct_VkDeviceAddressBindingCallbackDataEXT._pack_ = 1 # source:False
struct_VkDeviceAddressBindingCallbackDataEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('flags', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('baseAddress', ctypes.c_uint64),
    ('size', ctypes.c_uint64),
    ('bindingType', VkDeviceAddressBindingTypeEXT),
    ('PADDING_2', ctypes.c_ubyte * 4),
]

VkDeviceAddressBindingCallbackDataEXT = struct_VkDeviceAddressBindingCallbackDataEXT
class struct_VkPhysicalDeviceDepthClipControlFeaturesEXT(Structure):
    pass

struct_VkPhysicalDeviceDepthClipControlFeaturesEXT._pack_ = 1 # source:False
struct_VkPhysicalDeviceDepthClipControlFeaturesEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('depthClipControl', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPhysicalDeviceDepthClipControlFeaturesEXT = struct_VkPhysicalDeviceDepthClipControlFeaturesEXT
class struct_VkPipelineViewportDepthClipControlCreateInfoEXT(Structure):
    pass

struct_VkPipelineViewportDepthClipControlCreateInfoEXT._pack_ = 1 # source:False
struct_VkPipelineViewportDepthClipControlCreateInfoEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('negativeOneToOne', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPipelineViewportDepthClipControlCreateInfoEXT = struct_VkPipelineViewportDepthClipControlCreateInfoEXT
class struct_VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT(Structure):
    pass

struct_VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT._pack_ = 1 # source:False
struct_VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('primitiveTopologyListRestart', ctypes.c_uint32),
    ('primitiveTopologyPatchListRestart', ctypes.c_uint32),
]

VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT = struct_VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT
class struct_VkSubpassShadingPipelineCreateInfoHUAWEI(Structure):
    pass

struct_VkSubpassShadingPipelineCreateInfoHUAWEI._pack_ = 1 # source:False
struct_VkSubpassShadingPipelineCreateInfoHUAWEI._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('renderPass', ctypes.POINTER(struct_VkRenderPass_T)),
    ('subpass', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkSubpassShadingPipelineCreateInfoHUAWEI = struct_VkSubpassShadingPipelineCreateInfoHUAWEI
class struct_VkPhysicalDeviceSubpassShadingFeaturesHUAWEI(Structure):
    pass

struct_VkPhysicalDeviceSubpassShadingFeaturesHUAWEI._pack_ = 1 # source:False
struct_VkPhysicalDeviceSubpassShadingFeaturesHUAWEI._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('subpassShading', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPhysicalDeviceSubpassShadingFeaturesHUAWEI = struct_VkPhysicalDeviceSubpassShadingFeaturesHUAWEI
class struct_VkPhysicalDeviceSubpassShadingPropertiesHUAWEI(Structure):
    pass

struct_VkPhysicalDeviceSubpassShadingPropertiesHUAWEI._pack_ = 1 # source:False
struct_VkPhysicalDeviceSubpassShadingPropertiesHUAWEI._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('maxSubpassShadingWorkgroupSizeAspectRatio', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPhysicalDeviceSubpassShadingPropertiesHUAWEI = struct_VkPhysicalDeviceSubpassShadingPropertiesHUAWEI
PFN_vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkRenderPass_T), ctypes.POINTER(struct_VkExtent2D))
PFN_vkCmdSubpassShadingHUAWEI = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T))
try:
    vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI = _libraries['FIXME_STUB'].vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI
    vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI.restype = VkResult
    vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI.argtypes = [VkDevice, VkRenderPass, ctypes.POINTER(struct_VkExtent2D)]
except AttributeError:
    pass
try:
    vkCmdSubpassShadingHUAWEI = _libraries['FIXME_STUB'].vkCmdSubpassShadingHUAWEI
    vkCmdSubpassShadingHUAWEI.restype = None
    vkCmdSubpassShadingHUAWEI.argtypes = [VkCommandBuffer]
except AttributeError:
    pass
class struct_VkPhysicalDeviceInvocationMaskFeaturesHUAWEI(Structure):
    pass

struct_VkPhysicalDeviceInvocationMaskFeaturesHUAWEI._pack_ = 1 # source:False
struct_VkPhysicalDeviceInvocationMaskFeaturesHUAWEI._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('invocationMask', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPhysicalDeviceInvocationMaskFeaturesHUAWEI = struct_VkPhysicalDeviceInvocationMaskFeaturesHUAWEI
PFN_vkCmdBindInvocationMaskHUAWEI = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.POINTER(struct_VkImageView_T), VkImageLayout)
try:
    vkCmdBindInvocationMaskHUAWEI = _libraries['FIXME_STUB'].vkCmdBindInvocationMaskHUAWEI
    vkCmdBindInvocationMaskHUAWEI.restype = None
    vkCmdBindInvocationMaskHUAWEI.argtypes = [VkCommandBuffer, VkImageView, VkImageLayout]
except AttributeError:
    pass
VkRemoteAddressNV = ctypes.POINTER(None)
class struct_VkMemoryGetRemoteAddressInfoNV(Structure):
    pass

struct_VkMemoryGetRemoteAddressInfoNV._pack_ = 1 # source:False
struct_VkMemoryGetRemoteAddressInfoNV._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('memory', ctypes.POINTER(struct_VkDeviceMemory_T)),
    ('handleType', VkExternalMemoryHandleTypeFlagBits),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkMemoryGetRemoteAddressInfoNV = struct_VkMemoryGetRemoteAddressInfoNV
class struct_VkPhysicalDeviceExternalMemoryRDMAFeaturesNV(Structure):
    pass

struct_VkPhysicalDeviceExternalMemoryRDMAFeaturesNV._pack_ = 1 # source:False
struct_VkPhysicalDeviceExternalMemoryRDMAFeaturesNV._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('externalMemoryRDMA', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPhysicalDeviceExternalMemoryRDMAFeaturesNV = struct_VkPhysicalDeviceExternalMemoryRDMAFeaturesNV
PFN_vkGetMemoryRemoteAddressNV = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkMemoryGetRemoteAddressInfoNV), ctypes.POINTER(ctypes.POINTER(None)))
try:
    vkGetMemoryRemoteAddressNV = _libraries['FIXME_STUB'].vkGetMemoryRemoteAddressNV
    vkGetMemoryRemoteAddressNV.restype = VkResult
    vkGetMemoryRemoteAddressNV.argtypes = [VkDevice, ctypes.POINTER(struct_VkMemoryGetRemoteAddressInfoNV), ctypes.POINTER(ctypes.POINTER(None))]
except AttributeError:
    pass
VkPipelineInfoEXT = struct_VkPipelineInfoKHR
class struct_VkPipelinePropertiesIdentifierEXT(Structure):
    pass

struct_VkPipelinePropertiesIdentifierEXT._pack_ = 1 # source:False
struct_VkPipelinePropertiesIdentifierEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('pipelineIdentifier', ctypes.c_ubyte * 16),
]

VkPipelinePropertiesIdentifierEXT = struct_VkPipelinePropertiesIdentifierEXT
class struct_VkPhysicalDevicePipelinePropertiesFeaturesEXT(Structure):
    pass

struct_VkPhysicalDevicePipelinePropertiesFeaturesEXT._pack_ = 1 # source:False
struct_VkPhysicalDevicePipelinePropertiesFeaturesEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('pipelinePropertiesIdentifier', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPhysicalDevicePipelinePropertiesFeaturesEXT = struct_VkPhysicalDevicePipelinePropertiesFeaturesEXT
PFN_vkGetPipelinePropertiesEXT = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkPipelineInfoKHR), ctypes.POINTER(struct_VkBaseOutStructure))
try:
    vkGetPipelinePropertiesEXT = _libraries['FIXME_STUB'].vkGetPipelinePropertiesEXT
    vkGetPipelinePropertiesEXT.restype = VkResult
    vkGetPipelinePropertiesEXT.argtypes = [VkDevice, ctypes.POINTER(struct_VkPipelineInfoKHR), ctypes.POINTER(struct_VkBaseOutStructure)]
except AttributeError:
    pass

# values for enumeration 'VkFrameBoundaryFlagBitsEXT'
VkFrameBoundaryFlagBitsEXT__enumvalues = {
    1: 'VK_FRAME_BOUNDARY_FRAME_END_BIT_EXT',
    2147483647: 'VK_FRAME_BOUNDARY_FLAG_BITS_MAX_ENUM_EXT',
}
VK_FRAME_BOUNDARY_FRAME_END_BIT_EXT = 1
VK_FRAME_BOUNDARY_FLAG_BITS_MAX_ENUM_EXT = 2147483647
VkFrameBoundaryFlagBitsEXT = ctypes.c_uint32 # enum
VkFrameBoundaryFlagsEXT = ctypes.c_uint32
class struct_VkPhysicalDeviceFrameBoundaryFeaturesEXT(Structure):
    pass

struct_VkPhysicalDeviceFrameBoundaryFeaturesEXT._pack_ = 1 # source:False
struct_VkPhysicalDeviceFrameBoundaryFeaturesEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('frameBoundary', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPhysicalDeviceFrameBoundaryFeaturesEXT = struct_VkPhysicalDeviceFrameBoundaryFeaturesEXT
class struct_VkFrameBoundaryEXT(Structure):
    pass

struct_VkFrameBoundaryEXT._pack_ = 1 # source:False
struct_VkFrameBoundaryEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('flags', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('frameID', ctypes.c_uint64),
    ('imageCount', ctypes.c_uint32),
    ('PADDING_2', ctypes.c_ubyte * 4),
    ('pImages', ctypes.POINTER(ctypes.POINTER(struct_VkImage_T))),
    ('bufferCount', ctypes.c_uint32),
    ('PADDING_3', ctypes.c_ubyte * 4),
    ('pBuffers', ctypes.POINTER(ctypes.POINTER(struct_VkBuffer_T))),
    ('tagName', ctypes.c_uint64),
    ('tagSize', ctypes.c_uint64),
    ('pTag', ctypes.POINTER(None)),
]

VkFrameBoundaryEXT = struct_VkFrameBoundaryEXT
class struct_VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT(Structure):
    pass

struct_VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT._pack_ = 1 # source:False
struct_VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('multisampledRenderToSingleSampled', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT = struct_VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT
class struct_VkSubpassResolvePerformanceQueryEXT(Structure):
    pass

struct_VkSubpassResolvePerformanceQueryEXT._pack_ = 1 # source:False
struct_VkSubpassResolvePerformanceQueryEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('optimal', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkSubpassResolvePerformanceQueryEXT = struct_VkSubpassResolvePerformanceQueryEXT
class struct_VkMultisampledRenderToSingleSampledInfoEXT(Structure):
    pass

struct_VkMultisampledRenderToSingleSampledInfoEXT._pack_ = 1 # source:False
struct_VkMultisampledRenderToSingleSampledInfoEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('multisampledRenderToSingleSampledEnable', ctypes.c_uint32),
    ('rasterizationSamples', VkSampleCountFlagBits),
]

VkMultisampledRenderToSingleSampledInfoEXT = struct_VkMultisampledRenderToSingleSampledInfoEXT
class struct_VkPhysicalDeviceExtendedDynamicState2FeaturesEXT(Structure):
    pass

struct_VkPhysicalDeviceExtendedDynamicState2FeaturesEXT._pack_ = 1 # source:False
struct_VkPhysicalDeviceExtendedDynamicState2FeaturesEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('extendedDynamicState2', ctypes.c_uint32),
    ('extendedDynamicState2LogicOp', ctypes.c_uint32),
    ('extendedDynamicState2PatchControlPoints', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPhysicalDeviceExtendedDynamicState2FeaturesEXT = struct_VkPhysicalDeviceExtendedDynamicState2FeaturesEXT
PFN_vkCmdSetPatchControlPointsEXT = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.c_uint32)
PFN_vkCmdSetRasterizerDiscardEnableEXT = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.c_uint32)
PFN_vkCmdSetDepthBiasEnableEXT = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.c_uint32)
PFN_vkCmdSetLogicOpEXT = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), VkLogicOp)
PFN_vkCmdSetPrimitiveRestartEnableEXT = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.c_uint32)
try:
    vkCmdSetPatchControlPointsEXT = _libraries['FIXME_STUB'].vkCmdSetPatchControlPointsEXT
    vkCmdSetPatchControlPointsEXT.restype = None
    vkCmdSetPatchControlPointsEXT.argtypes = [VkCommandBuffer, uint32_t]
except AttributeError:
    pass
try:
    vkCmdSetRasterizerDiscardEnableEXT = _libraries['FIXME_STUB'].vkCmdSetRasterizerDiscardEnableEXT
    vkCmdSetRasterizerDiscardEnableEXT.restype = None
    vkCmdSetRasterizerDiscardEnableEXT.argtypes = [VkCommandBuffer, VkBool32]
except AttributeError:
    pass
try:
    vkCmdSetDepthBiasEnableEXT = _libraries['FIXME_STUB'].vkCmdSetDepthBiasEnableEXT
    vkCmdSetDepthBiasEnableEXT.restype = None
    vkCmdSetDepthBiasEnableEXT.argtypes = [VkCommandBuffer, VkBool32]
except AttributeError:
    pass
try:
    vkCmdSetLogicOpEXT = _libraries['FIXME_STUB'].vkCmdSetLogicOpEXT
    vkCmdSetLogicOpEXT.restype = None
    vkCmdSetLogicOpEXT.argtypes = [VkCommandBuffer, VkLogicOp]
except AttributeError:
    pass
try:
    vkCmdSetPrimitiveRestartEnableEXT = _libraries['FIXME_STUB'].vkCmdSetPrimitiveRestartEnableEXT
    vkCmdSetPrimitiveRestartEnableEXT.restype = None
    vkCmdSetPrimitiveRestartEnableEXT.argtypes = [VkCommandBuffer, VkBool32]
except AttributeError:
    pass
class struct_VkPhysicalDeviceColorWriteEnableFeaturesEXT(Structure):
    pass

struct_VkPhysicalDeviceColorWriteEnableFeaturesEXT._pack_ = 1 # source:False
struct_VkPhysicalDeviceColorWriteEnableFeaturesEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('colorWriteEnable', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPhysicalDeviceColorWriteEnableFeaturesEXT = struct_VkPhysicalDeviceColorWriteEnableFeaturesEXT
class struct_VkPipelineColorWriteCreateInfoEXT(Structure):
    pass

struct_VkPipelineColorWriteCreateInfoEXT._pack_ = 1 # source:False
struct_VkPipelineColorWriteCreateInfoEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('attachmentCount', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('pColorWriteEnables', ctypes.POINTER(ctypes.c_uint32)),
]

VkPipelineColorWriteCreateInfoEXT = struct_VkPipelineColorWriteCreateInfoEXT
PFN_vkCmdSetColorWriteEnableEXT = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.c_uint32, ctypes.POINTER(ctypes.c_uint32))
try:
    vkCmdSetColorWriteEnableEXT = _libraries['FIXME_STUB'].vkCmdSetColorWriteEnableEXT
    vkCmdSetColorWriteEnableEXT.restype = None
    vkCmdSetColorWriteEnableEXT.argtypes = [VkCommandBuffer, uint32_t, ctypes.POINTER(ctypes.c_uint32)]
except AttributeError:
    pass
class struct_VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT(Structure):
    pass

struct_VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT._pack_ = 1 # source:False
struct_VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('primitivesGeneratedQuery', ctypes.c_uint32),
    ('primitivesGeneratedQueryWithRasterizerDiscard', ctypes.c_uint32),
    ('primitivesGeneratedQueryWithNonZeroStreams', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT = struct_VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT
VkPhysicalDeviceGlobalPriorityQueryFeaturesEXT = struct_VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR
VkQueueFamilyGlobalPriorityPropertiesEXT = struct_VkQueueFamilyGlobalPriorityPropertiesKHR
class struct_VkPhysicalDeviceImageViewMinLodFeaturesEXT(Structure):
    pass

struct_VkPhysicalDeviceImageViewMinLodFeaturesEXT._pack_ = 1 # source:False
struct_VkPhysicalDeviceImageViewMinLodFeaturesEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('minLod', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPhysicalDeviceImageViewMinLodFeaturesEXT = struct_VkPhysicalDeviceImageViewMinLodFeaturesEXT
class struct_VkImageViewMinLodCreateInfoEXT(Structure):
    pass

struct_VkImageViewMinLodCreateInfoEXT._pack_ = 1 # source:False
struct_VkImageViewMinLodCreateInfoEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('minLod', ctypes.c_float),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkImageViewMinLodCreateInfoEXT = struct_VkImageViewMinLodCreateInfoEXT
class struct_VkPhysicalDeviceMultiDrawFeaturesEXT(Structure):
    pass

struct_VkPhysicalDeviceMultiDrawFeaturesEXT._pack_ = 1 # source:False
struct_VkPhysicalDeviceMultiDrawFeaturesEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('multiDraw', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPhysicalDeviceMultiDrawFeaturesEXT = struct_VkPhysicalDeviceMultiDrawFeaturesEXT
class struct_VkPhysicalDeviceMultiDrawPropertiesEXT(Structure):
    pass

struct_VkPhysicalDeviceMultiDrawPropertiesEXT._pack_ = 1 # source:False
struct_VkPhysicalDeviceMultiDrawPropertiesEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('maxMultiDrawCount', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPhysicalDeviceMultiDrawPropertiesEXT = struct_VkPhysicalDeviceMultiDrawPropertiesEXT
class struct_VkMultiDrawInfoEXT(Structure):
    pass

struct_VkMultiDrawInfoEXT._pack_ = 1 # source:False
struct_VkMultiDrawInfoEXT._fields_ = [
    ('firstVertex', ctypes.c_uint32),
    ('vertexCount', ctypes.c_uint32),
]

VkMultiDrawInfoEXT = struct_VkMultiDrawInfoEXT
class struct_VkMultiDrawIndexedInfoEXT(Structure):
    pass

struct_VkMultiDrawIndexedInfoEXT._pack_ = 1 # source:False
struct_VkMultiDrawIndexedInfoEXT._fields_ = [
    ('firstIndex', ctypes.c_uint32),
    ('indexCount', ctypes.c_uint32),
    ('vertexOffset', ctypes.c_int32),
]

VkMultiDrawIndexedInfoEXT = struct_VkMultiDrawIndexedInfoEXT
PFN_vkCmdDrawMultiEXT = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.c_uint32, ctypes.POINTER(struct_VkMultiDrawInfoEXT), ctypes.c_uint32, ctypes.c_uint32, ctypes.c_uint32)
PFN_vkCmdDrawMultiIndexedEXT = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.c_uint32, ctypes.POINTER(struct_VkMultiDrawIndexedInfoEXT), ctypes.c_uint32, ctypes.c_uint32, ctypes.c_uint32, ctypes.POINTER(ctypes.c_int32))
try:
    vkCmdDrawMultiEXT = _libraries['FIXME_STUB'].vkCmdDrawMultiEXT
    vkCmdDrawMultiEXT.restype = None
    vkCmdDrawMultiEXT.argtypes = [VkCommandBuffer, uint32_t, ctypes.POINTER(struct_VkMultiDrawInfoEXT), uint32_t, uint32_t, uint32_t]
except AttributeError:
    pass
try:
    vkCmdDrawMultiIndexedEXT = _libraries['FIXME_STUB'].vkCmdDrawMultiIndexedEXT
    vkCmdDrawMultiIndexedEXT.restype = None
    vkCmdDrawMultiIndexedEXT.argtypes = [VkCommandBuffer, uint32_t, ctypes.POINTER(struct_VkMultiDrawIndexedInfoEXT), uint32_t, uint32_t, uint32_t, ctypes.POINTER(ctypes.c_int32)]
except AttributeError:
    pass
class struct_VkPhysicalDeviceImage2DViewOf3DFeaturesEXT(Structure):
    pass

struct_VkPhysicalDeviceImage2DViewOf3DFeaturesEXT._pack_ = 1 # source:False
struct_VkPhysicalDeviceImage2DViewOf3DFeaturesEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('image2DViewOf3D', ctypes.c_uint32),
    ('sampler2DViewOf3D', ctypes.c_uint32),
]

VkPhysicalDeviceImage2DViewOf3DFeaturesEXT = struct_VkPhysicalDeviceImage2DViewOf3DFeaturesEXT
class struct_VkPhysicalDeviceShaderTileImageFeaturesEXT(Structure):
    pass

struct_VkPhysicalDeviceShaderTileImageFeaturesEXT._pack_ = 1 # source:False
struct_VkPhysicalDeviceShaderTileImageFeaturesEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('shaderTileImageColorReadAccess', ctypes.c_uint32),
    ('shaderTileImageDepthReadAccess', ctypes.c_uint32),
    ('shaderTileImageStencilReadAccess', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPhysicalDeviceShaderTileImageFeaturesEXT = struct_VkPhysicalDeviceShaderTileImageFeaturesEXT
class struct_VkPhysicalDeviceShaderTileImagePropertiesEXT(Structure):
    pass

struct_VkPhysicalDeviceShaderTileImagePropertiesEXT._pack_ = 1 # source:False
struct_VkPhysicalDeviceShaderTileImagePropertiesEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('shaderTileImageCoherentReadAccelerated', ctypes.c_uint32),
    ('shaderTileImageReadSampleFromPixelRateInvocation', ctypes.c_uint32),
    ('shaderTileImageReadFromHelperInvocation', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPhysicalDeviceShaderTileImagePropertiesEXT = struct_VkPhysicalDeviceShaderTileImagePropertiesEXT
class struct_VkMicromapEXT_T(Structure):
    pass

VkMicromapEXT = ctypes.POINTER(struct_VkMicromapEXT_T)

# values for enumeration 'VkMicromapTypeEXT'
VkMicromapTypeEXT__enumvalues = {
    0: 'VK_MICROMAP_TYPE_OPACITY_MICROMAP_EXT',
    2147483647: 'VK_MICROMAP_TYPE_MAX_ENUM_EXT',
}
VK_MICROMAP_TYPE_OPACITY_MICROMAP_EXT = 0
VK_MICROMAP_TYPE_MAX_ENUM_EXT = 2147483647
VkMicromapTypeEXT = ctypes.c_uint32 # enum

# values for enumeration 'VkBuildMicromapModeEXT'
VkBuildMicromapModeEXT__enumvalues = {
    0: 'VK_BUILD_MICROMAP_MODE_BUILD_EXT',
    2147483647: 'VK_BUILD_MICROMAP_MODE_MAX_ENUM_EXT',
}
VK_BUILD_MICROMAP_MODE_BUILD_EXT = 0
VK_BUILD_MICROMAP_MODE_MAX_ENUM_EXT = 2147483647
VkBuildMicromapModeEXT = ctypes.c_uint32 # enum

# values for enumeration 'VkCopyMicromapModeEXT'
VkCopyMicromapModeEXT__enumvalues = {
    0: 'VK_COPY_MICROMAP_MODE_CLONE_EXT',
    1: 'VK_COPY_MICROMAP_MODE_SERIALIZE_EXT',
    2: 'VK_COPY_MICROMAP_MODE_DESERIALIZE_EXT',
    3: 'VK_COPY_MICROMAP_MODE_COMPACT_EXT',
    2147483647: 'VK_COPY_MICROMAP_MODE_MAX_ENUM_EXT',
}
VK_COPY_MICROMAP_MODE_CLONE_EXT = 0
VK_COPY_MICROMAP_MODE_SERIALIZE_EXT = 1
VK_COPY_MICROMAP_MODE_DESERIALIZE_EXT = 2
VK_COPY_MICROMAP_MODE_COMPACT_EXT = 3
VK_COPY_MICROMAP_MODE_MAX_ENUM_EXT = 2147483647
VkCopyMicromapModeEXT = ctypes.c_uint32 # enum

# values for enumeration 'VkOpacityMicromapFormatEXT'
VkOpacityMicromapFormatEXT__enumvalues = {
    1: 'VK_OPACITY_MICROMAP_FORMAT_2_STATE_EXT',
    2: 'VK_OPACITY_MICROMAP_FORMAT_4_STATE_EXT',
    2147483647: 'VK_OPACITY_MICROMAP_FORMAT_MAX_ENUM_EXT',
}
VK_OPACITY_MICROMAP_FORMAT_2_STATE_EXT = 1
VK_OPACITY_MICROMAP_FORMAT_4_STATE_EXT = 2
VK_OPACITY_MICROMAP_FORMAT_MAX_ENUM_EXT = 2147483647
VkOpacityMicromapFormatEXT = ctypes.c_uint32 # enum

# values for enumeration 'VkOpacityMicromapSpecialIndexEXT'
VkOpacityMicromapSpecialIndexEXT__enumvalues = {
    -1: 'VK_OPACITY_MICROMAP_SPECIAL_INDEX_FULLY_TRANSPARENT_EXT',
    -2: 'VK_OPACITY_MICROMAP_SPECIAL_INDEX_FULLY_OPAQUE_EXT',
    -3: 'VK_OPACITY_MICROMAP_SPECIAL_INDEX_FULLY_UNKNOWN_TRANSPARENT_EXT',
    -4: 'VK_OPACITY_MICROMAP_SPECIAL_INDEX_FULLY_UNKNOWN_OPAQUE_EXT',
    2147483647: 'VK_OPACITY_MICROMAP_SPECIAL_INDEX_MAX_ENUM_EXT',
}
VK_OPACITY_MICROMAP_SPECIAL_INDEX_FULLY_TRANSPARENT_EXT = -1
VK_OPACITY_MICROMAP_SPECIAL_INDEX_FULLY_OPAQUE_EXT = -2
VK_OPACITY_MICROMAP_SPECIAL_INDEX_FULLY_UNKNOWN_TRANSPARENT_EXT = -3
VK_OPACITY_MICROMAP_SPECIAL_INDEX_FULLY_UNKNOWN_OPAQUE_EXT = -4
VK_OPACITY_MICROMAP_SPECIAL_INDEX_MAX_ENUM_EXT = 2147483647
VkOpacityMicromapSpecialIndexEXT = ctypes.c_int32 # enum

# values for enumeration 'VkAccelerationStructureCompatibilityKHR'
VkAccelerationStructureCompatibilityKHR__enumvalues = {
    0: 'VK_ACCELERATION_STRUCTURE_COMPATIBILITY_COMPATIBLE_KHR',
    1: 'VK_ACCELERATION_STRUCTURE_COMPATIBILITY_INCOMPATIBLE_KHR',
    2147483647: 'VK_ACCELERATION_STRUCTURE_COMPATIBILITY_MAX_ENUM_KHR',
}
VK_ACCELERATION_STRUCTURE_COMPATIBILITY_COMPATIBLE_KHR = 0
VK_ACCELERATION_STRUCTURE_COMPATIBILITY_INCOMPATIBLE_KHR = 1
VK_ACCELERATION_STRUCTURE_COMPATIBILITY_MAX_ENUM_KHR = 2147483647
VkAccelerationStructureCompatibilityKHR = ctypes.c_uint32 # enum

# values for enumeration 'VkAccelerationStructureBuildTypeKHR'
VkAccelerationStructureBuildTypeKHR__enumvalues = {
    0: 'VK_ACCELERATION_STRUCTURE_BUILD_TYPE_HOST_KHR',
    1: 'VK_ACCELERATION_STRUCTURE_BUILD_TYPE_DEVICE_KHR',
    2: 'VK_ACCELERATION_STRUCTURE_BUILD_TYPE_HOST_OR_DEVICE_KHR',
    2147483647: 'VK_ACCELERATION_STRUCTURE_BUILD_TYPE_MAX_ENUM_KHR',
}
VK_ACCELERATION_STRUCTURE_BUILD_TYPE_HOST_KHR = 0
VK_ACCELERATION_STRUCTURE_BUILD_TYPE_DEVICE_KHR = 1
VK_ACCELERATION_STRUCTURE_BUILD_TYPE_HOST_OR_DEVICE_KHR = 2
VK_ACCELERATION_STRUCTURE_BUILD_TYPE_MAX_ENUM_KHR = 2147483647
VkAccelerationStructureBuildTypeKHR = ctypes.c_uint32 # enum

# values for enumeration 'VkBuildMicromapFlagBitsEXT'
VkBuildMicromapFlagBitsEXT__enumvalues = {
    1: 'VK_BUILD_MICROMAP_PREFER_FAST_TRACE_BIT_EXT',
    2: 'VK_BUILD_MICROMAP_PREFER_FAST_BUILD_BIT_EXT',
    4: 'VK_BUILD_MICROMAP_ALLOW_COMPACTION_BIT_EXT',
    2147483647: 'VK_BUILD_MICROMAP_FLAG_BITS_MAX_ENUM_EXT',
}
VK_BUILD_MICROMAP_PREFER_FAST_TRACE_BIT_EXT = 1
VK_BUILD_MICROMAP_PREFER_FAST_BUILD_BIT_EXT = 2
VK_BUILD_MICROMAP_ALLOW_COMPACTION_BIT_EXT = 4
VK_BUILD_MICROMAP_FLAG_BITS_MAX_ENUM_EXT = 2147483647
VkBuildMicromapFlagBitsEXT = ctypes.c_uint32 # enum
VkBuildMicromapFlagsEXT = ctypes.c_uint32

# values for enumeration 'VkMicromapCreateFlagBitsEXT'
VkMicromapCreateFlagBitsEXT__enumvalues = {
    1: 'VK_MICROMAP_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_EXT',
    2147483647: 'VK_MICROMAP_CREATE_FLAG_BITS_MAX_ENUM_EXT',
}
VK_MICROMAP_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_EXT = 1
VK_MICROMAP_CREATE_FLAG_BITS_MAX_ENUM_EXT = 2147483647
VkMicromapCreateFlagBitsEXT = ctypes.c_uint32 # enum
VkMicromapCreateFlagsEXT = ctypes.c_uint32
class struct_VkMicromapUsageEXT(Structure):
    pass

struct_VkMicromapUsageEXT._pack_ = 1 # source:False
struct_VkMicromapUsageEXT._fields_ = [
    ('count', ctypes.c_uint32),
    ('subdivisionLevel', ctypes.c_uint32),
    ('format', ctypes.c_uint32),
]

VkMicromapUsageEXT = struct_VkMicromapUsageEXT
class union_VkDeviceOrHostAddressKHR(Union):
    pass

union_VkDeviceOrHostAddressKHR._pack_ = 1 # source:False
union_VkDeviceOrHostAddressKHR._fields_ = [
    ('deviceAddress', ctypes.c_uint64),
    ('hostAddress', ctypes.POINTER(None)),
]

VkDeviceOrHostAddressKHR = union_VkDeviceOrHostAddressKHR
class struct_VkMicromapBuildInfoEXT(Structure):
    pass

struct_VkMicromapBuildInfoEXT._pack_ = 1 # source:False
struct_VkMicromapBuildInfoEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('type', VkMicromapTypeEXT),
    ('flags', ctypes.c_uint32),
    ('mode', VkBuildMicromapModeEXT),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('dstMicromap', ctypes.POINTER(struct_VkMicromapEXT_T)),
    ('usageCountsCount', ctypes.c_uint32),
    ('PADDING_2', ctypes.c_ubyte * 4),
    ('pUsageCounts', ctypes.POINTER(struct_VkMicromapUsageEXT)),
    ('ppUsageCounts', ctypes.POINTER(ctypes.POINTER(struct_VkMicromapUsageEXT))),
    ('data', VkDeviceOrHostAddressConstKHR),
    ('scratchData', VkDeviceOrHostAddressKHR),
    ('triangleArray', VkDeviceOrHostAddressConstKHR),
    ('triangleArrayStride', ctypes.c_uint64),
]

VkMicromapBuildInfoEXT = struct_VkMicromapBuildInfoEXT
class struct_VkMicromapCreateInfoEXT(Structure):
    pass

struct_VkMicromapCreateInfoEXT._pack_ = 1 # source:False
struct_VkMicromapCreateInfoEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('createFlags', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('buffer', ctypes.POINTER(struct_VkBuffer_T)),
    ('offset', ctypes.c_uint64),
    ('size', ctypes.c_uint64),
    ('type', VkMicromapTypeEXT),
    ('PADDING_2', ctypes.c_ubyte * 4),
    ('deviceAddress', ctypes.c_uint64),
]

VkMicromapCreateInfoEXT = struct_VkMicromapCreateInfoEXT
class struct_VkPhysicalDeviceOpacityMicromapFeaturesEXT(Structure):
    pass

struct_VkPhysicalDeviceOpacityMicromapFeaturesEXT._pack_ = 1 # source:False
struct_VkPhysicalDeviceOpacityMicromapFeaturesEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('micromap', ctypes.c_uint32),
    ('micromapCaptureReplay', ctypes.c_uint32),
    ('micromapHostCommands', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPhysicalDeviceOpacityMicromapFeaturesEXT = struct_VkPhysicalDeviceOpacityMicromapFeaturesEXT
class struct_VkPhysicalDeviceOpacityMicromapPropertiesEXT(Structure):
    pass

struct_VkPhysicalDeviceOpacityMicromapPropertiesEXT._pack_ = 1 # source:False
struct_VkPhysicalDeviceOpacityMicromapPropertiesEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('maxOpacity2StateSubdivisionLevel', ctypes.c_uint32),
    ('maxOpacity4StateSubdivisionLevel', ctypes.c_uint32),
]

VkPhysicalDeviceOpacityMicromapPropertiesEXT = struct_VkPhysicalDeviceOpacityMicromapPropertiesEXT
class struct_VkMicromapVersionInfoEXT(Structure):
    pass

struct_VkMicromapVersionInfoEXT._pack_ = 1 # source:False
struct_VkMicromapVersionInfoEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('pVersionData', ctypes.POINTER(ctypes.c_ubyte)),
]

VkMicromapVersionInfoEXT = struct_VkMicromapVersionInfoEXT
class struct_VkCopyMicromapToMemoryInfoEXT(Structure):
    pass

struct_VkCopyMicromapToMemoryInfoEXT._pack_ = 1 # source:False
struct_VkCopyMicromapToMemoryInfoEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('src', ctypes.POINTER(struct_VkMicromapEXT_T)),
    ('dst', VkDeviceOrHostAddressKHR),
    ('mode', VkCopyMicromapModeEXT),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkCopyMicromapToMemoryInfoEXT = struct_VkCopyMicromapToMemoryInfoEXT
class struct_VkCopyMemoryToMicromapInfoEXT(Structure):
    pass

struct_VkCopyMemoryToMicromapInfoEXT._pack_ = 1 # source:False
struct_VkCopyMemoryToMicromapInfoEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('src', VkDeviceOrHostAddressConstKHR),
    ('dst', ctypes.POINTER(struct_VkMicromapEXT_T)),
    ('mode', VkCopyMicromapModeEXT),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkCopyMemoryToMicromapInfoEXT = struct_VkCopyMemoryToMicromapInfoEXT
class struct_VkCopyMicromapInfoEXT(Structure):
    pass

struct_VkCopyMicromapInfoEXT._pack_ = 1 # source:False
struct_VkCopyMicromapInfoEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('src', ctypes.POINTER(struct_VkMicromapEXT_T)),
    ('dst', ctypes.POINTER(struct_VkMicromapEXT_T)),
    ('mode', VkCopyMicromapModeEXT),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkCopyMicromapInfoEXT = struct_VkCopyMicromapInfoEXT
class struct_VkMicromapBuildSizesInfoEXT(Structure):
    pass

struct_VkMicromapBuildSizesInfoEXT._pack_ = 1 # source:False
struct_VkMicromapBuildSizesInfoEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('micromapSize', ctypes.c_uint64),
    ('buildScratchSize', ctypes.c_uint64),
    ('discardable', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkMicromapBuildSizesInfoEXT = struct_VkMicromapBuildSizesInfoEXT
class struct_VkAccelerationStructureTrianglesOpacityMicromapEXT(Structure):
    pass

struct_VkAccelerationStructureTrianglesOpacityMicromapEXT._pack_ = 1 # source:False
struct_VkAccelerationStructureTrianglesOpacityMicromapEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('indexType', VkIndexType),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('indexBuffer', VkDeviceOrHostAddressConstKHR),
    ('indexStride', ctypes.c_uint64),
    ('baseTriangle', ctypes.c_uint32),
    ('usageCountsCount', ctypes.c_uint32),
    ('pUsageCounts', ctypes.POINTER(struct_VkMicromapUsageEXT)),
    ('ppUsageCounts', ctypes.POINTER(ctypes.POINTER(struct_VkMicromapUsageEXT))),
    ('micromap', ctypes.POINTER(struct_VkMicromapEXT_T)),
]

VkAccelerationStructureTrianglesOpacityMicromapEXT = struct_VkAccelerationStructureTrianglesOpacityMicromapEXT
class struct_VkMicromapTriangleEXT(Structure):
    pass

struct_VkMicromapTriangleEXT._pack_ = 1 # source:False
struct_VkMicromapTriangleEXT._fields_ = [
    ('dataOffset', ctypes.c_uint32),
    ('subdivisionLevel', ctypes.c_uint16),
    ('format', ctypes.c_uint16),
]

VkMicromapTriangleEXT = struct_VkMicromapTriangleEXT
PFN_vkCreateMicromapEXT = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkMicromapCreateInfoEXT), ctypes.POINTER(struct_VkAllocationCallbacks), ctypes.POINTER(ctypes.POINTER(struct_VkMicromapEXT_T)))
PFN_vkDestroyMicromapEXT = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkMicromapEXT_T), ctypes.POINTER(struct_VkAllocationCallbacks))
PFN_vkCmdBuildMicromapsEXT = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.c_uint32, ctypes.POINTER(struct_VkMicromapBuildInfoEXT))
PFN_vkBuildMicromapsEXT = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkDeferredOperationKHR_T), ctypes.c_uint32, ctypes.POINTER(struct_VkMicromapBuildInfoEXT))
PFN_vkCopyMicromapEXT = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkDeferredOperationKHR_T), ctypes.POINTER(struct_VkCopyMicromapInfoEXT))
PFN_vkCopyMicromapToMemoryEXT = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkDeferredOperationKHR_T), ctypes.POINTER(struct_VkCopyMicromapToMemoryInfoEXT))
PFN_vkCopyMemoryToMicromapEXT = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkDeferredOperationKHR_T), ctypes.POINTER(struct_VkCopyMemoryToMicromapInfoEXT))
PFN_vkWriteMicromapsPropertiesEXT = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkDevice_T), ctypes.c_uint32, ctypes.POINTER(ctypes.POINTER(struct_VkMicromapEXT_T)), VkQueryType, ctypes.c_uint64, ctypes.POINTER(None), ctypes.c_uint64)
PFN_vkCmdCopyMicromapEXT = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.POINTER(struct_VkCopyMicromapInfoEXT))
PFN_vkCmdCopyMicromapToMemoryEXT = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.POINTER(struct_VkCopyMicromapToMemoryInfoEXT))
PFN_vkCmdCopyMemoryToMicromapEXT = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.POINTER(struct_VkCopyMemoryToMicromapInfoEXT))
PFN_vkCmdWriteMicromapsPropertiesEXT = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.c_uint32, ctypes.POINTER(ctypes.POINTER(struct_VkMicromapEXT_T)), VkQueryType, ctypes.POINTER(struct_VkQueryPool_T), ctypes.c_uint32)
PFN_vkGetDeviceMicromapCompatibilityEXT = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkMicromapVersionInfoEXT), ctypes.POINTER(VkAccelerationStructureCompatibilityKHR))
PFN_vkGetMicromapBuildSizesEXT = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkDevice_T), VkAccelerationStructureBuildTypeKHR, ctypes.POINTER(struct_VkMicromapBuildInfoEXT), ctypes.POINTER(struct_VkMicromapBuildSizesInfoEXT))
try:
    vkCreateMicromapEXT = _libraries['FIXME_STUB'].vkCreateMicromapEXT
    vkCreateMicromapEXT.restype = VkResult
    vkCreateMicromapEXT.argtypes = [VkDevice, ctypes.POINTER(struct_VkMicromapCreateInfoEXT), ctypes.POINTER(struct_VkAllocationCallbacks), ctypes.POINTER(ctypes.POINTER(struct_VkMicromapEXT_T))]
except AttributeError:
    pass
try:
    vkDestroyMicromapEXT = _libraries['FIXME_STUB'].vkDestroyMicromapEXT
    vkDestroyMicromapEXT.restype = None
    vkDestroyMicromapEXT.argtypes = [VkDevice, VkMicromapEXT, ctypes.POINTER(struct_VkAllocationCallbacks)]
except AttributeError:
    pass
try:
    vkCmdBuildMicromapsEXT = _libraries['FIXME_STUB'].vkCmdBuildMicromapsEXT
    vkCmdBuildMicromapsEXT.restype = None
    vkCmdBuildMicromapsEXT.argtypes = [VkCommandBuffer, uint32_t, ctypes.POINTER(struct_VkMicromapBuildInfoEXT)]
except AttributeError:
    pass
try:
    vkBuildMicromapsEXT = _libraries['FIXME_STUB'].vkBuildMicromapsEXT
    vkBuildMicromapsEXT.restype = VkResult
    vkBuildMicromapsEXT.argtypes = [VkDevice, VkDeferredOperationKHR, uint32_t, ctypes.POINTER(struct_VkMicromapBuildInfoEXT)]
except AttributeError:
    pass
try:
    vkCopyMicromapEXT = _libraries['FIXME_STUB'].vkCopyMicromapEXT
    vkCopyMicromapEXT.restype = VkResult
    vkCopyMicromapEXT.argtypes = [VkDevice, VkDeferredOperationKHR, ctypes.POINTER(struct_VkCopyMicromapInfoEXT)]
except AttributeError:
    pass
try:
    vkCopyMicromapToMemoryEXT = _libraries['FIXME_STUB'].vkCopyMicromapToMemoryEXT
    vkCopyMicromapToMemoryEXT.restype = VkResult
    vkCopyMicromapToMemoryEXT.argtypes = [VkDevice, VkDeferredOperationKHR, ctypes.POINTER(struct_VkCopyMicromapToMemoryInfoEXT)]
except AttributeError:
    pass
try:
    vkCopyMemoryToMicromapEXT = _libraries['FIXME_STUB'].vkCopyMemoryToMicromapEXT
    vkCopyMemoryToMicromapEXT.restype = VkResult
    vkCopyMemoryToMicromapEXT.argtypes = [VkDevice, VkDeferredOperationKHR, ctypes.POINTER(struct_VkCopyMemoryToMicromapInfoEXT)]
except AttributeError:
    pass
try:
    vkWriteMicromapsPropertiesEXT = _libraries['FIXME_STUB'].vkWriteMicromapsPropertiesEXT
    vkWriteMicromapsPropertiesEXT.restype = VkResult
    vkWriteMicromapsPropertiesEXT.argtypes = [VkDevice, uint32_t, ctypes.POINTER(ctypes.POINTER(struct_VkMicromapEXT_T)), VkQueryType, size_t, ctypes.POINTER(None), size_t]
except AttributeError:
    pass
try:
    vkCmdCopyMicromapEXT = _libraries['FIXME_STUB'].vkCmdCopyMicromapEXT
    vkCmdCopyMicromapEXT.restype = None
    vkCmdCopyMicromapEXT.argtypes = [VkCommandBuffer, ctypes.POINTER(struct_VkCopyMicromapInfoEXT)]
except AttributeError:
    pass
try:
    vkCmdCopyMicromapToMemoryEXT = _libraries['FIXME_STUB'].vkCmdCopyMicromapToMemoryEXT
    vkCmdCopyMicromapToMemoryEXT.restype = None
    vkCmdCopyMicromapToMemoryEXT.argtypes = [VkCommandBuffer, ctypes.POINTER(struct_VkCopyMicromapToMemoryInfoEXT)]
except AttributeError:
    pass
try:
    vkCmdCopyMemoryToMicromapEXT = _libraries['FIXME_STUB'].vkCmdCopyMemoryToMicromapEXT
    vkCmdCopyMemoryToMicromapEXT.restype = None
    vkCmdCopyMemoryToMicromapEXT.argtypes = [VkCommandBuffer, ctypes.POINTER(struct_VkCopyMemoryToMicromapInfoEXT)]
except AttributeError:
    pass
try:
    vkCmdWriteMicromapsPropertiesEXT = _libraries['FIXME_STUB'].vkCmdWriteMicromapsPropertiesEXT
    vkCmdWriteMicromapsPropertiesEXT.restype = None
    vkCmdWriteMicromapsPropertiesEXT.argtypes = [VkCommandBuffer, uint32_t, ctypes.POINTER(ctypes.POINTER(struct_VkMicromapEXT_T)), VkQueryType, VkQueryPool, uint32_t]
except AttributeError:
    pass
try:
    vkGetDeviceMicromapCompatibilityEXT = _libraries['FIXME_STUB'].vkGetDeviceMicromapCompatibilityEXT
    vkGetDeviceMicromapCompatibilityEXT.restype = None
    vkGetDeviceMicromapCompatibilityEXT.argtypes = [VkDevice, ctypes.POINTER(struct_VkMicromapVersionInfoEXT), ctypes.POINTER(VkAccelerationStructureCompatibilityKHR)]
except AttributeError:
    pass
try:
    vkGetMicromapBuildSizesEXT = _libraries['FIXME_STUB'].vkGetMicromapBuildSizesEXT
    vkGetMicromapBuildSizesEXT.restype = None
    vkGetMicromapBuildSizesEXT.argtypes = [VkDevice, VkAccelerationStructureBuildTypeKHR, ctypes.POINTER(struct_VkMicromapBuildInfoEXT), ctypes.POINTER(struct_VkMicromapBuildSizesInfoEXT)]
except AttributeError:
    pass
class struct_VkPhysicalDeviceClusterCullingShaderFeaturesHUAWEI(Structure):
    pass

struct_VkPhysicalDeviceClusterCullingShaderFeaturesHUAWEI._pack_ = 1 # source:False
struct_VkPhysicalDeviceClusterCullingShaderFeaturesHUAWEI._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('clustercullingShader', ctypes.c_uint32),
    ('multiviewClusterCullingShader', ctypes.c_uint32),
]

VkPhysicalDeviceClusterCullingShaderFeaturesHUAWEI = struct_VkPhysicalDeviceClusterCullingShaderFeaturesHUAWEI
class struct_VkPhysicalDeviceClusterCullingShaderPropertiesHUAWEI(Structure):
    pass

struct_VkPhysicalDeviceClusterCullingShaderPropertiesHUAWEI._pack_ = 1 # source:False
struct_VkPhysicalDeviceClusterCullingShaderPropertiesHUAWEI._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('maxWorkGroupCount', ctypes.c_uint32 * 3),
    ('maxWorkGroupSize', ctypes.c_uint32 * 3),
    ('maxOutputClusterCount', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('indirectBufferOffsetAlignment', ctypes.c_uint64),
]

VkPhysicalDeviceClusterCullingShaderPropertiesHUAWEI = struct_VkPhysicalDeviceClusterCullingShaderPropertiesHUAWEI
class struct_VkPhysicalDeviceClusterCullingShaderVrsFeaturesHUAWEI(Structure):
    pass

struct_VkPhysicalDeviceClusterCullingShaderVrsFeaturesHUAWEI._pack_ = 1 # source:False
struct_VkPhysicalDeviceClusterCullingShaderVrsFeaturesHUAWEI._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('clusterShadingRate', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPhysicalDeviceClusterCullingShaderVrsFeaturesHUAWEI = struct_VkPhysicalDeviceClusterCullingShaderVrsFeaturesHUAWEI
PFN_vkCmdDrawClusterHUAWEI = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.c_uint32, ctypes.c_uint32, ctypes.c_uint32)
PFN_vkCmdDrawClusterIndirectHUAWEI = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.POINTER(struct_VkBuffer_T), ctypes.c_uint64)
try:
    vkCmdDrawClusterHUAWEI = _libraries['FIXME_STUB'].vkCmdDrawClusterHUAWEI
    vkCmdDrawClusterHUAWEI.restype = None
    vkCmdDrawClusterHUAWEI.argtypes = [VkCommandBuffer, uint32_t, uint32_t, uint32_t]
except AttributeError:
    pass
try:
    vkCmdDrawClusterIndirectHUAWEI = _libraries['FIXME_STUB'].vkCmdDrawClusterIndirectHUAWEI
    vkCmdDrawClusterIndirectHUAWEI.restype = None
    vkCmdDrawClusterIndirectHUAWEI.argtypes = [VkCommandBuffer, VkBuffer, VkDeviceSize]
except AttributeError:
    pass
class struct_VkPhysicalDeviceBorderColorSwizzleFeaturesEXT(Structure):
    pass

struct_VkPhysicalDeviceBorderColorSwizzleFeaturesEXT._pack_ = 1 # source:False
struct_VkPhysicalDeviceBorderColorSwizzleFeaturesEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('borderColorSwizzle', ctypes.c_uint32),
    ('borderColorSwizzleFromImage', ctypes.c_uint32),
]

VkPhysicalDeviceBorderColorSwizzleFeaturesEXT = struct_VkPhysicalDeviceBorderColorSwizzleFeaturesEXT
class struct_VkSamplerBorderColorComponentMappingCreateInfoEXT(Structure):
    pass

struct_VkSamplerBorderColorComponentMappingCreateInfoEXT._pack_ = 1 # source:False
struct_VkSamplerBorderColorComponentMappingCreateInfoEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('components', VkComponentMapping),
    ('srgb', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkSamplerBorderColorComponentMappingCreateInfoEXT = struct_VkSamplerBorderColorComponentMappingCreateInfoEXT
class struct_VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT(Structure):
    pass

struct_VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT._pack_ = 1 # source:False
struct_VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('pageableDeviceLocalMemory', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT = struct_VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT
PFN_vkSetDeviceMemoryPriorityEXT = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkDeviceMemory_T), ctypes.c_float)
try:
    vkSetDeviceMemoryPriorityEXT = _libraries['FIXME_STUB'].vkSetDeviceMemoryPriorityEXT
    vkSetDeviceMemoryPriorityEXT.restype = None
    vkSetDeviceMemoryPriorityEXT.argtypes = [VkDevice, VkDeviceMemory, ctypes.c_float]
except AttributeError:
    pass
class struct_VkPhysicalDeviceShaderCorePropertiesARM(Structure):
    pass

struct_VkPhysicalDeviceShaderCorePropertiesARM._pack_ = 1 # source:False
struct_VkPhysicalDeviceShaderCorePropertiesARM._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('pixelRate', ctypes.c_uint32),
    ('texelRate', ctypes.c_uint32),
    ('fmaRate', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPhysicalDeviceShaderCorePropertiesARM = struct_VkPhysicalDeviceShaderCorePropertiesARM
VkPhysicalDeviceSchedulingControlsFlagsARM = ctypes.c_uint64
VkPhysicalDeviceSchedulingControlsFlagBitsARM = ctypes.c_uint64
VK_PHYSICAL_DEVICE_SCHEDULING_CONTROLS_SHADER_CORE_COUNT_ARM = 0x00000001 # Variable ctypes.c_uint64
class struct_VkDeviceQueueShaderCoreControlCreateInfoARM(Structure):
    pass

struct_VkDeviceQueueShaderCoreControlCreateInfoARM._pack_ = 1 # source:False
struct_VkDeviceQueueShaderCoreControlCreateInfoARM._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('shaderCoreCount', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkDeviceQueueShaderCoreControlCreateInfoARM = struct_VkDeviceQueueShaderCoreControlCreateInfoARM
class struct_VkPhysicalDeviceSchedulingControlsFeaturesARM(Structure):
    pass

struct_VkPhysicalDeviceSchedulingControlsFeaturesARM._pack_ = 1 # source:False
struct_VkPhysicalDeviceSchedulingControlsFeaturesARM._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('schedulingControls', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPhysicalDeviceSchedulingControlsFeaturesARM = struct_VkPhysicalDeviceSchedulingControlsFeaturesARM
class struct_VkPhysicalDeviceSchedulingControlsPropertiesARM(Structure):
    pass

struct_VkPhysicalDeviceSchedulingControlsPropertiesARM._pack_ = 1 # source:False
struct_VkPhysicalDeviceSchedulingControlsPropertiesARM._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('schedulingControlsFlags', ctypes.c_uint64),
]

VkPhysicalDeviceSchedulingControlsPropertiesARM = struct_VkPhysicalDeviceSchedulingControlsPropertiesARM
class struct_VkPhysicalDeviceImageSlicedViewOf3DFeaturesEXT(Structure):
    pass

struct_VkPhysicalDeviceImageSlicedViewOf3DFeaturesEXT._pack_ = 1 # source:False
struct_VkPhysicalDeviceImageSlicedViewOf3DFeaturesEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('imageSlicedViewOf3D', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPhysicalDeviceImageSlicedViewOf3DFeaturesEXT = struct_VkPhysicalDeviceImageSlicedViewOf3DFeaturesEXT
class struct_VkImageViewSlicedCreateInfoEXT(Structure):
    pass

struct_VkImageViewSlicedCreateInfoEXT._pack_ = 1 # source:False
struct_VkImageViewSlicedCreateInfoEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('sliceOffset', ctypes.c_uint32),
    ('sliceCount', ctypes.c_uint32),
]

VkImageViewSlicedCreateInfoEXT = struct_VkImageViewSlicedCreateInfoEXT
class struct_VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE(Structure):
    pass

struct_VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE._pack_ = 1 # source:False
struct_VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('descriptorSetHostMapping', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE = struct_VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE
class struct_VkDescriptorSetBindingReferenceVALVE(Structure):
    pass

struct_VkDescriptorSetBindingReferenceVALVE._pack_ = 1 # source:False
struct_VkDescriptorSetBindingReferenceVALVE._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('descriptorSetLayout', ctypes.POINTER(struct_VkDescriptorSetLayout_T)),
    ('binding', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkDescriptorSetBindingReferenceVALVE = struct_VkDescriptorSetBindingReferenceVALVE
class struct_VkDescriptorSetLayoutHostMappingInfoVALVE(Structure):
    pass

struct_VkDescriptorSetLayoutHostMappingInfoVALVE._pack_ = 1 # source:False
struct_VkDescriptorSetLayoutHostMappingInfoVALVE._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('descriptorOffset', ctypes.c_uint64),
    ('descriptorSize', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkDescriptorSetLayoutHostMappingInfoVALVE = struct_VkDescriptorSetLayoutHostMappingInfoVALVE
PFN_vkGetDescriptorSetLayoutHostMappingInfoVALVE = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkDescriptorSetBindingReferenceVALVE), ctypes.POINTER(struct_VkDescriptorSetLayoutHostMappingInfoVALVE))
PFN_vkGetDescriptorSetHostMappingVALVE = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkDescriptorSet_T), ctypes.POINTER(ctypes.POINTER(None)))
try:
    vkGetDescriptorSetLayoutHostMappingInfoVALVE = _libraries['FIXME_STUB'].vkGetDescriptorSetLayoutHostMappingInfoVALVE
    vkGetDescriptorSetLayoutHostMappingInfoVALVE.restype = None
    vkGetDescriptorSetLayoutHostMappingInfoVALVE.argtypes = [VkDevice, ctypes.POINTER(struct_VkDescriptorSetBindingReferenceVALVE), ctypes.POINTER(struct_VkDescriptorSetLayoutHostMappingInfoVALVE)]
except AttributeError:
    pass
try:
    vkGetDescriptorSetHostMappingVALVE = _libraries['FIXME_STUB'].vkGetDescriptorSetHostMappingVALVE
    vkGetDescriptorSetHostMappingVALVE.restype = None
    vkGetDescriptorSetHostMappingVALVE.argtypes = [VkDevice, VkDescriptorSet, ctypes.POINTER(ctypes.POINTER(None))]
except AttributeError:
    pass
class struct_VkPhysicalDeviceDepthClampZeroOneFeaturesEXT(Structure):
    pass

struct_VkPhysicalDeviceDepthClampZeroOneFeaturesEXT._pack_ = 1 # source:False
struct_VkPhysicalDeviceDepthClampZeroOneFeaturesEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('depthClampZeroOne', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPhysicalDeviceDepthClampZeroOneFeaturesEXT = struct_VkPhysicalDeviceDepthClampZeroOneFeaturesEXT
class struct_VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT(Structure):
    pass

struct_VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT._pack_ = 1 # source:False
struct_VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('nonSeamlessCubeMap', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT = struct_VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT
class struct_VkPhysicalDeviceRenderPassStripedFeaturesARM(Structure):
    pass

struct_VkPhysicalDeviceRenderPassStripedFeaturesARM._pack_ = 1 # source:False
struct_VkPhysicalDeviceRenderPassStripedFeaturesARM._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('renderPassStriped', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPhysicalDeviceRenderPassStripedFeaturesARM = struct_VkPhysicalDeviceRenderPassStripedFeaturesARM
class struct_VkPhysicalDeviceRenderPassStripedPropertiesARM(Structure):
    pass

struct_VkPhysicalDeviceRenderPassStripedPropertiesARM._pack_ = 1 # source:False
struct_VkPhysicalDeviceRenderPassStripedPropertiesARM._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('renderPassStripeGranularity', VkExtent2D),
    ('maxRenderPassStripes', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPhysicalDeviceRenderPassStripedPropertiesARM = struct_VkPhysicalDeviceRenderPassStripedPropertiesARM
class struct_VkRenderPassStripeInfoARM(Structure):
    pass

struct_VkRenderPassStripeInfoARM._pack_ = 1 # source:False
struct_VkRenderPassStripeInfoARM._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('stripeArea', VkRect2D),
]

VkRenderPassStripeInfoARM = struct_VkRenderPassStripeInfoARM
class struct_VkRenderPassStripeBeginInfoARM(Structure):
    pass

struct_VkRenderPassStripeBeginInfoARM._pack_ = 1 # source:False
struct_VkRenderPassStripeBeginInfoARM._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('stripeInfoCount', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('pStripeInfos', ctypes.POINTER(struct_VkRenderPassStripeInfoARM)),
]

VkRenderPassStripeBeginInfoARM = struct_VkRenderPassStripeBeginInfoARM
class struct_VkRenderPassStripeSubmitInfoARM(Structure):
    pass

struct_VkRenderPassStripeSubmitInfoARM._pack_ = 1 # source:False
struct_VkRenderPassStripeSubmitInfoARM._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('stripeSemaphoreInfoCount', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('pStripeSemaphoreInfos', ctypes.POINTER(struct_VkSemaphoreSubmitInfo)),
]

VkRenderPassStripeSubmitInfoARM = struct_VkRenderPassStripeSubmitInfoARM
class struct_VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM(Structure):
    pass

struct_VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM._pack_ = 1 # source:False
struct_VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('fragmentDensityMapOffset', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM = struct_VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM
class struct_VkPhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM(Structure):
    pass

struct_VkPhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM._pack_ = 1 # source:False
struct_VkPhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('fragmentDensityOffsetGranularity', VkExtent2D),
]

VkPhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM = struct_VkPhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM
class struct_VkSubpassFragmentDensityMapOffsetEndInfoQCOM(Structure):
    pass

struct_VkSubpassFragmentDensityMapOffsetEndInfoQCOM._pack_ = 1 # source:False
struct_VkSubpassFragmentDensityMapOffsetEndInfoQCOM._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('fragmentDensityOffsetCount', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('pFragmentDensityOffsets', ctypes.POINTER(struct_VkOffset2D)),
]

VkSubpassFragmentDensityMapOffsetEndInfoQCOM = struct_VkSubpassFragmentDensityMapOffsetEndInfoQCOM
class struct_VkCopyMemoryIndirectCommandNV(Structure):
    pass

struct_VkCopyMemoryIndirectCommandNV._pack_ = 1 # source:False
struct_VkCopyMemoryIndirectCommandNV._fields_ = [
    ('srcAddress', ctypes.c_uint64),
    ('dstAddress', ctypes.c_uint64),
    ('size', ctypes.c_uint64),
]

VkCopyMemoryIndirectCommandNV = struct_VkCopyMemoryIndirectCommandNV
class struct_VkCopyMemoryToImageIndirectCommandNV(Structure):
    pass

struct_VkCopyMemoryToImageIndirectCommandNV._pack_ = 1 # source:False
struct_VkCopyMemoryToImageIndirectCommandNV._fields_ = [
    ('srcAddress', ctypes.c_uint64),
    ('bufferRowLength', ctypes.c_uint32),
    ('bufferImageHeight', ctypes.c_uint32),
    ('imageSubresource', VkImageSubresourceLayers),
    ('imageOffset', VkOffset3D),
    ('imageExtent', VkExtent3D),
]

VkCopyMemoryToImageIndirectCommandNV = struct_VkCopyMemoryToImageIndirectCommandNV
class struct_VkPhysicalDeviceCopyMemoryIndirectFeaturesNV(Structure):
    pass

struct_VkPhysicalDeviceCopyMemoryIndirectFeaturesNV._pack_ = 1 # source:False
struct_VkPhysicalDeviceCopyMemoryIndirectFeaturesNV._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('indirectCopy', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPhysicalDeviceCopyMemoryIndirectFeaturesNV = struct_VkPhysicalDeviceCopyMemoryIndirectFeaturesNV
class struct_VkPhysicalDeviceCopyMemoryIndirectPropertiesNV(Structure):
    pass

struct_VkPhysicalDeviceCopyMemoryIndirectPropertiesNV._pack_ = 1 # source:False
struct_VkPhysicalDeviceCopyMemoryIndirectPropertiesNV._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('supportedQueues', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPhysicalDeviceCopyMemoryIndirectPropertiesNV = struct_VkPhysicalDeviceCopyMemoryIndirectPropertiesNV
PFN_vkCmdCopyMemoryIndirectNV = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.c_uint64, ctypes.c_uint32, ctypes.c_uint32)
PFN_vkCmdCopyMemoryToImageIndirectNV = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.c_uint64, ctypes.c_uint32, ctypes.c_uint32, ctypes.POINTER(struct_VkImage_T), VkImageLayout, ctypes.POINTER(struct_VkImageSubresourceLayers))
try:
    vkCmdCopyMemoryIndirectNV = _libraries['FIXME_STUB'].vkCmdCopyMemoryIndirectNV
    vkCmdCopyMemoryIndirectNV.restype = None
    vkCmdCopyMemoryIndirectNV.argtypes = [VkCommandBuffer, VkDeviceAddress, uint32_t, uint32_t]
except AttributeError:
    pass
try:
    vkCmdCopyMemoryToImageIndirectNV = _libraries['FIXME_STUB'].vkCmdCopyMemoryToImageIndirectNV
    vkCmdCopyMemoryToImageIndirectNV.restype = None
    vkCmdCopyMemoryToImageIndirectNV.argtypes = [VkCommandBuffer, VkDeviceAddress, uint32_t, uint32_t, VkImage, VkImageLayout, ctypes.POINTER(struct_VkImageSubresourceLayers)]
except AttributeError:
    pass
VkMemoryDecompressionMethodFlagBitsNV = ctypes.c_uint64
VK_MEMORY_DECOMPRESSION_METHOD_GDEFLATE_1_0_BIT_NV = 0x00000001 # Variable ctypes.c_uint64
VkMemoryDecompressionMethodFlagsNV = ctypes.c_uint64
class struct_VkDecompressMemoryRegionNV(Structure):
    pass

struct_VkDecompressMemoryRegionNV._pack_ = 1 # source:False
struct_VkDecompressMemoryRegionNV._fields_ = [
    ('srcAddress', ctypes.c_uint64),
    ('dstAddress', ctypes.c_uint64),
    ('compressedSize', ctypes.c_uint64),
    ('decompressedSize', ctypes.c_uint64),
    ('decompressionMethod', ctypes.c_uint64),
]

VkDecompressMemoryRegionNV = struct_VkDecompressMemoryRegionNV
class struct_VkPhysicalDeviceMemoryDecompressionFeaturesNV(Structure):
    pass

struct_VkPhysicalDeviceMemoryDecompressionFeaturesNV._pack_ = 1 # source:False
struct_VkPhysicalDeviceMemoryDecompressionFeaturesNV._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('memoryDecompression', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPhysicalDeviceMemoryDecompressionFeaturesNV = struct_VkPhysicalDeviceMemoryDecompressionFeaturesNV
class struct_VkPhysicalDeviceMemoryDecompressionPropertiesNV(Structure):
    pass

struct_VkPhysicalDeviceMemoryDecompressionPropertiesNV._pack_ = 1 # source:False
struct_VkPhysicalDeviceMemoryDecompressionPropertiesNV._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('decompressionMethods', ctypes.c_uint64),
    ('maxDecompressionIndirectCount', ctypes.c_uint64),
]

VkPhysicalDeviceMemoryDecompressionPropertiesNV = struct_VkPhysicalDeviceMemoryDecompressionPropertiesNV
PFN_vkCmdDecompressMemoryNV = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.c_uint32, ctypes.POINTER(struct_VkDecompressMemoryRegionNV))
PFN_vkCmdDecompressMemoryIndirectCountNV = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.c_uint64, ctypes.c_uint64, ctypes.c_uint32)
try:
    vkCmdDecompressMemoryNV = _libraries['FIXME_STUB'].vkCmdDecompressMemoryNV
    vkCmdDecompressMemoryNV.restype = None
    vkCmdDecompressMemoryNV.argtypes = [VkCommandBuffer, uint32_t, ctypes.POINTER(struct_VkDecompressMemoryRegionNV)]
except AttributeError:
    pass
try:
    vkCmdDecompressMemoryIndirectCountNV = _libraries['FIXME_STUB'].vkCmdDecompressMemoryIndirectCountNV
    vkCmdDecompressMemoryIndirectCountNV.restype = None
    vkCmdDecompressMemoryIndirectCountNV.argtypes = [VkCommandBuffer, VkDeviceAddress, VkDeviceAddress, uint32_t]
except AttributeError:
    pass
class struct_VkPhysicalDeviceDeviceGeneratedCommandsComputeFeaturesNV(Structure):
    pass

struct_VkPhysicalDeviceDeviceGeneratedCommandsComputeFeaturesNV._pack_ = 1 # source:False
struct_VkPhysicalDeviceDeviceGeneratedCommandsComputeFeaturesNV._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('deviceGeneratedCompute', ctypes.c_uint32),
    ('deviceGeneratedComputePipelines', ctypes.c_uint32),
    ('deviceGeneratedComputeCaptureReplay', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPhysicalDeviceDeviceGeneratedCommandsComputeFeaturesNV = struct_VkPhysicalDeviceDeviceGeneratedCommandsComputeFeaturesNV
class struct_VkComputePipelineIndirectBufferInfoNV(Structure):
    pass

struct_VkComputePipelineIndirectBufferInfoNV._pack_ = 1 # source:False
struct_VkComputePipelineIndirectBufferInfoNV._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('deviceAddress', ctypes.c_uint64),
    ('size', ctypes.c_uint64),
    ('pipelineDeviceAddressCaptureReplay', ctypes.c_uint64),
]

VkComputePipelineIndirectBufferInfoNV = struct_VkComputePipelineIndirectBufferInfoNV
class struct_VkPipelineIndirectDeviceAddressInfoNV(Structure):
    pass

struct_VkPipelineIndirectDeviceAddressInfoNV._pack_ = 1 # source:False
struct_VkPipelineIndirectDeviceAddressInfoNV._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('pipelineBindPoint', VkPipelineBindPoint),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('pipeline', ctypes.POINTER(struct_VkPipeline_T)),
]

VkPipelineIndirectDeviceAddressInfoNV = struct_VkPipelineIndirectDeviceAddressInfoNV
class struct_VkBindPipelineIndirectCommandNV(Structure):
    pass

struct_VkBindPipelineIndirectCommandNV._pack_ = 1 # source:False
struct_VkBindPipelineIndirectCommandNV._fields_ = [
    ('pipelineAddress', ctypes.c_uint64),
]

VkBindPipelineIndirectCommandNV = struct_VkBindPipelineIndirectCommandNV
PFN_vkGetPipelineIndirectMemoryRequirementsNV = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkComputePipelineCreateInfo), ctypes.POINTER(struct_VkMemoryRequirements2))
PFN_vkCmdUpdatePipelineIndirectBufferNV = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), VkPipelineBindPoint, ctypes.POINTER(struct_VkPipeline_T))
PFN_vkGetPipelineIndirectDeviceAddressNV = ctypes.CFUNCTYPE(ctypes.c_uint64, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkPipelineIndirectDeviceAddressInfoNV))
try:
    vkGetPipelineIndirectMemoryRequirementsNV = _libraries['FIXME_STUB'].vkGetPipelineIndirectMemoryRequirementsNV
    vkGetPipelineIndirectMemoryRequirementsNV.restype = None
    vkGetPipelineIndirectMemoryRequirementsNV.argtypes = [VkDevice, ctypes.POINTER(struct_VkComputePipelineCreateInfo), ctypes.POINTER(struct_VkMemoryRequirements2)]
except AttributeError:
    pass
try:
    vkCmdUpdatePipelineIndirectBufferNV = _libraries['FIXME_STUB'].vkCmdUpdatePipelineIndirectBufferNV
    vkCmdUpdatePipelineIndirectBufferNV.restype = None
    vkCmdUpdatePipelineIndirectBufferNV.argtypes = [VkCommandBuffer, VkPipelineBindPoint, VkPipeline]
except AttributeError:
    pass
try:
    vkGetPipelineIndirectDeviceAddressNV = _libraries['FIXME_STUB'].vkGetPipelineIndirectDeviceAddressNV
    vkGetPipelineIndirectDeviceAddressNV.restype = VkDeviceAddress
    vkGetPipelineIndirectDeviceAddressNV.argtypes = [VkDevice, ctypes.POINTER(struct_VkPipelineIndirectDeviceAddressInfoNV)]
except AttributeError:
    pass
class struct_VkPhysicalDeviceLinearColorAttachmentFeaturesNV(Structure):
    pass

struct_VkPhysicalDeviceLinearColorAttachmentFeaturesNV._pack_ = 1 # source:False
struct_VkPhysicalDeviceLinearColorAttachmentFeaturesNV._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('linearColorAttachment', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPhysicalDeviceLinearColorAttachmentFeaturesNV = struct_VkPhysicalDeviceLinearColorAttachmentFeaturesNV
class struct_VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT(Structure):
    pass

struct_VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT._pack_ = 1 # source:False
struct_VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('imageCompressionControlSwapchain', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT = struct_VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT
class struct_VkImageViewSampleWeightCreateInfoQCOM(Structure):
    pass

struct_VkImageViewSampleWeightCreateInfoQCOM._pack_ = 1 # source:False
struct_VkImageViewSampleWeightCreateInfoQCOM._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('filterCenter', VkOffset2D),
    ('filterSize', VkExtent2D),
    ('numPhases', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkImageViewSampleWeightCreateInfoQCOM = struct_VkImageViewSampleWeightCreateInfoQCOM
class struct_VkPhysicalDeviceImageProcessingFeaturesQCOM(Structure):
    pass

struct_VkPhysicalDeviceImageProcessingFeaturesQCOM._pack_ = 1 # source:False
struct_VkPhysicalDeviceImageProcessingFeaturesQCOM._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('textureSampleWeighted', ctypes.c_uint32),
    ('textureBoxFilter', ctypes.c_uint32),
    ('textureBlockMatch', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPhysicalDeviceImageProcessingFeaturesQCOM = struct_VkPhysicalDeviceImageProcessingFeaturesQCOM
class struct_VkPhysicalDeviceImageProcessingPropertiesQCOM(Structure):
    pass

struct_VkPhysicalDeviceImageProcessingPropertiesQCOM._pack_ = 1 # source:False
struct_VkPhysicalDeviceImageProcessingPropertiesQCOM._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('maxWeightFilterPhases', ctypes.c_uint32),
    ('maxWeightFilterDimension', VkExtent2D),
    ('maxBlockMatchRegion', VkExtent2D),
    ('maxBoxFilterBlockSize', VkExtent2D),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPhysicalDeviceImageProcessingPropertiesQCOM = struct_VkPhysicalDeviceImageProcessingPropertiesQCOM
class struct_VkPhysicalDeviceNestedCommandBufferFeaturesEXT(Structure):
    pass

struct_VkPhysicalDeviceNestedCommandBufferFeaturesEXT._pack_ = 1 # source:False
struct_VkPhysicalDeviceNestedCommandBufferFeaturesEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('nestedCommandBuffer', ctypes.c_uint32),
    ('nestedCommandBufferRendering', ctypes.c_uint32),
    ('nestedCommandBufferSimultaneousUse', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPhysicalDeviceNestedCommandBufferFeaturesEXT = struct_VkPhysicalDeviceNestedCommandBufferFeaturesEXT
class struct_VkPhysicalDeviceNestedCommandBufferPropertiesEXT(Structure):
    pass

struct_VkPhysicalDeviceNestedCommandBufferPropertiesEXT._pack_ = 1 # source:False
struct_VkPhysicalDeviceNestedCommandBufferPropertiesEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('maxCommandBufferNestingLevel', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPhysicalDeviceNestedCommandBufferPropertiesEXT = struct_VkPhysicalDeviceNestedCommandBufferPropertiesEXT
class struct_VkExternalMemoryAcquireUnmodifiedEXT(Structure):
    pass

struct_VkExternalMemoryAcquireUnmodifiedEXT._pack_ = 1 # source:False
struct_VkExternalMemoryAcquireUnmodifiedEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('acquireUnmodifiedMemory', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkExternalMemoryAcquireUnmodifiedEXT = struct_VkExternalMemoryAcquireUnmodifiedEXT
class struct_VkPhysicalDeviceExtendedDynamicState3FeaturesEXT(Structure):
    pass

struct_VkPhysicalDeviceExtendedDynamicState3FeaturesEXT._pack_ = 1 # source:False
struct_VkPhysicalDeviceExtendedDynamicState3FeaturesEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('extendedDynamicState3TessellationDomainOrigin', ctypes.c_uint32),
    ('extendedDynamicState3DepthClampEnable', ctypes.c_uint32),
    ('extendedDynamicState3PolygonMode', ctypes.c_uint32),
    ('extendedDynamicState3RasterizationSamples', ctypes.c_uint32),
    ('extendedDynamicState3SampleMask', ctypes.c_uint32),
    ('extendedDynamicState3AlphaToCoverageEnable', ctypes.c_uint32),
    ('extendedDynamicState3AlphaToOneEnable', ctypes.c_uint32),
    ('extendedDynamicState3LogicOpEnable', ctypes.c_uint32),
    ('extendedDynamicState3ColorBlendEnable', ctypes.c_uint32),
    ('extendedDynamicState3ColorBlendEquation', ctypes.c_uint32),
    ('extendedDynamicState3ColorWriteMask', ctypes.c_uint32),
    ('extendedDynamicState3RasterizationStream', ctypes.c_uint32),
    ('extendedDynamicState3ConservativeRasterizationMode', ctypes.c_uint32),
    ('extendedDynamicState3ExtraPrimitiveOverestimationSize', ctypes.c_uint32),
    ('extendedDynamicState3DepthClipEnable', ctypes.c_uint32),
    ('extendedDynamicState3SampleLocationsEnable', ctypes.c_uint32),
    ('extendedDynamicState3ColorBlendAdvanced', ctypes.c_uint32),
    ('extendedDynamicState3ProvokingVertexMode', ctypes.c_uint32),
    ('extendedDynamicState3LineRasterizationMode', ctypes.c_uint32),
    ('extendedDynamicState3LineStippleEnable', ctypes.c_uint32),
    ('extendedDynamicState3DepthClipNegativeOneToOne', ctypes.c_uint32),
    ('extendedDynamicState3ViewportWScalingEnable', ctypes.c_uint32),
    ('extendedDynamicState3ViewportSwizzle', ctypes.c_uint32),
    ('extendedDynamicState3CoverageToColorEnable', ctypes.c_uint32),
    ('extendedDynamicState3CoverageToColorLocation', ctypes.c_uint32),
    ('extendedDynamicState3CoverageModulationMode', ctypes.c_uint32),
    ('extendedDynamicState3CoverageModulationTableEnable', ctypes.c_uint32),
    ('extendedDynamicState3CoverageModulationTable', ctypes.c_uint32),
    ('extendedDynamicState3CoverageReductionMode', ctypes.c_uint32),
    ('extendedDynamicState3RepresentativeFragmentTestEnable', ctypes.c_uint32),
    ('extendedDynamicState3ShadingRateImageEnable', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPhysicalDeviceExtendedDynamicState3FeaturesEXT = struct_VkPhysicalDeviceExtendedDynamicState3FeaturesEXT
class struct_VkPhysicalDeviceExtendedDynamicState3PropertiesEXT(Structure):
    pass

struct_VkPhysicalDeviceExtendedDynamicState3PropertiesEXT._pack_ = 1 # source:False
struct_VkPhysicalDeviceExtendedDynamicState3PropertiesEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('dynamicPrimitiveTopologyUnrestricted', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPhysicalDeviceExtendedDynamicState3PropertiesEXT = struct_VkPhysicalDeviceExtendedDynamicState3PropertiesEXT
class struct_VkColorBlendEquationEXT(Structure):
    _pack_ = 1 # source:False
    _fields_ = [
    ('srcColorBlendFactor', VkBlendFactor),
    ('dstColorBlendFactor', VkBlendFactor),
    ('colorBlendOp', VkBlendOp),
    ('srcAlphaBlendFactor', VkBlendFactor),
    ('dstAlphaBlendFactor', VkBlendFactor),
    ('alphaBlendOp', VkBlendOp),
     ]

VkColorBlendEquationEXT = struct_VkColorBlendEquationEXT
class struct_VkColorBlendAdvancedEXT(Structure):
    pass

struct_VkColorBlendAdvancedEXT._pack_ = 1 # source:False
struct_VkColorBlendAdvancedEXT._fields_ = [
    ('advancedBlendOp', VkBlendOp),
    ('srcPremultiplied', ctypes.c_uint32),
    ('dstPremultiplied', ctypes.c_uint32),
    ('blendOverlap', VkBlendOverlapEXT),
    ('clampResults', ctypes.c_uint32),
]

VkColorBlendAdvancedEXT = struct_VkColorBlendAdvancedEXT
PFN_vkCmdSetTessellationDomainOriginEXT = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), VkTessellationDomainOrigin)
PFN_vkCmdSetDepthClampEnableEXT = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.c_uint32)
PFN_vkCmdSetPolygonModeEXT = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), VkPolygonMode)
PFN_vkCmdSetRasterizationSamplesEXT = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), VkSampleCountFlagBits)
PFN_vkCmdSetSampleMaskEXT = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), VkSampleCountFlagBits, ctypes.POINTER(ctypes.c_uint32))
PFN_vkCmdSetAlphaToCoverageEnableEXT = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.c_uint32)
PFN_vkCmdSetAlphaToOneEnableEXT = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.c_uint32)
PFN_vkCmdSetLogicOpEnableEXT = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.c_uint32)
PFN_vkCmdSetColorBlendEnableEXT = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.c_uint32, ctypes.c_uint32, ctypes.POINTER(ctypes.c_uint32))
PFN_vkCmdSetColorBlendEquationEXT = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.c_uint32, ctypes.c_uint32, ctypes.POINTER(struct_VkColorBlendEquationEXT))
PFN_vkCmdSetColorWriteMaskEXT = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.c_uint32, ctypes.c_uint32, ctypes.POINTER(ctypes.c_uint32))
PFN_vkCmdSetRasterizationStreamEXT = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.c_uint32)
PFN_vkCmdSetConservativeRasterizationModeEXT = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), VkConservativeRasterizationModeEXT)
PFN_vkCmdSetExtraPrimitiveOverestimationSizeEXT = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.c_float)
PFN_vkCmdSetDepthClipEnableEXT = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.c_uint32)
PFN_vkCmdSetSampleLocationsEnableEXT = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.c_uint32)
PFN_vkCmdSetColorBlendAdvancedEXT = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.c_uint32, ctypes.c_uint32, ctypes.POINTER(struct_VkColorBlendAdvancedEXT))
PFN_vkCmdSetProvokingVertexModeEXT = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), VkProvokingVertexModeEXT)
PFN_vkCmdSetLineRasterizationModeEXT = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), VkLineRasterizationModeEXT)
PFN_vkCmdSetLineStippleEnableEXT = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.c_uint32)
PFN_vkCmdSetDepthClipNegativeOneToOneEXT = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.c_uint32)
PFN_vkCmdSetViewportWScalingEnableNV = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.c_uint32)
PFN_vkCmdSetViewportSwizzleNV = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.c_uint32, ctypes.c_uint32, ctypes.POINTER(struct_VkViewportSwizzleNV))
PFN_vkCmdSetCoverageToColorEnableNV = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.c_uint32)
PFN_vkCmdSetCoverageToColorLocationNV = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.c_uint32)
PFN_vkCmdSetCoverageModulationModeNV = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), VkCoverageModulationModeNV)
PFN_vkCmdSetCoverageModulationTableEnableNV = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.c_uint32)
PFN_vkCmdSetCoverageModulationTableNV = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.c_uint32, ctypes.POINTER(ctypes.c_float))
PFN_vkCmdSetShadingRateImageEnableNV = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.c_uint32)
PFN_vkCmdSetRepresentativeFragmentTestEnableNV = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.c_uint32)
PFN_vkCmdSetCoverageReductionModeNV = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), VkCoverageReductionModeNV)
try:
    vkCmdSetTessellationDomainOriginEXT = _libraries['FIXME_STUB'].vkCmdSetTessellationDomainOriginEXT
    vkCmdSetTessellationDomainOriginEXT.restype = None
    vkCmdSetTessellationDomainOriginEXT.argtypes = [VkCommandBuffer, VkTessellationDomainOrigin]
except AttributeError:
    pass
try:
    vkCmdSetDepthClampEnableEXT = _libraries['FIXME_STUB'].vkCmdSetDepthClampEnableEXT
    vkCmdSetDepthClampEnableEXT.restype = None
    vkCmdSetDepthClampEnableEXT.argtypes = [VkCommandBuffer, VkBool32]
except AttributeError:
    pass
try:
    vkCmdSetPolygonModeEXT = _libraries['FIXME_STUB'].vkCmdSetPolygonModeEXT
    vkCmdSetPolygonModeEXT.restype = None
    vkCmdSetPolygonModeEXT.argtypes = [VkCommandBuffer, VkPolygonMode]
except AttributeError:
    pass
try:
    vkCmdSetRasterizationSamplesEXT = _libraries['FIXME_STUB'].vkCmdSetRasterizationSamplesEXT
    vkCmdSetRasterizationSamplesEXT.restype = None
    vkCmdSetRasterizationSamplesEXT.argtypes = [VkCommandBuffer, VkSampleCountFlagBits]
except AttributeError:
    pass
try:
    vkCmdSetSampleMaskEXT = _libraries['FIXME_STUB'].vkCmdSetSampleMaskEXT
    vkCmdSetSampleMaskEXT.restype = None
    vkCmdSetSampleMaskEXT.argtypes = [VkCommandBuffer, VkSampleCountFlagBits, ctypes.POINTER(ctypes.c_uint32)]
except AttributeError:
    pass
try:
    vkCmdSetAlphaToCoverageEnableEXT = _libraries['FIXME_STUB'].vkCmdSetAlphaToCoverageEnableEXT
    vkCmdSetAlphaToCoverageEnableEXT.restype = None
    vkCmdSetAlphaToCoverageEnableEXT.argtypes = [VkCommandBuffer, VkBool32]
except AttributeError:
    pass
try:
    vkCmdSetAlphaToOneEnableEXT = _libraries['FIXME_STUB'].vkCmdSetAlphaToOneEnableEXT
    vkCmdSetAlphaToOneEnableEXT.restype = None
    vkCmdSetAlphaToOneEnableEXT.argtypes = [VkCommandBuffer, VkBool32]
except AttributeError:
    pass
try:
    vkCmdSetLogicOpEnableEXT = _libraries['FIXME_STUB'].vkCmdSetLogicOpEnableEXT
    vkCmdSetLogicOpEnableEXT.restype = None
    vkCmdSetLogicOpEnableEXT.argtypes = [VkCommandBuffer, VkBool32]
except AttributeError:
    pass
try:
    vkCmdSetColorBlendEnableEXT = _libraries['FIXME_STUB'].vkCmdSetColorBlendEnableEXT
    vkCmdSetColorBlendEnableEXT.restype = None
    vkCmdSetColorBlendEnableEXT.argtypes = [VkCommandBuffer, uint32_t, uint32_t, ctypes.POINTER(ctypes.c_uint32)]
except AttributeError:
    pass
try:
    vkCmdSetColorBlendEquationEXT = _libraries['FIXME_STUB'].vkCmdSetColorBlendEquationEXT
    vkCmdSetColorBlendEquationEXT.restype = None
    vkCmdSetColorBlendEquationEXT.argtypes = [VkCommandBuffer, uint32_t, uint32_t, ctypes.POINTER(struct_VkColorBlendEquationEXT)]
except AttributeError:
    pass
try:
    vkCmdSetColorWriteMaskEXT = _libraries['FIXME_STUB'].vkCmdSetColorWriteMaskEXT
    vkCmdSetColorWriteMaskEXT.restype = None
    vkCmdSetColorWriteMaskEXT.argtypes = [VkCommandBuffer, uint32_t, uint32_t, ctypes.POINTER(ctypes.c_uint32)]
except AttributeError:
    pass
try:
    vkCmdSetRasterizationStreamEXT = _libraries['FIXME_STUB'].vkCmdSetRasterizationStreamEXT
    vkCmdSetRasterizationStreamEXT.restype = None
    vkCmdSetRasterizationStreamEXT.argtypes = [VkCommandBuffer, uint32_t]
except AttributeError:
    pass
try:
    vkCmdSetConservativeRasterizationModeEXT = _libraries['FIXME_STUB'].vkCmdSetConservativeRasterizationModeEXT
    vkCmdSetConservativeRasterizationModeEXT.restype = None
    vkCmdSetConservativeRasterizationModeEXT.argtypes = [VkCommandBuffer, VkConservativeRasterizationModeEXT]
except AttributeError:
    pass
try:
    vkCmdSetExtraPrimitiveOverestimationSizeEXT = _libraries['FIXME_STUB'].vkCmdSetExtraPrimitiveOverestimationSizeEXT
    vkCmdSetExtraPrimitiveOverestimationSizeEXT.restype = None
    vkCmdSetExtraPrimitiveOverestimationSizeEXT.argtypes = [VkCommandBuffer, ctypes.c_float]
except AttributeError:
    pass
try:
    vkCmdSetDepthClipEnableEXT = _libraries['FIXME_STUB'].vkCmdSetDepthClipEnableEXT
    vkCmdSetDepthClipEnableEXT.restype = None
    vkCmdSetDepthClipEnableEXT.argtypes = [VkCommandBuffer, VkBool32]
except AttributeError:
    pass
try:
    vkCmdSetSampleLocationsEnableEXT = _libraries['FIXME_STUB'].vkCmdSetSampleLocationsEnableEXT
    vkCmdSetSampleLocationsEnableEXT.restype = None
    vkCmdSetSampleLocationsEnableEXT.argtypes = [VkCommandBuffer, VkBool32]
except AttributeError:
    pass
try:
    vkCmdSetColorBlendAdvancedEXT = _libraries['FIXME_STUB'].vkCmdSetColorBlendAdvancedEXT
    vkCmdSetColorBlendAdvancedEXT.restype = None
    vkCmdSetColorBlendAdvancedEXT.argtypes = [VkCommandBuffer, uint32_t, uint32_t, ctypes.POINTER(struct_VkColorBlendAdvancedEXT)]
except AttributeError:
    pass
try:
    vkCmdSetProvokingVertexModeEXT = _libraries['FIXME_STUB'].vkCmdSetProvokingVertexModeEXT
    vkCmdSetProvokingVertexModeEXT.restype = None
    vkCmdSetProvokingVertexModeEXT.argtypes = [VkCommandBuffer, VkProvokingVertexModeEXT]
except AttributeError:
    pass
try:
    vkCmdSetLineRasterizationModeEXT = _libraries['FIXME_STUB'].vkCmdSetLineRasterizationModeEXT
    vkCmdSetLineRasterizationModeEXT.restype = None
    vkCmdSetLineRasterizationModeEXT.argtypes = [VkCommandBuffer, VkLineRasterizationModeEXT]
except AttributeError:
    pass
try:
    vkCmdSetLineStippleEnableEXT = _libraries['FIXME_STUB'].vkCmdSetLineStippleEnableEXT
    vkCmdSetLineStippleEnableEXT.restype = None
    vkCmdSetLineStippleEnableEXT.argtypes = [VkCommandBuffer, VkBool32]
except AttributeError:
    pass
try:
    vkCmdSetDepthClipNegativeOneToOneEXT = _libraries['FIXME_STUB'].vkCmdSetDepthClipNegativeOneToOneEXT
    vkCmdSetDepthClipNegativeOneToOneEXT.restype = None
    vkCmdSetDepthClipNegativeOneToOneEXT.argtypes = [VkCommandBuffer, VkBool32]
except AttributeError:
    pass
try:
    vkCmdSetViewportWScalingEnableNV = _libraries['FIXME_STUB'].vkCmdSetViewportWScalingEnableNV
    vkCmdSetViewportWScalingEnableNV.restype = None
    vkCmdSetViewportWScalingEnableNV.argtypes = [VkCommandBuffer, VkBool32]
except AttributeError:
    pass
try:
    vkCmdSetViewportSwizzleNV = _libraries['FIXME_STUB'].vkCmdSetViewportSwizzleNV
    vkCmdSetViewportSwizzleNV.restype = None
    vkCmdSetViewportSwizzleNV.argtypes = [VkCommandBuffer, uint32_t, uint32_t, ctypes.POINTER(struct_VkViewportSwizzleNV)]
except AttributeError:
    pass
try:
    vkCmdSetCoverageToColorEnableNV = _libraries['FIXME_STUB'].vkCmdSetCoverageToColorEnableNV
    vkCmdSetCoverageToColorEnableNV.restype = None
    vkCmdSetCoverageToColorEnableNV.argtypes = [VkCommandBuffer, VkBool32]
except AttributeError:
    pass
try:
    vkCmdSetCoverageToColorLocationNV = _libraries['FIXME_STUB'].vkCmdSetCoverageToColorLocationNV
    vkCmdSetCoverageToColorLocationNV.restype = None
    vkCmdSetCoverageToColorLocationNV.argtypes = [VkCommandBuffer, uint32_t]
except AttributeError:
    pass
try:
    vkCmdSetCoverageModulationModeNV = _libraries['FIXME_STUB'].vkCmdSetCoverageModulationModeNV
    vkCmdSetCoverageModulationModeNV.restype = None
    vkCmdSetCoverageModulationModeNV.argtypes = [VkCommandBuffer, VkCoverageModulationModeNV]
except AttributeError:
    pass
try:
    vkCmdSetCoverageModulationTableEnableNV = _libraries['FIXME_STUB'].vkCmdSetCoverageModulationTableEnableNV
    vkCmdSetCoverageModulationTableEnableNV.restype = None
    vkCmdSetCoverageModulationTableEnableNV.argtypes = [VkCommandBuffer, VkBool32]
except AttributeError:
    pass
try:
    vkCmdSetCoverageModulationTableNV = _libraries['FIXME_STUB'].vkCmdSetCoverageModulationTableNV
    vkCmdSetCoverageModulationTableNV.restype = None
    vkCmdSetCoverageModulationTableNV.argtypes = [VkCommandBuffer, uint32_t, ctypes.POINTER(ctypes.c_float)]
except AttributeError:
    pass
try:
    vkCmdSetShadingRateImageEnableNV = _libraries['FIXME_STUB'].vkCmdSetShadingRateImageEnableNV
    vkCmdSetShadingRateImageEnableNV.restype = None
    vkCmdSetShadingRateImageEnableNV.argtypes = [VkCommandBuffer, VkBool32]
except AttributeError:
    pass
try:
    vkCmdSetRepresentativeFragmentTestEnableNV = _libraries['FIXME_STUB'].vkCmdSetRepresentativeFragmentTestEnableNV
    vkCmdSetRepresentativeFragmentTestEnableNV.restype = None
    vkCmdSetRepresentativeFragmentTestEnableNV.argtypes = [VkCommandBuffer, VkBool32]
except AttributeError:
    pass
try:
    vkCmdSetCoverageReductionModeNV = _libraries['FIXME_STUB'].vkCmdSetCoverageReductionModeNV
    vkCmdSetCoverageReductionModeNV.restype = None
    vkCmdSetCoverageReductionModeNV.argtypes = [VkCommandBuffer, VkCoverageReductionModeNV]
except AttributeError:
    pass

# values for enumeration 'VkSubpassMergeStatusEXT'
VkSubpassMergeStatusEXT__enumvalues = {
    0: 'VK_SUBPASS_MERGE_STATUS_MERGED_EXT',
    1: 'VK_SUBPASS_MERGE_STATUS_DISALLOWED_EXT',
    2: 'VK_SUBPASS_MERGE_STATUS_NOT_MERGED_SIDE_EFFECTS_EXT',
    3: 'VK_SUBPASS_MERGE_STATUS_NOT_MERGED_SAMPLES_MISMATCH_EXT',
    4: 'VK_SUBPASS_MERGE_STATUS_NOT_MERGED_VIEWS_MISMATCH_EXT',
    5: 'VK_SUBPASS_MERGE_STATUS_NOT_MERGED_ALIASING_EXT',
    6: 'VK_SUBPASS_MERGE_STATUS_NOT_MERGED_DEPENDENCIES_EXT',
    7: 'VK_SUBPASS_MERGE_STATUS_NOT_MERGED_INCOMPATIBLE_INPUT_ATTACHMENT_EXT',
    8: 'VK_SUBPASS_MERGE_STATUS_NOT_MERGED_TOO_MANY_ATTACHMENTS_EXT',
    9: 'VK_SUBPASS_MERGE_STATUS_NOT_MERGED_INSUFFICIENT_STORAGE_EXT',
    10: 'VK_SUBPASS_MERGE_STATUS_NOT_MERGED_DEPTH_STENCIL_COUNT_EXT',
    11: 'VK_SUBPASS_MERGE_STATUS_NOT_MERGED_RESOLVE_ATTACHMENT_REUSE_EXT',
    12: 'VK_SUBPASS_MERGE_STATUS_NOT_MERGED_SINGLE_SUBPASS_EXT',
    13: 'VK_SUBPASS_MERGE_STATUS_NOT_MERGED_UNSPECIFIED_EXT',
    2147483647: 'VK_SUBPASS_MERGE_STATUS_MAX_ENUM_EXT',
}
VK_SUBPASS_MERGE_STATUS_MERGED_EXT = 0
VK_SUBPASS_MERGE_STATUS_DISALLOWED_EXT = 1
VK_SUBPASS_MERGE_STATUS_NOT_MERGED_SIDE_EFFECTS_EXT = 2
VK_SUBPASS_MERGE_STATUS_NOT_MERGED_SAMPLES_MISMATCH_EXT = 3
VK_SUBPASS_MERGE_STATUS_NOT_MERGED_VIEWS_MISMATCH_EXT = 4
VK_SUBPASS_MERGE_STATUS_NOT_MERGED_ALIASING_EXT = 5
VK_SUBPASS_MERGE_STATUS_NOT_MERGED_DEPENDENCIES_EXT = 6
VK_SUBPASS_MERGE_STATUS_NOT_MERGED_INCOMPATIBLE_INPUT_ATTACHMENT_EXT = 7
VK_SUBPASS_MERGE_STATUS_NOT_MERGED_TOO_MANY_ATTACHMENTS_EXT = 8
VK_SUBPASS_MERGE_STATUS_NOT_MERGED_INSUFFICIENT_STORAGE_EXT = 9
VK_SUBPASS_MERGE_STATUS_NOT_MERGED_DEPTH_STENCIL_COUNT_EXT = 10
VK_SUBPASS_MERGE_STATUS_NOT_MERGED_RESOLVE_ATTACHMENT_REUSE_EXT = 11
VK_SUBPASS_MERGE_STATUS_NOT_MERGED_SINGLE_SUBPASS_EXT = 12
VK_SUBPASS_MERGE_STATUS_NOT_MERGED_UNSPECIFIED_EXT = 13
VK_SUBPASS_MERGE_STATUS_MAX_ENUM_EXT = 2147483647
VkSubpassMergeStatusEXT = ctypes.c_uint32 # enum
class struct_VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT(Structure):
    pass

struct_VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT._pack_ = 1 # source:False
struct_VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('subpassMergeFeedback', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT = struct_VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT
class struct_VkRenderPassCreationControlEXT(Structure):
    pass

struct_VkRenderPassCreationControlEXT._pack_ = 1 # source:False
struct_VkRenderPassCreationControlEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('disallowMerging', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkRenderPassCreationControlEXT = struct_VkRenderPassCreationControlEXT
class struct_VkRenderPassCreationFeedbackInfoEXT(Structure):
    pass

struct_VkRenderPassCreationFeedbackInfoEXT._pack_ = 1 # source:False
struct_VkRenderPassCreationFeedbackInfoEXT._fields_ = [
    ('postMergeSubpassCount', ctypes.c_uint32),
]

VkRenderPassCreationFeedbackInfoEXT = struct_VkRenderPassCreationFeedbackInfoEXT
class struct_VkRenderPassCreationFeedbackCreateInfoEXT(Structure):
    pass

struct_VkRenderPassCreationFeedbackCreateInfoEXT._pack_ = 1 # source:False
struct_VkRenderPassCreationFeedbackCreateInfoEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('pRenderPassFeedback', ctypes.POINTER(struct_VkRenderPassCreationFeedbackInfoEXT)),
]

VkRenderPassCreationFeedbackCreateInfoEXT = struct_VkRenderPassCreationFeedbackCreateInfoEXT
class struct_VkRenderPassSubpassFeedbackInfoEXT(Structure):
    pass

struct_VkRenderPassSubpassFeedbackInfoEXT._pack_ = 1 # source:False
struct_VkRenderPassSubpassFeedbackInfoEXT._fields_ = [
    ('subpassMergeStatus', VkSubpassMergeStatusEXT),
    ('description', ctypes.c_char * 256),
    ('postMergeIndex', ctypes.c_uint32),
]

VkRenderPassSubpassFeedbackInfoEXT = struct_VkRenderPassSubpassFeedbackInfoEXT
class struct_VkRenderPassSubpassFeedbackCreateInfoEXT(Structure):
    pass

struct_VkRenderPassSubpassFeedbackCreateInfoEXT._pack_ = 1 # source:False
struct_VkRenderPassSubpassFeedbackCreateInfoEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('pSubpassFeedback', ctypes.POINTER(struct_VkRenderPassSubpassFeedbackInfoEXT)),
]

VkRenderPassSubpassFeedbackCreateInfoEXT = struct_VkRenderPassSubpassFeedbackCreateInfoEXT

# values for enumeration 'VkDirectDriverLoadingModeLUNARG'
VkDirectDriverLoadingModeLUNARG__enumvalues = {
    0: 'VK_DIRECT_DRIVER_LOADING_MODE_EXCLUSIVE_LUNARG',
    1: 'VK_DIRECT_DRIVER_LOADING_MODE_INCLUSIVE_LUNARG',
    2147483647: 'VK_DIRECT_DRIVER_LOADING_MODE_MAX_ENUM_LUNARG',
}
VK_DIRECT_DRIVER_LOADING_MODE_EXCLUSIVE_LUNARG = 0
VK_DIRECT_DRIVER_LOADING_MODE_INCLUSIVE_LUNARG = 1
VK_DIRECT_DRIVER_LOADING_MODE_MAX_ENUM_LUNARG = 2147483647
VkDirectDriverLoadingModeLUNARG = ctypes.c_uint32 # enum
VkDirectDriverLoadingFlagsLUNARG = ctypes.c_uint32
PFN_vkGetInstanceProcAddrLUNARG = ctypes.CFUNCTYPE(ctypes.CFUNCTYPE(None), ctypes.POINTER(struct_VkInstance_T), ctypes.POINTER(ctypes.c_char))
class struct_VkDirectDriverLoadingInfoLUNARG(Structure):
    pass

struct_VkDirectDriverLoadingInfoLUNARG._pack_ = 1 # source:False
struct_VkDirectDriverLoadingInfoLUNARG._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('flags', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('pfnGetInstanceProcAddr', ctypes.CFUNCTYPE(ctypes.CFUNCTYPE(None), ctypes.POINTER(struct_VkInstance_T), ctypes.POINTER(ctypes.c_char))),
]

VkDirectDriverLoadingInfoLUNARG = struct_VkDirectDriverLoadingInfoLUNARG
class struct_VkDirectDriverLoadingListLUNARG(Structure):
    pass

struct_VkDirectDriverLoadingListLUNARG._pack_ = 1 # source:False
struct_VkDirectDriverLoadingListLUNARG._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('mode', VkDirectDriverLoadingModeLUNARG),
    ('driverCount', ctypes.c_uint32),
    ('pDrivers', ctypes.POINTER(struct_VkDirectDriverLoadingInfoLUNARG)),
]

VkDirectDriverLoadingListLUNARG = struct_VkDirectDriverLoadingListLUNARG
class struct_VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT(Structure):
    pass

struct_VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT._pack_ = 1 # source:False
struct_VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('shaderModuleIdentifier', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT = struct_VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT
class struct_VkPhysicalDeviceShaderModuleIdentifierPropertiesEXT(Structure):
    pass

struct_VkPhysicalDeviceShaderModuleIdentifierPropertiesEXT._pack_ = 1 # source:False
struct_VkPhysicalDeviceShaderModuleIdentifierPropertiesEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('shaderModuleIdentifierAlgorithmUUID', ctypes.c_ubyte * 16),
]

VkPhysicalDeviceShaderModuleIdentifierPropertiesEXT = struct_VkPhysicalDeviceShaderModuleIdentifierPropertiesEXT
class struct_VkPipelineShaderStageModuleIdentifierCreateInfoEXT(Structure):
    pass

struct_VkPipelineShaderStageModuleIdentifierCreateInfoEXT._pack_ = 1 # source:False
struct_VkPipelineShaderStageModuleIdentifierCreateInfoEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('identifierSize', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('pIdentifier', ctypes.POINTER(ctypes.c_ubyte)),
]

VkPipelineShaderStageModuleIdentifierCreateInfoEXT = struct_VkPipelineShaderStageModuleIdentifierCreateInfoEXT
class struct_VkShaderModuleIdentifierEXT(Structure):
    pass

struct_VkShaderModuleIdentifierEXT._pack_ = 1 # source:False
struct_VkShaderModuleIdentifierEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('identifierSize', ctypes.c_uint32),
    ('identifier', ctypes.c_ubyte * 32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkShaderModuleIdentifierEXT = struct_VkShaderModuleIdentifierEXT
PFN_vkGetShaderModuleIdentifierEXT = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkShaderModule_T), ctypes.POINTER(struct_VkShaderModuleIdentifierEXT))
PFN_vkGetShaderModuleCreateInfoIdentifierEXT = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkShaderModuleCreateInfo), ctypes.POINTER(struct_VkShaderModuleIdentifierEXT))
try:
    vkGetShaderModuleIdentifierEXT = _libraries['FIXME_STUB'].vkGetShaderModuleIdentifierEXT
    vkGetShaderModuleIdentifierEXT.restype = None
    vkGetShaderModuleIdentifierEXT.argtypes = [VkDevice, VkShaderModule, ctypes.POINTER(struct_VkShaderModuleIdentifierEXT)]
except AttributeError:
    pass
try:
    vkGetShaderModuleCreateInfoIdentifierEXT = _libraries['FIXME_STUB'].vkGetShaderModuleCreateInfoIdentifierEXT
    vkGetShaderModuleCreateInfoIdentifierEXT.restype = None
    vkGetShaderModuleCreateInfoIdentifierEXT.argtypes = [VkDevice, ctypes.POINTER(struct_VkShaderModuleCreateInfo), ctypes.POINTER(struct_VkShaderModuleIdentifierEXT)]
except AttributeError:
    pass
class struct_VkOpticalFlowSessionNV_T(Structure):
    pass

VkOpticalFlowSessionNV = ctypes.POINTER(struct_VkOpticalFlowSessionNV_T)

# values for enumeration 'VkOpticalFlowPerformanceLevelNV'
VkOpticalFlowPerformanceLevelNV__enumvalues = {
    0: 'VK_OPTICAL_FLOW_PERFORMANCE_LEVEL_UNKNOWN_NV',
    1: 'VK_OPTICAL_FLOW_PERFORMANCE_LEVEL_SLOW_NV',
    2: 'VK_OPTICAL_FLOW_PERFORMANCE_LEVEL_MEDIUM_NV',
    3: 'VK_OPTICAL_FLOW_PERFORMANCE_LEVEL_FAST_NV',
    2147483647: 'VK_OPTICAL_FLOW_PERFORMANCE_LEVEL_MAX_ENUM_NV',
}
VK_OPTICAL_FLOW_PERFORMANCE_LEVEL_UNKNOWN_NV = 0
VK_OPTICAL_FLOW_PERFORMANCE_LEVEL_SLOW_NV = 1
VK_OPTICAL_FLOW_PERFORMANCE_LEVEL_MEDIUM_NV = 2
VK_OPTICAL_FLOW_PERFORMANCE_LEVEL_FAST_NV = 3
VK_OPTICAL_FLOW_PERFORMANCE_LEVEL_MAX_ENUM_NV = 2147483647
VkOpticalFlowPerformanceLevelNV = ctypes.c_uint32 # enum

# values for enumeration 'VkOpticalFlowSessionBindingPointNV'
VkOpticalFlowSessionBindingPointNV__enumvalues = {
    0: 'VK_OPTICAL_FLOW_SESSION_BINDING_POINT_UNKNOWN_NV',
    1: 'VK_OPTICAL_FLOW_SESSION_BINDING_POINT_INPUT_NV',
    2: 'VK_OPTICAL_FLOW_SESSION_BINDING_POINT_REFERENCE_NV',
    3: 'VK_OPTICAL_FLOW_SESSION_BINDING_POINT_HINT_NV',
    4: 'VK_OPTICAL_FLOW_SESSION_BINDING_POINT_FLOW_VECTOR_NV',
    5: 'VK_OPTICAL_FLOW_SESSION_BINDING_POINT_BACKWARD_FLOW_VECTOR_NV',
    6: 'VK_OPTICAL_FLOW_SESSION_BINDING_POINT_COST_NV',
    7: 'VK_OPTICAL_FLOW_SESSION_BINDING_POINT_BACKWARD_COST_NV',
    8: 'VK_OPTICAL_FLOW_SESSION_BINDING_POINT_GLOBAL_FLOW_NV',
    2147483647: 'VK_OPTICAL_FLOW_SESSION_BINDING_POINT_MAX_ENUM_NV',
}
VK_OPTICAL_FLOW_SESSION_BINDING_POINT_UNKNOWN_NV = 0
VK_OPTICAL_FLOW_SESSION_BINDING_POINT_INPUT_NV = 1
VK_OPTICAL_FLOW_SESSION_BINDING_POINT_REFERENCE_NV = 2
VK_OPTICAL_FLOW_SESSION_BINDING_POINT_HINT_NV = 3
VK_OPTICAL_FLOW_SESSION_BINDING_POINT_FLOW_VECTOR_NV = 4
VK_OPTICAL_FLOW_SESSION_BINDING_POINT_BACKWARD_FLOW_VECTOR_NV = 5
VK_OPTICAL_FLOW_SESSION_BINDING_POINT_COST_NV = 6
VK_OPTICAL_FLOW_SESSION_BINDING_POINT_BACKWARD_COST_NV = 7
VK_OPTICAL_FLOW_SESSION_BINDING_POINT_GLOBAL_FLOW_NV = 8
VK_OPTICAL_FLOW_SESSION_BINDING_POINT_MAX_ENUM_NV = 2147483647
VkOpticalFlowSessionBindingPointNV = ctypes.c_uint32 # enum

# values for enumeration 'VkOpticalFlowGridSizeFlagBitsNV'
VkOpticalFlowGridSizeFlagBitsNV__enumvalues = {
    0: 'VK_OPTICAL_FLOW_GRID_SIZE_UNKNOWN_NV',
    1: 'VK_OPTICAL_FLOW_GRID_SIZE_1X1_BIT_NV',
    2: 'VK_OPTICAL_FLOW_GRID_SIZE_2X2_BIT_NV',
    4: 'VK_OPTICAL_FLOW_GRID_SIZE_4X4_BIT_NV',
    8: 'VK_OPTICAL_FLOW_GRID_SIZE_8X8_BIT_NV',
    2147483647: 'VK_OPTICAL_FLOW_GRID_SIZE_FLAG_BITS_MAX_ENUM_NV',
}
VK_OPTICAL_FLOW_GRID_SIZE_UNKNOWN_NV = 0
VK_OPTICAL_FLOW_GRID_SIZE_1X1_BIT_NV = 1
VK_OPTICAL_FLOW_GRID_SIZE_2X2_BIT_NV = 2
VK_OPTICAL_FLOW_GRID_SIZE_4X4_BIT_NV = 4
VK_OPTICAL_FLOW_GRID_SIZE_8X8_BIT_NV = 8
VK_OPTICAL_FLOW_GRID_SIZE_FLAG_BITS_MAX_ENUM_NV = 2147483647
VkOpticalFlowGridSizeFlagBitsNV = ctypes.c_uint32 # enum
VkOpticalFlowGridSizeFlagsNV = ctypes.c_uint32

# values for enumeration 'VkOpticalFlowUsageFlagBitsNV'
VkOpticalFlowUsageFlagBitsNV__enumvalues = {
    0: 'VK_OPTICAL_FLOW_USAGE_UNKNOWN_NV',
    1: 'VK_OPTICAL_FLOW_USAGE_INPUT_BIT_NV',
    2: 'VK_OPTICAL_FLOW_USAGE_OUTPUT_BIT_NV',
    4: 'VK_OPTICAL_FLOW_USAGE_HINT_BIT_NV',
    8: 'VK_OPTICAL_FLOW_USAGE_COST_BIT_NV',
    16: 'VK_OPTICAL_FLOW_USAGE_GLOBAL_FLOW_BIT_NV',
    2147483647: 'VK_OPTICAL_FLOW_USAGE_FLAG_BITS_MAX_ENUM_NV',
}
VK_OPTICAL_FLOW_USAGE_UNKNOWN_NV = 0
VK_OPTICAL_FLOW_USAGE_INPUT_BIT_NV = 1
VK_OPTICAL_FLOW_USAGE_OUTPUT_BIT_NV = 2
VK_OPTICAL_FLOW_USAGE_HINT_BIT_NV = 4
VK_OPTICAL_FLOW_USAGE_COST_BIT_NV = 8
VK_OPTICAL_FLOW_USAGE_GLOBAL_FLOW_BIT_NV = 16
VK_OPTICAL_FLOW_USAGE_FLAG_BITS_MAX_ENUM_NV = 2147483647
VkOpticalFlowUsageFlagBitsNV = ctypes.c_uint32 # enum
VkOpticalFlowUsageFlagsNV = ctypes.c_uint32

# values for enumeration 'VkOpticalFlowSessionCreateFlagBitsNV'
VkOpticalFlowSessionCreateFlagBitsNV__enumvalues = {
    1: 'VK_OPTICAL_FLOW_SESSION_CREATE_ENABLE_HINT_BIT_NV',
    2: 'VK_OPTICAL_FLOW_SESSION_CREATE_ENABLE_COST_BIT_NV',
    4: 'VK_OPTICAL_FLOW_SESSION_CREATE_ENABLE_GLOBAL_FLOW_BIT_NV',
    8: 'VK_OPTICAL_FLOW_SESSION_CREATE_ALLOW_REGIONS_BIT_NV',
    16: 'VK_OPTICAL_FLOW_SESSION_CREATE_BOTH_DIRECTIONS_BIT_NV',
    2147483647: 'VK_OPTICAL_FLOW_SESSION_CREATE_FLAG_BITS_MAX_ENUM_NV',
}
VK_OPTICAL_FLOW_SESSION_CREATE_ENABLE_HINT_BIT_NV = 1
VK_OPTICAL_FLOW_SESSION_CREATE_ENABLE_COST_BIT_NV = 2
VK_OPTICAL_FLOW_SESSION_CREATE_ENABLE_GLOBAL_FLOW_BIT_NV = 4
VK_OPTICAL_FLOW_SESSION_CREATE_ALLOW_REGIONS_BIT_NV = 8
VK_OPTICAL_FLOW_SESSION_CREATE_BOTH_DIRECTIONS_BIT_NV = 16
VK_OPTICAL_FLOW_SESSION_CREATE_FLAG_BITS_MAX_ENUM_NV = 2147483647
VkOpticalFlowSessionCreateFlagBitsNV = ctypes.c_uint32 # enum
VkOpticalFlowSessionCreateFlagsNV = ctypes.c_uint32

# values for enumeration 'VkOpticalFlowExecuteFlagBitsNV'
VkOpticalFlowExecuteFlagBitsNV__enumvalues = {
    1: 'VK_OPTICAL_FLOW_EXECUTE_DISABLE_TEMPORAL_HINTS_BIT_NV',
    2147483647: 'VK_OPTICAL_FLOW_EXECUTE_FLAG_BITS_MAX_ENUM_NV',
}
VK_OPTICAL_FLOW_EXECUTE_DISABLE_TEMPORAL_HINTS_BIT_NV = 1
VK_OPTICAL_FLOW_EXECUTE_FLAG_BITS_MAX_ENUM_NV = 2147483647
VkOpticalFlowExecuteFlagBitsNV = ctypes.c_uint32 # enum
VkOpticalFlowExecuteFlagsNV = ctypes.c_uint32
class struct_VkPhysicalDeviceOpticalFlowFeaturesNV(Structure):
    pass

struct_VkPhysicalDeviceOpticalFlowFeaturesNV._pack_ = 1 # source:False
struct_VkPhysicalDeviceOpticalFlowFeaturesNV._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('opticalFlow', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPhysicalDeviceOpticalFlowFeaturesNV = struct_VkPhysicalDeviceOpticalFlowFeaturesNV
class struct_VkPhysicalDeviceOpticalFlowPropertiesNV(Structure):
    pass

struct_VkPhysicalDeviceOpticalFlowPropertiesNV._pack_ = 1 # source:False
struct_VkPhysicalDeviceOpticalFlowPropertiesNV._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('supportedOutputGridSizes', ctypes.c_uint32),
    ('supportedHintGridSizes', ctypes.c_uint32),
    ('hintSupported', ctypes.c_uint32),
    ('costSupported', ctypes.c_uint32),
    ('bidirectionalFlowSupported', ctypes.c_uint32),
    ('globalFlowSupported', ctypes.c_uint32),
    ('minWidth', ctypes.c_uint32),
    ('minHeight', ctypes.c_uint32),
    ('maxWidth', ctypes.c_uint32),
    ('maxHeight', ctypes.c_uint32),
    ('maxNumRegionsOfInterest', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPhysicalDeviceOpticalFlowPropertiesNV = struct_VkPhysicalDeviceOpticalFlowPropertiesNV
class struct_VkOpticalFlowImageFormatInfoNV(Structure):
    pass

struct_VkOpticalFlowImageFormatInfoNV._pack_ = 1 # source:False
struct_VkOpticalFlowImageFormatInfoNV._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('usage', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkOpticalFlowImageFormatInfoNV = struct_VkOpticalFlowImageFormatInfoNV
class struct_VkOpticalFlowImageFormatPropertiesNV(Structure):
    pass

struct_VkOpticalFlowImageFormatPropertiesNV._pack_ = 1 # source:False
struct_VkOpticalFlowImageFormatPropertiesNV._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('format', VkFormat),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkOpticalFlowImageFormatPropertiesNV = struct_VkOpticalFlowImageFormatPropertiesNV
class struct_VkOpticalFlowSessionCreateInfoNV(Structure):
    pass

struct_VkOpticalFlowSessionCreateInfoNV._pack_ = 1 # source:False
struct_VkOpticalFlowSessionCreateInfoNV._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('width', ctypes.c_uint32),
    ('height', ctypes.c_uint32),
    ('imageFormat', VkFormat),
    ('flowVectorFormat', VkFormat),
    ('costFormat', VkFormat),
    ('outputGridSize', ctypes.c_uint32),
    ('hintGridSize', ctypes.c_uint32),
    ('performanceLevel', VkOpticalFlowPerformanceLevelNV),
    ('flags', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkOpticalFlowSessionCreateInfoNV = struct_VkOpticalFlowSessionCreateInfoNV
class struct_VkOpticalFlowSessionCreatePrivateDataInfoNV(Structure):
    pass

struct_VkOpticalFlowSessionCreatePrivateDataInfoNV._pack_ = 1 # source:False
struct_VkOpticalFlowSessionCreatePrivateDataInfoNV._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('id', ctypes.c_uint32),
    ('size', ctypes.c_uint32),
    ('pPrivateData', ctypes.POINTER(None)),
]

VkOpticalFlowSessionCreatePrivateDataInfoNV = struct_VkOpticalFlowSessionCreatePrivateDataInfoNV
class struct_VkOpticalFlowExecuteInfoNV(Structure):
    pass

struct_VkOpticalFlowExecuteInfoNV._pack_ = 1 # source:False
struct_VkOpticalFlowExecuteInfoNV._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('flags', ctypes.c_uint32),
    ('regionCount', ctypes.c_uint32),
    ('pRegions', ctypes.POINTER(struct_VkRect2D)),
]

VkOpticalFlowExecuteInfoNV = struct_VkOpticalFlowExecuteInfoNV
PFN_vkGetPhysicalDeviceOpticalFlowImageFormatsNV = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkPhysicalDevice_T), ctypes.POINTER(struct_VkOpticalFlowImageFormatInfoNV), ctypes.POINTER(ctypes.c_uint32), ctypes.POINTER(struct_VkOpticalFlowImageFormatPropertiesNV))
PFN_vkCreateOpticalFlowSessionNV = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkOpticalFlowSessionCreateInfoNV), ctypes.POINTER(struct_VkAllocationCallbacks), ctypes.POINTER(ctypes.POINTER(struct_VkOpticalFlowSessionNV_T)))
PFN_vkDestroyOpticalFlowSessionNV = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkOpticalFlowSessionNV_T), ctypes.POINTER(struct_VkAllocationCallbacks))
PFN_vkBindOpticalFlowSessionImageNV = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkOpticalFlowSessionNV_T), VkOpticalFlowSessionBindingPointNV, ctypes.POINTER(struct_VkImageView_T), VkImageLayout)
PFN_vkCmdOpticalFlowExecuteNV = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.POINTER(struct_VkOpticalFlowSessionNV_T), ctypes.POINTER(struct_VkOpticalFlowExecuteInfoNV))
try:
    vkGetPhysicalDeviceOpticalFlowImageFormatsNV = _libraries['FIXME_STUB'].vkGetPhysicalDeviceOpticalFlowImageFormatsNV
    vkGetPhysicalDeviceOpticalFlowImageFormatsNV.restype = VkResult
    vkGetPhysicalDeviceOpticalFlowImageFormatsNV.argtypes = [VkPhysicalDevice, ctypes.POINTER(struct_VkOpticalFlowImageFormatInfoNV), ctypes.POINTER(ctypes.c_uint32), ctypes.POINTER(struct_VkOpticalFlowImageFormatPropertiesNV)]
except AttributeError:
    pass
try:
    vkCreateOpticalFlowSessionNV = _libraries['FIXME_STUB'].vkCreateOpticalFlowSessionNV
    vkCreateOpticalFlowSessionNV.restype = VkResult
    vkCreateOpticalFlowSessionNV.argtypes = [VkDevice, ctypes.POINTER(struct_VkOpticalFlowSessionCreateInfoNV), ctypes.POINTER(struct_VkAllocationCallbacks), ctypes.POINTER(ctypes.POINTER(struct_VkOpticalFlowSessionNV_T))]
except AttributeError:
    pass
try:
    vkDestroyOpticalFlowSessionNV = _libraries['FIXME_STUB'].vkDestroyOpticalFlowSessionNV
    vkDestroyOpticalFlowSessionNV.restype = None
    vkDestroyOpticalFlowSessionNV.argtypes = [VkDevice, VkOpticalFlowSessionNV, ctypes.POINTER(struct_VkAllocationCallbacks)]
except AttributeError:
    pass
try:
    vkBindOpticalFlowSessionImageNV = _libraries['FIXME_STUB'].vkBindOpticalFlowSessionImageNV
    vkBindOpticalFlowSessionImageNV.restype = VkResult
    vkBindOpticalFlowSessionImageNV.argtypes = [VkDevice, VkOpticalFlowSessionNV, VkOpticalFlowSessionBindingPointNV, VkImageView, VkImageLayout]
except AttributeError:
    pass
try:
    vkCmdOpticalFlowExecuteNV = _libraries['FIXME_STUB'].vkCmdOpticalFlowExecuteNV
    vkCmdOpticalFlowExecuteNV.restype = None
    vkCmdOpticalFlowExecuteNV.argtypes = [VkCommandBuffer, VkOpticalFlowSessionNV, ctypes.POINTER(struct_VkOpticalFlowExecuteInfoNV)]
except AttributeError:
    pass
class struct_VkPhysicalDeviceLegacyDitheringFeaturesEXT(Structure):
    pass

struct_VkPhysicalDeviceLegacyDitheringFeaturesEXT._pack_ = 1 # source:False
struct_VkPhysicalDeviceLegacyDitheringFeaturesEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('legacyDithering', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPhysicalDeviceLegacyDitheringFeaturesEXT = struct_VkPhysicalDeviceLegacyDitheringFeaturesEXT
class struct_VkPhysicalDevicePipelineProtectedAccessFeaturesEXT(Structure):
    pass

struct_VkPhysicalDevicePipelineProtectedAccessFeaturesEXT._pack_ = 1 # source:False
struct_VkPhysicalDevicePipelineProtectedAccessFeaturesEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('pipelineProtectedAccess', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPhysicalDevicePipelineProtectedAccessFeaturesEXT = struct_VkPhysicalDevicePipelineProtectedAccessFeaturesEXT
class struct_VkShaderEXT_T(Structure):
    pass

VkShaderEXT = ctypes.POINTER(struct_VkShaderEXT_T)

# values for enumeration 'VkShaderCodeTypeEXT'
VkShaderCodeTypeEXT__enumvalues = {
    0: 'VK_SHADER_CODE_TYPE_BINARY_EXT',
    1: 'VK_SHADER_CODE_TYPE_SPIRV_EXT',
    2147483647: 'VK_SHADER_CODE_TYPE_MAX_ENUM_EXT',
}
VK_SHADER_CODE_TYPE_BINARY_EXT = 0
VK_SHADER_CODE_TYPE_SPIRV_EXT = 1
VK_SHADER_CODE_TYPE_MAX_ENUM_EXT = 2147483647
VkShaderCodeTypeEXT = ctypes.c_uint32 # enum

# values for enumeration 'VkShaderCreateFlagBitsEXT'
VkShaderCreateFlagBitsEXT__enumvalues = {
    1: 'VK_SHADER_CREATE_LINK_STAGE_BIT_EXT',
    2: 'VK_SHADER_CREATE_ALLOW_VARYING_SUBGROUP_SIZE_BIT_EXT',
    4: 'VK_SHADER_CREATE_REQUIRE_FULL_SUBGROUPS_BIT_EXT',
    8: 'VK_SHADER_CREATE_NO_TASK_SHADER_BIT_EXT',
    16: 'VK_SHADER_CREATE_DISPATCH_BASE_BIT_EXT',
    32: 'VK_SHADER_CREATE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_EXT',
    64: 'VK_SHADER_CREATE_FRAGMENT_DENSITY_MAP_ATTACHMENT_BIT_EXT',
    2147483647: 'VK_SHADER_CREATE_FLAG_BITS_MAX_ENUM_EXT',
}
VK_SHADER_CREATE_LINK_STAGE_BIT_EXT = 1
VK_SHADER_CREATE_ALLOW_VARYING_SUBGROUP_SIZE_BIT_EXT = 2
VK_SHADER_CREATE_REQUIRE_FULL_SUBGROUPS_BIT_EXT = 4
VK_SHADER_CREATE_NO_TASK_SHADER_BIT_EXT = 8
VK_SHADER_CREATE_DISPATCH_BASE_BIT_EXT = 16
VK_SHADER_CREATE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_EXT = 32
VK_SHADER_CREATE_FRAGMENT_DENSITY_MAP_ATTACHMENT_BIT_EXT = 64
VK_SHADER_CREATE_FLAG_BITS_MAX_ENUM_EXT = 2147483647
VkShaderCreateFlagBitsEXT = ctypes.c_uint32 # enum
VkShaderCreateFlagsEXT = ctypes.c_uint32
class struct_VkPhysicalDeviceShaderObjectFeaturesEXT(Structure):
    pass

struct_VkPhysicalDeviceShaderObjectFeaturesEXT._pack_ = 1 # source:False
struct_VkPhysicalDeviceShaderObjectFeaturesEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('shaderObject', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPhysicalDeviceShaderObjectFeaturesEXT = struct_VkPhysicalDeviceShaderObjectFeaturesEXT
class struct_VkPhysicalDeviceShaderObjectPropertiesEXT(Structure):
    pass

struct_VkPhysicalDeviceShaderObjectPropertiesEXT._pack_ = 1 # source:False
struct_VkPhysicalDeviceShaderObjectPropertiesEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('shaderBinaryUUID', ctypes.c_ubyte * 16),
    ('shaderBinaryVersion', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPhysicalDeviceShaderObjectPropertiesEXT = struct_VkPhysicalDeviceShaderObjectPropertiesEXT
class struct_VkShaderCreateInfoEXT(Structure):
    pass

struct_VkShaderCreateInfoEXT._pack_ = 1 # source:False
struct_VkShaderCreateInfoEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('flags', ctypes.c_uint32),
    ('stage', VkShaderStageFlagBits),
    ('nextStage', ctypes.c_uint32),
    ('codeType', VkShaderCodeTypeEXT),
    ('codeSize', ctypes.c_uint64),
    ('pCode', ctypes.POINTER(None)),
    ('pName', ctypes.POINTER(ctypes.c_char)),
    ('setLayoutCount', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('pSetLayouts', ctypes.POINTER(ctypes.POINTER(struct_VkDescriptorSetLayout_T))),
    ('pushConstantRangeCount', ctypes.c_uint32),
    ('PADDING_2', ctypes.c_ubyte * 4),
    ('pPushConstantRanges', ctypes.POINTER(struct_VkPushConstantRange)),
    ('pSpecializationInfo', ctypes.POINTER(struct_VkSpecializationInfo)),
]

VkShaderCreateInfoEXT = struct_VkShaderCreateInfoEXT
VkShaderRequiredSubgroupSizeCreateInfoEXT = struct_VkPipelineShaderStageRequiredSubgroupSizeCreateInfo
PFN_vkCreateShadersEXT = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkDevice_T), ctypes.c_uint32, ctypes.POINTER(struct_VkShaderCreateInfoEXT), ctypes.POINTER(struct_VkAllocationCallbacks), ctypes.POINTER(ctypes.POINTER(struct_VkShaderEXT_T)))
PFN_vkDestroyShaderEXT = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkShaderEXT_T), ctypes.POINTER(struct_VkAllocationCallbacks))
PFN_vkGetShaderBinaryDataEXT = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkShaderEXT_T), ctypes.POINTER(ctypes.c_uint64), ctypes.POINTER(None))
PFN_vkCmdBindShadersEXT = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.c_uint32, ctypes.POINTER(VkShaderStageFlagBits), ctypes.POINTER(ctypes.POINTER(struct_VkShaderEXT_T)))
try:
    vkCreateShadersEXT = _libraries['FIXME_STUB'].vkCreateShadersEXT
    vkCreateShadersEXT.restype = VkResult
    vkCreateShadersEXT.argtypes = [VkDevice, uint32_t, ctypes.POINTER(struct_VkShaderCreateInfoEXT), ctypes.POINTER(struct_VkAllocationCallbacks), ctypes.POINTER(ctypes.POINTER(struct_VkShaderEXT_T))]
except AttributeError:
    pass
try:
    vkDestroyShaderEXT = _libraries['FIXME_STUB'].vkDestroyShaderEXT
    vkDestroyShaderEXT.restype = None
    vkDestroyShaderEXT.argtypes = [VkDevice, VkShaderEXT, ctypes.POINTER(struct_VkAllocationCallbacks)]
except AttributeError:
    pass
try:
    vkGetShaderBinaryDataEXT = _libraries['FIXME_STUB'].vkGetShaderBinaryDataEXT
    vkGetShaderBinaryDataEXT.restype = VkResult
    vkGetShaderBinaryDataEXT.argtypes = [VkDevice, VkShaderEXT, ctypes.POINTER(ctypes.c_uint64), ctypes.POINTER(None)]
except AttributeError:
    pass
try:
    vkCmdBindShadersEXT = _libraries['FIXME_STUB'].vkCmdBindShadersEXT
    vkCmdBindShadersEXT.restype = None
    vkCmdBindShadersEXT.argtypes = [VkCommandBuffer, uint32_t, ctypes.POINTER(VkShaderStageFlagBits), ctypes.POINTER(ctypes.POINTER(struct_VkShaderEXT_T))]
except AttributeError:
    pass
class struct_VkPhysicalDeviceTilePropertiesFeaturesQCOM(Structure):
    pass

struct_VkPhysicalDeviceTilePropertiesFeaturesQCOM._pack_ = 1 # source:False
struct_VkPhysicalDeviceTilePropertiesFeaturesQCOM._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('tileProperties', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPhysicalDeviceTilePropertiesFeaturesQCOM = struct_VkPhysicalDeviceTilePropertiesFeaturesQCOM
class struct_VkTilePropertiesQCOM(Structure):
    pass

struct_VkTilePropertiesQCOM._pack_ = 1 # source:False
struct_VkTilePropertiesQCOM._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('tileSize', VkExtent3D),
    ('apronSize', VkExtent2D),
    ('origin', VkOffset2D),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkTilePropertiesQCOM = struct_VkTilePropertiesQCOM
PFN_vkGetFramebufferTilePropertiesQCOM = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkFramebuffer_T), ctypes.POINTER(ctypes.c_uint32), ctypes.POINTER(struct_VkTilePropertiesQCOM))
PFN_vkGetDynamicRenderingTilePropertiesQCOM = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkRenderingInfo), ctypes.POINTER(struct_VkTilePropertiesQCOM))
try:
    vkGetFramebufferTilePropertiesQCOM = _libraries['FIXME_STUB'].vkGetFramebufferTilePropertiesQCOM
    vkGetFramebufferTilePropertiesQCOM.restype = VkResult
    vkGetFramebufferTilePropertiesQCOM.argtypes = [VkDevice, VkFramebuffer, ctypes.POINTER(ctypes.c_uint32), ctypes.POINTER(struct_VkTilePropertiesQCOM)]
except AttributeError:
    pass
try:
    vkGetDynamicRenderingTilePropertiesQCOM = _libraries['FIXME_STUB'].vkGetDynamicRenderingTilePropertiesQCOM
    vkGetDynamicRenderingTilePropertiesQCOM.restype = VkResult
    vkGetDynamicRenderingTilePropertiesQCOM.argtypes = [VkDevice, ctypes.POINTER(struct_VkRenderingInfo), ctypes.POINTER(struct_VkTilePropertiesQCOM)]
except AttributeError:
    pass
class struct_VkPhysicalDeviceAmigoProfilingFeaturesSEC(Structure):
    pass

struct_VkPhysicalDeviceAmigoProfilingFeaturesSEC._pack_ = 1 # source:False
struct_VkPhysicalDeviceAmigoProfilingFeaturesSEC._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('amigoProfiling', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPhysicalDeviceAmigoProfilingFeaturesSEC = struct_VkPhysicalDeviceAmigoProfilingFeaturesSEC
class struct_VkAmigoProfilingSubmitInfoSEC(Structure):
    pass

struct_VkAmigoProfilingSubmitInfoSEC._pack_ = 1 # source:False
struct_VkAmigoProfilingSubmitInfoSEC._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('firstDrawTimestamp', ctypes.c_uint64),
    ('swapBufferTimestamp', ctypes.c_uint64),
]

VkAmigoProfilingSubmitInfoSEC = struct_VkAmigoProfilingSubmitInfoSEC
class struct_VkPhysicalDeviceMultiviewPerViewViewportsFeaturesQCOM(Structure):
    pass

struct_VkPhysicalDeviceMultiviewPerViewViewportsFeaturesQCOM._pack_ = 1 # source:False
struct_VkPhysicalDeviceMultiviewPerViewViewportsFeaturesQCOM._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('multiviewPerViewViewports', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPhysicalDeviceMultiviewPerViewViewportsFeaturesQCOM = struct_VkPhysicalDeviceMultiviewPerViewViewportsFeaturesQCOM

# values for enumeration 'VkRayTracingInvocationReorderModeNV'
VkRayTracingInvocationReorderModeNV__enumvalues = {
    0: 'VK_RAY_TRACING_INVOCATION_REORDER_MODE_NONE_NV',
    1: 'VK_RAY_TRACING_INVOCATION_REORDER_MODE_REORDER_NV',
    2147483647: 'VK_RAY_TRACING_INVOCATION_REORDER_MODE_MAX_ENUM_NV',
}
VK_RAY_TRACING_INVOCATION_REORDER_MODE_NONE_NV = 0
VK_RAY_TRACING_INVOCATION_REORDER_MODE_REORDER_NV = 1
VK_RAY_TRACING_INVOCATION_REORDER_MODE_MAX_ENUM_NV = 2147483647
VkRayTracingInvocationReorderModeNV = ctypes.c_uint32 # enum
class struct_VkPhysicalDeviceRayTracingInvocationReorderPropertiesNV(Structure):
    pass

struct_VkPhysicalDeviceRayTracingInvocationReorderPropertiesNV._pack_ = 1 # source:False
struct_VkPhysicalDeviceRayTracingInvocationReorderPropertiesNV._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('rayTracingInvocationReorderReorderingHint', VkRayTracingInvocationReorderModeNV),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPhysicalDeviceRayTracingInvocationReorderPropertiesNV = struct_VkPhysicalDeviceRayTracingInvocationReorderPropertiesNV
class struct_VkPhysicalDeviceRayTracingInvocationReorderFeaturesNV(Structure):
    pass

struct_VkPhysicalDeviceRayTracingInvocationReorderFeaturesNV._pack_ = 1 # source:False
struct_VkPhysicalDeviceRayTracingInvocationReorderFeaturesNV._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('rayTracingInvocationReorder', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPhysicalDeviceRayTracingInvocationReorderFeaturesNV = struct_VkPhysicalDeviceRayTracingInvocationReorderFeaturesNV
class struct_VkPhysicalDeviceExtendedSparseAddressSpaceFeaturesNV(Structure):
    pass

struct_VkPhysicalDeviceExtendedSparseAddressSpaceFeaturesNV._pack_ = 1 # source:False
struct_VkPhysicalDeviceExtendedSparseAddressSpaceFeaturesNV._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('extendedSparseAddressSpace', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPhysicalDeviceExtendedSparseAddressSpaceFeaturesNV = struct_VkPhysicalDeviceExtendedSparseAddressSpaceFeaturesNV
class struct_VkPhysicalDeviceExtendedSparseAddressSpacePropertiesNV(Structure):
    pass

struct_VkPhysicalDeviceExtendedSparseAddressSpacePropertiesNV._pack_ = 1 # source:False
struct_VkPhysicalDeviceExtendedSparseAddressSpacePropertiesNV._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('extendedSparseAddressSpaceSize', ctypes.c_uint64),
    ('extendedSparseImageUsageFlags', ctypes.c_uint32),
    ('extendedSparseBufferUsageFlags', ctypes.c_uint32),
]

VkPhysicalDeviceExtendedSparseAddressSpacePropertiesNV = struct_VkPhysicalDeviceExtendedSparseAddressSpacePropertiesNV

# values for enumeration 'VkLayerSettingTypeEXT'
VkLayerSettingTypeEXT__enumvalues = {
    0: 'VK_LAYER_SETTING_TYPE_BOOL32_EXT',
    1: 'VK_LAYER_SETTING_TYPE_INT32_EXT',
    2: 'VK_LAYER_SETTING_TYPE_INT64_EXT',
    3: 'VK_LAYER_SETTING_TYPE_UINT32_EXT',
    4: 'VK_LAYER_SETTING_TYPE_UINT64_EXT',
    5: 'VK_LAYER_SETTING_TYPE_FLOAT32_EXT',
    6: 'VK_LAYER_SETTING_TYPE_FLOAT64_EXT',
    7: 'VK_LAYER_SETTING_TYPE_STRING_EXT',
    2147483647: 'VK_LAYER_SETTING_TYPE_MAX_ENUM_EXT',
}
VK_LAYER_SETTING_TYPE_BOOL32_EXT = 0
VK_LAYER_SETTING_TYPE_INT32_EXT = 1
VK_LAYER_SETTING_TYPE_INT64_EXT = 2
VK_LAYER_SETTING_TYPE_UINT32_EXT = 3
VK_LAYER_SETTING_TYPE_UINT64_EXT = 4
VK_LAYER_SETTING_TYPE_FLOAT32_EXT = 5
VK_LAYER_SETTING_TYPE_FLOAT64_EXT = 6
VK_LAYER_SETTING_TYPE_STRING_EXT = 7
VK_LAYER_SETTING_TYPE_MAX_ENUM_EXT = 2147483647
VkLayerSettingTypeEXT = ctypes.c_uint32 # enum
class struct_VkLayerSettingEXT(Structure):
    pass

struct_VkLayerSettingEXT._pack_ = 1 # source:False
struct_VkLayerSettingEXT._fields_ = [
    ('pLayerName', ctypes.POINTER(ctypes.c_char)),
    ('pSettingName', ctypes.POINTER(ctypes.c_char)),
    ('type', VkLayerSettingTypeEXT),
    ('valueCount', ctypes.c_uint32),
    ('pValues', ctypes.POINTER(None)),
]

VkLayerSettingEXT = struct_VkLayerSettingEXT
class struct_VkLayerSettingsCreateInfoEXT(Structure):
    pass

struct_VkLayerSettingsCreateInfoEXT._pack_ = 1 # source:False
struct_VkLayerSettingsCreateInfoEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('settingCount', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('pSettings', ctypes.POINTER(struct_VkLayerSettingEXT)),
]

VkLayerSettingsCreateInfoEXT = struct_VkLayerSettingsCreateInfoEXT
class struct_VkPhysicalDeviceShaderCoreBuiltinsFeaturesARM(Structure):
    pass

struct_VkPhysicalDeviceShaderCoreBuiltinsFeaturesARM._pack_ = 1 # source:False
struct_VkPhysicalDeviceShaderCoreBuiltinsFeaturesARM._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('shaderCoreBuiltins', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPhysicalDeviceShaderCoreBuiltinsFeaturesARM = struct_VkPhysicalDeviceShaderCoreBuiltinsFeaturesARM
class struct_VkPhysicalDeviceShaderCoreBuiltinsPropertiesARM(Structure):
    pass

struct_VkPhysicalDeviceShaderCoreBuiltinsPropertiesARM._pack_ = 1 # source:False
struct_VkPhysicalDeviceShaderCoreBuiltinsPropertiesARM._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('shaderCoreMask', ctypes.c_uint64),
    ('shaderCoreCount', ctypes.c_uint32),
    ('shaderWarpsPerCore', ctypes.c_uint32),
]

VkPhysicalDeviceShaderCoreBuiltinsPropertiesARM = struct_VkPhysicalDeviceShaderCoreBuiltinsPropertiesARM
class struct_VkPhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT(Structure):
    pass

struct_VkPhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT._pack_ = 1 # source:False
struct_VkPhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('pipelineLibraryGroupHandles', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT = struct_VkPhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT
class struct_VkPhysicalDeviceDynamicRenderingUnusedAttachmentsFeaturesEXT(Structure):
    pass

struct_VkPhysicalDeviceDynamicRenderingUnusedAttachmentsFeaturesEXT._pack_ = 1 # source:False
struct_VkPhysicalDeviceDynamicRenderingUnusedAttachmentsFeaturesEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('dynamicRenderingUnusedAttachments', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPhysicalDeviceDynamicRenderingUnusedAttachmentsFeaturesEXT = struct_VkPhysicalDeviceDynamicRenderingUnusedAttachmentsFeaturesEXT

# values for enumeration 'VkLatencyMarkerNV'
VkLatencyMarkerNV__enumvalues = {
    0: 'VK_LATENCY_MARKER_SIMULATION_START_NV',
    1: 'VK_LATENCY_MARKER_SIMULATION_END_NV',
    2: 'VK_LATENCY_MARKER_RENDERSUBMIT_START_NV',
    3: 'VK_LATENCY_MARKER_RENDERSUBMIT_END_NV',
    4: 'VK_LATENCY_MARKER_PRESENT_START_NV',
    5: 'VK_LATENCY_MARKER_PRESENT_END_NV',
    6: 'VK_LATENCY_MARKER_INPUT_SAMPLE_NV',
    7: 'VK_LATENCY_MARKER_TRIGGER_FLASH_NV',
    8: 'VK_LATENCY_MARKER_OUT_OF_BAND_RENDERSUBMIT_START_NV',
    9: 'VK_LATENCY_MARKER_OUT_OF_BAND_RENDERSUBMIT_END_NV',
    10: 'VK_LATENCY_MARKER_OUT_OF_BAND_PRESENT_START_NV',
    11: 'VK_LATENCY_MARKER_OUT_OF_BAND_PRESENT_END_NV',
    2147483647: 'VK_LATENCY_MARKER_MAX_ENUM_NV',
}
VK_LATENCY_MARKER_SIMULATION_START_NV = 0
VK_LATENCY_MARKER_SIMULATION_END_NV = 1
VK_LATENCY_MARKER_RENDERSUBMIT_START_NV = 2
VK_LATENCY_MARKER_RENDERSUBMIT_END_NV = 3
VK_LATENCY_MARKER_PRESENT_START_NV = 4
VK_LATENCY_MARKER_PRESENT_END_NV = 5
VK_LATENCY_MARKER_INPUT_SAMPLE_NV = 6
VK_LATENCY_MARKER_TRIGGER_FLASH_NV = 7
VK_LATENCY_MARKER_OUT_OF_BAND_RENDERSUBMIT_START_NV = 8
VK_LATENCY_MARKER_OUT_OF_BAND_RENDERSUBMIT_END_NV = 9
VK_LATENCY_MARKER_OUT_OF_BAND_PRESENT_START_NV = 10
VK_LATENCY_MARKER_OUT_OF_BAND_PRESENT_END_NV = 11
VK_LATENCY_MARKER_MAX_ENUM_NV = 2147483647
VkLatencyMarkerNV = ctypes.c_uint32 # enum

# values for enumeration 'VkOutOfBandQueueTypeNV'
VkOutOfBandQueueTypeNV__enumvalues = {
    0: 'VK_OUT_OF_BAND_QUEUE_TYPE_RENDER_NV',
    1: 'VK_OUT_OF_BAND_QUEUE_TYPE_PRESENT_NV',
    2147483647: 'VK_OUT_OF_BAND_QUEUE_TYPE_MAX_ENUM_NV',
}
VK_OUT_OF_BAND_QUEUE_TYPE_RENDER_NV = 0
VK_OUT_OF_BAND_QUEUE_TYPE_PRESENT_NV = 1
VK_OUT_OF_BAND_QUEUE_TYPE_MAX_ENUM_NV = 2147483647
VkOutOfBandQueueTypeNV = ctypes.c_uint32 # enum
class struct_VkLatencySleepModeInfoNV(Structure):
    pass

struct_VkLatencySleepModeInfoNV._pack_ = 1 # source:False
struct_VkLatencySleepModeInfoNV._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('lowLatencyMode', ctypes.c_uint32),
    ('lowLatencyBoost', ctypes.c_uint32),
    ('minimumIntervalUs', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkLatencySleepModeInfoNV = struct_VkLatencySleepModeInfoNV
class struct_VkLatencySleepInfoNV(Structure):
    pass

struct_VkLatencySleepInfoNV._pack_ = 1 # source:False
struct_VkLatencySleepInfoNV._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('signalSemaphore', ctypes.POINTER(struct_VkSemaphore_T)),
    ('value', ctypes.c_uint64),
]

VkLatencySleepInfoNV = struct_VkLatencySleepInfoNV
class struct_VkSetLatencyMarkerInfoNV(Structure):
    pass

struct_VkSetLatencyMarkerInfoNV._pack_ = 1 # source:False
struct_VkSetLatencyMarkerInfoNV._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('presentID', ctypes.c_uint64),
    ('marker', VkLatencyMarkerNV),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkSetLatencyMarkerInfoNV = struct_VkSetLatencyMarkerInfoNV
class struct_VkLatencyTimingsFrameReportNV(Structure):
    pass

struct_VkLatencyTimingsFrameReportNV._pack_ = 1 # source:False
struct_VkLatencyTimingsFrameReportNV._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('presentID', ctypes.c_uint64),
    ('inputSampleTimeUs', ctypes.c_uint64),
    ('simStartTimeUs', ctypes.c_uint64),
    ('simEndTimeUs', ctypes.c_uint64),
    ('renderSubmitStartTimeUs', ctypes.c_uint64),
    ('renderSubmitEndTimeUs', ctypes.c_uint64),
    ('presentStartTimeUs', ctypes.c_uint64),
    ('presentEndTimeUs', ctypes.c_uint64),
    ('driverStartTimeUs', ctypes.c_uint64),
    ('driverEndTimeUs', ctypes.c_uint64),
    ('osRenderQueueStartTimeUs', ctypes.c_uint64),
    ('osRenderQueueEndTimeUs', ctypes.c_uint64),
    ('gpuRenderStartTimeUs', ctypes.c_uint64),
    ('gpuRenderEndTimeUs', ctypes.c_uint64),
]

VkLatencyTimingsFrameReportNV = struct_VkLatencyTimingsFrameReportNV
class struct_VkGetLatencyMarkerInfoNV(Structure):
    pass

struct_VkGetLatencyMarkerInfoNV._pack_ = 1 # source:False
struct_VkGetLatencyMarkerInfoNV._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('timingCount', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('pTimings', ctypes.POINTER(struct_VkLatencyTimingsFrameReportNV)),
]

VkGetLatencyMarkerInfoNV = struct_VkGetLatencyMarkerInfoNV
class struct_VkLatencySubmissionPresentIdNV(Structure):
    pass

struct_VkLatencySubmissionPresentIdNV._pack_ = 1 # source:False
struct_VkLatencySubmissionPresentIdNV._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('presentID', ctypes.c_uint64),
]

VkLatencySubmissionPresentIdNV = struct_VkLatencySubmissionPresentIdNV
class struct_VkSwapchainLatencyCreateInfoNV(Structure):
    pass

struct_VkSwapchainLatencyCreateInfoNV._pack_ = 1 # source:False
struct_VkSwapchainLatencyCreateInfoNV._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('latencyModeEnable', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkSwapchainLatencyCreateInfoNV = struct_VkSwapchainLatencyCreateInfoNV
class struct_VkOutOfBandQueueTypeInfoNV(Structure):
    pass

struct_VkOutOfBandQueueTypeInfoNV._pack_ = 1 # source:False
struct_VkOutOfBandQueueTypeInfoNV._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('queueType', VkOutOfBandQueueTypeNV),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkOutOfBandQueueTypeInfoNV = struct_VkOutOfBandQueueTypeInfoNV
class struct_VkLatencySurfaceCapabilitiesNV(Structure):
    pass

struct_VkLatencySurfaceCapabilitiesNV._pack_ = 1 # source:False
struct_VkLatencySurfaceCapabilitiesNV._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('presentModeCount', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('pPresentModes', ctypes.POINTER(VkPresentModeKHR)),
]

VkLatencySurfaceCapabilitiesNV = struct_VkLatencySurfaceCapabilitiesNV
PFN_vkSetLatencySleepModeNV = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkSwapchainKHR_T), ctypes.POINTER(struct_VkLatencySleepModeInfoNV))
PFN_vkLatencySleepNV = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkSwapchainKHR_T), ctypes.POINTER(struct_VkLatencySleepInfoNV))
PFN_vkSetLatencyMarkerNV = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkSwapchainKHR_T), ctypes.POINTER(struct_VkSetLatencyMarkerInfoNV))
PFN_vkGetLatencyTimingsNV = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkSwapchainKHR_T), ctypes.POINTER(struct_VkGetLatencyMarkerInfoNV))
PFN_vkQueueNotifyOutOfBandNV = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkQueue_T), ctypes.POINTER(struct_VkOutOfBandQueueTypeInfoNV))
try:
    vkSetLatencySleepModeNV = _libraries['FIXME_STUB'].vkSetLatencySleepModeNV
    vkSetLatencySleepModeNV.restype = VkResult
    vkSetLatencySleepModeNV.argtypes = [VkDevice, VkSwapchainKHR, ctypes.POINTER(struct_VkLatencySleepModeInfoNV)]
except AttributeError:
    pass
try:
    vkLatencySleepNV = _libraries['FIXME_STUB'].vkLatencySleepNV
    vkLatencySleepNV.restype = VkResult
    vkLatencySleepNV.argtypes = [VkDevice, VkSwapchainKHR, ctypes.POINTER(struct_VkLatencySleepInfoNV)]
except AttributeError:
    pass
try:
    vkSetLatencyMarkerNV = _libraries['FIXME_STUB'].vkSetLatencyMarkerNV
    vkSetLatencyMarkerNV.restype = None
    vkSetLatencyMarkerNV.argtypes = [VkDevice, VkSwapchainKHR, ctypes.POINTER(struct_VkSetLatencyMarkerInfoNV)]
except AttributeError:
    pass
try:
    vkGetLatencyTimingsNV = _libraries['FIXME_STUB'].vkGetLatencyTimingsNV
    vkGetLatencyTimingsNV.restype = None
    vkGetLatencyTimingsNV.argtypes = [VkDevice, VkSwapchainKHR, ctypes.POINTER(struct_VkGetLatencyMarkerInfoNV)]
except AttributeError:
    pass
try:
    vkQueueNotifyOutOfBandNV = _libraries['FIXME_STUB'].vkQueueNotifyOutOfBandNV
    vkQueueNotifyOutOfBandNV.restype = None
    vkQueueNotifyOutOfBandNV.argtypes = [VkQueue, ctypes.POINTER(struct_VkOutOfBandQueueTypeInfoNV)]
except AttributeError:
    pass
class struct_VkPhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOM(Structure):
    pass

struct_VkPhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOM._pack_ = 1 # source:False
struct_VkPhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOM._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('multiviewPerViewRenderAreas', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOM = struct_VkPhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOM
class struct_VkMultiviewPerViewRenderAreasRenderPassBeginInfoQCOM(Structure):
    pass

struct_VkMultiviewPerViewRenderAreasRenderPassBeginInfoQCOM._pack_ = 1 # source:False
struct_VkMultiviewPerViewRenderAreasRenderPassBeginInfoQCOM._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('perViewRenderAreaCount', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('pPerViewRenderAreas', ctypes.POINTER(struct_VkRect2D)),
]

VkMultiviewPerViewRenderAreasRenderPassBeginInfoQCOM = struct_VkMultiviewPerViewRenderAreasRenderPassBeginInfoQCOM
class struct_VkPhysicalDevicePerStageDescriptorSetFeaturesNV(Structure):
    pass

struct_VkPhysicalDevicePerStageDescriptorSetFeaturesNV._pack_ = 1 # source:False
struct_VkPhysicalDevicePerStageDescriptorSetFeaturesNV._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('perStageDescriptorSet', ctypes.c_uint32),
    ('dynamicPipelineLayout', ctypes.c_uint32),
]

VkPhysicalDevicePerStageDescriptorSetFeaturesNV = struct_VkPhysicalDevicePerStageDescriptorSetFeaturesNV

# values for enumeration 'VkBlockMatchWindowCompareModeQCOM'
VkBlockMatchWindowCompareModeQCOM__enumvalues = {
    0: 'VK_BLOCK_MATCH_WINDOW_COMPARE_MODE_MIN_QCOM',
    1: 'VK_BLOCK_MATCH_WINDOW_COMPARE_MODE_MAX_QCOM',
    2147483647: 'VK_BLOCK_MATCH_WINDOW_COMPARE_MODE_MAX_ENUM_QCOM',
}
VK_BLOCK_MATCH_WINDOW_COMPARE_MODE_MIN_QCOM = 0
VK_BLOCK_MATCH_WINDOW_COMPARE_MODE_MAX_QCOM = 1
VK_BLOCK_MATCH_WINDOW_COMPARE_MODE_MAX_ENUM_QCOM = 2147483647
VkBlockMatchWindowCompareModeQCOM = ctypes.c_uint32 # enum
class struct_VkPhysicalDeviceImageProcessing2FeaturesQCOM(Structure):
    pass

struct_VkPhysicalDeviceImageProcessing2FeaturesQCOM._pack_ = 1 # source:False
struct_VkPhysicalDeviceImageProcessing2FeaturesQCOM._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('textureBlockMatch2', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPhysicalDeviceImageProcessing2FeaturesQCOM = struct_VkPhysicalDeviceImageProcessing2FeaturesQCOM
class struct_VkPhysicalDeviceImageProcessing2PropertiesQCOM(Structure):
    pass

struct_VkPhysicalDeviceImageProcessing2PropertiesQCOM._pack_ = 1 # source:False
struct_VkPhysicalDeviceImageProcessing2PropertiesQCOM._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('maxBlockMatchWindow', VkExtent2D),
]

VkPhysicalDeviceImageProcessing2PropertiesQCOM = struct_VkPhysicalDeviceImageProcessing2PropertiesQCOM
class struct_VkSamplerBlockMatchWindowCreateInfoQCOM(Structure):
    pass

struct_VkSamplerBlockMatchWindowCreateInfoQCOM._pack_ = 1 # source:False
struct_VkSamplerBlockMatchWindowCreateInfoQCOM._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('windowExtent', VkExtent2D),
    ('windowCompareMode', VkBlockMatchWindowCompareModeQCOM),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkSamplerBlockMatchWindowCreateInfoQCOM = struct_VkSamplerBlockMatchWindowCreateInfoQCOM

# values for enumeration 'VkCubicFilterWeightsQCOM'
VkCubicFilterWeightsQCOM__enumvalues = {
    0: 'VK_CUBIC_FILTER_WEIGHTS_CATMULL_ROM_QCOM',
    1: 'VK_CUBIC_FILTER_WEIGHTS_ZERO_TANGENT_CARDINAL_QCOM',
    2: 'VK_CUBIC_FILTER_WEIGHTS_B_SPLINE_QCOM',
    3: 'VK_CUBIC_FILTER_WEIGHTS_MITCHELL_NETRAVALI_QCOM',
    2147483647: 'VK_CUBIC_FILTER_WEIGHTS_MAX_ENUM_QCOM',
}
VK_CUBIC_FILTER_WEIGHTS_CATMULL_ROM_QCOM = 0
VK_CUBIC_FILTER_WEIGHTS_ZERO_TANGENT_CARDINAL_QCOM = 1
VK_CUBIC_FILTER_WEIGHTS_B_SPLINE_QCOM = 2
VK_CUBIC_FILTER_WEIGHTS_MITCHELL_NETRAVALI_QCOM = 3
VK_CUBIC_FILTER_WEIGHTS_MAX_ENUM_QCOM = 2147483647
VkCubicFilterWeightsQCOM = ctypes.c_uint32 # enum
class struct_VkPhysicalDeviceCubicWeightsFeaturesQCOM(Structure):
    pass

struct_VkPhysicalDeviceCubicWeightsFeaturesQCOM._pack_ = 1 # source:False
struct_VkPhysicalDeviceCubicWeightsFeaturesQCOM._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('selectableCubicWeights', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPhysicalDeviceCubicWeightsFeaturesQCOM = struct_VkPhysicalDeviceCubicWeightsFeaturesQCOM
class struct_VkSamplerCubicWeightsCreateInfoQCOM(Structure):
    pass

struct_VkSamplerCubicWeightsCreateInfoQCOM._pack_ = 1 # source:False
struct_VkSamplerCubicWeightsCreateInfoQCOM._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('cubicWeights', VkCubicFilterWeightsQCOM),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkSamplerCubicWeightsCreateInfoQCOM = struct_VkSamplerCubicWeightsCreateInfoQCOM
class struct_VkBlitImageCubicWeightsInfoQCOM(Structure):
    pass

struct_VkBlitImageCubicWeightsInfoQCOM._pack_ = 1 # source:False
struct_VkBlitImageCubicWeightsInfoQCOM._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('cubicWeights', VkCubicFilterWeightsQCOM),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkBlitImageCubicWeightsInfoQCOM = struct_VkBlitImageCubicWeightsInfoQCOM
class struct_VkPhysicalDeviceYcbcrDegammaFeaturesQCOM(Structure):
    pass

struct_VkPhysicalDeviceYcbcrDegammaFeaturesQCOM._pack_ = 1 # source:False
struct_VkPhysicalDeviceYcbcrDegammaFeaturesQCOM._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('ycbcrDegamma', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPhysicalDeviceYcbcrDegammaFeaturesQCOM = struct_VkPhysicalDeviceYcbcrDegammaFeaturesQCOM
class struct_VkSamplerYcbcrConversionYcbcrDegammaCreateInfoQCOM(Structure):
    pass

struct_VkSamplerYcbcrConversionYcbcrDegammaCreateInfoQCOM._pack_ = 1 # source:False
struct_VkSamplerYcbcrConversionYcbcrDegammaCreateInfoQCOM._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('enableYDegamma', ctypes.c_uint32),
    ('enableCbCrDegamma', ctypes.c_uint32),
]

VkSamplerYcbcrConversionYcbcrDegammaCreateInfoQCOM = struct_VkSamplerYcbcrConversionYcbcrDegammaCreateInfoQCOM
class struct_VkPhysicalDeviceCubicClampFeaturesQCOM(Structure):
    pass

struct_VkPhysicalDeviceCubicClampFeaturesQCOM._pack_ = 1 # source:False
struct_VkPhysicalDeviceCubicClampFeaturesQCOM._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('cubicRangeClamp', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPhysicalDeviceCubicClampFeaturesQCOM = struct_VkPhysicalDeviceCubicClampFeaturesQCOM
class struct_VkPhysicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXT(Structure):
    pass

struct_VkPhysicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXT._pack_ = 1 # source:False
struct_VkPhysicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('attachmentFeedbackLoopDynamicState', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPhysicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXT = struct_VkPhysicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXT
PFN_vkCmdSetAttachmentFeedbackLoopEnableEXT = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.c_uint32)
try:
    vkCmdSetAttachmentFeedbackLoopEnableEXT = _libraries['FIXME_STUB'].vkCmdSetAttachmentFeedbackLoopEnableEXT
    vkCmdSetAttachmentFeedbackLoopEnableEXT.restype = None
    vkCmdSetAttachmentFeedbackLoopEnableEXT.argtypes = [VkCommandBuffer, VkImageAspectFlags]
except AttributeError:
    pass

# values for enumeration 'VkLayeredDriverUnderlyingApiMSFT'
VkLayeredDriverUnderlyingApiMSFT__enumvalues = {
    0: 'VK_LAYERED_DRIVER_UNDERLYING_API_NONE_MSFT',
    1: 'VK_LAYERED_DRIVER_UNDERLYING_API_D3D12_MSFT',
    2147483647: 'VK_LAYERED_DRIVER_UNDERLYING_API_MAX_ENUM_MSFT',
}
VK_LAYERED_DRIVER_UNDERLYING_API_NONE_MSFT = 0
VK_LAYERED_DRIVER_UNDERLYING_API_D3D12_MSFT = 1
VK_LAYERED_DRIVER_UNDERLYING_API_MAX_ENUM_MSFT = 2147483647
VkLayeredDriverUnderlyingApiMSFT = ctypes.c_uint32 # enum
class struct_VkPhysicalDeviceLayeredDriverPropertiesMSFT(Structure):
    pass

struct_VkPhysicalDeviceLayeredDriverPropertiesMSFT._pack_ = 1 # source:False
struct_VkPhysicalDeviceLayeredDriverPropertiesMSFT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('underlyingAPI', VkLayeredDriverUnderlyingApiMSFT),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPhysicalDeviceLayeredDriverPropertiesMSFT = struct_VkPhysicalDeviceLayeredDriverPropertiesMSFT
class struct_VkPhysicalDeviceDescriptorPoolOverallocationFeaturesNV(Structure):
    pass

struct_VkPhysicalDeviceDescriptorPoolOverallocationFeaturesNV._pack_ = 1 # source:False
struct_VkPhysicalDeviceDescriptorPoolOverallocationFeaturesNV._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('descriptorPoolOverallocation', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPhysicalDeviceDescriptorPoolOverallocationFeaturesNV = struct_VkPhysicalDeviceDescriptorPoolOverallocationFeaturesNV

# values for enumeration 'VkBuildAccelerationStructureModeKHR'
VkBuildAccelerationStructureModeKHR__enumvalues = {
    0: 'VK_BUILD_ACCELERATION_STRUCTURE_MODE_BUILD_KHR',
    1: 'VK_BUILD_ACCELERATION_STRUCTURE_MODE_UPDATE_KHR',
    2147483647: 'VK_BUILD_ACCELERATION_STRUCTURE_MODE_MAX_ENUM_KHR',
}
VK_BUILD_ACCELERATION_STRUCTURE_MODE_BUILD_KHR = 0
VK_BUILD_ACCELERATION_STRUCTURE_MODE_UPDATE_KHR = 1
VK_BUILD_ACCELERATION_STRUCTURE_MODE_MAX_ENUM_KHR = 2147483647
VkBuildAccelerationStructureModeKHR = ctypes.c_uint32 # enum

# values for enumeration 'VkAccelerationStructureCreateFlagBitsKHR'
VkAccelerationStructureCreateFlagBitsKHR__enumvalues = {
    1: 'VK_ACCELERATION_STRUCTURE_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR',
    8: 'VK_ACCELERATION_STRUCTURE_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT',
    4: 'VK_ACCELERATION_STRUCTURE_CREATE_MOTION_BIT_NV',
    2147483647: 'VK_ACCELERATION_STRUCTURE_CREATE_FLAG_BITS_MAX_ENUM_KHR',
}
VK_ACCELERATION_STRUCTURE_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR = 1
VK_ACCELERATION_STRUCTURE_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT = 8
VK_ACCELERATION_STRUCTURE_CREATE_MOTION_BIT_NV = 4
VK_ACCELERATION_STRUCTURE_CREATE_FLAG_BITS_MAX_ENUM_KHR = 2147483647
VkAccelerationStructureCreateFlagBitsKHR = ctypes.c_uint32 # enum
VkAccelerationStructureCreateFlagsKHR = ctypes.c_uint32
class struct_VkAccelerationStructureBuildRangeInfoKHR(Structure):
    pass

struct_VkAccelerationStructureBuildRangeInfoKHR._pack_ = 1 # source:False
struct_VkAccelerationStructureBuildRangeInfoKHR._fields_ = [
    ('primitiveCount', ctypes.c_uint32),
    ('primitiveOffset', ctypes.c_uint32),
    ('firstVertex', ctypes.c_uint32),
    ('transformOffset', ctypes.c_uint32),
]

VkAccelerationStructureBuildRangeInfoKHR = struct_VkAccelerationStructureBuildRangeInfoKHR
class struct_VkAccelerationStructureGeometryTrianglesDataKHR(Structure):
    pass

struct_VkAccelerationStructureGeometryTrianglesDataKHR._pack_ = 1 # source:False
struct_VkAccelerationStructureGeometryTrianglesDataKHR._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('vertexFormat', VkFormat),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('vertexData', VkDeviceOrHostAddressConstKHR),
    ('vertexStride', ctypes.c_uint64),
    ('maxVertex', ctypes.c_uint32),
    ('indexType', VkIndexType),
    ('indexData', VkDeviceOrHostAddressConstKHR),
    ('transformData', VkDeviceOrHostAddressConstKHR),
]

VkAccelerationStructureGeometryTrianglesDataKHR = struct_VkAccelerationStructureGeometryTrianglesDataKHR
class struct_VkAccelerationStructureGeometryAabbsDataKHR(Structure):
    pass

struct_VkAccelerationStructureGeometryAabbsDataKHR._pack_ = 1 # source:False
struct_VkAccelerationStructureGeometryAabbsDataKHR._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('data', VkDeviceOrHostAddressConstKHR),
    ('stride', ctypes.c_uint64),
]

VkAccelerationStructureGeometryAabbsDataKHR = struct_VkAccelerationStructureGeometryAabbsDataKHR
class struct_VkAccelerationStructureGeometryInstancesDataKHR(Structure):
    pass

struct_VkAccelerationStructureGeometryInstancesDataKHR._pack_ = 1 # source:False
struct_VkAccelerationStructureGeometryInstancesDataKHR._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('arrayOfPointers', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('data', VkDeviceOrHostAddressConstKHR),
]

VkAccelerationStructureGeometryInstancesDataKHR = struct_VkAccelerationStructureGeometryInstancesDataKHR
class union_VkAccelerationStructureGeometryDataKHR(Union):
    pass

union_VkAccelerationStructureGeometryDataKHR._pack_ = 1 # source:False
union_VkAccelerationStructureGeometryDataKHR._fields_ = [
    ('triangles', VkAccelerationStructureGeometryTrianglesDataKHR),
    ('aabbs', VkAccelerationStructureGeometryAabbsDataKHR),
    ('instances', VkAccelerationStructureGeometryInstancesDataKHR),
    ('PADDING_0', ctypes.c_ubyte * 32),
]

VkAccelerationStructureGeometryDataKHR = union_VkAccelerationStructureGeometryDataKHR
class struct_VkAccelerationStructureGeometryKHR(Structure):
    pass

struct_VkAccelerationStructureGeometryKHR._pack_ = 1 # source:False
struct_VkAccelerationStructureGeometryKHR._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('geometryType', VkGeometryTypeKHR),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('geometry', VkAccelerationStructureGeometryDataKHR),
    ('flags', ctypes.c_uint32),
    ('PADDING_2', ctypes.c_ubyte * 4),
]

VkAccelerationStructureGeometryKHR = struct_VkAccelerationStructureGeometryKHR
class struct_VkAccelerationStructureBuildGeometryInfoKHR(Structure):
    pass

struct_VkAccelerationStructureBuildGeometryInfoKHR._pack_ = 1 # source:False
struct_VkAccelerationStructureBuildGeometryInfoKHR._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('type', VkAccelerationStructureTypeKHR),
    ('flags', ctypes.c_uint32),
    ('mode', VkBuildAccelerationStructureModeKHR),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('srcAccelerationStructure', ctypes.POINTER(struct_VkAccelerationStructureKHR_T)),
    ('dstAccelerationStructure', ctypes.POINTER(struct_VkAccelerationStructureKHR_T)),
    ('geometryCount', ctypes.c_uint32),
    ('PADDING_2', ctypes.c_ubyte * 4),
    ('pGeometries', ctypes.POINTER(struct_VkAccelerationStructureGeometryKHR)),
    ('ppGeometries', ctypes.POINTER(ctypes.POINTER(struct_VkAccelerationStructureGeometryKHR))),
    ('scratchData', VkDeviceOrHostAddressKHR),
]

VkAccelerationStructureBuildGeometryInfoKHR = struct_VkAccelerationStructureBuildGeometryInfoKHR
class struct_VkAccelerationStructureCreateInfoKHR(Structure):
    pass

struct_VkAccelerationStructureCreateInfoKHR._pack_ = 1 # source:False
struct_VkAccelerationStructureCreateInfoKHR._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('createFlags', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('buffer', ctypes.POINTER(struct_VkBuffer_T)),
    ('offset', ctypes.c_uint64),
    ('size', ctypes.c_uint64),
    ('type', VkAccelerationStructureTypeKHR),
    ('PADDING_2', ctypes.c_ubyte * 4),
    ('deviceAddress', ctypes.c_uint64),
]

VkAccelerationStructureCreateInfoKHR = struct_VkAccelerationStructureCreateInfoKHR
class struct_VkWriteDescriptorSetAccelerationStructureKHR(Structure):
    pass

struct_VkWriteDescriptorSetAccelerationStructureKHR._pack_ = 1 # source:False
struct_VkWriteDescriptorSetAccelerationStructureKHR._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('accelerationStructureCount', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('pAccelerationStructures', ctypes.POINTER(ctypes.POINTER(struct_VkAccelerationStructureKHR_T))),
]

VkWriteDescriptorSetAccelerationStructureKHR = struct_VkWriteDescriptorSetAccelerationStructureKHR
class struct_VkPhysicalDeviceAccelerationStructureFeaturesKHR(Structure):
    pass

struct_VkPhysicalDeviceAccelerationStructureFeaturesKHR._pack_ = 1 # source:False
struct_VkPhysicalDeviceAccelerationStructureFeaturesKHR._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('accelerationStructure', ctypes.c_uint32),
    ('accelerationStructureCaptureReplay', ctypes.c_uint32),
    ('accelerationStructureIndirectBuild', ctypes.c_uint32),
    ('accelerationStructureHostCommands', ctypes.c_uint32),
    ('descriptorBindingAccelerationStructureUpdateAfterBind', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPhysicalDeviceAccelerationStructureFeaturesKHR = struct_VkPhysicalDeviceAccelerationStructureFeaturesKHR
class struct_VkPhysicalDeviceAccelerationStructurePropertiesKHR(Structure):
    pass

struct_VkPhysicalDeviceAccelerationStructurePropertiesKHR._pack_ = 1 # source:False
struct_VkPhysicalDeviceAccelerationStructurePropertiesKHR._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('maxGeometryCount', ctypes.c_uint64),
    ('maxInstanceCount', ctypes.c_uint64),
    ('maxPrimitiveCount', ctypes.c_uint64),
    ('maxPerStageDescriptorAccelerationStructures', ctypes.c_uint32),
    ('maxPerStageDescriptorUpdateAfterBindAccelerationStructures', ctypes.c_uint32),
    ('maxDescriptorSetAccelerationStructures', ctypes.c_uint32),
    ('maxDescriptorSetUpdateAfterBindAccelerationStructures', ctypes.c_uint32),
    ('minAccelerationStructureScratchOffsetAlignment', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPhysicalDeviceAccelerationStructurePropertiesKHR = struct_VkPhysicalDeviceAccelerationStructurePropertiesKHR
class struct_VkAccelerationStructureDeviceAddressInfoKHR(Structure):
    pass

struct_VkAccelerationStructureDeviceAddressInfoKHR._pack_ = 1 # source:False
struct_VkAccelerationStructureDeviceAddressInfoKHR._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('accelerationStructure', ctypes.POINTER(struct_VkAccelerationStructureKHR_T)),
]

VkAccelerationStructureDeviceAddressInfoKHR = struct_VkAccelerationStructureDeviceAddressInfoKHR
class struct_VkAccelerationStructureVersionInfoKHR(Structure):
    pass

struct_VkAccelerationStructureVersionInfoKHR._pack_ = 1 # source:False
struct_VkAccelerationStructureVersionInfoKHR._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('pVersionData', ctypes.POINTER(ctypes.c_ubyte)),
]

VkAccelerationStructureVersionInfoKHR = struct_VkAccelerationStructureVersionInfoKHR
class struct_VkCopyAccelerationStructureToMemoryInfoKHR(Structure):
    pass

struct_VkCopyAccelerationStructureToMemoryInfoKHR._pack_ = 1 # source:False
struct_VkCopyAccelerationStructureToMemoryInfoKHR._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('src', ctypes.POINTER(struct_VkAccelerationStructureKHR_T)),
    ('dst', VkDeviceOrHostAddressKHR),
    ('mode', VkCopyAccelerationStructureModeKHR),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkCopyAccelerationStructureToMemoryInfoKHR = struct_VkCopyAccelerationStructureToMemoryInfoKHR
class struct_VkCopyMemoryToAccelerationStructureInfoKHR(Structure):
    pass

struct_VkCopyMemoryToAccelerationStructureInfoKHR._pack_ = 1 # source:False
struct_VkCopyMemoryToAccelerationStructureInfoKHR._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('src', VkDeviceOrHostAddressConstKHR),
    ('dst', ctypes.POINTER(struct_VkAccelerationStructureKHR_T)),
    ('mode', VkCopyAccelerationStructureModeKHR),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkCopyMemoryToAccelerationStructureInfoKHR = struct_VkCopyMemoryToAccelerationStructureInfoKHR
class struct_VkCopyAccelerationStructureInfoKHR(Structure):
    pass

struct_VkCopyAccelerationStructureInfoKHR._pack_ = 1 # source:False
struct_VkCopyAccelerationStructureInfoKHR._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('src', ctypes.POINTER(struct_VkAccelerationStructureKHR_T)),
    ('dst', ctypes.POINTER(struct_VkAccelerationStructureKHR_T)),
    ('mode', VkCopyAccelerationStructureModeKHR),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkCopyAccelerationStructureInfoKHR = struct_VkCopyAccelerationStructureInfoKHR
class struct_VkAccelerationStructureBuildSizesInfoKHR(Structure):
    pass

struct_VkAccelerationStructureBuildSizesInfoKHR._pack_ = 1 # source:False
struct_VkAccelerationStructureBuildSizesInfoKHR._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('accelerationStructureSize', ctypes.c_uint64),
    ('updateScratchSize', ctypes.c_uint64),
    ('buildScratchSize', ctypes.c_uint64),
]

VkAccelerationStructureBuildSizesInfoKHR = struct_VkAccelerationStructureBuildSizesInfoKHR
PFN_vkCreateAccelerationStructureKHR = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkAccelerationStructureCreateInfoKHR), ctypes.POINTER(struct_VkAllocationCallbacks), ctypes.POINTER(ctypes.POINTER(struct_VkAccelerationStructureKHR_T)))
PFN_vkDestroyAccelerationStructureKHR = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkAccelerationStructureKHR_T), ctypes.POINTER(struct_VkAllocationCallbacks))
PFN_vkCmdBuildAccelerationStructuresKHR = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.c_uint32, ctypes.POINTER(struct_VkAccelerationStructureBuildGeometryInfoKHR), ctypes.POINTER(ctypes.POINTER(struct_VkAccelerationStructureBuildRangeInfoKHR)))
PFN_vkCmdBuildAccelerationStructuresIndirectKHR = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.c_uint32, ctypes.POINTER(struct_VkAccelerationStructureBuildGeometryInfoKHR), ctypes.POINTER(ctypes.c_uint64), ctypes.POINTER(ctypes.c_uint32), ctypes.POINTER(ctypes.POINTER(ctypes.c_uint32)))
PFN_vkBuildAccelerationStructuresKHR = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkDeferredOperationKHR_T), ctypes.c_uint32, ctypes.POINTER(struct_VkAccelerationStructureBuildGeometryInfoKHR), ctypes.POINTER(ctypes.POINTER(struct_VkAccelerationStructureBuildRangeInfoKHR)))
PFN_vkCopyAccelerationStructureKHR = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkDeferredOperationKHR_T), ctypes.POINTER(struct_VkCopyAccelerationStructureInfoKHR))
PFN_vkCopyAccelerationStructureToMemoryKHR = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkDeferredOperationKHR_T), ctypes.POINTER(struct_VkCopyAccelerationStructureToMemoryInfoKHR))
PFN_vkCopyMemoryToAccelerationStructureKHR = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkDeferredOperationKHR_T), ctypes.POINTER(struct_VkCopyMemoryToAccelerationStructureInfoKHR))
PFN_vkWriteAccelerationStructuresPropertiesKHR = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkDevice_T), ctypes.c_uint32, ctypes.POINTER(ctypes.POINTER(struct_VkAccelerationStructureKHR_T)), VkQueryType, ctypes.c_uint64, ctypes.POINTER(None), ctypes.c_uint64)
PFN_vkCmdCopyAccelerationStructureKHR = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.POINTER(struct_VkCopyAccelerationStructureInfoKHR))
PFN_vkCmdCopyAccelerationStructureToMemoryKHR = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.POINTER(struct_VkCopyAccelerationStructureToMemoryInfoKHR))
PFN_vkCmdCopyMemoryToAccelerationStructureKHR = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.POINTER(struct_VkCopyMemoryToAccelerationStructureInfoKHR))
PFN_vkGetAccelerationStructureDeviceAddressKHR = ctypes.CFUNCTYPE(ctypes.c_uint64, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkAccelerationStructureDeviceAddressInfoKHR))
PFN_vkCmdWriteAccelerationStructuresPropertiesKHR = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.c_uint32, ctypes.POINTER(ctypes.POINTER(struct_VkAccelerationStructureKHR_T)), VkQueryType, ctypes.POINTER(struct_VkQueryPool_T), ctypes.c_uint32)
PFN_vkGetDeviceAccelerationStructureCompatibilityKHR = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkAccelerationStructureVersionInfoKHR), ctypes.POINTER(VkAccelerationStructureCompatibilityKHR))
PFN_vkGetAccelerationStructureBuildSizesKHR = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkDevice_T), VkAccelerationStructureBuildTypeKHR, ctypes.POINTER(struct_VkAccelerationStructureBuildGeometryInfoKHR), ctypes.POINTER(ctypes.c_uint32), ctypes.POINTER(struct_VkAccelerationStructureBuildSizesInfoKHR))
try:
    vkCreateAccelerationStructureKHR = _libraries['FIXME_STUB'].vkCreateAccelerationStructureKHR
    vkCreateAccelerationStructureKHR.restype = VkResult
    vkCreateAccelerationStructureKHR.argtypes = [VkDevice, ctypes.POINTER(struct_VkAccelerationStructureCreateInfoKHR), ctypes.POINTER(struct_VkAllocationCallbacks), ctypes.POINTER(ctypes.POINTER(struct_VkAccelerationStructureKHR_T))]
except AttributeError:
    pass
try:
    vkDestroyAccelerationStructureKHR = _libraries['FIXME_STUB'].vkDestroyAccelerationStructureKHR
    vkDestroyAccelerationStructureKHR.restype = None
    vkDestroyAccelerationStructureKHR.argtypes = [VkDevice, VkAccelerationStructureKHR, ctypes.POINTER(struct_VkAllocationCallbacks)]
except AttributeError:
    pass
try:
    vkCmdBuildAccelerationStructuresKHR = _libraries['FIXME_STUB'].vkCmdBuildAccelerationStructuresKHR
    vkCmdBuildAccelerationStructuresKHR.restype = None
    vkCmdBuildAccelerationStructuresKHR.argtypes = [VkCommandBuffer, uint32_t, ctypes.POINTER(struct_VkAccelerationStructureBuildGeometryInfoKHR), ctypes.POINTER(ctypes.POINTER(struct_VkAccelerationStructureBuildRangeInfoKHR))]
except AttributeError:
    pass
try:
    vkCmdBuildAccelerationStructuresIndirectKHR = _libraries['FIXME_STUB'].vkCmdBuildAccelerationStructuresIndirectKHR
    vkCmdBuildAccelerationStructuresIndirectKHR.restype = None
    vkCmdBuildAccelerationStructuresIndirectKHR.argtypes = [VkCommandBuffer, uint32_t, ctypes.POINTER(struct_VkAccelerationStructureBuildGeometryInfoKHR), ctypes.POINTER(ctypes.c_uint64), ctypes.POINTER(ctypes.c_uint32), ctypes.POINTER(ctypes.POINTER(ctypes.c_uint32))]
except AttributeError:
    pass
try:
    vkBuildAccelerationStructuresKHR = _libraries['FIXME_STUB'].vkBuildAccelerationStructuresKHR
    vkBuildAccelerationStructuresKHR.restype = VkResult
    vkBuildAccelerationStructuresKHR.argtypes = [VkDevice, VkDeferredOperationKHR, uint32_t, ctypes.POINTER(struct_VkAccelerationStructureBuildGeometryInfoKHR), ctypes.POINTER(ctypes.POINTER(struct_VkAccelerationStructureBuildRangeInfoKHR))]
except AttributeError:
    pass
try:
    vkCopyAccelerationStructureKHR = _libraries['FIXME_STUB'].vkCopyAccelerationStructureKHR
    vkCopyAccelerationStructureKHR.restype = VkResult
    vkCopyAccelerationStructureKHR.argtypes = [VkDevice, VkDeferredOperationKHR, ctypes.POINTER(struct_VkCopyAccelerationStructureInfoKHR)]
except AttributeError:
    pass
try:
    vkCopyAccelerationStructureToMemoryKHR = _libraries['FIXME_STUB'].vkCopyAccelerationStructureToMemoryKHR
    vkCopyAccelerationStructureToMemoryKHR.restype = VkResult
    vkCopyAccelerationStructureToMemoryKHR.argtypes = [VkDevice, VkDeferredOperationKHR, ctypes.POINTER(struct_VkCopyAccelerationStructureToMemoryInfoKHR)]
except AttributeError:
    pass
try:
    vkCopyMemoryToAccelerationStructureKHR = _libraries['FIXME_STUB'].vkCopyMemoryToAccelerationStructureKHR
    vkCopyMemoryToAccelerationStructureKHR.restype = VkResult
    vkCopyMemoryToAccelerationStructureKHR.argtypes = [VkDevice, VkDeferredOperationKHR, ctypes.POINTER(struct_VkCopyMemoryToAccelerationStructureInfoKHR)]
except AttributeError:
    pass
try:
    vkWriteAccelerationStructuresPropertiesKHR = _libraries['FIXME_STUB'].vkWriteAccelerationStructuresPropertiesKHR
    vkWriteAccelerationStructuresPropertiesKHR.restype = VkResult
    vkWriteAccelerationStructuresPropertiesKHR.argtypes = [VkDevice, uint32_t, ctypes.POINTER(ctypes.POINTER(struct_VkAccelerationStructureKHR_T)), VkQueryType, size_t, ctypes.POINTER(None), size_t]
except AttributeError:
    pass
try:
    vkCmdCopyAccelerationStructureKHR = _libraries['FIXME_STUB'].vkCmdCopyAccelerationStructureKHR
    vkCmdCopyAccelerationStructureKHR.restype = None
    vkCmdCopyAccelerationStructureKHR.argtypes = [VkCommandBuffer, ctypes.POINTER(struct_VkCopyAccelerationStructureInfoKHR)]
except AttributeError:
    pass
try:
    vkCmdCopyAccelerationStructureToMemoryKHR = _libraries['FIXME_STUB'].vkCmdCopyAccelerationStructureToMemoryKHR
    vkCmdCopyAccelerationStructureToMemoryKHR.restype = None
    vkCmdCopyAccelerationStructureToMemoryKHR.argtypes = [VkCommandBuffer, ctypes.POINTER(struct_VkCopyAccelerationStructureToMemoryInfoKHR)]
except AttributeError:
    pass
try:
    vkCmdCopyMemoryToAccelerationStructureKHR = _libraries['FIXME_STUB'].vkCmdCopyMemoryToAccelerationStructureKHR
    vkCmdCopyMemoryToAccelerationStructureKHR.restype = None
    vkCmdCopyMemoryToAccelerationStructureKHR.argtypes = [VkCommandBuffer, ctypes.POINTER(struct_VkCopyMemoryToAccelerationStructureInfoKHR)]
except AttributeError:
    pass
try:
    vkGetAccelerationStructureDeviceAddressKHR = _libraries['FIXME_STUB'].vkGetAccelerationStructureDeviceAddressKHR
    vkGetAccelerationStructureDeviceAddressKHR.restype = VkDeviceAddress
    vkGetAccelerationStructureDeviceAddressKHR.argtypes = [VkDevice, ctypes.POINTER(struct_VkAccelerationStructureDeviceAddressInfoKHR)]
except AttributeError:
    pass
try:
    vkCmdWriteAccelerationStructuresPropertiesKHR = _libraries['FIXME_STUB'].vkCmdWriteAccelerationStructuresPropertiesKHR
    vkCmdWriteAccelerationStructuresPropertiesKHR.restype = None
    vkCmdWriteAccelerationStructuresPropertiesKHR.argtypes = [VkCommandBuffer, uint32_t, ctypes.POINTER(ctypes.POINTER(struct_VkAccelerationStructureKHR_T)), VkQueryType, VkQueryPool, uint32_t]
except AttributeError:
    pass
try:
    vkGetDeviceAccelerationStructureCompatibilityKHR = _libraries['FIXME_STUB'].vkGetDeviceAccelerationStructureCompatibilityKHR
    vkGetDeviceAccelerationStructureCompatibilityKHR.restype = None
    vkGetDeviceAccelerationStructureCompatibilityKHR.argtypes = [VkDevice, ctypes.POINTER(struct_VkAccelerationStructureVersionInfoKHR), ctypes.POINTER(VkAccelerationStructureCompatibilityKHR)]
except AttributeError:
    pass
try:
    vkGetAccelerationStructureBuildSizesKHR = _libraries['FIXME_STUB'].vkGetAccelerationStructureBuildSizesKHR
    vkGetAccelerationStructureBuildSizesKHR.restype = None
    vkGetAccelerationStructureBuildSizesKHR.argtypes = [VkDevice, VkAccelerationStructureBuildTypeKHR, ctypes.POINTER(struct_VkAccelerationStructureBuildGeometryInfoKHR), ctypes.POINTER(ctypes.c_uint32), ctypes.POINTER(struct_VkAccelerationStructureBuildSizesInfoKHR)]
except AttributeError:
    pass

# values for enumeration 'VkShaderGroupShaderKHR'
VkShaderGroupShaderKHR__enumvalues = {
    0: 'VK_SHADER_GROUP_SHADER_GENERAL_KHR',
    1: 'VK_SHADER_GROUP_SHADER_CLOSEST_HIT_KHR',
    2: 'VK_SHADER_GROUP_SHADER_ANY_HIT_KHR',
    3: 'VK_SHADER_GROUP_SHADER_INTERSECTION_KHR',
    2147483647: 'VK_SHADER_GROUP_SHADER_MAX_ENUM_KHR',
}
VK_SHADER_GROUP_SHADER_GENERAL_KHR = 0
VK_SHADER_GROUP_SHADER_CLOSEST_HIT_KHR = 1
VK_SHADER_GROUP_SHADER_ANY_HIT_KHR = 2
VK_SHADER_GROUP_SHADER_INTERSECTION_KHR = 3
VK_SHADER_GROUP_SHADER_MAX_ENUM_KHR = 2147483647
VkShaderGroupShaderKHR = ctypes.c_uint32 # enum
class struct_VkRayTracingShaderGroupCreateInfoKHR(Structure):
    pass

struct_VkRayTracingShaderGroupCreateInfoKHR._pack_ = 1 # source:False
struct_VkRayTracingShaderGroupCreateInfoKHR._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('type', VkRayTracingShaderGroupTypeKHR),
    ('generalShader', ctypes.c_uint32),
    ('closestHitShader', ctypes.c_uint32),
    ('anyHitShader', ctypes.c_uint32),
    ('intersectionShader', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('pShaderGroupCaptureReplayHandle', ctypes.POINTER(None)),
]

VkRayTracingShaderGroupCreateInfoKHR = struct_VkRayTracingShaderGroupCreateInfoKHR
class struct_VkRayTracingPipelineInterfaceCreateInfoKHR(Structure):
    pass

struct_VkRayTracingPipelineInterfaceCreateInfoKHR._pack_ = 1 # source:False
struct_VkRayTracingPipelineInterfaceCreateInfoKHR._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('maxPipelineRayPayloadSize', ctypes.c_uint32),
    ('maxPipelineRayHitAttributeSize', ctypes.c_uint32),
]

VkRayTracingPipelineInterfaceCreateInfoKHR = struct_VkRayTracingPipelineInterfaceCreateInfoKHR
class struct_VkRayTracingPipelineCreateInfoKHR(Structure):
    pass

struct_VkRayTracingPipelineCreateInfoKHR._pack_ = 1 # source:False
struct_VkRayTracingPipelineCreateInfoKHR._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('flags', ctypes.c_uint32),
    ('stageCount', ctypes.c_uint32),
    ('pStages', ctypes.POINTER(struct_VkPipelineShaderStageCreateInfo)),
    ('groupCount', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('pGroups', ctypes.POINTER(struct_VkRayTracingShaderGroupCreateInfoKHR)),
    ('maxPipelineRayRecursionDepth', ctypes.c_uint32),
    ('PADDING_2', ctypes.c_ubyte * 4),
    ('pLibraryInfo', ctypes.POINTER(struct_VkPipelineLibraryCreateInfoKHR)),
    ('pLibraryInterface', ctypes.POINTER(struct_VkRayTracingPipelineInterfaceCreateInfoKHR)),
    ('pDynamicState', ctypes.POINTER(struct_VkPipelineDynamicStateCreateInfo)),
    ('layout', ctypes.POINTER(struct_VkPipelineLayout_T)),
    ('basePipelineHandle', ctypes.POINTER(struct_VkPipeline_T)),
    ('basePipelineIndex', ctypes.c_int32),
    ('PADDING_3', ctypes.c_ubyte * 4),
]

VkRayTracingPipelineCreateInfoKHR = struct_VkRayTracingPipelineCreateInfoKHR
class struct_VkPhysicalDeviceRayTracingPipelineFeaturesKHR(Structure):
    pass

struct_VkPhysicalDeviceRayTracingPipelineFeaturesKHR._pack_ = 1 # source:False
struct_VkPhysicalDeviceRayTracingPipelineFeaturesKHR._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('rayTracingPipeline', ctypes.c_uint32),
    ('rayTracingPipelineShaderGroupHandleCaptureReplay', ctypes.c_uint32),
    ('rayTracingPipelineShaderGroupHandleCaptureReplayMixed', ctypes.c_uint32),
    ('rayTracingPipelineTraceRaysIndirect', ctypes.c_uint32),
    ('rayTraversalPrimitiveCulling', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPhysicalDeviceRayTracingPipelineFeaturesKHR = struct_VkPhysicalDeviceRayTracingPipelineFeaturesKHR
class struct_VkPhysicalDeviceRayTracingPipelinePropertiesKHR(Structure):
    pass

struct_VkPhysicalDeviceRayTracingPipelinePropertiesKHR._pack_ = 1 # source:False
struct_VkPhysicalDeviceRayTracingPipelinePropertiesKHR._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('shaderGroupHandleSize', ctypes.c_uint32),
    ('maxRayRecursionDepth', ctypes.c_uint32),
    ('maxShaderGroupStride', ctypes.c_uint32),
    ('shaderGroupBaseAlignment', ctypes.c_uint32),
    ('shaderGroupHandleCaptureReplaySize', ctypes.c_uint32),
    ('maxRayDispatchInvocationCount', ctypes.c_uint32),
    ('shaderGroupHandleAlignment', ctypes.c_uint32),
    ('maxRayHitAttributeSize', ctypes.c_uint32),
]

VkPhysicalDeviceRayTracingPipelinePropertiesKHR = struct_VkPhysicalDeviceRayTracingPipelinePropertiesKHR
class struct_VkStridedDeviceAddressRegionKHR(Structure):
    pass

struct_VkStridedDeviceAddressRegionKHR._pack_ = 1 # source:False
struct_VkStridedDeviceAddressRegionKHR._fields_ = [
    ('deviceAddress', ctypes.c_uint64),
    ('stride', ctypes.c_uint64),
    ('size', ctypes.c_uint64),
]

VkStridedDeviceAddressRegionKHR = struct_VkStridedDeviceAddressRegionKHR
class struct_VkTraceRaysIndirectCommandKHR(Structure):
    pass

struct_VkTraceRaysIndirectCommandKHR._pack_ = 1 # source:False
struct_VkTraceRaysIndirectCommandKHR._fields_ = [
    ('width', ctypes.c_uint32),
    ('height', ctypes.c_uint32),
    ('depth', ctypes.c_uint32),
]

VkTraceRaysIndirectCommandKHR = struct_VkTraceRaysIndirectCommandKHR
PFN_vkCmdTraceRaysKHR = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.POINTER(struct_VkStridedDeviceAddressRegionKHR), ctypes.POINTER(struct_VkStridedDeviceAddressRegionKHR), ctypes.POINTER(struct_VkStridedDeviceAddressRegionKHR), ctypes.POINTER(struct_VkStridedDeviceAddressRegionKHR), ctypes.c_uint32, ctypes.c_uint32, ctypes.c_uint32)
PFN_vkCreateRayTracingPipelinesKHR = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkDeferredOperationKHR_T), ctypes.POINTER(struct_VkPipelineCache_T), ctypes.c_uint32, ctypes.POINTER(struct_VkRayTracingPipelineCreateInfoKHR), ctypes.POINTER(struct_VkAllocationCallbacks), ctypes.POINTER(ctypes.POINTER(struct_VkPipeline_T)))
PFN_vkGetRayTracingCaptureReplayShaderGroupHandlesKHR = ctypes.CFUNCTYPE(VkResult, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkPipeline_T), ctypes.c_uint32, ctypes.c_uint32, ctypes.c_uint64, ctypes.POINTER(None))
PFN_vkCmdTraceRaysIndirectKHR = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.POINTER(struct_VkStridedDeviceAddressRegionKHR), ctypes.POINTER(struct_VkStridedDeviceAddressRegionKHR), ctypes.POINTER(struct_VkStridedDeviceAddressRegionKHR), ctypes.POINTER(struct_VkStridedDeviceAddressRegionKHR), ctypes.c_uint64)
PFN_vkGetRayTracingShaderGroupStackSizeKHR = ctypes.CFUNCTYPE(ctypes.c_uint64, ctypes.POINTER(struct_VkDevice_T), ctypes.POINTER(struct_VkPipeline_T), ctypes.c_uint32, VkShaderGroupShaderKHR)
PFN_vkCmdSetRayTracingPipelineStackSizeKHR = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.c_uint32)
try:
    vkCmdTraceRaysKHR = _libraries['FIXME_STUB'].vkCmdTraceRaysKHR
    vkCmdTraceRaysKHR.restype = None
    vkCmdTraceRaysKHR.argtypes = [VkCommandBuffer, ctypes.POINTER(struct_VkStridedDeviceAddressRegionKHR), ctypes.POINTER(struct_VkStridedDeviceAddressRegionKHR), ctypes.POINTER(struct_VkStridedDeviceAddressRegionKHR), ctypes.POINTER(struct_VkStridedDeviceAddressRegionKHR), uint32_t, uint32_t, uint32_t]
except AttributeError:
    pass
try:
    vkCreateRayTracingPipelinesKHR = _libraries['FIXME_STUB'].vkCreateRayTracingPipelinesKHR
    vkCreateRayTracingPipelinesKHR.restype = VkResult
    vkCreateRayTracingPipelinesKHR.argtypes = [VkDevice, VkDeferredOperationKHR, VkPipelineCache, uint32_t, ctypes.POINTER(struct_VkRayTracingPipelineCreateInfoKHR), ctypes.POINTER(struct_VkAllocationCallbacks), ctypes.POINTER(ctypes.POINTER(struct_VkPipeline_T))]
except AttributeError:
    pass
try:
    vkGetRayTracingCaptureReplayShaderGroupHandlesKHR = _libraries['FIXME_STUB'].vkGetRayTracingCaptureReplayShaderGroupHandlesKHR
    vkGetRayTracingCaptureReplayShaderGroupHandlesKHR.restype = VkResult
    vkGetRayTracingCaptureReplayShaderGroupHandlesKHR.argtypes = [VkDevice, VkPipeline, uint32_t, uint32_t, size_t, ctypes.POINTER(None)]
except AttributeError:
    pass
try:
    vkCmdTraceRaysIndirectKHR = _libraries['FIXME_STUB'].vkCmdTraceRaysIndirectKHR
    vkCmdTraceRaysIndirectKHR.restype = None
    vkCmdTraceRaysIndirectKHR.argtypes = [VkCommandBuffer, ctypes.POINTER(struct_VkStridedDeviceAddressRegionKHR), ctypes.POINTER(struct_VkStridedDeviceAddressRegionKHR), ctypes.POINTER(struct_VkStridedDeviceAddressRegionKHR), ctypes.POINTER(struct_VkStridedDeviceAddressRegionKHR), VkDeviceAddress]
except AttributeError:
    pass
try:
    vkGetRayTracingShaderGroupStackSizeKHR = _libraries['FIXME_STUB'].vkGetRayTracingShaderGroupStackSizeKHR
    vkGetRayTracingShaderGroupStackSizeKHR.restype = VkDeviceSize
    vkGetRayTracingShaderGroupStackSizeKHR.argtypes = [VkDevice, VkPipeline, uint32_t, VkShaderGroupShaderKHR]
except AttributeError:
    pass
try:
    vkCmdSetRayTracingPipelineStackSizeKHR = _libraries['FIXME_STUB'].vkCmdSetRayTracingPipelineStackSizeKHR
    vkCmdSetRayTracingPipelineStackSizeKHR.restype = None
    vkCmdSetRayTracingPipelineStackSizeKHR.argtypes = [VkCommandBuffer, uint32_t]
except AttributeError:
    pass
class struct_VkPhysicalDeviceRayQueryFeaturesKHR(Structure):
    pass

struct_VkPhysicalDeviceRayQueryFeaturesKHR._pack_ = 1 # source:False
struct_VkPhysicalDeviceRayQueryFeaturesKHR._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('rayQuery', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPhysicalDeviceRayQueryFeaturesKHR = struct_VkPhysicalDeviceRayQueryFeaturesKHR
class struct_VkPhysicalDeviceMeshShaderFeaturesEXT(Structure):
    pass

struct_VkPhysicalDeviceMeshShaderFeaturesEXT._pack_ = 1 # source:False
struct_VkPhysicalDeviceMeshShaderFeaturesEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('taskShader', ctypes.c_uint32),
    ('meshShader', ctypes.c_uint32),
    ('multiviewMeshShader', ctypes.c_uint32),
    ('primitiveFragmentShadingRateMeshShader', ctypes.c_uint32),
    ('meshShaderQueries', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VkPhysicalDeviceMeshShaderFeaturesEXT = struct_VkPhysicalDeviceMeshShaderFeaturesEXT
class struct_VkPhysicalDeviceMeshShaderPropertiesEXT(Structure):
    pass

struct_VkPhysicalDeviceMeshShaderPropertiesEXT._pack_ = 1 # source:False
struct_VkPhysicalDeviceMeshShaderPropertiesEXT._fields_ = [
    ('sType', VkStructureType),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pNext', ctypes.POINTER(None)),
    ('maxTaskWorkGroupTotalCount', ctypes.c_uint32),
    ('maxTaskWorkGroupCount', ctypes.c_uint32 * 3),
    ('maxTaskWorkGroupInvocations', ctypes.c_uint32),
    ('maxTaskWorkGroupSize', ctypes.c_uint32 * 3),
    ('maxTaskPayloadSize', ctypes.c_uint32),
    ('maxTaskSharedMemorySize', ctypes.c_uint32),
    ('maxTaskPayloadAndSharedMemorySize', ctypes.c_uint32),
    ('maxMeshWorkGroupTotalCount', ctypes.c_uint32),
    ('maxMeshWorkGroupCount', ctypes.c_uint32 * 3),
    ('maxMeshWorkGroupInvocations', ctypes.c_uint32),
    ('maxMeshWorkGroupSize', ctypes.c_uint32 * 3),
    ('maxMeshSharedMemorySize', ctypes.c_uint32),
    ('maxMeshPayloadAndSharedMemorySize', ctypes.c_uint32),
    ('maxMeshOutputMemorySize', ctypes.c_uint32),
    ('maxMeshPayloadAndOutputMemorySize', ctypes.c_uint32),
    ('maxMeshOutputComponents', ctypes.c_uint32),
    ('maxMeshOutputVertices', ctypes.c_uint32),
    ('maxMeshOutputPrimitives', ctypes.c_uint32),
    ('maxMeshOutputLayers', ctypes.c_uint32),
    ('maxMeshMultiviewViewCount', ctypes.c_uint32),
    ('meshOutputPerVertexGranularity', ctypes.c_uint32),
    ('meshOutputPerPrimitiveGranularity', ctypes.c_uint32),
    ('maxPreferredTaskWorkGroupInvocations', ctypes.c_uint32),
    ('maxPreferredMeshWorkGroupInvocations', ctypes.c_uint32),
    ('prefersLocalInvocationVertexOutput', ctypes.c_uint32),
    ('prefersLocalInvocationPrimitiveOutput', ctypes.c_uint32),
    ('prefersCompactVertexOutput', ctypes.c_uint32),
    ('prefersCompactPrimitiveOutput', ctypes.c_uint32),
]

VkPhysicalDeviceMeshShaderPropertiesEXT = struct_VkPhysicalDeviceMeshShaderPropertiesEXT
class struct_VkDrawMeshTasksIndirectCommandEXT(Structure):
    pass

struct_VkDrawMeshTasksIndirectCommandEXT._pack_ = 1 # source:False
struct_VkDrawMeshTasksIndirectCommandEXT._fields_ = [
    ('groupCountX', ctypes.c_uint32),
    ('groupCountY', ctypes.c_uint32),
    ('groupCountZ', ctypes.c_uint32),
]

VkDrawMeshTasksIndirectCommandEXT = struct_VkDrawMeshTasksIndirectCommandEXT
PFN_vkCmdDrawMeshTasksEXT = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.c_uint32, ctypes.c_uint32, ctypes.c_uint32)
PFN_vkCmdDrawMeshTasksIndirectEXT = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.POINTER(struct_VkBuffer_T), ctypes.c_uint64, ctypes.c_uint32, ctypes.c_uint32)
PFN_vkCmdDrawMeshTasksIndirectCountEXT = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_VkCommandBuffer_T), ctypes.POINTER(struct_VkBuffer_T), ctypes.c_uint64, ctypes.POINTER(struct_VkBuffer_T), ctypes.c_uint64, ctypes.c_uint32, ctypes.c_uint32)
try:
    vkCmdDrawMeshTasksEXT = _libraries['FIXME_STUB'].vkCmdDrawMeshTasksEXT
    vkCmdDrawMeshTasksEXT.restype = None
    vkCmdDrawMeshTasksEXT.argtypes = [VkCommandBuffer, uint32_t, uint32_t, uint32_t]
except AttributeError:
    pass
try:
    vkCmdDrawMeshTasksIndirectEXT = _libraries['FIXME_STUB'].vkCmdDrawMeshTasksIndirectEXT
    vkCmdDrawMeshTasksIndirectEXT.restype = None
    vkCmdDrawMeshTasksIndirectEXT.argtypes = [VkCommandBuffer, VkBuffer, VkDeviceSize, uint32_t, uint32_t]
except AttributeError:
    pass
try:
    vkCmdDrawMeshTasksIndirectCountEXT = _libraries['FIXME_STUB'].vkCmdDrawMeshTasksIndirectCountEXT
    vkCmdDrawMeshTasksIndirectCountEXT.restype = None
    vkCmdDrawMeshTasksIndirectCountEXT.argtypes = [VkCommandBuffer, VkBuffer, VkDeviceSize, VkBuffer, VkDeviceSize, uint32_t, uint32_t]
except AttributeError:
    pass
VULKAN_H_ = 1 # macro
__all__ = \
    ['PFN_vkAcquireDrmDisplayEXT', 'PFN_vkAcquireNextImage2KHR',
    'PFN_vkAcquireNextImageKHR',
    'PFN_vkAcquirePerformanceConfigurationINTEL',
    'PFN_vkAcquireProfilingLockKHR', 'PFN_vkAllocateCommandBuffers',
    'PFN_vkAllocateDescriptorSets', 'PFN_vkAllocateMemory',
    'PFN_vkAllocationFunction', 'PFN_vkBeginCommandBuffer',
    'PFN_vkBindAccelerationStructureMemoryNV',
    'PFN_vkBindBufferMemory', 'PFN_vkBindBufferMemory2',
    'PFN_vkBindBufferMemory2KHR', 'PFN_vkBindImageMemory',
    'PFN_vkBindImageMemory2', 'PFN_vkBindImageMemory2KHR',
    'PFN_vkBindOpticalFlowSessionImageNV',
    'PFN_vkBindVideoSessionMemoryKHR',
    'PFN_vkBuildAccelerationStructuresKHR', 'PFN_vkBuildMicromapsEXT',
    'PFN_vkCmdBeginConditionalRenderingEXT',
    'PFN_vkCmdBeginDebugUtilsLabelEXT', 'PFN_vkCmdBeginQuery',
    'PFN_vkCmdBeginQueryIndexedEXT', 'PFN_vkCmdBeginRenderPass',
    'PFN_vkCmdBeginRenderPass2', 'PFN_vkCmdBeginRenderPass2KHR',
    'PFN_vkCmdBeginRendering', 'PFN_vkCmdBeginRenderingKHR',
    'PFN_vkCmdBeginTransformFeedbackEXT',
    'PFN_vkCmdBeginVideoCodingKHR',
    'PFN_vkCmdBindDescriptorBufferEmbeddedSamplers2EXT',
    'PFN_vkCmdBindDescriptorBufferEmbeddedSamplersEXT',
    'PFN_vkCmdBindDescriptorBuffersEXT',
    'PFN_vkCmdBindDescriptorSets', 'PFN_vkCmdBindDescriptorSets2KHR',
    'PFN_vkCmdBindIndexBuffer', 'PFN_vkCmdBindIndexBuffer2KHR',
    'PFN_vkCmdBindInvocationMaskHUAWEI', 'PFN_vkCmdBindPipeline',
    'PFN_vkCmdBindPipelineShaderGroupNV', 'PFN_vkCmdBindShadersEXT',
    'PFN_vkCmdBindShadingRateImageNV',
    'PFN_vkCmdBindTransformFeedbackBuffersEXT',
    'PFN_vkCmdBindVertexBuffers', 'PFN_vkCmdBindVertexBuffers2',
    'PFN_vkCmdBindVertexBuffers2EXT', 'PFN_vkCmdBlitImage',
    'PFN_vkCmdBlitImage2', 'PFN_vkCmdBlitImage2KHR',
    'PFN_vkCmdBuildAccelerationStructureNV',
    'PFN_vkCmdBuildAccelerationStructuresIndirectKHR',
    'PFN_vkCmdBuildAccelerationStructuresKHR',
    'PFN_vkCmdBuildMicromapsEXT', 'PFN_vkCmdClearAttachments',
    'PFN_vkCmdClearColorImage', 'PFN_vkCmdClearDepthStencilImage',
    'PFN_vkCmdControlVideoCodingKHR',
    'PFN_vkCmdCopyAccelerationStructureKHR',
    'PFN_vkCmdCopyAccelerationStructureNV',
    'PFN_vkCmdCopyAccelerationStructureToMemoryKHR',
    'PFN_vkCmdCopyBuffer', 'PFN_vkCmdCopyBuffer2',
    'PFN_vkCmdCopyBuffer2KHR', 'PFN_vkCmdCopyBufferToImage',
    'PFN_vkCmdCopyBufferToImage2', 'PFN_vkCmdCopyBufferToImage2KHR',
    'PFN_vkCmdCopyImage', 'PFN_vkCmdCopyImage2',
    'PFN_vkCmdCopyImage2KHR', 'PFN_vkCmdCopyImageToBuffer',
    'PFN_vkCmdCopyImageToBuffer2', 'PFN_vkCmdCopyImageToBuffer2KHR',
    'PFN_vkCmdCopyMemoryIndirectNV',
    'PFN_vkCmdCopyMemoryToAccelerationStructureKHR',
    'PFN_vkCmdCopyMemoryToImageIndirectNV',
    'PFN_vkCmdCopyMemoryToMicromapEXT', 'PFN_vkCmdCopyMicromapEXT',
    'PFN_vkCmdCopyMicromapToMemoryEXT',
    'PFN_vkCmdCopyQueryPoolResults', 'PFN_vkCmdCuLaunchKernelNVX',
    'PFN_vkCmdCudaLaunchKernelNV', 'PFN_vkCmdDebugMarkerBeginEXT',
    'PFN_vkCmdDebugMarkerEndEXT', 'PFN_vkCmdDebugMarkerInsertEXT',
    'PFN_vkCmdDecodeVideoKHR',
    'PFN_vkCmdDecompressMemoryIndirectCountNV',
    'PFN_vkCmdDecompressMemoryNV', 'PFN_vkCmdDispatch',
    'PFN_vkCmdDispatchBase', 'PFN_vkCmdDispatchBaseKHR',
    'PFN_vkCmdDispatchIndirect', 'PFN_vkCmdDraw',
    'PFN_vkCmdDrawClusterHUAWEI',
    'PFN_vkCmdDrawClusterIndirectHUAWEI', 'PFN_vkCmdDrawIndexed',
    'PFN_vkCmdDrawIndexedIndirect',
    'PFN_vkCmdDrawIndexedIndirectCount',
    'PFN_vkCmdDrawIndexedIndirectCountAMD',
    'PFN_vkCmdDrawIndexedIndirectCountKHR', 'PFN_vkCmdDrawIndirect',
    'PFN_vkCmdDrawIndirectByteCountEXT', 'PFN_vkCmdDrawIndirectCount',
    'PFN_vkCmdDrawIndirectCountAMD', 'PFN_vkCmdDrawIndirectCountKHR',
    'PFN_vkCmdDrawMeshTasksEXT',
    'PFN_vkCmdDrawMeshTasksIndirectCountEXT',
    'PFN_vkCmdDrawMeshTasksIndirectCountNV',
    'PFN_vkCmdDrawMeshTasksIndirectEXT',
    'PFN_vkCmdDrawMeshTasksIndirectNV', 'PFN_vkCmdDrawMeshTasksNV',
    'PFN_vkCmdDrawMultiEXT', 'PFN_vkCmdDrawMultiIndexedEXT',
    'PFN_vkCmdEncodeVideoKHR', 'PFN_vkCmdEndConditionalRenderingEXT',
    'PFN_vkCmdEndDebugUtilsLabelEXT', 'PFN_vkCmdEndQuery',
    'PFN_vkCmdEndQueryIndexedEXT', 'PFN_vkCmdEndRenderPass',
    'PFN_vkCmdEndRenderPass2', 'PFN_vkCmdEndRenderPass2KHR',
    'PFN_vkCmdEndRendering', 'PFN_vkCmdEndRenderingKHR',
    'PFN_vkCmdEndTransformFeedbackEXT', 'PFN_vkCmdEndVideoCodingKHR',
    'PFN_vkCmdExecuteCommands', 'PFN_vkCmdExecuteGeneratedCommandsNV',
    'PFN_vkCmdFillBuffer', 'PFN_vkCmdInsertDebugUtilsLabelEXT',
    'PFN_vkCmdNextSubpass', 'PFN_vkCmdNextSubpass2',
    'PFN_vkCmdNextSubpass2KHR', 'PFN_vkCmdOpticalFlowExecuteNV',
    'PFN_vkCmdPipelineBarrier', 'PFN_vkCmdPipelineBarrier2',
    'PFN_vkCmdPipelineBarrier2KHR',
    'PFN_vkCmdPreprocessGeneratedCommandsNV',
    'PFN_vkCmdPushConstants', 'PFN_vkCmdPushConstants2KHR',
    'PFN_vkCmdPushDescriptorSet2KHR', 'PFN_vkCmdPushDescriptorSetKHR',
    'PFN_vkCmdPushDescriptorSetWithTemplate2KHR',
    'PFN_vkCmdPushDescriptorSetWithTemplateKHR',
    'PFN_vkCmdResetEvent', 'PFN_vkCmdResetEvent2',
    'PFN_vkCmdResetEvent2KHR', 'PFN_vkCmdResetQueryPool',
    'PFN_vkCmdResolveImage', 'PFN_vkCmdResolveImage2',
    'PFN_vkCmdResolveImage2KHR',
    'PFN_vkCmdSetAlphaToCoverageEnableEXT',
    'PFN_vkCmdSetAlphaToOneEnableEXT',
    'PFN_vkCmdSetAttachmentFeedbackLoopEnableEXT',
    'PFN_vkCmdSetBlendConstants', 'PFN_vkCmdSetCheckpointNV',
    'PFN_vkCmdSetCoarseSampleOrderNV',
    'PFN_vkCmdSetColorBlendAdvancedEXT',
    'PFN_vkCmdSetColorBlendEnableEXT',
    'PFN_vkCmdSetColorBlendEquationEXT',
    'PFN_vkCmdSetColorWriteEnableEXT',
    'PFN_vkCmdSetColorWriteMaskEXT',
    'PFN_vkCmdSetConservativeRasterizationModeEXT',
    'PFN_vkCmdSetCoverageModulationModeNV',
    'PFN_vkCmdSetCoverageModulationTableEnableNV',
    'PFN_vkCmdSetCoverageModulationTableNV',
    'PFN_vkCmdSetCoverageReductionModeNV',
    'PFN_vkCmdSetCoverageToColorEnableNV',
    'PFN_vkCmdSetCoverageToColorLocationNV', 'PFN_vkCmdSetCullMode',
    'PFN_vkCmdSetCullModeEXT', 'PFN_vkCmdSetDepthBias',
    'PFN_vkCmdSetDepthBias2EXT', 'PFN_vkCmdSetDepthBiasEnable',
    'PFN_vkCmdSetDepthBiasEnableEXT', 'PFN_vkCmdSetDepthBounds',
    'PFN_vkCmdSetDepthBoundsTestEnable',
    'PFN_vkCmdSetDepthBoundsTestEnableEXT',
    'PFN_vkCmdSetDepthClampEnableEXT',
    'PFN_vkCmdSetDepthClipEnableEXT',
    'PFN_vkCmdSetDepthClipNegativeOneToOneEXT',
    'PFN_vkCmdSetDepthCompareOp', 'PFN_vkCmdSetDepthCompareOpEXT',
    'PFN_vkCmdSetDepthTestEnable', 'PFN_vkCmdSetDepthTestEnableEXT',
    'PFN_vkCmdSetDepthWriteEnable', 'PFN_vkCmdSetDepthWriteEnableEXT',
    'PFN_vkCmdSetDescriptorBufferOffsets2EXT',
    'PFN_vkCmdSetDescriptorBufferOffsetsEXT',
    'PFN_vkCmdSetDeviceMask', 'PFN_vkCmdSetDeviceMaskKHR',
    'PFN_vkCmdSetDiscardRectangleEXT',
    'PFN_vkCmdSetDiscardRectangleEnableEXT',
    'PFN_vkCmdSetDiscardRectangleModeEXT', 'PFN_vkCmdSetEvent',
    'PFN_vkCmdSetEvent2', 'PFN_vkCmdSetEvent2KHR',
    'PFN_vkCmdSetExclusiveScissorEnableNV',
    'PFN_vkCmdSetExclusiveScissorNV',
    'PFN_vkCmdSetExtraPrimitiveOverestimationSizeEXT',
    'PFN_vkCmdSetFragmentShadingRateEnumNV',
    'PFN_vkCmdSetFragmentShadingRateKHR', 'PFN_vkCmdSetFrontFace',
    'PFN_vkCmdSetFrontFaceEXT',
    'PFN_vkCmdSetLineRasterizationModeEXT',
    'PFN_vkCmdSetLineStippleEXT', 'PFN_vkCmdSetLineStippleEnableEXT',
    'PFN_vkCmdSetLineWidth', 'PFN_vkCmdSetLogicOpEXT',
    'PFN_vkCmdSetLogicOpEnableEXT',
    'PFN_vkCmdSetPatchControlPointsEXT',
    'PFN_vkCmdSetPerformanceMarkerINTEL',
    'PFN_vkCmdSetPerformanceOverrideINTEL',
    'PFN_vkCmdSetPerformanceStreamMarkerINTEL',
    'PFN_vkCmdSetPolygonModeEXT',
    'PFN_vkCmdSetPrimitiveRestartEnable',
    'PFN_vkCmdSetPrimitiveRestartEnableEXT',
    'PFN_vkCmdSetPrimitiveTopology',
    'PFN_vkCmdSetPrimitiveTopologyEXT',
    'PFN_vkCmdSetProvokingVertexModeEXT',
    'PFN_vkCmdSetRasterizationSamplesEXT',
    'PFN_vkCmdSetRasterizationStreamEXT',
    'PFN_vkCmdSetRasterizerDiscardEnable',
    'PFN_vkCmdSetRasterizerDiscardEnableEXT',
    'PFN_vkCmdSetRayTracingPipelineStackSizeKHR',
    'PFN_vkCmdSetRepresentativeFragmentTestEnableNV',
    'PFN_vkCmdSetSampleLocationsEXT',
    'PFN_vkCmdSetSampleLocationsEnableEXT',
    'PFN_vkCmdSetSampleMaskEXT', 'PFN_vkCmdSetScissor',
    'PFN_vkCmdSetScissorWithCount', 'PFN_vkCmdSetScissorWithCountEXT',
    'PFN_vkCmdSetShadingRateImageEnableNV',
    'PFN_vkCmdSetStencilCompareMask', 'PFN_vkCmdSetStencilOp',
    'PFN_vkCmdSetStencilOpEXT', 'PFN_vkCmdSetStencilReference',
    'PFN_vkCmdSetStencilTestEnable',
    'PFN_vkCmdSetStencilTestEnableEXT',
    'PFN_vkCmdSetStencilWriteMask',
    'PFN_vkCmdSetTessellationDomainOriginEXT',
    'PFN_vkCmdSetVertexInputEXT', 'PFN_vkCmdSetViewport',
    'PFN_vkCmdSetViewportShadingRatePaletteNV',
    'PFN_vkCmdSetViewportSwizzleNV',
    'PFN_vkCmdSetViewportWScalingEnableNV',
    'PFN_vkCmdSetViewportWScalingNV', 'PFN_vkCmdSetViewportWithCount',
    'PFN_vkCmdSetViewportWithCountEXT',
    'PFN_vkCmdSubpassShadingHUAWEI', 'PFN_vkCmdTraceRaysIndirect2KHR',
    'PFN_vkCmdTraceRaysIndirectKHR', 'PFN_vkCmdTraceRaysKHR',
    'PFN_vkCmdTraceRaysNV', 'PFN_vkCmdUpdateBuffer',
    'PFN_vkCmdUpdatePipelineIndirectBufferNV', 'PFN_vkCmdWaitEvents',
    'PFN_vkCmdWaitEvents2', 'PFN_vkCmdWaitEvents2KHR',
    'PFN_vkCmdWriteAccelerationStructuresPropertiesKHR',
    'PFN_vkCmdWriteAccelerationStructuresPropertiesNV',
    'PFN_vkCmdWriteBufferMarker2AMD', 'PFN_vkCmdWriteBufferMarkerAMD',
    'PFN_vkCmdWriteMicromapsPropertiesEXT', 'PFN_vkCmdWriteTimestamp',
    'PFN_vkCmdWriteTimestamp2', 'PFN_vkCmdWriteTimestamp2KHR',
    'PFN_vkCompileDeferredNV', 'PFN_vkCopyAccelerationStructureKHR',
    'PFN_vkCopyAccelerationStructureToMemoryKHR',
    'PFN_vkCopyImageToImageEXT', 'PFN_vkCopyImageToMemoryEXT',
    'PFN_vkCopyMemoryToAccelerationStructureKHR',
    'PFN_vkCopyMemoryToImageEXT', 'PFN_vkCopyMemoryToMicromapEXT',
    'PFN_vkCopyMicromapEXT', 'PFN_vkCopyMicromapToMemoryEXT',
    'PFN_vkCreateAccelerationStructureKHR',
    'PFN_vkCreateAccelerationStructureNV', 'PFN_vkCreateBuffer',
    'PFN_vkCreateBufferView', 'PFN_vkCreateCommandPool',
    'PFN_vkCreateComputePipelines', 'PFN_vkCreateCuFunctionNVX',
    'PFN_vkCreateCuModuleNVX', 'PFN_vkCreateCudaFunctionNV',
    'PFN_vkCreateCudaModuleNV', 'PFN_vkCreateDebugReportCallbackEXT',
    'PFN_vkCreateDebugUtilsMessengerEXT',
    'PFN_vkCreateDeferredOperationKHR', 'PFN_vkCreateDescriptorPool',
    'PFN_vkCreateDescriptorSetLayout',
    'PFN_vkCreateDescriptorUpdateTemplate',
    'PFN_vkCreateDescriptorUpdateTemplateKHR', 'PFN_vkCreateDevice',
    'PFN_vkCreateDisplayModeKHR',
    'PFN_vkCreateDisplayPlaneSurfaceKHR', 'PFN_vkCreateEvent',
    'PFN_vkCreateFence', 'PFN_vkCreateFramebuffer',
    'PFN_vkCreateGraphicsPipelines', 'PFN_vkCreateHeadlessSurfaceEXT',
    'PFN_vkCreateImage', 'PFN_vkCreateImageView',
    'PFN_vkCreateIndirectCommandsLayoutNV', 'PFN_vkCreateInstance',
    'PFN_vkCreateMicromapEXT', 'PFN_vkCreateOpticalFlowSessionNV',
    'PFN_vkCreatePipelineCache', 'PFN_vkCreatePipelineLayout',
    'PFN_vkCreatePrivateDataSlot', 'PFN_vkCreatePrivateDataSlotEXT',
    'PFN_vkCreateQueryPool', 'PFN_vkCreateRayTracingPipelinesKHR',
    'PFN_vkCreateRayTracingPipelinesNV', 'PFN_vkCreateRenderPass',
    'PFN_vkCreateRenderPass2', 'PFN_vkCreateRenderPass2KHR',
    'PFN_vkCreateSampler', 'PFN_vkCreateSamplerYcbcrConversion',
    'PFN_vkCreateSamplerYcbcrConversionKHR', 'PFN_vkCreateSemaphore',
    'PFN_vkCreateShaderModule', 'PFN_vkCreateShadersEXT',
    'PFN_vkCreateSharedSwapchainsKHR', 'PFN_vkCreateSwapchainKHR',
    'PFN_vkCreateValidationCacheEXT', 'PFN_vkCreateVideoSessionKHR',
    'PFN_vkCreateVideoSessionParametersKHR',
    'PFN_vkDebugMarkerSetObjectNameEXT',
    'PFN_vkDebugMarkerSetObjectTagEXT',
    'PFN_vkDebugReportCallbackEXT', 'PFN_vkDebugReportMessageEXT',
    'PFN_vkDebugUtilsMessengerCallbackEXT',
    'PFN_vkDeferredOperationJoinKHR',
    'PFN_vkDestroyAccelerationStructureKHR',
    'PFN_vkDestroyAccelerationStructureNV', 'PFN_vkDestroyBuffer',
    'PFN_vkDestroyBufferView', 'PFN_vkDestroyCommandPool',
    'PFN_vkDestroyCuFunctionNVX', 'PFN_vkDestroyCuModuleNVX',
    'PFN_vkDestroyCudaFunctionNV', 'PFN_vkDestroyCudaModuleNV',
    'PFN_vkDestroyDebugReportCallbackEXT',
    'PFN_vkDestroyDebugUtilsMessengerEXT',
    'PFN_vkDestroyDeferredOperationKHR',
    'PFN_vkDestroyDescriptorPool', 'PFN_vkDestroyDescriptorSetLayout',
    'PFN_vkDestroyDescriptorUpdateTemplate',
    'PFN_vkDestroyDescriptorUpdateTemplateKHR', 'PFN_vkDestroyDevice',
    'PFN_vkDestroyEvent', 'PFN_vkDestroyFence',
    'PFN_vkDestroyFramebuffer', 'PFN_vkDestroyImage',
    'PFN_vkDestroyImageView', 'PFN_vkDestroyIndirectCommandsLayoutNV',
    'PFN_vkDestroyInstance', 'PFN_vkDestroyMicromapEXT',
    'PFN_vkDestroyOpticalFlowSessionNV', 'PFN_vkDestroyPipeline',
    'PFN_vkDestroyPipelineCache', 'PFN_vkDestroyPipelineLayout',
    'PFN_vkDestroyPrivateDataSlot', 'PFN_vkDestroyPrivateDataSlotEXT',
    'PFN_vkDestroyQueryPool', 'PFN_vkDestroyRenderPass',
    'PFN_vkDestroySampler', 'PFN_vkDestroySamplerYcbcrConversion',
    'PFN_vkDestroySamplerYcbcrConversionKHR',
    'PFN_vkDestroySemaphore', 'PFN_vkDestroyShaderEXT',
    'PFN_vkDestroyShaderModule', 'PFN_vkDestroySurfaceKHR',
    'PFN_vkDestroySwapchainKHR', 'PFN_vkDestroyValidationCacheEXT',
    'PFN_vkDestroyVideoSessionKHR',
    'PFN_vkDestroyVideoSessionParametersKHR',
    'PFN_vkDeviceMemoryReportCallbackEXT', 'PFN_vkDeviceWaitIdle',
    'PFN_vkDisplayPowerControlEXT', 'PFN_vkEndCommandBuffer',
    'PFN_vkEnumerateDeviceExtensionProperties',
    'PFN_vkEnumerateDeviceLayerProperties',
    'PFN_vkEnumerateInstanceExtensionProperties',
    'PFN_vkEnumerateInstanceLayerProperties',
    'PFN_vkEnumerateInstanceVersion',
    'PFN_vkEnumeratePhysicalDeviceGroups',
    'PFN_vkEnumeratePhysicalDeviceGroupsKHR',
    'PFN_vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR',
    'PFN_vkEnumeratePhysicalDevices', 'PFN_vkFlushMappedMemoryRanges',
    'PFN_vkFreeCommandBuffers', 'PFN_vkFreeDescriptorSets',
    'PFN_vkFreeFunction', 'PFN_vkFreeMemory',
    'PFN_vkGetAccelerationStructureBuildSizesKHR',
    'PFN_vkGetAccelerationStructureDeviceAddressKHR',
    'PFN_vkGetAccelerationStructureHandleNV',
    'PFN_vkGetAccelerationStructureMemoryRequirementsNV',
    'PFN_vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT',
    'PFN_vkGetBufferDeviceAddress', 'PFN_vkGetBufferDeviceAddressEXT',
    'PFN_vkGetBufferDeviceAddressKHR',
    'PFN_vkGetBufferMemoryRequirements',
    'PFN_vkGetBufferMemoryRequirements2',
    'PFN_vkGetBufferMemoryRequirements2KHR',
    'PFN_vkGetBufferOpaqueCaptureAddress',
    'PFN_vkGetBufferOpaqueCaptureAddressKHR',
    'PFN_vkGetBufferOpaqueCaptureDescriptorDataEXT',
    'PFN_vkGetCalibratedTimestampsEXT',
    'PFN_vkGetCalibratedTimestampsKHR', 'PFN_vkGetCudaModuleCacheNV',
    'PFN_vkGetDeferredOperationMaxConcurrencyKHR',
    'PFN_vkGetDeferredOperationResultKHR', 'PFN_vkGetDescriptorEXT',
    'PFN_vkGetDescriptorSetHostMappingVALVE',
    'PFN_vkGetDescriptorSetLayoutBindingOffsetEXT',
    'PFN_vkGetDescriptorSetLayoutHostMappingInfoVALVE',
    'PFN_vkGetDescriptorSetLayoutSizeEXT',
    'PFN_vkGetDescriptorSetLayoutSupport',
    'PFN_vkGetDescriptorSetLayoutSupportKHR',
    'PFN_vkGetDeviceAccelerationStructureCompatibilityKHR',
    'PFN_vkGetDeviceBufferMemoryRequirements',
    'PFN_vkGetDeviceBufferMemoryRequirementsKHR',
    'PFN_vkGetDeviceFaultInfoEXT',
    'PFN_vkGetDeviceGroupPeerMemoryFeatures',
    'PFN_vkGetDeviceGroupPeerMemoryFeaturesKHR',
    'PFN_vkGetDeviceGroupPresentCapabilitiesKHR',
    'PFN_vkGetDeviceGroupSurfacePresentModesKHR',
    'PFN_vkGetDeviceImageMemoryRequirements',
    'PFN_vkGetDeviceImageMemoryRequirementsKHR',
    'PFN_vkGetDeviceImageSparseMemoryRequirements',
    'PFN_vkGetDeviceImageSparseMemoryRequirementsKHR',
    'PFN_vkGetDeviceImageSubresourceLayoutKHR',
    'PFN_vkGetDeviceMemoryCommitment',
    'PFN_vkGetDeviceMemoryOpaqueCaptureAddress',
    'PFN_vkGetDeviceMemoryOpaqueCaptureAddressKHR',
    'PFN_vkGetDeviceMicromapCompatibilityEXT',
    'PFN_vkGetDeviceProcAddr', 'PFN_vkGetDeviceQueue',
    'PFN_vkGetDeviceQueue2',
    'PFN_vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI',
    'PFN_vkGetDisplayModeProperties2KHR',
    'PFN_vkGetDisplayModePropertiesKHR',
    'PFN_vkGetDisplayPlaneCapabilities2KHR',
    'PFN_vkGetDisplayPlaneCapabilitiesKHR',
    'PFN_vkGetDisplayPlaneSupportedDisplaysKHR',
    'PFN_vkGetDrmDisplayEXT',
    'PFN_vkGetDynamicRenderingTilePropertiesQCOM',
    'PFN_vkGetEncodedVideoSessionParametersKHR',
    'PFN_vkGetEventStatus', 'PFN_vkGetFenceFdKHR',
    'PFN_vkGetFenceStatus', 'PFN_vkGetFramebufferTilePropertiesQCOM',
    'PFN_vkGetGeneratedCommandsMemoryRequirementsNV',
    'PFN_vkGetImageDrmFormatModifierPropertiesEXT',
    'PFN_vkGetImageMemoryRequirements',
    'PFN_vkGetImageMemoryRequirements2',
    'PFN_vkGetImageMemoryRequirements2KHR',
    'PFN_vkGetImageOpaqueCaptureDescriptorDataEXT',
    'PFN_vkGetImageSparseMemoryRequirements',
    'PFN_vkGetImageSparseMemoryRequirements2',
    'PFN_vkGetImageSparseMemoryRequirements2KHR',
    'PFN_vkGetImageSubresourceLayout',
    'PFN_vkGetImageSubresourceLayout2EXT',
    'PFN_vkGetImageSubresourceLayout2KHR',
    'PFN_vkGetImageViewAddressNVX', 'PFN_vkGetImageViewHandleNVX',
    'PFN_vkGetImageViewOpaqueCaptureDescriptorDataEXT',
    'PFN_vkGetInstanceProcAddr', 'PFN_vkGetInstanceProcAddrLUNARG',
    'PFN_vkGetLatencyTimingsNV', 'PFN_vkGetMemoryFdKHR',
    'PFN_vkGetMemoryFdPropertiesKHR',
    'PFN_vkGetMemoryHostPointerPropertiesEXT',
    'PFN_vkGetMemoryRemoteAddressNV',
    'PFN_vkGetMicromapBuildSizesEXT',
    'PFN_vkGetPastPresentationTimingGOOGLE',
    'PFN_vkGetPerformanceParameterINTEL',
    'PFN_vkGetPhysicalDeviceCalibrateableTimeDomainsEXT',
    'PFN_vkGetPhysicalDeviceCalibrateableTimeDomainsKHR',
    'PFN_vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR',
    'PFN_vkGetPhysicalDeviceCooperativeMatrixPropertiesNV',
    'PFN_vkGetPhysicalDeviceDisplayPlaneProperties2KHR',
    'PFN_vkGetPhysicalDeviceDisplayPlanePropertiesKHR',
    'PFN_vkGetPhysicalDeviceDisplayProperties2KHR',
    'PFN_vkGetPhysicalDeviceDisplayPropertiesKHR',
    'PFN_vkGetPhysicalDeviceExternalBufferProperties',
    'PFN_vkGetPhysicalDeviceExternalBufferPropertiesKHR',
    'PFN_vkGetPhysicalDeviceExternalFenceProperties',
    'PFN_vkGetPhysicalDeviceExternalFencePropertiesKHR',
    'PFN_vkGetPhysicalDeviceExternalImageFormatPropertiesNV',
    'PFN_vkGetPhysicalDeviceExternalSemaphoreProperties',
    'PFN_vkGetPhysicalDeviceExternalSemaphorePropertiesKHR',
    'PFN_vkGetPhysicalDeviceFeatures',
    'PFN_vkGetPhysicalDeviceFeatures2',
    'PFN_vkGetPhysicalDeviceFeatures2KHR',
    'PFN_vkGetPhysicalDeviceFormatProperties',
    'PFN_vkGetPhysicalDeviceFormatProperties2',
    'PFN_vkGetPhysicalDeviceFormatProperties2KHR',
    'PFN_vkGetPhysicalDeviceFragmentShadingRatesKHR',
    'PFN_vkGetPhysicalDeviceImageFormatProperties',
    'PFN_vkGetPhysicalDeviceImageFormatProperties2',
    'PFN_vkGetPhysicalDeviceImageFormatProperties2KHR',
    'PFN_vkGetPhysicalDeviceMemoryProperties',
    'PFN_vkGetPhysicalDeviceMemoryProperties2',
    'PFN_vkGetPhysicalDeviceMemoryProperties2KHR',
    'PFN_vkGetPhysicalDeviceMultisamplePropertiesEXT',
    'PFN_vkGetPhysicalDeviceOpticalFlowImageFormatsNV',
    'PFN_vkGetPhysicalDevicePresentRectanglesKHR',
    'PFN_vkGetPhysicalDeviceProperties',
    'PFN_vkGetPhysicalDeviceProperties2',
    'PFN_vkGetPhysicalDeviceProperties2KHR',
    'PFN_vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR',
    'PFN_vkGetPhysicalDeviceQueueFamilyProperties',
    'PFN_vkGetPhysicalDeviceQueueFamilyProperties2',
    'PFN_vkGetPhysicalDeviceQueueFamilyProperties2KHR',
    'PFN_vkGetPhysicalDeviceSparseImageFormatProperties',
    'PFN_vkGetPhysicalDeviceSparseImageFormatProperties2',
    'PFN_vkGetPhysicalDeviceSparseImageFormatProperties2KHR',
    'PFN_vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV',
    'PFN_vkGetPhysicalDeviceSurfaceCapabilities2EXT',
    'PFN_vkGetPhysicalDeviceSurfaceCapabilities2KHR',
    'PFN_vkGetPhysicalDeviceSurfaceCapabilitiesKHR',
    'PFN_vkGetPhysicalDeviceSurfaceFormats2KHR',
    'PFN_vkGetPhysicalDeviceSurfaceFormatsKHR',
    'PFN_vkGetPhysicalDeviceSurfacePresentModesKHR',
    'PFN_vkGetPhysicalDeviceSurfaceSupportKHR',
    'PFN_vkGetPhysicalDeviceToolProperties',
    'PFN_vkGetPhysicalDeviceToolPropertiesEXT',
    'PFN_vkGetPhysicalDeviceVideoCapabilitiesKHR',
    'PFN_vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR',
    'PFN_vkGetPhysicalDeviceVideoFormatPropertiesKHR',
    'PFN_vkGetPipelineCacheData',
    'PFN_vkGetPipelineExecutableInternalRepresentationsKHR',
    'PFN_vkGetPipelineExecutablePropertiesKHR',
    'PFN_vkGetPipelineExecutableStatisticsKHR',
    'PFN_vkGetPipelineIndirectDeviceAddressNV',
    'PFN_vkGetPipelineIndirectMemoryRequirementsNV',
    'PFN_vkGetPipelinePropertiesEXT', 'PFN_vkGetPrivateData',
    'PFN_vkGetPrivateDataEXT', 'PFN_vkGetQueryPoolResults',
    'PFN_vkGetQueueCheckpointData2NV',
    'PFN_vkGetQueueCheckpointDataNV',
    'PFN_vkGetRayTracingCaptureReplayShaderGroupHandlesKHR',
    'PFN_vkGetRayTracingShaderGroupHandlesKHR',
    'PFN_vkGetRayTracingShaderGroupHandlesNV',
    'PFN_vkGetRayTracingShaderGroupStackSizeKHR',
    'PFN_vkGetRefreshCycleDurationGOOGLE',
    'PFN_vkGetRenderAreaGranularity',
    'PFN_vkGetRenderingAreaGranularityKHR',
    'PFN_vkGetSamplerOpaqueCaptureDescriptorDataEXT',
    'PFN_vkGetSemaphoreCounterValue',
    'PFN_vkGetSemaphoreCounterValueKHR', 'PFN_vkGetSemaphoreFdKHR',
    'PFN_vkGetShaderBinaryDataEXT', 'PFN_vkGetShaderInfoAMD',
    'PFN_vkGetShaderModuleCreateInfoIdentifierEXT',
    'PFN_vkGetShaderModuleIdentifierEXT',
    'PFN_vkGetSwapchainCounterEXT', 'PFN_vkGetSwapchainImagesKHR',
    'PFN_vkGetSwapchainStatusKHR', 'PFN_vkGetValidationCacheDataEXT',
    'PFN_vkGetVideoSessionMemoryRequirementsKHR',
    'PFN_vkImportFenceFdKHR', 'PFN_vkImportSemaphoreFdKHR',
    'PFN_vkInitializePerformanceApiINTEL',
    'PFN_vkInternalAllocationNotification',
    'PFN_vkInternalFreeNotification',
    'PFN_vkInvalidateMappedMemoryRanges', 'PFN_vkLatencySleepNV',
    'PFN_vkMapMemory', 'PFN_vkMapMemory2KHR',
    'PFN_vkMergePipelineCaches', 'PFN_vkMergeValidationCachesEXT',
    'PFN_vkQueueBeginDebugUtilsLabelEXT', 'PFN_vkQueueBindSparse',
    'PFN_vkQueueEndDebugUtilsLabelEXT',
    'PFN_vkQueueInsertDebugUtilsLabelEXT',
    'PFN_vkQueueNotifyOutOfBandNV', 'PFN_vkQueuePresentKHR',
    'PFN_vkQueueSetPerformanceConfigurationINTEL',
    'PFN_vkQueueSubmit', 'PFN_vkQueueSubmit2',
    'PFN_vkQueueSubmit2KHR', 'PFN_vkQueueWaitIdle',
    'PFN_vkReallocationFunction', 'PFN_vkRegisterDeviceEventEXT',
    'PFN_vkRegisterDisplayEventEXT', 'PFN_vkReleaseDisplayEXT',
    'PFN_vkReleasePerformanceConfigurationINTEL',
    'PFN_vkReleaseProfilingLockKHR',
    'PFN_vkReleaseSwapchainImagesEXT', 'PFN_vkResetCommandBuffer',
    'PFN_vkResetCommandPool', 'PFN_vkResetDescriptorPool',
    'PFN_vkResetEvent', 'PFN_vkResetFences', 'PFN_vkResetQueryPool',
    'PFN_vkResetQueryPoolEXT', 'PFN_vkSetDebugUtilsObjectNameEXT',
    'PFN_vkSetDebugUtilsObjectTagEXT',
    'PFN_vkSetDeviceMemoryPriorityEXT', 'PFN_vkSetEvent',
    'PFN_vkSetHdrMetadataEXT', 'PFN_vkSetLatencyMarkerNV',
    'PFN_vkSetLatencySleepModeNV', 'PFN_vkSetLocalDimmingAMD',
    'PFN_vkSetPrivateData', 'PFN_vkSetPrivateDataEXT',
    'PFN_vkSignalSemaphore', 'PFN_vkSignalSemaphoreKHR',
    'PFN_vkSubmitDebugUtilsMessageEXT',
    'PFN_vkTransitionImageLayoutEXT', 'PFN_vkTrimCommandPool',
    'PFN_vkTrimCommandPoolKHR',
    'PFN_vkUninitializePerformanceApiINTEL', 'PFN_vkUnmapMemory',
    'PFN_vkUnmapMemory2KHR', 'PFN_vkUpdateDescriptorSetWithTemplate',
    'PFN_vkUpdateDescriptorSetWithTemplateKHR',
    'PFN_vkUpdateDescriptorSets',
    'PFN_vkUpdateVideoSessionParametersKHR', 'PFN_vkVoidFunction',
    'PFN_vkWaitForFences', 'PFN_vkWaitForPresentKHR',
    'PFN_vkWaitSemaphores', 'PFN_vkWaitSemaphoresKHR',
    'PFN_vkWriteAccelerationStructuresPropertiesKHR',
    'PFN_vkWriteMicromapsPropertiesEXT',
    'STD_VIDEO_H264_ASPECT_RATIO_IDC_10_11',
    'STD_VIDEO_H264_ASPECT_RATIO_IDC_12_11',
    'STD_VIDEO_H264_ASPECT_RATIO_IDC_15_11',
    'STD_VIDEO_H264_ASPECT_RATIO_IDC_160_99',
    'STD_VIDEO_H264_ASPECT_RATIO_IDC_16_11',
    'STD_VIDEO_H264_ASPECT_RATIO_IDC_18_11',
    'STD_VIDEO_H264_ASPECT_RATIO_IDC_20_11',
    'STD_VIDEO_H264_ASPECT_RATIO_IDC_24_11',
    'STD_VIDEO_H264_ASPECT_RATIO_IDC_2_1',
    'STD_VIDEO_H264_ASPECT_RATIO_IDC_32_11',
    'STD_VIDEO_H264_ASPECT_RATIO_IDC_3_2',
    'STD_VIDEO_H264_ASPECT_RATIO_IDC_40_33',
    'STD_VIDEO_H264_ASPECT_RATIO_IDC_4_3',
    'STD_VIDEO_H264_ASPECT_RATIO_IDC_64_33',
    'STD_VIDEO_H264_ASPECT_RATIO_IDC_80_33',
    'STD_VIDEO_H264_ASPECT_RATIO_IDC_EXTENDED_SAR',
    'STD_VIDEO_H264_ASPECT_RATIO_IDC_INVALID',
    'STD_VIDEO_H264_ASPECT_RATIO_IDC_MAX_ENUM',
    'STD_VIDEO_H264_ASPECT_RATIO_IDC_SQUARE',
    'STD_VIDEO_H264_ASPECT_RATIO_IDC_UNSPECIFIED',
    'STD_VIDEO_H264_CABAC_INIT_IDC_0',
    'STD_VIDEO_H264_CABAC_INIT_IDC_1',
    'STD_VIDEO_H264_CABAC_INIT_IDC_2',
    'STD_VIDEO_H264_CABAC_INIT_IDC_INVALID',
    'STD_VIDEO_H264_CABAC_INIT_IDC_MAX_ENUM',
    'STD_VIDEO_H264_CHROMA_FORMAT_IDC_420',
    'STD_VIDEO_H264_CHROMA_FORMAT_IDC_422',
    'STD_VIDEO_H264_CHROMA_FORMAT_IDC_444',
    'STD_VIDEO_H264_CHROMA_FORMAT_IDC_INVALID',
    'STD_VIDEO_H264_CHROMA_FORMAT_IDC_MAX_ENUM',
    'STD_VIDEO_H264_CHROMA_FORMAT_IDC_MONOCHROME',
    'STD_VIDEO_H264_DISABLE_DEBLOCKING_FILTER_IDC_DISABLED',
    'STD_VIDEO_H264_DISABLE_DEBLOCKING_FILTER_IDC_ENABLED',
    'STD_VIDEO_H264_DISABLE_DEBLOCKING_FILTER_IDC_INVALID',
    'STD_VIDEO_H264_DISABLE_DEBLOCKING_FILTER_IDC_MAX_ENUM',
    'STD_VIDEO_H264_DISABLE_DEBLOCKING_FILTER_IDC_PARTIAL',
    'STD_VIDEO_H264_LEVEL_IDC_1_0', 'STD_VIDEO_H264_LEVEL_IDC_1_1',
    'STD_VIDEO_H264_LEVEL_IDC_1_2', 'STD_VIDEO_H264_LEVEL_IDC_1_3',
    'STD_VIDEO_H264_LEVEL_IDC_2_0', 'STD_VIDEO_H264_LEVEL_IDC_2_1',
    'STD_VIDEO_H264_LEVEL_IDC_2_2', 'STD_VIDEO_H264_LEVEL_IDC_3_0',
    'STD_VIDEO_H264_LEVEL_IDC_3_1', 'STD_VIDEO_H264_LEVEL_IDC_3_2',
    'STD_VIDEO_H264_LEVEL_IDC_4_0', 'STD_VIDEO_H264_LEVEL_IDC_4_1',
    'STD_VIDEO_H264_LEVEL_IDC_4_2', 'STD_VIDEO_H264_LEVEL_IDC_5_0',
    'STD_VIDEO_H264_LEVEL_IDC_5_1', 'STD_VIDEO_H264_LEVEL_IDC_5_2',
    'STD_VIDEO_H264_LEVEL_IDC_6_0', 'STD_VIDEO_H264_LEVEL_IDC_6_1',
    'STD_VIDEO_H264_LEVEL_IDC_6_2',
    'STD_VIDEO_H264_LEVEL_IDC_INVALID',
    'STD_VIDEO_H264_LEVEL_IDC_MAX_ENUM',
    'STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_END',
    'STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_INVALID',
    'STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_MARK_CURRENT_AS_LONG_TERM',
    'STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_MARK_LONG_TERM',
    'STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_MAX_ENUM',
    'STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_SET_MAX_LONG_TERM_INDEX',
    'STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_UNMARK_ALL',
    'STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_UNMARK_LONG_TERM',
    'STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_UNMARK_SHORT_TERM',
    'STD_VIDEO_H264_MODIFICATION_OF_PIC_NUMS_IDC_END',
    'STD_VIDEO_H264_MODIFICATION_OF_PIC_NUMS_IDC_INVALID',
    'STD_VIDEO_H264_MODIFICATION_OF_PIC_NUMS_IDC_LONG_TERM',
    'STD_VIDEO_H264_MODIFICATION_OF_PIC_NUMS_IDC_MAX_ENUM',
    'STD_VIDEO_H264_MODIFICATION_OF_PIC_NUMS_IDC_SHORT_TERM_ADD',
    'STD_VIDEO_H264_MODIFICATION_OF_PIC_NUMS_IDC_SHORT_TERM_SUBTRACT',
    'STD_VIDEO_H264_PICTURE_TYPE_B', 'STD_VIDEO_H264_PICTURE_TYPE_I',
    'STD_VIDEO_H264_PICTURE_TYPE_IDR',
    'STD_VIDEO_H264_PICTURE_TYPE_INVALID',
    'STD_VIDEO_H264_PICTURE_TYPE_MAX_ENUM',
    'STD_VIDEO_H264_PICTURE_TYPE_P', 'STD_VIDEO_H264_POC_TYPE_0',
    'STD_VIDEO_H264_POC_TYPE_1', 'STD_VIDEO_H264_POC_TYPE_2',
    'STD_VIDEO_H264_POC_TYPE_INVALID',
    'STD_VIDEO_H264_POC_TYPE_MAX_ENUM',
    'STD_VIDEO_H264_PROFILE_IDC_BASELINE',
    'STD_VIDEO_H264_PROFILE_IDC_HIGH',
    'STD_VIDEO_H264_PROFILE_IDC_HIGH_444_PREDICTIVE',
    'STD_VIDEO_H264_PROFILE_IDC_INVALID',
    'STD_VIDEO_H264_PROFILE_IDC_MAIN',
    'STD_VIDEO_H264_PROFILE_IDC_MAX_ENUM',
    'STD_VIDEO_H264_SLICE_TYPE_B', 'STD_VIDEO_H264_SLICE_TYPE_I',
    'STD_VIDEO_H264_SLICE_TYPE_INVALID',
    'STD_VIDEO_H264_SLICE_TYPE_MAX_ENUM',
    'STD_VIDEO_H264_SLICE_TYPE_P',
    'STD_VIDEO_H264_WEIGHTED_BIPRED_IDC_DEFAULT',
    'STD_VIDEO_H264_WEIGHTED_BIPRED_IDC_EXPLICIT',
    'STD_VIDEO_H264_WEIGHTED_BIPRED_IDC_IMPLICIT',
    'STD_VIDEO_H264_WEIGHTED_BIPRED_IDC_INVALID',
    'STD_VIDEO_H264_WEIGHTED_BIPRED_IDC_MAX_ENUM',
    'STD_VIDEO_H265_ASPECT_RATIO_IDC_10_11',
    'STD_VIDEO_H265_ASPECT_RATIO_IDC_12_11',
    'STD_VIDEO_H265_ASPECT_RATIO_IDC_15_11',
    'STD_VIDEO_H265_ASPECT_RATIO_IDC_160_99',
    'STD_VIDEO_H265_ASPECT_RATIO_IDC_16_11',
    'STD_VIDEO_H265_ASPECT_RATIO_IDC_18_11',
    'STD_VIDEO_H265_ASPECT_RATIO_IDC_20_11',
    'STD_VIDEO_H265_ASPECT_RATIO_IDC_24_11',
    'STD_VIDEO_H265_ASPECT_RATIO_IDC_2_1',
    'STD_VIDEO_H265_ASPECT_RATIO_IDC_32_11',
    'STD_VIDEO_H265_ASPECT_RATIO_IDC_3_2',
    'STD_VIDEO_H265_ASPECT_RATIO_IDC_40_33',
    'STD_VIDEO_H265_ASPECT_RATIO_IDC_4_3',
    'STD_VIDEO_H265_ASPECT_RATIO_IDC_64_33',
    'STD_VIDEO_H265_ASPECT_RATIO_IDC_80_33',
    'STD_VIDEO_H265_ASPECT_RATIO_IDC_EXTENDED_SAR',
    'STD_VIDEO_H265_ASPECT_RATIO_IDC_INVALID',
    'STD_VIDEO_H265_ASPECT_RATIO_IDC_MAX_ENUM',
    'STD_VIDEO_H265_ASPECT_RATIO_IDC_SQUARE',
    'STD_VIDEO_H265_ASPECT_RATIO_IDC_UNSPECIFIED',
    'STD_VIDEO_H265_CHROMA_FORMAT_IDC_420',
    'STD_VIDEO_H265_CHROMA_FORMAT_IDC_422',
    'STD_VIDEO_H265_CHROMA_FORMAT_IDC_444',
    'STD_VIDEO_H265_CHROMA_FORMAT_IDC_INVALID',
    'STD_VIDEO_H265_CHROMA_FORMAT_IDC_MAX_ENUM',
    'STD_VIDEO_H265_CHROMA_FORMAT_IDC_MONOCHROME',
    'STD_VIDEO_H265_LEVEL_IDC_1_0', 'STD_VIDEO_H265_LEVEL_IDC_2_0',
    'STD_VIDEO_H265_LEVEL_IDC_2_1', 'STD_VIDEO_H265_LEVEL_IDC_3_0',
    'STD_VIDEO_H265_LEVEL_IDC_3_1', 'STD_VIDEO_H265_LEVEL_IDC_4_0',
    'STD_VIDEO_H265_LEVEL_IDC_4_1', 'STD_VIDEO_H265_LEVEL_IDC_5_0',
    'STD_VIDEO_H265_LEVEL_IDC_5_1', 'STD_VIDEO_H265_LEVEL_IDC_5_2',
    'STD_VIDEO_H265_LEVEL_IDC_6_0', 'STD_VIDEO_H265_LEVEL_IDC_6_1',
    'STD_VIDEO_H265_LEVEL_IDC_6_2',
    'STD_VIDEO_H265_LEVEL_IDC_INVALID',
    'STD_VIDEO_H265_LEVEL_IDC_MAX_ENUM',
    'STD_VIDEO_H265_PICTURE_TYPE_B', 'STD_VIDEO_H265_PICTURE_TYPE_I',
    'STD_VIDEO_H265_PICTURE_TYPE_IDR',
    'STD_VIDEO_H265_PICTURE_TYPE_INVALID',
    'STD_VIDEO_H265_PICTURE_TYPE_MAX_ENUM',
    'STD_VIDEO_H265_PICTURE_TYPE_P',
    'STD_VIDEO_H265_PROFILE_IDC_FORMAT_RANGE_EXTENSIONS',
    'STD_VIDEO_H265_PROFILE_IDC_INVALID',
    'STD_VIDEO_H265_PROFILE_IDC_MAIN',
    'STD_VIDEO_H265_PROFILE_IDC_MAIN_10',
    'STD_VIDEO_H265_PROFILE_IDC_MAIN_STILL_PICTURE',
    'STD_VIDEO_H265_PROFILE_IDC_MAX_ENUM',
    'STD_VIDEO_H265_PROFILE_IDC_SCC_EXTENSIONS',
    'STD_VIDEO_H265_SLICE_TYPE_B', 'STD_VIDEO_H265_SLICE_TYPE_I',
    'STD_VIDEO_H265_SLICE_TYPE_INVALID',
    'STD_VIDEO_H265_SLICE_TYPE_MAX_ENUM',
    'STD_VIDEO_H265_SLICE_TYPE_P', 'StdVideoH264AspectRatioIdc',
    'StdVideoH264CabacInitIdc', 'StdVideoH264ChromaFormatIdc',
    'StdVideoH264DisableDeblockingFilterIdc', 'StdVideoH264LevelIdc',
    'StdVideoH264MemMgmtControlOp',
    'StdVideoH264ModificationOfPicNumsIdc', 'StdVideoH264PictureType',
    'StdVideoH264PocType', 'StdVideoH264ProfileIdc',
    'StdVideoH264SliceType', 'StdVideoH264WeightedBipredIdc',
    'StdVideoH265AspectRatioIdc', 'StdVideoH265ChromaFormatIdc',
    'StdVideoH265LevelIdc', 'StdVideoH265PictureType',
    'StdVideoH265ProfileIdc', 'StdVideoH265SliceType', 'VKAPI_ATTR',
    'VKAPI_CALL', 'VKAPI_PTR',
    'VK_ACCELERATION_STRUCTURE_BUILD_TYPE_DEVICE_KHR',
    'VK_ACCELERATION_STRUCTURE_BUILD_TYPE_HOST_KHR',
    'VK_ACCELERATION_STRUCTURE_BUILD_TYPE_HOST_OR_DEVICE_KHR',
    'VK_ACCELERATION_STRUCTURE_BUILD_TYPE_MAX_ENUM_KHR',
    'VK_ACCELERATION_STRUCTURE_COMPATIBILITY_COMPATIBLE_KHR',
    'VK_ACCELERATION_STRUCTURE_COMPATIBILITY_INCOMPATIBLE_KHR',
    'VK_ACCELERATION_STRUCTURE_COMPATIBILITY_MAX_ENUM_KHR',
    'VK_ACCELERATION_STRUCTURE_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT',
    'VK_ACCELERATION_STRUCTURE_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR',
    'VK_ACCELERATION_STRUCTURE_CREATE_FLAG_BITS_MAX_ENUM_KHR',
    'VK_ACCELERATION_STRUCTURE_CREATE_MOTION_BIT_NV',
    'VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_BUILD_SCRATCH_NV',
    'VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_MAX_ENUM_NV',
    'VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_OBJECT_NV',
    'VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_UPDATE_SCRATCH_NV',
    'VK_ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_MATRIX_MOTION_NV',
    'VK_ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_MAX_ENUM_NV',
    'VK_ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_SRT_MOTION_NV',
    'VK_ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_STATIC_NV',
    'VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_KHR',
    'VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_NV',
    'VK_ACCELERATION_STRUCTURE_TYPE_GENERIC_KHR',
    'VK_ACCELERATION_STRUCTURE_TYPE_MAX_ENUM_KHR',
    'VK_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_KHR',
    'VK_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_NV',
    'VK_ACCESS_2_ACCELERATION_STRUCTURE_READ_BIT_KHR',
    'VK_ACCESS_2_ACCELERATION_STRUCTURE_READ_BIT_NV',
    'VK_ACCESS_2_ACCELERATION_STRUCTURE_WRITE_BIT_KHR',
    'VK_ACCESS_2_ACCELERATION_STRUCTURE_WRITE_BIT_NV',
    'VK_ACCESS_2_COLOR_ATTACHMENT_READ_BIT',
    'VK_ACCESS_2_COLOR_ATTACHMENT_READ_BIT_KHR',
    'VK_ACCESS_2_COLOR_ATTACHMENT_READ_NONCOHERENT_BIT_EXT',
    'VK_ACCESS_2_COLOR_ATTACHMENT_WRITE_BIT',
    'VK_ACCESS_2_COLOR_ATTACHMENT_WRITE_BIT_KHR',
    'VK_ACCESS_2_COMMAND_PREPROCESS_READ_BIT_NV',
    'VK_ACCESS_2_COMMAND_PREPROCESS_WRITE_BIT_NV',
    'VK_ACCESS_2_CONDITIONAL_RENDERING_READ_BIT_EXT',
    'VK_ACCESS_2_DEPTH_STENCIL_ATTACHMENT_READ_BIT',
    'VK_ACCESS_2_DEPTH_STENCIL_ATTACHMENT_READ_BIT_KHR',
    'VK_ACCESS_2_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT',
    'VK_ACCESS_2_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT_KHR',
    'VK_ACCESS_2_DESCRIPTOR_BUFFER_READ_BIT_EXT',
    'VK_ACCESS_2_FRAGMENT_DENSITY_MAP_READ_BIT_EXT',
    'VK_ACCESS_2_FRAGMENT_SHADING_RATE_ATTACHMENT_READ_BIT_KHR',
    'VK_ACCESS_2_HOST_READ_BIT', 'VK_ACCESS_2_HOST_READ_BIT_KHR',
    'VK_ACCESS_2_HOST_WRITE_BIT', 'VK_ACCESS_2_HOST_WRITE_BIT_KHR',
    'VK_ACCESS_2_INDEX_READ_BIT', 'VK_ACCESS_2_INDEX_READ_BIT_KHR',
    'VK_ACCESS_2_INDIRECT_COMMAND_READ_BIT',
    'VK_ACCESS_2_INDIRECT_COMMAND_READ_BIT_KHR',
    'VK_ACCESS_2_INPUT_ATTACHMENT_READ_BIT',
    'VK_ACCESS_2_INPUT_ATTACHMENT_READ_BIT_KHR',
    'VK_ACCESS_2_INVOCATION_MASK_READ_BIT_HUAWEI',
    'VK_ACCESS_2_MEMORY_READ_BIT', 'VK_ACCESS_2_MEMORY_READ_BIT_KHR',
    'VK_ACCESS_2_MEMORY_WRITE_BIT',
    'VK_ACCESS_2_MEMORY_WRITE_BIT_KHR',
    'VK_ACCESS_2_MICROMAP_READ_BIT_EXT',
    'VK_ACCESS_2_MICROMAP_WRITE_BIT_EXT', 'VK_ACCESS_2_NONE',
    'VK_ACCESS_2_NONE_KHR', 'VK_ACCESS_2_OPTICAL_FLOW_READ_BIT_NV',
    'VK_ACCESS_2_OPTICAL_FLOW_WRITE_BIT_NV',
    'VK_ACCESS_2_SHADER_BINDING_TABLE_READ_BIT_KHR',
    'VK_ACCESS_2_SHADER_READ_BIT', 'VK_ACCESS_2_SHADER_READ_BIT_KHR',
    'VK_ACCESS_2_SHADER_SAMPLED_READ_BIT',
    'VK_ACCESS_2_SHADER_SAMPLED_READ_BIT_KHR',
    'VK_ACCESS_2_SHADER_STORAGE_READ_BIT',
    'VK_ACCESS_2_SHADER_STORAGE_READ_BIT_KHR',
    'VK_ACCESS_2_SHADER_STORAGE_WRITE_BIT',
    'VK_ACCESS_2_SHADER_STORAGE_WRITE_BIT_KHR',
    'VK_ACCESS_2_SHADER_WRITE_BIT',
    'VK_ACCESS_2_SHADER_WRITE_BIT_KHR',
    'VK_ACCESS_2_SHADING_RATE_IMAGE_READ_BIT_NV',
    'VK_ACCESS_2_TRANSFER_READ_BIT',
    'VK_ACCESS_2_TRANSFER_READ_BIT_KHR',
    'VK_ACCESS_2_TRANSFER_WRITE_BIT',
    'VK_ACCESS_2_TRANSFER_WRITE_BIT_KHR',
    'VK_ACCESS_2_TRANSFORM_FEEDBACK_COUNTER_READ_BIT_EXT',
    'VK_ACCESS_2_TRANSFORM_FEEDBACK_COUNTER_WRITE_BIT_EXT',
    'VK_ACCESS_2_TRANSFORM_FEEDBACK_WRITE_BIT_EXT',
    'VK_ACCESS_2_UNIFORM_READ_BIT',
    'VK_ACCESS_2_UNIFORM_READ_BIT_KHR',
    'VK_ACCESS_2_VERTEX_ATTRIBUTE_READ_BIT',
    'VK_ACCESS_2_VERTEX_ATTRIBUTE_READ_BIT_KHR',
    'VK_ACCESS_2_VIDEO_DECODE_READ_BIT_KHR',
    'VK_ACCESS_2_VIDEO_DECODE_WRITE_BIT_KHR',
    'VK_ACCESS_2_VIDEO_ENCODE_READ_BIT_KHR',
    'VK_ACCESS_2_VIDEO_ENCODE_WRITE_BIT_KHR',
    'VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_KHR',
    'VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_NV',
    'VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_KHR',
    'VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_NV',
    'VK_ACCESS_COLOR_ATTACHMENT_READ_BIT',
    'VK_ACCESS_COLOR_ATTACHMENT_READ_NONCOHERENT_BIT_EXT',
    'VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT',
    'VK_ACCESS_COMMAND_PREPROCESS_READ_BIT_NV',
    'VK_ACCESS_COMMAND_PREPROCESS_WRITE_BIT_NV',
    'VK_ACCESS_CONDITIONAL_RENDERING_READ_BIT_EXT',
    'VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_READ_BIT',
    'VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT',
    'VK_ACCESS_FLAG_BITS_MAX_ENUM',
    'VK_ACCESS_FRAGMENT_DENSITY_MAP_READ_BIT_EXT',
    'VK_ACCESS_FRAGMENT_SHADING_RATE_ATTACHMENT_READ_BIT_KHR',
    'VK_ACCESS_HOST_READ_BIT', 'VK_ACCESS_HOST_WRITE_BIT',
    'VK_ACCESS_INDEX_READ_BIT', 'VK_ACCESS_INDIRECT_COMMAND_READ_BIT',
    'VK_ACCESS_INPUT_ATTACHMENT_READ_BIT',
    'VK_ACCESS_MEMORY_READ_BIT', 'VK_ACCESS_MEMORY_WRITE_BIT',
    'VK_ACCESS_NONE', 'VK_ACCESS_NONE_KHR',
    'VK_ACCESS_SHADER_READ_BIT', 'VK_ACCESS_SHADER_WRITE_BIT',
    'VK_ACCESS_SHADING_RATE_IMAGE_READ_BIT_NV',
    'VK_ACCESS_TRANSFER_READ_BIT', 'VK_ACCESS_TRANSFER_WRITE_BIT',
    'VK_ACCESS_TRANSFORM_FEEDBACK_COUNTER_READ_BIT_EXT',
    'VK_ACCESS_TRANSFORM_FEEDBACK_COUNTER_WRITE_BIT_EXT',
    'VK_ACCESS_TRANSFORM_FEEDBACK_WRITE_BIT_EXT',
    'VK_ACCESS_UNIFORM_READ_BIT',
    'VK_ACCESS_VERTEX_ATTRIBUTE_READ_BIT',
    'VK_ACQUIRE_PROFILING_LOCK_FLAG_BITS_MAX_ENUM_KHR',
    'VK_AMD_BUFFER_MARKER_EXTENSION_NAME',
    'VK_AMD_BUFFER_MARKER_SPEC_VERSION',
    'VK_AMD_DEVICE_COHERENT_MEMORY_EXTENSION_NAME',
    'VK_AMD_DEVICE_COHERENT_MEMORY_SPEC_VERSION',
    'VK_AMD_DISPLAY_NATIVE_HDR_EXTENSION_NAME',
    'VK_AMD_DISPLAY_NATIVE_HDR_SPEC_VERSION',
    'VK_AMD_DRAW_INDIRECT_COUNT_EXTENSION_NAME',
    'VK_AMD_DRAW_INDIRECT_COUNT_SPEC_VERSION',
    'VK_AMD_GCN_SHADER_EXTENSION_NAME',
    'VK_AMD_GCN_SHADER_SPEC_VERSION',
    'VK_AMD_GPU_SHADER_HALF_FLOAT_EXTENSION_NAME',
    'VK_AMD_GPU_SHADER_HALF_FLOAT_SPEC_VERSION',
    'VK_AMD_GPU_SHADER_INT16_EXTENSION_NAME',
    'VK_AMD_GPU_SHADER_INT16_SPEC_VERSION',
    'VK_AMD_MEMORY_OVERALLOCATION_BEHAVIOR_EXTENSION_NAME',
    'VK_AMD_MEMORY_OVERALLOCATION_BEHAVIOR_SPEC_VERSION',
    'VK_AMD_MIXED_ATTACHMENT_SAMPLES_EXTENSION_NAME',
    'VK_AMD_MIXED_ATTACHMENT_SAMPLES_SPEC_VERSION',
    'VK_AMD_NEGATIVE_VIEWPORT_HEIGHT_EXTENSION_NAME',
    'VK_AMD_NEGATIVE_VIEWPORT_HEIGHT_SPEC_VERSION',
    'VK_AMD_PIPELINE_COMPILER_CONTROL_EXTENSION_NAME',
    'VK_AMD_PIPELINE_COMPILER_CONTROL_SPEC_VERSION',
    'VK_AMD_RASTERIZATION_ORDER_EXTENSION_NAME',
    'VK_AMD_RASTERIZATION_ORDER_SPEC_VERSION',
    'VK_AMD_SHADER_BALLOT_EXTENSION_NAME',
    'VK_AMD_SHADER_BALLOT_SPEC_VERSION',
    'VK_AMD_SHADER_CORE_PROPERTIES_2_EXTENSION_NAME',
    'VK_AMD_SHADER_CORE_PROPERTIES_2_SPEC_VERSION',
    'VK_AMD_SHADER_CORE_PROPERTIES_EXTENSION_NAME',
    'VK_AMD_SHADER_CORE_PROPERTIES_SPEC_VERSION',
    'VK_AMD_SHADER_EARLY_AND_LATE_FRAGMENT_TESTS_EXTENSION_NAME',
    'VK_AMD_SHADER_EARLY_AND_LATE_FRAGMENT_TESTS_SPEC_VERSION',
    'VK_AMD_SHADER_EXPLICIT_VERTEX_PARAMETER_EXTENSION_NAME',
    'VK_AMD_SHADER_EXPLICIT_VERTEX_PARAMETER_SPEC_VERSION',
    'VK_AMD_SHADER_FRAGMENT_MASK_EXTENSION_NAME',
    'VK_AMD_SHADER_FRAGMENT_MASK_SPEC_VERSION',
    'VK_AMD_SHADER_IMAGE_LOAD_STORE_LOD_EXTENSION_NAME',
    'VK_AMD_SHADER_IMAGE_LOAD_STORE_LOD_SPEC_VERSION',
    'VK_AMD_SHADER_INFO_EXTENSION_NAME',
    'VK_AMD_SHADER_INFO_SPEC_VERSION',
    'VK_AMD_SHADER_TRINARY_MINMAX_EXTENSION_NAME',
    'VK_AMD_SHADER_TRINARY_MINMAX_SPEC_VERSION',
    'VK_AMD_TEXTURE_GATHER_BIAS_LOD_EXTENSION_NAME',
    'VK_AMD_TEXTURE_GATHER_BIAS_LOD_SPEC_VERSION',
    'VK_AMD_buffer_marker', 'VK_AMD_device_coherent_memory',
    'VK_AMD_display_native_hdr', 'VK_AMD_draw_indirect_count',
    'VK_AMD_gcn_shader', 'VK_AMD_gpu_shader_half_float',
    'VK_AMD_gpu_shader_int16',
    'VK_AMD_memory_overallocation_behavior',
    'VK_AMD_mixed_attachment_samples',
    'VK_AMD_negative_viewport_height',
    'VK_AMD_pipeline_compiler_control', 'VK_AMD_rasterization_order',
    'VK_AMD_shader_ballot', 'VK_AMD_shader_core_properties',
    'VK_AMD_shader_core_properties2',
    'VK_AMD_shader_early_and_late_fragment_tests',
    'VK_AMD_shader_explicit_vertex_parameter',
    'VK_AMD_shader_fragment_mask',
    'VK_AMD_shader_image_load_store_lod', 'VK_AMD_shader_info',
    'VK_AMD_shader_trinary_minmax', 'VK_AMD_texture_gather_bias_lod',
    'VK_API_VERSION_1_0', 'VK_API_VERSION_1_1', 'VK_API_VERSION_1_2',
    'VK_API_VERSION_1_3',
    'VK_ARM_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_EXTENSION_NAME',
    'VK_ARM_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_SPEC_VERSION',
    'VK_ARM_RENDER_PASS_STRIPED_EXTENSION_NAME',
    'VK_ARM_RENDER_PASS_STRIPED_SPEC_VERSION',
    'VK_ARM_SCHEDULING_CONTROLS_EXTENSION_NAME',
    'VK_ARM_SCHEDULING_CONTROLS_SPEC_VERSION',
    'VK_ARM_SHADER_CORE_BUILTINS_EXTENSION_NAME',
    'VK_ARM_SHADER_CORE_BUILTINS_SPEC_VERSION',
    'VK_ARM_SHADER_CORE_PROPERTIES_EXTENSION_NAME',
    'VK_ARM_SHADER_CORE_PROPERTIES_SPEC_VERSION',
    'VK_ARM_rasterization_order_attachment_access',
    'VK_ARM_render_pass_striped', 'VK_ARM_scheduling_controls',
    'VK_ARM_shader_core_builtins', 'VK_ARM_shader_core_properties',
    'VK_ATTACHMENT_DESCRIPTION_FLAG_BITS_MAX_ENUM',
    'VK_ATTACHMENT_DESCRIPTION_MAY_ALIAS_BIT',
    'VK_ATTACHMENT_LOAD_OP_CLEAR', 'VK_ATTACHMENT_LOAD_OP_DONT_CARE',
    'VK_ATTACHMENT_LOAD_OP_LOAD', 'VK_ATTACHMENT_LOAD_OP_MAX_ENUM',
    'VK_ATTACHMENT_LOAD_OP_NONE_EXT',
    'VK_ATTACHMENT_STORE_OP_DONT_CARE',
    'VK_ATTACHMENT_STORE_OP_MAX_ENUM', 'VK_ATTACHMENT_STORE_OP_NONE',
    'VK_ATTACHMENT_STORE_OP_NONE_EXT',
    'VK_ATTACHMENT_STORE_OP_NONE_KHR',
    'VK_ATTACHMENT_STORE_OP_NONE_QCOM',
    'VK_ATTACHMENT_STORE_OP_STORE', 'VK_ATTACHMENT_UNUSED',
    'VK_BLEND_FACTOR_CONSTANT_ALPHA',
    'VK_BLEND_FACTOR_CONSTANT_COLOR', 'VK_BLEND_FACTOR_DST_ALPHA',
    'VK_BLEND_FACTOR_DST_COLOR', 'VK_BLEND_FACTOR_MAX_ENUM',
    'VK_BLEND_FACTOR_ONE', 'VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_ALPHA',
    'VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_COLOR',
    'VK_BLEND_FACTOR_ONE_MINUS_DST_ALPHA',
    'VK_BLEND_FACTOR_ONE_MINUS_DST_COLOR',
    'VK_BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA',
    'VK_BLEND_FACTOR_ONE_MINUS_SRC1_COLOR',
    'VK_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA',
    'VK_BLEND_FACTOR_ONE_MINUS_SRC_COLOR',
    'VK_BLEND_FACTOR_SRC1_ALPHA', 'VK_BLEND_FACTOR_SRC1_COLOR',
    'VK_BLEND_FACTOR_SRC_ALPHA', 'VK_BLEND_FACTOR_SRC_ALPHA_SATURATE',
    'VK_BLEND_FACTOR_SRC_COLOR', 'VK_BLEND_FACTOR_ZERO',
    'VK_BLEND_OP_ADD', 'VK_BLEND_OP_BLUE_EXT',
    'VK_BLEND_OP_COLORBURN_EXT', 'VK_BLEND_OP_COLORDODGE_EXT',
    'VK_BLEND_OP_CONTRAST_EXT', 'VK_BLEND_OP_DARKEN_EXT',
    'VK_BLEND_OP_DIFFERENCE_EXT', 'VK_BLEND_OP_DST_ATOP_EXT',
    'VK_BLEND_OP_DST_EXT', 'VK_BLEND_OP_DST_IN_EXT',
    'VK_BLEND_OP_DST_OUT_EXT', 'VK_BLEND_OP_DST_OVER_EXT',
    'VK_BLEND_OP_EXCLUSION_EXT', 'VK_BLEND_OP_GREEN_EXT',
    'VK_BLEND_OP_HARDLIGHT_EXT', 'VK_BLEND_OP_HARDMIX_EXT',
    'VK_BLEND_OP_HSL_COLOR_EXT', 'VK_BLEND_OP_HSL_HUE_EXT',
    'VK_BLEND_OP_HSL_LUMINOSITY_EXT',
    'VK_BLEND_OP_HSL_SATURATION_EXT', 'VK_BLEND_OP_INVERT_EXT',
    'VK_BLEND_OP_INVERT_OVG_EXT', 'VK_BLEND_OP_INVERT_RGB_EXT',
    'VK_BLEND_OP_LIGHTEN_EXT', 'VK_BLEND_OP_LINEARBURN_EXT',
    'VK_BLEND_OP_LINEARDODGE_EXT', 'VK_BLEND_OP_LINEARLIGHT_EXT',
    'VK_BLEND_OP_MAX', 'VK_BLEND_OP_MAX_ENUM', 'VK_BLEND_OP_MIN',
    'VK_BLEND_OP_MINUS_CLAMPED_EXT', 'VK_BLEND_OP_MINUS_EXT',
    'VK_BLEND_OP_MULTIPLY_EXT', 'VK_BLEND_OP_OVERLAY_EXT',
    'VK_BLEND_OP_PINLIGHT_EXT', 'VK_BLEND_OP_PLUS_CLAMPED_ALPHA_EXT',
    'VK_BLEND_OP_PLUS_CLAMPED_EXT', 'VK_BLEND_OP_PLUS_DARKER_EXT',
    'VK_BLEND_OP_PLUS_EXT', 'VK_BLEND_OP_RED_EXT',
    'VK_BLEND_OP_REVERSE_SUBTRACT', 'VK_BLEND_OP_SCREEN_EXT',
    'VK_BLEND_OP_SOFTLIGHT_EXT', 'VK_BLEND_OP_SRC_ATOP_EXT',
    'VK_BLEND_OP_SRC_EXT', 'VK_BLEND_OP_SRC_IN_EXT',
    'VK_BLEND_OP_SRC_OUT_EXT', 'VK_BLEND_OP_SRC_OVER_EXT',
    'VK_BLEND_OP_SUBTRACT', 'VK_BLEND_OP_VIVIDLIGHT_EXT',
    'VK_BLEND_OP_XOR_EXT', 'VK_BLEND_OP_ZERO_EXT',
    'VK_BLEND_OVERLAP_CONJOINT_EXT', 'VK_BLEND_OVERLAP_DISJOINT_EXT',
    'VK_BLEND_OVERLAP_MAX_ENUM_EXT',
    'VK_BLEND_OVERLAP_UNCORRELATED_EXT',
    'VK_BLOCK_MATCH_WINDOW_COMPARE_MODE_MAX_ENUM_QCOM',
    'VK_BLOCK_MATCH_WINDOW_COMPARE_MODE_MAX_QCOM',
    'VK_BLOCK_MATCH_WINDOW_COMPARE_MODE_MIN_QCOM',
    'VK_BORDER_COLOR_FLOAT_CUSTOM_EXT',
    'VK_BORDER_COLOR_FLOAT_OPAQUE_BLACK',
    'VK_BORDER_COLOR_FLOAT_OPAQUE_WHITE',
    'VK_BORDER_COLOR_FLOAT_TRANSPARENT_BLACK',
    'VK_BORDER_COLOR_INT_CUSTOM_EXT',
    'VK_BORDER_COLOR_INT_OPAQUE_BLACK',
    'VK_BORDER_COLOR_INT_OPAQUE_WHITE',
    'VK_BORDER_COLOR_INT_TRANSPARENT_BLACK',
    'VK_BORDER_COLOR_MAX_ENUM',
    'VK_BUFFER_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT',
    'VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT',
    'VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_EXT',
    'VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR',
    'VK_BUFFER_CREATE_FLAG_BITS_MAX_ENUM',
    'VK_BUFFER_CREATE_PROTECTED_BIT',
    'VK_BUFFER_CREATE_SPARSE_ALIASED_BIT',
    'VK_BUFFER_CREATE_SPARSE_BINDING_BIT',
    'VK_BUFFER_CREATE_SPARSE_RESIDENCY_BIT',
    'VK_BUFFER_CREATE_VIDEO_PROFILE_INDEPENDENT_BIT_KHR',
    'VK_BUFFER_USAGE_2_ACCELERATION_STRUCTURE_BUILD_INPUT_READ_ONLY_BIT_KHR',
    'VK_BUFFER_USAGE_2_ACCELERATION_STRUCTURE_STORAGE_BIT_KHR',
    'VK_BUFFER_USAGE_2_CONDITIONAL_RENDERING_BIT_EXT',
    'VK_BUFFER_USAGE_2_EXECUTION_GRAPH_SCRATCH_BIT_AMDX',
    'VK_BUFFER_USAGE_2_INDEX_BUFFER_BIT_KHR',
    'VK_BUFFER_USAGE_2_INDIRECT_BUFFER_BIT_KHR',
    'VK_BUFFER_USAGE_2_MICROMAP_BUILD_INPUT_READ_ONLY_BIT_EXT',
    'VK_BUFFER_USAGE_2_MICROMAP_STORAGE_BIT_EXT',
    'VK_BUFFER_USAGE_2_PUSH_DESCRIPTORS_DESCRIPTOR_BUFFER_BIT_EXT',
    'VK_BUFFER_USAGE_2_RAY_TRACING_BIT_NV',
    'VK_BUFFER_USAGE_2_RESOURCE_DESCRIPTOR_BUFFER_BIT_EXT',
    'VK_BUFFER_USAGE_2_SAMPLER_DESCRIPTOR_BUFFER_BIT_EXT',
    'VK_BUFFER_USAGE_2_SHADER_BINDING_TABLE_BIT_KHR',
    'VK_BUFFER_USAGE_2_SHADER_DEVICE_ADDRESS_BIT_KHR',
    'VK_BUFFER_USAGE_2_STORAGE_BUFFER_BIT_KHR',
    'VK_BUFFER_USAGE_2_STORAGE_TEXEL_BUFFER_BIT_KHR',
    'VK_BUFFER_USAGE_2_TRANSFER_DST_BIT_KHR',
    'VK_BUFFER_USAGE_2_TRANSFER_SRC_BIT_KHR',
    'VK_BUFFER_USAGE_2_TRANSFORM_FEEDBACK_BUFFER_BIT_EXT',
    'VK_BUFFER_USAGE_2_TRANSFORM_FEEDBACK_COUNTER_BUFFER_BIT_EXT',
    'VK_BUFFER_USAGE_2_UNIFORM_BUFFER_BIT_KHR',
    'VK_BUFFER_USAGE_2_UNIFORM_TEXEL_BUFFER_BIT_KHR',
    'VK_BUFFER_USAGE_2_VERTEX_BUFFER_BIT_KHR',
    'VK_BUFFER_USAGE_2_VIDEO_DECODE_DST_BIT_KHR',
    'VK_BUFFER_USAGE_2_VIDEO_DECODE_SRC_BIT_KHR',
    'VK_BUFFER_USAGE_ACCELERATION_STRUCTURE_BUILD_INPUT_READ_ONLY_BIT_KHR',
    'VK_BUFFER_USAGE_ACCELERATION_STRUCTURE_STORAGE_BIT_KHR',
    'VK_BUFFER_USAGE_CONDITIONAL_RENDERING_BIT_EXT',
    'VK_BUFFER_USAGE_FLAG_BITS_MAX_ENUM',
    'VK_BUFFER_USAGE_INDEX_BUFFER_BIT',
    'VK_BUFFER_USAGE_INDIRECT_BUFFER_BIT',
    'VK_BUFFER_USAGE_MICROMAP_BUILD_INPUT_READ_ONLY_BIT_EXT',
    'VK_BUFFER_USAGE_MICROMAP_STORAGE_BIT_EXT',
    'VK_BUFFER_USAGE_PUSH_DESCRIPTORS_DESCRIPTOR_BUFFER_BIT_EXT',
    'VK_BUFFER_USAGE_RAY_TRACING_BIT_NV',
    'VK_BUFFER_USAGE_RESOURCE_DESCRIPTOR_BUFFER_BIT_EXT',
    'VK_BUFFER_USAGE_SAMPLER_DESCRIPTOR_BUFFER_BIT_EXT',
    'VK_BUFFER_USAGE_SHADER_BINDING_TABLE_BIT_KHR',
    'VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT',
    'VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT_EXT',
    'VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT_KHR',
    'VK_BUFFER_USAGE_STORAGE_BUFFER_BIT',
    'VK_BUFFER_USAGE_STORAGE_TEXEL_BUFFER_BIT',
    'VK_BUFFER_USAGE_TRANSFER_DST_BIT',
    'VK_BUFFER_USAGE_TRANSFER_SRC_BIT',
    'VK_BUFFER_USAGE_TRANSFORM_FEEDBACK_BUFFER_BIT_EXT',
    'VK_BUFFER_USAGE_TRANSFORM_FEEDBACK_COUNTER_BUFFER_BIT_EXT',
    'VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT',
    'VK_BUFFER_USAGE_UNIFORM_TEXEL_BUFFER_BIT',
    'VK_BUFFER_USAGE_VERTEX_BUFFER_BIT',
    'VK_BUFFER_USAGE_VIDEO_DECODE_DST_BIT_KHR',
    'VK_BUFFER_USAGE_VIDEO_DECODE_SRC_BIT_KHR',
    'VK_BUFFER_USAGE_VIDEO_ENCODE_DST_BIT_KHR',
    'VK_BUFFER_USAGE_VIDEO_ENCODE_SRC_BIT_KHR',
    'VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_KHR',
    'VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_NV',
    'VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_DATA_ACCESS_KHR',
    'VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_DISABLE_OPACITY_MICROMAPS_EXT',
    'VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_OPACITY_MICROMAP_DATA_UPDATE_EXT',
    'VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_OPACITY_MICROMAP_UPDATE_EXT',
    'VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_KHR',
    'VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_NV',
    'VK_BUILD_ACCELERATION_STRUCTURE_FLAG_BITS_MAX_ENUM_KHR',
    'VK_BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_BIT_KHR',
    'VK_BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_BIT_NV',
    'VK_BUILD_ACCELERATION_STRUCTURE_MODE_BUILD_KHR',
    'VK_BUILD_ACCELERATION_STRUCTURE_MODE_MAX_ENUM_KHR',
    'VK_BUILD_ACCELERATION_STRUCTURE_MODE_UPDATE_KHR',
    'VK_BUILD_ACCELERATION_STRUCTURE_MOTION_BIT_NV',
    'VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_KHR',
    'VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_NV',
    'VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_KHR',
    'VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_NV',
    'VK_BUILD_MICROMAP_ALLOW_COMPACTION_BIT_EXT',
    'VK_BUILD_MICROMAP_FLAG_BITS_MAX_ENUM_EXT',
    'VK_BUILD_MICROMAP_MODE_BUILD_EXT',
    'VK_BUILD_MICROMAP_MODE_MAX_ENUM_EXT',
    'VK_BUILD_MICROMAP_PREFER_FAST_BUILD_BIT_EXT',
    'VK_BUILD_MICROMAP_PREFER_FAST_TRACE_BIT_EXT',
    'VK_CHROMA_LOCATION_COSITED_EVEN',
    'VK_CHROMA_LOCATION_COSITED_EVEN_KHR',
    'VK_CHROMA_LOCATION_MAX_ENUM', 'VK_CHROMA_LOCATION_MIDPOINT',
    'VK_CHROMA_LOCATION_MIDPOINT_KHR',
    'VK_COARSE_SAMPLE_ORDER_TYPE_CUSTOM_NV',
    'VK_COARSE_SAMPLE_ORDER_TYPE_DEFAULT_NV',
    'VK_COARSE_SAMPLE_ORDER_TYPE_MAX_ENUM_NV',
    'VK_COARSE_SAMPLE_ORDER_TYPE_PIXEL_MAJOR_NV',
    'VK_COARSE_SAMPLE_ORDER_TYPE_SAMPLE_MAJOR_NV',
    'VK_COLORSPACE_SRGB_NONLINEAR_KHR', 'VK_COLOR_COMPONENT_A_BIT',
    'VK_COLOR_COMPONENT_B_BIT',
    'VK_COLOR_COMPONENT_FLAG_BITS_MAX_ENUM',
    'VK_COLOR_COMPONENT_G_BIT', 'VK_COLOR_COMPONENT_R_BIT',
    'VK_COLOR_SPACE_ADOBERGB_LINEAR_EXT',
    'VK_COLOR_SPACE_ADOBERGB_NONLINEAR_EXT',
    'VK_COLOR_SPACE_BT2020_LINEAR_EXT',
    'VK_COLOR_SPACE_BT709_LINEAR_EXT',
    'VK_COLOR_SPACE_BT709_NONLINEAR_EXT',
    'VK_COLOR_SPACE_DCI_P3_LINEAR_EXT',
    'VK_COLOR_SPACE_DCI_P3_NONLINEAR_EXT',
    'VK_COLOR_SPACE_DISPLAY_NATIVE_AMD',
    'VK_COLOR_SPACE_DISPLAY_P3_LINEAR_EXT',
    'VK_COLOR_SPACE_DISPLAY_P3_NONLINEAR_EXT',
    'VK_COLOR_SPACE_DOLBYVISION_EXT',
    'VK_COLOR_SPACE_EXTENDED_SRGB_LINEAR_EXT',
    'VK_COLOR_SPACE_EXTENDED_SRGB_NONLINEAR_EXT',
    'VK_COLOR_SPACE_HDR10_HLG_EXT', 'VK_COLOR_SPACE_HDR10_ST2084_EXT',
    'VK_COLOR_SPACE_MAX_ENUM_KHR', 'VK_COLOR_SPACE_PASS_THROUGH_EXT',
    'VK_COLOR_SPACE_SRGB_NONLINEAR_KHR',
    'VK_COMMAND_BUFFER_LEVEL_MAX_ENUM',
    'VK_COMMAND_BUFFER_LEVEL_PRIMARY',
    'VK_COMMAND_BUFFER_LEVEL_SECONDARY',
    'VK_COMMAND_BUFFER_RESET_FLAG_BITS_MAX_ENUM',
    'VK_COMMAND_BUFFER_RESET_RELEASE_RESOURCES_BIT',
    'VK_COMMAND_BUFFER_USAGE_FLAG_BITS_MAX_ENUM',
    'VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT',
    'VK_COMMAND_BUFFER_USAGE_RENDER_PASS_CONTINUE_BIT',
    'VK_COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT',
    'VK_COMMAND_POOL_CREATE_FLAG_BITS_MAX_ENUM',
    'VK_COMMAND_POOL_CREATE_PROTECTED_BIT',
    'VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT',
    'VK_COMMAND_POOL_CREATE_TRANSIENT_BIT',
    'VK_COMMAND_POOL_RESET_FLAG_BITS_MAX_ENUM',
    'VK_COMMAND_POOL_RESET_RELEASE_RESOURCES_BIT',
    'VK_COMPARE_OP_ALWAYS', 'VK_COMPARE_OP_EQUAL',
    'VK_COMPARE_OP_GREATER', 'VK_COMPARE_OP_GREATER_OR_EQUAL',
    'VK_COMPARE_OP_LESS', 'VK_COMPARE_OP_LESS_OR_EQUAL',
    'VK_COMPARE_OP_MAX_ENUM', 'VK_COMPARE_OP_NEVER',
    'VK_COMPARE_OP_NOT_EQUAL', 'VK_COMPONENT_SWIZZLE_A',
    'VK_COMPONENT_SWIZZLE_B', 'VK_COMPONENT_SWIZZLE_G',
    'VK_COMPONENT_SWIZZLE_IDENTITY', 'VK_COMPONENT_SWIZZLE_MAX_ENUM',
    'VK_COMPONENT_SWIZZLE_ONE', 'VK_COMPONENT_SWIZZLE_R',
    'VK_COMPONENT_SWIZZLE_ZERO', 'VK_COMPONENT_TYPE_FLOAT16_KHR',
    'VK_COMPONENT_TYPE_FLOAT16_NV', 'VK_COMPONENT_TYPE_FLOAT32_KHR',
    'VK_COMPONENT_TYPE_FLOAT32_NV', 'VK_COMPONENT_TYPE_FLOAT64_KHR',
    'VK_COMPONENT_TYPE_FLOAT64_NV', 'VK_COMPONENT_TYPE_MAX_ENUM_KHR',
    'VK_COMPONENT_TYPE_SINT16_KHR', 'VK_COMPONENT_TYPE_SINT16_NV',
    'VK_COMPONENT_TYPE_SINT32_KHR', 'VK_COMPONENT_TYPE_SINT32_NV',
    'VK_COMPONENT_TYPE_SINT64_KHR', 'VK_COMPONENT_TYPE_SINT64_NV',
    'VK_COMPONENT_TYPE_SINT8_KHR', 'VK_COMPONENT_TYPE_SINT8_NV',
    'VK_COMPONENT_TYPE_UINT16_KHR', 'VK_COMPONENT_TYPE_UINT16_NV',
    'VK_COMPONENT_TYPE_UINT32_KHR', 'VK_COMPONENT_TYPE_UINT32_NV',
    'VK_COMPONENT_TYPE_UINT64_KHR', 'VK_COMPONENT_TYPE_UINT64_NV',
    'VK_COMPONENT_TYPE_UINT8_KHR', 'VK_COMPONENT_TYPE_UINT8_NV',
    'VK_COMPOSITE_ALPHA_FLAG_BITS_MAX_ENUM_KHR',
    'VK_COMPOSITE_ALPHA_INHERIT_BIT_KHR',
    'VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR',
    'VK_COMPOSITE_ALPHA_POST_MULTIPLIED_BIT_KHR',
    'VK_COMPOSITE_ALPHA_PRE_MULTIPLIED_BIT_KHR',
    'VK_CONDITIONAL_RENDERING_FLAG_BITS_MAX_ENUM_EXT',
    'VK_CONDITIONAL_RENDERING_INVERTED_BIT_EXT',
    'VK_CONSERVATIVE_RASTERIZATION_MODE_DISABLED_EXT',
    'VK_CONSERVATIVE_RASTERIZATION_MODE_MAX_ENUM_EXT',
    'VK_CONSERVATIVE_RASTERIZATION_MODE_OVERESTIMATE_EXT',
    'VK_CONSERVATIVE_RASTERIZATION_MODE_UNDERESTIMATE_EXT',
    'VK_COPY_ACCELERATION_STRUCTURE_MODE_CLONE_KHR',
    'VK_COPY_ACCELERATION_STRUCTURE_MODE_CLONE_NV',
    'VK_COPY_ACCELERATION_STRUCTURE_MODE_COMPACT_KHR',
    'VK_COPY_ACCELERATION_STRUCTURE_MODE_COMPACT_NV',
    'VK_COPY_ACCELERATION_STRUCTURE_MODE_DESERIALIZE_KHR',
    'VK_COPY_ACCELERATION_STRUCTURE_MODE_MAX_ENUM_KHR',
    'VK_COPY_ACCELERATION_STRUCTURE_MODE_SERIALIZE_KHR',
    'VK_COPY_MICROMAP_MODE_CLONE_EXT',
    'VK_COPY_MICROMAP_MODE_COMPACT_EXT',
    'VK_COPY_MICROMAP_MODE_DESERIALIZE_EXT',
    'VK_COPY_MICROMAP_MODE_MAX_ENUM_EXT',
    'VK_COPY_MICROMAP_MODE_SERIALIZE_EXT',
    'VK_COVERAGE_MODULATION_MODE_ALPHA_NV',
    'VK_COVERAGE_MODULATION_MODE_MAX_ENUM_NV',
    'VK_COVERAGE_MODULATION_MODE_NONE_NV',
    'VK_COVERAGE_MODULATION_MODE_RGBA_NV',
    'VK_COVERAGE_MODULATION_MODE_RGB_NV',
    'VK_COVERAGE_REDUCTION_MODE_MAX_ENUM_NV',
    'VK_COVERAGE_REDUCTION_MODE_MERGE_NV',
    'VK_COVERAGE_REDUCTION_MODE_TRUNCATE_NV',
    'VK_CUBIC_FILTER_WEIGHTS_B_SPLINE_QCOM',
    'VK_CUBIC_FILTER_WEIGHTS_CATMULL_ROM_QCOM',
    'VK_CUBIC_FILTER_WEIGHTS_MAX_ENUM_QCOM',
    'VK_CUBIC_FILTER_WEIGHTS_MITCHELL_NETRAVALI_QCOM',
    'VK_CUBIC_FILTER_WEIGHTS_ZERO_TANGENT_CARDINAL_QCOM',
    'VK_CULL_MODE_BACK_BIT', 'VK_CULL_MODE_FLAG_BITS_MAX_ENUM',
    'VK_CULL_MODE_FRONT_AND_BACK', 'VK_CULL_MODE_FRONT_BIT',
    'VK_CULL_MODE_NONE', 'VK_DEBUG_REPORT_DEBUG_BIT_EXT',
    'VK_DEBUG_REPORT_ERROR_BIT_EXT',
    'VK_DEBUG_REPORT_FLAG_BITS_MAX_ENUM_EXT',
    'VK_DEBUG_REPORT_INFORMATION_BIT_EXT',
    'VK_DEBUG_REPORT_OBJECT_TYPE_ACCELERATION_STRUCTURE_KHR_EXT',
    'VK_DEBUG_REPORT_OBJECT_TYPE_ACCELERATION_STRUCTURE_NV_EXT',
    'VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_COLLECTION_FUCHSIA_EXT',
    'VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_EXT',
    'VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_VIEW_EXT',
    'VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_BUFFER_EXT',
    'VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_POOL_EXT',
    'VK_DEBUG_REPORT_OBJECT_TYPE_CUDA_FUNCTION_NV_EXT',
    'VK_DEBUG_REPORT_OBJECT_TYPE_CUDA_MODULE_NV_EXT',
    'VK_DEBUG_REPORT_OBJECT_TYPE_CU_FUNCTION_NVX_EXT',
    'VK_DEBUG_REPORT_OBJECT_TYPE_CU_MODULE_NVX_EXT',
    'VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT_EXT',
    'VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_EXT',
    'VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_POOL_EXT',
    'VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_EXT',
    'VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT_EXT',
    'VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_EXT',
    'VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_KHR_EXT',
    'VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_EXT',
    'VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_MEMORY_EXT',
    'VK_DEBUG_REPORT_OBJECT_TYPE_DISPLAY_KHR_EXT',
    'VK_DEBUG_REPORT_OBJECT_TYPE_DISPLAY_MODE_KHR_EXT',
    'VK_DEBUG_REPORT_OBJECT_TYPE_EVENT_EXT',
    'VK_DEBUG_REPORT_OBJECT_TYPE_FENCE_EXT',
    'VK_DEBUG_REPORT_OBJECT_TYPE_FRAMEBUFFER_EXT',
    'VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_EXT',
    'VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_VIEW_EXT',
    'VK_DEBUG_REPORT_OBJECT_TYPE_INSTANCE_EXT',
    'VK_DEBUG_REPORT_OBJECT_TYPE_MAX_ENUM_EXT',
    'VK_DEBUG_REPORT_OBJECT_TYPE_PHYSICAL_DEVICE_EXT',
    'VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_CACHE_EXT',
    'VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_EXT',
    'VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_LAYOUT_EXT',
    'VK_DEBUG_REPORT_OBJECT_TYPE_QUERY_POOL_EXT',
    'VK_DEBUG_REPORT_OBJECT_TYPE_QUEUE_EXT',
    'VK_DEBUG_REPORT_OBJECT_TYPE_RENDER_PASS_EXT',
    'VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_EXT',
    'VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_EXT',
    'VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_KHR_EXT',
    'VK_DEBUG_REPORT_OBJECT_TYPE_SEMAPHORE_EXT',
    'VK_DEBUG_REPORT_OBJECT_TYPE_SHADER_MODULE_EXT',
    'VK_DEBUG_REPORT_OBJECT_TYPE_SURFACE_KHR_EXT',
    'VK_DEBUG_REPORT_OBJECT_TYPE_SWAPCHAIN_KHR_EXT',
    'VK_DEBUG_REPORT_OBJECT_TYPE_UNKNOWN_EXT',
    'VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT',
    'VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT_EXT',
    'VK_DEBUG_REPORT_PERFORMANCE_WARNING_BIT_EXT',
    'VK_DEBUG_REPORT_WARNING_BIT_EXT',
    'VK_DEBUG_UTILS_MESSAGE_SEVERITY_ERROR_BIT_EXT',
    'VK_DEBUG_UTILS_MESSAGE_SEVERITY_FLAG_BITS_MAX_ENUM_EXT',
    'VK_DEBUG_UTILS_MESSAGE_SEVERITY_INFO_BIT_EXT',
    'VK_DEBUG_UTILS_MESSAGE_SEVERITY_VERBOSE_BIT_EXT',
    'VK_DEBUG_UTILS_MESSAGE_SEVERITY_WARNING_BIT_EXT',
    'VK_DEBUG_UTILS_MESSAGE_TYPE_DEVICE_ADDRESS_BINDING_BIT_EXT',
    'VK_DEBUG_UTILS_MESSAGE_TYPE_FLAG_BITS_MAX_ENUM_EXT',
    'VK_DEBUG_UTILS_MESSAGE_TYPE_GENERAL_BIT_EXT',
    'VK_DEBUG_UTILS_MESSAGE_TYPE_PERFORMANCE_BIT_EXT',
    'VK_DEBUG_UTILS_MESSAGE_TYPE_VALIDATION_BIT_EXT',
    'VK_DEPENDENCY_BY_REGION_BIT', 'VK_DEPENDENCY_DEVICE_GROUP_BIT',
    'VK_DEPENDENCY_DEVICE_GROUP_BIT_KHR',
    'VK_DEPENDENCY_FEEDBACK_LOOP_BIT_EXT',
    'VK_DEPENDENCY_FLAG_BITS_MAX_ENUM',
    'VK_DEPENDENCY_VIEW_LOCAL_BIT',
    'VK_DEPENDENCY_VIEW_LOCAL_BIT_KHR',
    'VK_DEPTH_BIAS_REPRESENTATION_FLOAT_EXT',
    'VK_DEPTH_BIAS_REPRESENTATION_LEAST_REPRESENTABLE_VALUE_FORCE_UNORM_EXT',
    'VK_DEPTH_BIAS_REPRESENTATION_LEAST_REPRESENTABLE_VALUE_FORMAT_EXT',
    'VK_DEPTH_BIAS_REPRESENTATION_MAX_ENUM_EXT',
    'VK_DESCRIPTOR_BINDING_FLAG_BITS_MAX_ENUM',
    'VK_DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT',
    'VK_DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT_EXT',
    'VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT',
    'VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT_EXT',
    'VK_DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT',
    'VK_DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT_EXT',
    'VK_DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT',
    'VK_DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT_EXT',
    'VK_DESCRIPTOR_POOL_CREATE_ALLOW_OVERALLOCATION_POOLS_BIT_NV',
    'VK_DESCRIPTOR_POOL_CREATE_ALLOW_OVERALLOCATION_SETS_BIT_NV',
    'VK_DESCRIPTOR_POOL_CREATE_FLAG_BITS_MAX_ENUM',
    'VK_DESCRIPTOR_POOL_CREATE_FREE_DESCRIPTOR_SET_BIT',
    'VK_DESCRIPTOR_POOL_CREATE_HOST_ONLY_BIT_EXT',
    'VK_DESCRIPTOR_POOL_CREATE_HOST_ONLY_BIT_VALVE',
    'VK_DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT',
    'VK_DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT_EXT',
    'VK_DESCRIPTOR_SET_LAYOUT_CREATE_DESCRIPTOR_BUFFER_BIT_EXT',
    'VK_DESCRIPTOR_SET_LAYOUT_CREATE_EMBEDDED_IMMUTABLE_SAMPLERS_BIT_EXT',
    'VK_DESCRIPTOR_SET_LAYOUT_CREATE_FLAG_BITS_MAX_ENUM',
    'VK_DESCRIPTOR_SET_LAYOUT_CREATE_HOST_ONLY_POOL_BIT_EXT',
    'VK_DESCRIPTOR_SET_LAYOUT_CREATE_HOST_ONLY_POOL_BIT_VALVE',
    'VK_DESCRIPTOR_SET_LAYOUT_CREATE_INDIRECT_BINDABLE_BIT_NV',
    'VK_DESCRIPTOR_SET_LAYOUT_CREATE_PER_STAGE_BIT_NV',
    'VK_DESCRIPTOR_SET_LAYOUT_CREATE_PUSH_DESCRIPTOR_BIT_KHR',
    'VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT',
    'VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT_EXT',
    'VK_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_KHR',
    'VK_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_NV',
    'VK_DESCRIPTOR_TYPE_BLOCK_MATCH_IMAGE_QCOM',
    'VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER',
    'VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK',
    'VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK_EXT',
    'VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT',
    'VK_DESCRIPTOR_TYPE_MAX_ENUM', 'VK_DESCRIPTOR_TYPE_MUTABLE_EXT',
    'VK_DESCRIPTOR_TYPE_MUTABLE_VALVE',
    'VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE', 'VK_DESCRIPTOR_TYPE_SAMPLER',
    'VK_DESCRIPTOR_TYPE_SAMPLE_WEIGHT_IMAGE_QCOM',
    'VK_DESCRIPTOR_TYPE_STORAGE_BUFFER',
    'VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC',
    'VK_DESCRIPTOR_TYPE_STORAGE_IMAGE',
    'VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER',
    'VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER',
    'VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC',
    'VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER',
    'VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET',
    'VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET_KHR',
    'VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_MAX_ENUM',
    'VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_PUSH_DESCRIPTORS_KHR',
    'VK_DEVICE_ADDRESS_BINDING_FLAG_BITS_MAX_ENUM_EXT',
    'VK_DEVICE_ADDRESS_BINDING_INTERNAL_OBJECT_BIT_EXT',
    'VK_DEVICE_ADDRESS_BINDING_TYPE_BIND_EXT',
    'VK_DEVICE_ADDRESS_BINDING_TYPE_MAX_ENUM_EXT',
    'VK_DEVICE_ADDRESS_BINDING_TYPE_UNBIND_EXT',
    'VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_AUTOMATIC_CHECKPOINTS_BIT_NV',
    'VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_RESOURCE_TRACKING_BIT_NV',
    'VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_SHADER_DEBUG_INFO_BIT_NV',
    'VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_SHADER_ERROR_REPORTING_BIT_NV',
    'VK_DEVICE_DIAGNOSTICS_CONFIG_FLAG_BITS_MAX_ENUM_NV',
    'VK_DEVICE_EVENT_TYPE_DISPLAY_HOTPLUG_EXT',
    'VK_DEVICE_EVENT_TYPE_MAX_ENUM_EXT',
    'VK_DEVICE_FAULT_ADDRESS_TYPE_EXECUTE_INVALID_EXT',
    'VK_DEVICE_FAULT_ADDRESS_TYPE_INSTRUCTION_POINTER_FAULT_EXT',
    'VK_DEVICE_FAULT_ADDRESS_TYPE_INSTRUCTION_POINTER_INVALID_EXT',
    'VK_DEVICE_FAULT_ADDRESS_TYPE_INSTRUCTION_POINTER_UNKNOWN_EXT',
    'VK_DEVICE_FAULT_ADDRESS_TYPE_MAX_ENUM_EXT',
    'VK_DEVICE_FAULT_ADDRESS_TYPE_NONE_EXT',
    'VK_DEVICE_FAULT_ADDRESS_TYPE_READ_INVALID_EXT',
    'VK_DEVICE_FAULT_ADDRESS_TYPE_WRITE_INVALID_EXT',
    'VK_DEVICE_FAULT_VENDOR_BINARY_HEADER_VERSION_MAX_ENUM_EXT',
    'VK_DEVICE_FAULT_VENDOR_BINARY_HEADER_VERSION_ONE_EXT',
    'VK_DEVICE_GROUP_PRESENT_MODE_FLAG_BITS_MAX_ENUM_KHR',
    'VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_BIT_KHR',
    'VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_MULTI_DEVICE_BIT_KHR',
    'VK_DEVICE_GROUP_PRESENT_MODE_REMOTE_BIT_KHR',
    'VK_DEVICE_GROUP_PRESENT_MODE_SUM_BIT_KHR',
    'VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_ALLOCATE_EXT',
    'VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_ALLOCATION_FAILED_EXT',
    'VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_FREE_EXT',
    'VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_IMPORT_EXT',
    'VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_MAX_ENUM_EXT',
    'VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_UNIMPORT_EXT',
    'VK_DEVICE_QUEUE_CREATE_FLAG_BITS_MAX_ENUM',
    'VK_DEVICE_QUEUE_CREATE_PROTECTED_BIT',
    'VK_DIRECT_DRIVER_LOADING_MODE_EXCLUSIVE_LUNARG',
    'VK_DIRECT_DRIVER_LOADING_MODE_INCLUSIVE_LUNARG',
    'VK_DIRECT_DRIVER_LOADING_MODE_MAX_ENUM_LUNARG',
    'VK_DISCARD_RECTANGLE_MODE_EXCLUSIVE_EXT',
    'VK_DISCARD_RECTANGLE_MODE_INCLUSIVE_EXT',
    'VK_DISCARD_RECTANGLE_MODE_MAX_ENUM_EXT',
    'VK_DISPLAY_EVENT_TYPE_FIRST_PIXEL_OUT_EXT',
    'VK_DISPLAY_EVENT_TYPE_MAX_ENUM_EXT',
    'VK_DISPLAY_PLANE_ALPHA_FLAG_BITS_MAX_ENUM_KHR',
    'VK_DISPLAY_PLANE_ALPHA_GLOBAL_BIT_KHR',
    'VK_DISPLAY_PLANE_ALPHA_OPAQUE_BIT_KHR',
    'VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_BIT_KHR',
    'VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_PREMULTIPLIED_BIT_KHR',
    'VK_DISPLAY_POWER_STATE_MAX_ENUM_EXT',
    'VK_DISPLAY_POWER_STATE_OFF_EXT', 'VK_DISPLAY_POWER_STATE_ON_EXT',
    'VK_DISPLAY_POWER_STATE_SUSPEND_EXT',
    'VK_DRIVER_ID_AMD_OPEN_SOURCE',
    'VK_DRIVER_ID_AMD_OPEN_SOURCE_KHR',
    'VK_DRIVER_ID_AMD_PROPRIETARY',
    'VK_DRIVER_ID_AMD_PROPRIETARY_KHR',
    'VK_DRIVER_ID_ARM_PROPRIETARY',
    'VK_DRIVER_ID_ARM_PROPRIETARY_KHR',
    'VK_DRIVER_ID_BROADCOM_PROPRIETARY',
    'VK_DRIVER_ID_BROADCOM_PROPRIETARY_KHR',
    'VK_DRIVER_ID_COREAVI_PROPRIETARY',
    'VK_DRIVER_ID_GGP_PROPRIETARY',
    'VK_DRIVER_ID_GGP_PROPRIETARY_KHR',
    'VK_DRIVER_ID_GOOGLE_SWIFTSHADER',
    'VK_DRIVER_ID_GOOGLE_SWIFTSHADER_KHR',
    'VK_DRIVER_ID_IMAGINATION_OPEN_SOURCE_MESA',
    'VK_DRIVER_ID_IMAGINATION_PROPRIETARY',
    'VK_DRIVER_ID_IMAGINATION_PROPRIETARY_KHR',
    'VK_DRIVER_ID_INTEL_OPEN_SOURCE_MESA',
    'VK_DRIVER_ID_INTEL_OPEN_SOURCE_MESA_KHR',
    'VK_DRIVER_ID_INTEL_PROPRIETARY_WINDOWS',
    'VK_DRIVER_ID_INTEL_PROPRIETARY_WINDOWS_KHR',
    'VK_DRIVER_ID_JUICE_PROPRIETARY', 'VK_DRIVER_ID_MAX_ENUM',
    'VK_DRIVER_ID_MESA_AGXV', 'VK_DRIVER_ID_MESA_DOZEN',
    'VK_DRIVER_ID_MESA_LLVMPIPE', 'VK_DRIVER_ID_MESA_NVK',
    'VK_DRIVER_ID_MESA_PANVK', 'VK_DRIVER_ID_MESA_RADV',
    'VK_DRIVER_ID_MESA_RADV_KHR', 'VK_DRIVER_ID_MESA_TURNIP',
    'VK_DRIVER_ID_MESA_V3DV', 'VK_DRIVER_ID_MESA_VENUS',
    'VK_DRIVER_ID_MOLTENVK', 'VK_DRIVER_ID_NVIDIA_PROPRIETARY',
    'VK_DRIVER_ID_NVIDIA_PROPRIETARY_KHR',
    'VK_DRIVER_ID_QUALCOMM_PROPRIETARY',
    'VK_DRIVER_ID_QUALCOMM_PROPRIETARY_KHR',
    'VK_DRIVER_ID_SAMSUNG_PROPRIETARY',
    'VK_DRIVER_ID_VERISILICON_PROPRIETARY',
    'VK_DYNAMIC_STATE_ALPHA_TO_COVERAGE_ENABLE_EXT',
    'VK_DYNAMIC_STATE_ALPHA_TO_ONE_ENABLE_EXT',
    'VK_DYNAMIC_STATE_ATTACHMENT_FEEDBACK_LOOP_ENABLE_EXT',
    'VK_DYNAMIC_STATE_BLEND_CONSTANTS',
    'VK_DYNAMIC_STATE_COLOR_BLEND_ADVANCED_EXT',
    'VK_DYNAMIC_STATE_COLOR_BLEND_ENABLE_EXT',
    'VK_DYNAMIC_STATE_COLOR_BLEND_EQUATION_EXT',
    'VK_DYNAMIC_STATE_COLOR_WRITE_ENABLE_EXT',
    'VK_DYNAMIC_STATE_COLOR_WRITE_MASK_EXT',
    'VK_DYNAMIC_STATE_CONSERVATIVE_RASTERIZATION_MODE_EXT',
    'VK_DYNAMIC_STATE_COVERAGE_MODULATION_MODE_NV',
    'VK_DYNAMIC_STATE_COVERAGE_MODULATION_TABLE_ENABLE_NV',
    'VK_DYNAMIC_STATE_COVERAGE_MODULATION_TABLE_NV',
    'VK_DYNAMIC_STATE_COVERAGE_REDUCTION_MODE_NV',
    'VK_DYNAMIC_STATE_COVERAGE_TO_COLOR_ENABLE_NV',
    'VK_DYNAMIC_STATE_COVERAGE_TO_COLOR_LOCATION_NV',
    'VK_DYNAMIC_STATE_CULL_MODE', 'VK_DYNAMIC_STATE_CULL_MODE_EXT',
    'VK_DYNAMIC_STATE_DEPTH_BIAS',
    'VK_DYNAMIC_STATE_DEPTH_BIAS_ENABLE',
    'VK_DYNAMIC_STATE_DEPTH_BIAS_ENABLE_EXT',
    'VK_DYNAMIC_STATE_DEPTH_BOUNDS',
    'VK_DYNAMIC_STATE_DEPTH_BOUNDS_TEST_ENABLE',
    'VK_DYNAMIC_STATE_DEPTH_BOUNDS_TEST_ENABLE_EXT',
    'VK_DYNAMIC_STATE_DEPTH_CLAMP_ENABLE_EXT',
    'VK_DYNAMIC_STATE_DEPTH_CLIP_ENABLE_EXT',
    'VK_DYNAMIC_STATE_DEPTH_CLIP_NEGATIVE_ONE_TO_ONE_EXT',
    'VK_DYNAMIC_STATE_DEPTH_COMPARE_OP',
    'VK_DYNAMIC_STATE_DEPTH_COMPARE_OP_EXT',
    'VK_DYNAMIC_STATE_DEPTH_TEST_ENABLE',
    'VK_DYNAMIC_STATE_DEPTH_TEST_ENABLE_EXT',
    'VK_DYNAMIC_STATE_DEPTH_WRITE_ENABLE',
    'VK_DYNAMIC_STATE_DEPTH_WRITE_ENABLE_EXT',
    'VK_DYNAMIC_STATE_DISCARD_RECTANGLE_ENABLE_EXT',
    'VK_DYNAMIC_STATE_DISCARD_RECTANGLE_EXT',
    'VK_DYNAMIC_STATE_DISCARD_RECTANGLE_MODE_EXT',
    'VK_DYNAMIC_STATE_EXCLUSIVE_SCISSOR_ENABLE_NV',
    'VK_DYNAMIC_STATE_EXCLUSIVE_SCISSOR_NV',
    'VK_DYNAMIC_STATE_EXTRA_PRIMITIVE_OVERESTIMATION_SIZE_EXT',
    'VK_DYNAMIC_STATE_FRAGMENT_SHADING_RATE_KHR',
    'VK_DYNAMIC_STATE_FRONT_FACE', 'VK_DYNAMIC_STATE_FRONT_FACE_EXT',
    'VK_DYNAMIC_STATE_LINE_RASTERIZATION_MODE_EXT',
    'VK_DYNAMIC_STATE_LINE_STIPPLE_ENABLE_EXT',
    'VK_DYNAMIC_STATE_LINE_STIPPLE_EXT',
    'VK_DYNAMIC_STATE_LINE_WIDTH',
    'VK_DYNAMIC_STATE_LOGIC_OP_ENABLE_EXT',
    'VK_DYNAMIC_STATE_LOGIC_OP_EXT', 'VK_DYNAMIC_STATE_MAX_ENUM',
    'VK_DYNAMIC_STATE_PATCH_CONTROL_POINTS_EXT',
    'VK_DYNAMIC_STATE_POLYGON_MODE_EXT',
    'VK_DYNAMIC_STATE_PRIMITIVE_RESTART_ENABLE',
    'VK_DYNAMIC_STATE_PRIMITIVE_RESTART_ENABLE_EXT',
    'VK_DYNAMIC_STATE_PRIMITIVE_TOPOLOGY',
    'VK_DYNAMIC_STATE_PRIMITIVE_TOPOLOGY_EXT',
    'VK_DYNAMIC_STATE_PROVOKING_VERTEX_MODE_EXT',
    'VK_DYNAMIC_STATE_RASTERIZATION_SAMPLES_EXT',
    'VK_DYNAMIC_STATE_RASTERIZATION_STREAM_EXT',
    'VK_DYNAMIC_STATE_RASTERIZER_DISCARD_ENABLE',
    'VK_DYNAMIC_STATE_RASTERIZER_DISCARD_ENABLE_EXT',
    'VK_DYNAMIC_STATE_RAY_TRACING_PIPELINE_STACK_SIZE_KHR',
    'VK_DYNAMIC_STATE_REPRESENTATIVE_FRAGMENT_TEST_ENABLE_NV',
    'VK_DYNAMIC_STATE_SAMPLE_LOCATIONS_ENABLE_EXT',
    'VK_DYNAMIC_STATE_SAMPLE_LOCATIONS_EXT',
    'VK_DYNAMIC_STATE_SAMPLE_MASK_EXT', 'VK_DYNAMIC_STATE_SCISSOR',
    'VK_DYNAMIC_STATE_SCISSOR_WITH_COUNT',
    'VK_DYNAMIC_STATE_SCISSOR_WITH_COUNT_EXT',
    'VK_DYNAMIC_STATE_SHADING_RATE_IMAGE_ENABLE_NV',
    'VK_DYNAMIC_STATE_STENCIL_COMPARE_MASK',
    'VK_DYNAMIC_STATE_STENCIL_OP', 'VK_DYNAMIC_STATE_STENCIL_OP_EXT',
    'VK_DYNAMIC_STATE_STENCIL_REFERENCE',
    'VK_DYNAMIC_STATE_STENCIL_TEST_ENABLE',
    'VK_DYNAMIC_STATE_STENCIL_TEST_ENABLE_EXT',
    'VK_DYNAMIC_STATE_STENCIL_WRITE_MASK',
    'VK_DYNAMIC_STATE_TESSELLATION_DOMAIN_ORIGIN_EXT',
    'VK_DYNAMIC_STATE_VERTEX_INPUT_BINDING_STRIDE',
    'VK_DYNAMIC_STATE_VERTEX_INPUT_BINDING_STRIDE_EXT',
    'VK_DYNAMIC_STATE_VERTEX_INPUT_EXT', 'VK_DYNAMIC_STATE_VIEWPORT',
    'VK_DYNAMIC_STATE_VIEWPORT_COARSE_SAMPLE_ORDER_NV',
    'VK_DYNAMIC_STATE_VIEWPORT_SHADING_RATE_PALETTE_NV',
    'VK_DYNAMIC_STATE_VIEWPORT_SWIZZLE_NV',
    'VK_DYNAMIC_STATE_VIEWPORT_WITH_COUNT',
    'VK_DYNAMIC_STATE_VIEWPORT_WITH_COUNT_EXT',
    'VK_DYNAMIC_STATE_VIEWPORT_W_SCALING_ENABLE_NV',
    'VK_DYNAMIC_STATE_VIEWPORT_W_SCALING_NV',
    'VK_ERROR_COMPRESSION_EXHAUSTED_EXT', 'VK_ERROR_DEVICE_LOST',
    'VK_ERROR_EXTENSION_NOT_PRESENT', 'VK_ERROR_FEATURE_NOT_PRESENT',
    'VK_ERROR_FORMAT_NOT_SUPPORTED', 'VK_ERROR_FRAGMENTATION',
    'VK_ERROR_FRAGMENTATION_EXT', 'VK_ERROR_FRAGMENTED_POOL',
    'VK_ERROR_FULL_SCREEN_EXCLUSIVE_MODE_LOST_EXT',
    'VK_ERROR_IMAGE_USAGE_NOT_SUPPORTED_KHR',
    'VK_ERROR_INCOMPATIBLE_DISPLAY_KHR',
    'VK_ERROR_INCOMPATIBLE_DRIVER',
    'VK_ERROR_INCOMPATIBLE_SHADER_BINARY_EXT',
    'VK_ERROR_INITIALIZATION_FAILED',
    'VK_ERROR_INVALID_DEVICE_ADDRESS_EXT',
    'VK_ERROR_INVALID_DRM_FORMAT_MODIFIER_PLANE_LAYOUT_EXT',
    'VK_ERROR_INVALID_EXTERNAL_HANDLE',
    'VK_ERROR_INVALID_EXTERNAL_HANDLE_KHR',
    'VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS',
    'VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS_KHR',
    'VK_ERROR_INVALID_SHADER_NV',
    'VK_ERROR_INVALID_VIDEO_STD_PARAMETERS_KHR',
    'VK_ERROR_LAYER_NOT_PRESENT', 'VK_ERROR_MEMORY_MAP_FAILED',
    'VK_ERROR_NATIVE_WINDOW_IN_USE_KHR', 'VK_ERROR_NOT_PERMITTED_EXT',
    'VK_ERROR_NOT_PERMITTED_KHR', 'VK_ERROR_OUT_OF_DATE_KHR',
    'VK_ERROR_OUT_OF_DEVICE_MEMORY', 'VK_ERROR_OUT_OF_HOST_MEMORY',
    'VK_ERROR_OUT_OF_POOL_MEMORY', 'VK_ERROR_OUT_OF_POOL_MEMORY_KHR',
    'VK_ERROR_PIPELINE_COMPILE_REQUIRED_EXT',
    'VK_ERROR_SURFACE_LOST_KHR', 'VK_ERROR_TOO_MANY_OBJECTS',
    'VK_ERROR_UNKNOWN', 'VK_ERROR_VALIDATION_FAILED_EXT',
    'VK_ERROR_VIDEO_PICTURE_LAYOUT_NOT_SUPPORTED_KHR',
    'VK_ERROR_VIDEO_PROFILE_CODEC_NOT_SUPPORTED_KHR',
    'VK_ERROR_VIDEO_PROFILE_FORMAT_NOT_SUPPORTED_KHR',
    'VK_ERROR_VIDEO_PROFILE_OPERATION_NOT_SUPPORTED_KHR',
    'VK_ERROR_VIDEO_STD_VERSION_NOT_SUPPORTED_KHR',
    'VK_EVENT_CREATE_DEVICE_ONLY_BIT',
    'VK_EVENT_CREATE_DEVICE_ONLY_BIT_KHR',
    'VK_EVENT_CREATE_FLAG_BITS_MAX_ENUM', 'VK_EVENT_RESET',
    'VK_EVENT_SET', 'VK_EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT',
    'VK_EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT_KHR',
    'VK_EXTERNAL_FENCE_FEATURE_FLAG_BITS_MAX_ENUM',
    'VK_EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT',
    'VK_EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT_KHR',
    'VK_EXTERNAL_FENCE_HANDLE_TYPE_FLAG_BITS_MAX_ENUM',
    'VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT',
    'VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT_KHR',
    'VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT',
    'VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR',
    'VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT',
    'VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR',
    'VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT',
    'VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT_KHR',
    'VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT',
    'VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT_KHR',
    'VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT_NV',
    'VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT',
    'VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT_KHR',
    'VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT_NV',
    'VK_EXTERNAL_MEMORY_FEATURE_FLAG_BITS_MAX_ENUM',
    'VK_EXTERNAL_MEMORY_FEATURE_FLAG_BITS_MAX_ENUM_NV',
    'VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT',
    'VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT_KHR',
    'VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT_NV',
    'VK_EXTERNAL_MEMORY_HANDLE_TYPE_ANDROID_HARDWARE_BUFFER_BIT_ANDROID',
    'VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_BIT_NV',
    'VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_KMT_BIT_NV',
    'VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT',
    'VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT_KHR',
    'VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT',
    'VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT_KHR',
    'VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT',
    'VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT_KHR',
    'VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT',
    'VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT_KHR',
    'VK_EXTERNAL_MEMORY_HANDLE_TYPE_DMA_BUF_BIT_EXT',
    'VK_EXTERNAL_MEMORY_HANDLE_TYPE_FLAG_BITS_MAX_ENUM',
    'VK_EXTERNAL_MEMORY_HANDLE_TYPE_FLAG_BITS_MAX_ENUM_NV',
    'VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_ALLOCATION_BIT_EXT',
    'VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_MAPPED_FOREIGN_MEMORY_BIT_EXT',
    'VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT',
    'VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT_KHR',
    'VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT',
    'VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR',
    'VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT_NV',
    'VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT',
    'VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR',
    'VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_NV',
    'VK_EXTERNAL_MEMORY_HANDLE_TYPE_RDMA_ADDRESS_BIT_NV',
    'VK_EXTERNAL_MEMORY_HANDLE_TYPE_SCREEN_BUFFER_BIT_QNX',
    'VK_EXTERNAL_MEMORY_HANDLE_TYPE_ZIRCON_VMO_BIT_FUCHSIA',
    'VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT',
    'VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT_KHR',
    'VK_EXTERNAL_SEMAPHORE_FEATURE_FLAG_BITS_MAX_ENUM',
    'VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT',
    'VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT_KHR',
    'VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D11_FENCE_BIT',
    'VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT',
    'VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT_KHR',
    'VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_FLAG_BITS_MAX_ENUM',
    'VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT',
    'VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT_KHR',
    'VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT',
    'VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR',
    'VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT',
    'VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR',
    'VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT',
    'VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT_KHR',
    'VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_ZIRCON_EVENT_BIT_FUCHSIA',
    'VK_EXT_4444_FORMATS_EXTENSION_NAME',
    'VK_EXT_4444_FORMATS_SPEC_VERSION', 'VK_EXT_4444_formats',
    'VK_EXT_ACQUIRE_DRM_DISPLAY_EXTENSION_NAME',
    'VK_EXT_ACQUIRE_DRM_DISPLAY_SPEC_VERSION',
    'VK_EXT_ASTC_DECODE_MODE_EXTENSION_NAME',
    'VK_EXT_ASTC_DECODE_MODE_SPEC_VERSION',
    'VK_EXT_ATTACHMENT_FEEDBACK_LOOP_DYNAMIC_STATE_EXTENSION_NAME',
    'VK_EXT_ATTACHMENT_FEEDBACK_LOOP_DYNAMIC_STATE_SPEC_VERSION',
    'VK_EXT_ATTACHMENT_FEEDBACK_LOOP_LAYOUT_EXTENSION_NAME',
    'VK_EXT_ATTACHMENT_FEEDBACK_LOOP_LAYOUT_SPEC_VERSION',
    'VK_EXT_BLEND_OPERATION_ADVANCED_EXTENSION_NAME',
    'VK_EXT_BLEND_OPERATION_ADVANCED_SPEC_VERSION',
    'VK_EXT_BORDER_COLOR_SWIZZLE_EXTENSION_NAME',
    'VK_EXT_BORDER_COLOR_SWIZZLE_SPEC_VERSION',
    'VK_EXT_BUFFER_DEVICE_ADDRESS_EXTENSION_NAME',
    'VK_EXT_BUFFER_DEVICE_ADDRESS_SPEC_VERSION',
    'VK_EXT_CALIBRATED_TIMESTAMPS_EXTENSION_NAME',
    'VK_EXT_CALIBRATED_TIMESTAMPS_SPEC_VERSION',
    'VK_EXT_COLOR_WRITE_ENABLE_EXTENSION_NAME',
    'VK_EXT_COLOR_WRITE_ENABLE_SPEC_VERSION',
    'VK_EXT_CONDITIONAL_RENDERING_EXTENSION_NAME',
    'VK_EXT_CONDITIONAL_RENDERING_SPEC_VERSION',
    'VK_EXT_CONSERVATIVE_RASTERIZATION_EXTENSION_NAME',
    'VK_EXT_CONSERVATIVE_RASTERIZATION_SPEC_VERSION',
    'VK_EXT_CUSTOM_BORDER_COLOR_EXTENSION_NAME',
    'VK_EXT_CUSTOM_BORDER_COLOR_SPEC_VERSION',
    'VK_EXT_DEBUG_MARKER_EXTENSION_NAME',
    'VK_EXT_DEBUG_MARKER_SPEC_VERSION',
    'VK_EXT_DEBUG_REPORT_EXTENSION_NAME',
    'VK_EXT_DEBUG_REPORT_SPEC_VERSION',
    'VK_EXT_DEBUG_UTILS_EXTENSION_NAME',
    'VK_EXT_DEBUG_UTILS_SPEC_VERSION',
    'VK_EXT_DEPTH_BIAS_CONTROL_EXTENSION_NAME',
    'VK_EXT_DEPTH_BIAS_CONTROL_SPEC_VERSION',
    'VK_EXT_DEPTH_CLAMP_ZERO_ONE_EXTENSION_NAME',
    'VK_EXT_DEPTH_CLAMP_ZERO_ONE_SPEC_VERSION',
    'VK_EXT_DEPTH_CLIP_CONTROL_EXTENSION_NAME',
    'VK_EXT_DEPTH_CLIP_CONTROL_SPEC_VERSION',
    'VK_EXT_DEPTH_CLIP_ENABLE_EXTENSION_NAME',
    'VK_EXT_DEPTH_CLIP_ENABLE_SPEC_VERSION',
    'VK_EXT_DEPTH_RANGE_UNRESTRICTED_EXTENSION_NAME',
    'VK_EXT_DEPTH_RANGE_UNRESTRICTED_SPEC_VERSION',
    'VK_EXT_DESCRIPTOR_BUFFER_EXTENSION_NAME',
    'VK_EXT_DESCRIPTOR_BUFFER_SPEC_VERSION',
    'VK_EXT_DESCRIPTOR_INDEXING_EXTENSION_NAME',
    'VK_EXT_DESCRIPTOR_INDEXING_SPEC_VERSION',
    'VK_EXT_DEVICE_ADDRESS_BINDING_REPORT_EXTENSION_NAME',
    'VK_EXT_DEVICE_ADDRESS_BINDING_REPORT_SPEC_VERSION',
    'VK_EXT_DEVICE_FAULT_EXTENSION_NAME',
    'VK_EXT_DEVICE_FAULT_SPEC_VERSION',
    'VK_EXT_DEVICE_MEMORY_REPORT_EXTENSION_NAME',
    'VK_EXT_DEVICE_MEMORY_REPORT_SPEC_VERSION',
    'VK_EXT_DIRECT_MODE_DISPLAY_EXTENSION_NAME',
    'VK_EXT_DIRECT_MODE_DISPLAY_SPEC_VERSION',
    'VK_EXT_DISCARD_RECTANGLES_EXTENSION_NAME',
    'VK_EXT_DISCARD_RECTANGLES_SPEC_VERSION',
    'VK_EXT_DISPLAY_CONTROL_EXTENSION_NAME',
    'VK_EXT_DISPLAY_CONTROL_SPEC_VERSION',
    'VK_EXT_DISPLAY_SURFACE_COUNTER_EXTENSION_NAME',
    'VK_EXT_DISPLAY_SURFACE_COUNTER_SPEC_VERSION',
    'VK_EXT_DYNAMIC_RENDERING_UNUSED_ATTACHMENTS_EXTENSION_NAME',
    'VK_EXT_DYNAMIC_RENDERING_UNUSED_ATTACHMENTS_SPEC_VERSION',
    'VK_EXT_EXTENDED_DYNAMIC_STATE_2_EXTENSION_NAME',
    'VK_EXT_EXTENDED_DYNAMIC_STATE_2_SPEC_VERSION',
    'VK_EXT_EXTENDED_DYNAMIC_STATE_3_EXTENSION_NAME',
    'VK_EXT_EXTENDED_DYNAMIC_STATE_3_SPEC_VERSION',
    'VK_EXT_EXTENDED_DYNAMIC_STATE_EXTENSION_NAME',
    'VK_EXT_EXTENDED_DYNAMIC_STATE_SPEC_VERSION',
    'VK_EXT_EXTERNAL_MEMORY_ACQUIRE_UNMODIFIED_EXTENSION_NAME',
    'VK_EXT_EXTERNAL_MEMORY_ACQUIRE_UNMODIFIED_SPEC_VERSION',
    'VK_EXT_EXTERNAL_MEMORY_DMA_BUF_EXTENSION_NAME',
    'VK_EXT_EXTERNAL_MEMORY_DMA_BUF_SPEC_VERSION',
    'VK_EXT_EXTERNAL_MEMORY_HOST_EXTENSION_NAME',
    'VK_EXT_EXTERNAL_MEMORY_HOST_SPEC_VERSION',
    'VK_EXT_FILTER_CUBIC_EXTENSION_NAME',
    'VK_EXT_FILTER_CUBIC_SPEC_VERSION',
    'VK_EXT_FRAGMENT_DENSITY_MAP_2_EXTENSION_NAME',
    'VK_EXT_FRAGMENT_DENSITY_MAP_2_SPEC_VERSION',
    'VK_EXT_FRAGMENT_DENSITY_MAP_EXTENSION_NAME',
    'VK_EXT_FRAGMENT_DENSITY_MAP_SPEC_VERSION',
    'VK_EXT_FRAGMENT_SHADER_INTERLOCK_EXTENSION_NAME',
    'VK_EXT_FRAGMENT_SHADER_INTERLOCK_SPEC_VERSION',
    'VK_EXT_FRAME_BOUNDARY_EXTENSION_NAME',
    'VK_EXT_FRAME_BOUNDARY_SPEC_VERSION',
    'VK_EXT_GLOBAL_PRIORITY_EXTENSION_NAME',
    'VK_EXT_GLOBAL_PRIORITY_QUERY_EXTENSION_NAME',
    'VK_EXT_GLOBAL_PRIORITY_QUERY_SPEC_VERSION',
    'VK_EXT_GLOBAL_PRIORITY_SPEC_VERSION',
    'VK_EXT_GRAPHICS_PIPELINE_LIBRARY_EXTENSION_NAME',
    'VK_EXT_GRAPHICS_PIPELINE_LIBRARY_SPEC_VERSION',
    'VK_EXT_HDR_METADATA_EXTENSION_NAME',
    'VK_EXT_HDR_METADATA_SPEC_VERSION',
    'VK_EXT_HEADLESS_SURFACE_EXTENSION_NAME',
    'VK_EXT_HEADLESS_SURFACE_SPEC_VERSION',
    'VK_EXT_HOST_IMAGE_COPY_EXTENSION_NAME',
    'VK_EXT_HOST_IMAGE_COPY_SPEC_VERSION',
    'VK_EXT_HOST_QUERY_RESET_EXTENSION_NAME',
    'VK_EXT_HOST_QUERY_RESET_SPEC_VERSION',
    'VK_EXT_IMAGE_2D_VIEW_OF_3D_EXTENSION_NAME',
    'VK_EXT_IMAGE_2D_VIEW_OF_3D_SPEC_VERSION',
    'VK_EXT_IMAGE_COMPRESSION_CONTROL_EXTENSION_NAME',
    'VK_EXT_IMAGE_COMPRESSION_CONTROL_SPEC_VERSION',
    'VK_EXT_IMAGE_COMPRESSION_CONTROL_SWAPCHAIN_EXTENSION_NAME',
    'VK_EXT_IMAGE_COMPRESSION_CONTROL_SWAPCHAIN_SPEC_VERSION',
    'VK_EXT_IMAGE_DRM_FORMAT_MODIFIER_EXTENSION_NAME',
    'VK_EXT_IMAGE_DRM_FORMAT_MODIFIER_SPEC_VERSION',
    'VK_EXT_IMAGE_ROBUSTNESS_EXTENSION_NAME',
    'VK_EXT_IMAGE_ROBUSTNESS_SPEC_VERSION',
    'VK_EXT_IMAGE_SLICED_VIEW_OF_3D_EXTENSION_NAME',
    'VK_EXT_IMAGE_SLICED_VIEW_OF_3D_SPEC_VERSION',
    'VK_EXT_IMAGE_VIEW_MIN_LOD_EXTENSION_NAME',
    'VK_EXT_IMAGE_VIEW_MIN_LOD_SPEC_VERSION',
    'VK_EXT_INDEX_TYPE_UINT8_EXTENSION_NAME',
    'VK_EXT_INDEX_TYPE_UINT8_SPEC_VERSION',
    'VK_EXT_INLINE_UNIFORM_BLOCK_EXTENSION_NAME',
    'VK_EXT_INLINE_UNIFORM_BLOCK_SPEC_VERSION',
    'VK_EXT_LAYER_SETTINGS_EXTENSION_NAME',
    'VK_EXT_LAYER_SETTINGS_SPEC_VERSION',
    'VK_EXT_LEGACY_DITHERING_EXTENSION_NAME',
    'VK_EXT_LEGACY_DITHERING_SPEC_VERSION',
    'VK_EXT_LINE_RASTERIZATION_EXTENSION_NAME',
    'VK_EXT_LINE_RASTERIZATION_SPEC_VERSION',
    'VK_EXT_LOAD_STORE_OP_NONE_EXTENSION_NAME',
    'VK_EXT_LOAD_STORE_OP_NONE_SPEC_VERSION',
    'VK_EXT_MEMORY_BUDGET_EXTENSION_NAME',
    'VK_EXT_MEMORY_BUDGET_SPEC_VERSION',
    'VK_EXT_MEMORY_PRIORITY_EXTENSION_NAME',
    'VK_EXT_MEMORY_PRIORITY_SPEC_VERSION',
    'VK_EXT_MESH_SHADER_EXTENSION_NAME',
    'VK_EXT_MESH_SHADER_SPEC_VERSION',
    'VK_EXT_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_EXTENSION_NAME',
    'VK_EXT_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_SPEC_VERSION',
    'VK_EXT_MULTI_DRAW_EXTENSION_NAME',
    'VK_EXT_MULTI_DRAW_SPEC_VERSION',
    'VK_EXT_MUTABLE_DESCRIPTOR_TYPE_EXTENSION_NAME',
    'VK_EXT_MUTABLE_DESCRIPTOR_TYPE_SPEC_VERSION',
    'VK_EXT_NESTED_COMMAND_BUFFER_EXTENSION_NAME',
    'VK_EXT_NESTED_COMMAND_BUFFER_SPEC_VERSION',
    'VK_EXT_NON_SEAMLESS_CUBE_MAP_EXTENSION_NAME',
    'VK_EXT_NON_SEAMLESS_CUBE_MAP_SPEC_VERSION',
    'VK_EXT_OPACITY_MICROMAP_EXTENSION_NAME',
    'VK_EXT_OPACITY_MICROMAP_SPEC_VERSION',
    'VK_EXT_PAGEABLE_DEVICE_LOCAL_MEMORY_EXTENSION_NAME',
    'VK_EXT_PAGEABLE_DEVICE_LOCAL_MEMORY_SPEC_VERSION',
    'VK_EXT_PCI_BUS_INFO_EXTENSION_NAME',
    'VK_EXT_PCI_BUS_INFO_SPEC_VERSION',
    'VK_EXT_PHYSICAL_DEVICE_DRM_EXTENSION_NAME',
    'VK_EXT_PHYSICAL_DEVICE_DRM_SPEC_VERSION',
    'VK_EXT_PIPELINE_CREATION_CACHE_CONTROL_EXTENSION_NAME',
    'VK_EXT_PIPELINE_CREATION_CACHE_CONTROL_SPEC_VERSION',
    'VK_EXT_PIPELINE_CREATION_FEEDBACK_EXTENSION_NAME',
    'VK_EXT_PIPELINE_CREATION_FEEDBACK_SPEC_VERSION',
    'VK_EXT_PIPELINE_LIBRARY_GROUP_HANDLES_EXTENSION_NAME',
    'VK_EXT_PIPELINE_LIBRARY_GROUP_HANDLES_SPEC_VERSION',
    'VK_EXT_PIPELINE_PROPERTIES_EXTENSION_NAME',
    'VK_EXT_PIPELINE_PROPERTIES_SPEC_VERSION',
    'VK_EXT_PIPELINE_PROTECTED_ACCESS_EXTENSION_NAME',
    'VK_EXT_PIPELINE_PROTECTED_ACCESS_SPEC_VERSION',
    'VK_EXT_PIPELINE_ROBUSTNESS_EXTENSION_NAME',
    'VK_EXT_PIPELINE_ROBUSTNESS_SPEC_VERSION',
    'VK_EXT_POST_DEPTH_COVERAGE_EXTENSION_NAME',
    'VK_EXT_POST_DEPTH_COVERAGE_SPEC_VERSION',
    'VK_EXT_PRIMITIVES_GENERATED_QUERY_EXTENSION_NAME',
    'VK_EXT_PRIMITIVES_GENERATED_QUERY_SPEC_VERSION',
    'VK_EXT_PRIMITIVE_TOPOLOGY_LIST_RESTART_EXTENSION_NAME',
    'VK_EXT_PRIMITIVE_TOPOLOGY_LIST_RESTART_SPEC_VERSION',
    'VK_EXT_PRIVATE_DATA_EXTENSION_NAME',
    'VK_EXT_PRIVATE_DATA_SPEC_VERSION',
    'VK_EXT_PROVOKING_VERTEX_EXTENSION_NAME',
    'VK_EXT_PROVOKING_VERTEX_SPEC_VERSION',
    'VK_EXT_QUEUE_FAMILY_FOREIGN_EXTENSION_NAME',
    'VK_EXT_QUEUE_FAMILY_FOREIGN_SPEC_VERSION',
    'VK_EXT_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_EXTENSION_NAME',
    'VK_EXT_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_SPEC_VERSION',
    'VK_EXT_RGBA10X6_FORMATS_EXTENSION_NAME',
    'VK_EXT_RGBA10X6_FORMATS_SPEC_VERSION',
    'VK_EXT_ROBUSTNESS_2_EXTENSION_NAME',
    'VK_EXT_ROBUSTNESS_2_SPEC_VERSION',
    'VK_EXT_SAMPLER_FILTER_MINMAX_EXTENSION_NAME',
    'VK_EXT_SAMPLER_FILTER_MINMAX_SPEC_VERSION',
    'VK_EXT_SAMPLE_LOCATIONS_EXTENSION_NAME',
    'VK_EXT_SAMPLE_LOCATIONS_SPEC_VERSION',
    'VK_EXT_SCALAR_BLOCK_LAYOUT_EXTENSION_NAME',
    'VK_EXT_SCALAR_BLOCK_LAYOUT_SPEC_VERSION',
    'VK_EXT_SEPARATE_STENCIL_USAGE_EXTENSION_NAME',
    'VK_EXT_SEPARATE_STENCIL_USAGE_SPEC_VERSION',
    'VK_EXT_SHADER_ATOMIC_FLOAT_2_EXTENSION_NAME',
    'VK_EXT_SHADER_ATOMIC_FLOAT_2_SPEC_VERSION',
    'VK_EXT_SHADER_ATOMIC_FLOAT_EXTENSION_NAME',
    'VK_EXT_SHADER_ATOMIC_FLOAT_SPEC_VERSION',
    'VK_EXT_SHADER_DEMOTE_TO_HELPER_INVOCATION_EXTENSION_NAME',
    'VK_EXT_SHADER_DEMOTE_TO_HELPER_INVOCATION_SPEC_VERSION',
    'VK_EXT_SHADER_IMAGE_ATOMIC_INT64_EXTENSION_NAME',
    'VK_EXT_SHADER_IMAGE_ATOMIC_INT64_SPEC_VERSION',
    'VK_EXT_SHADER_MODULE_IDENTIFIER_EXTENSION_NAME',
    'VK_EXT_SHADER_MODULE_IDENTIFIER_SPEC_VERSION',
    'VK_EXT_SHADER_OBJECT_EXTENSION_NAME',
    'VK_EXT_SHADER_OBJECT_SPEC_VERSION',
    'VK_EXT_SHADER_STENCIL_EXPORT_EXTENSION_NAME',
    'VK_EXT_SHADER_STENCIL_EXPORT_SPEC_VERSION',
    'VK_EXT_SHADER_SUBGROUP_BALLOT_EXTENSION_NAME',
    'VK_EXT_SHADER_SUBGROUP_BALLOT_SPEC_VERSION',
    'VK_EXT_SHADER_SUBGROUP_VOTE_EXTENSION_NAME',
    'VK_EXT_SHADER_SUBGROUP_VOTE_SPEC_VERSION',
    'VK_EXT_SHADER_TILE_IMAGE_EXTENSION_NAME',
    'VK_EXT_SHADER_TILE_IMAGE_SPEC_VERSION',
    'VK_EXT_SHADER_VIEWPORT_INDEX_LAYER_EXTENSION_NAME',
    'VK_EXT_SHADER_VIEWPORT_INDEX_LAYER_SPEC_VERSION',
    'VK_EXT_SUBGROUP_SIZE_CONTROL_EXTENSION_NAME',
    'VK_EXT_SUBGROUP_SIZE_CONTROL_SPEC_VERSION',
    'VK_EXT_SUBPASS_MERGE_FEEDBACK_EXTENSION_NAME',
    'VK_EXT_SUBPASS_MERGE_FEEDBACK_SPEC_VERSION',
    'VK_EXT_SURFACE_MAINTENANCE_1_EXTENSION_NAME',
    'VK_EXT_SURFACE_MAINTENANCE_1_SPEC_VERSION',
    'VK_EXT_SWAPCHAIN_COLOR_SPACE_EXTENSION_NAME',
    'VK_EXT_SWAPCHAIN_COLOR_SPACE_SPEC_VERSION',
    'VK_EXT_SWAPCHAIN_MAINTENANCE_1_EXTENSION_NAME',
    'VK_EXT_SWAPCHAIN_MAINTENANCE_1_SPEC_VERSION',
    'VK_EXT_TEXEL_BUFFER_ALIGNMENT_EXTENSION_NAME',
    'VK_EXT_TEXEL_BUFFER_ALIGNMENT_SPEC_VERSION',
    'VK_EXT_TEXTURE_COMPRESSION_ASTC_HDR_EXTENSION_NAME',
    'VK_EXT_TEXTURE_COMPRESSION_ASTC_HDR_SPEC_VERSION',
    'VK_EXT_TOOLING_INFO_EXTENSION_NAME',
    'VK_EXT_TOOLING_INFO_SPEC_VERSION',
    'VK_EXT_TRANSFORM_FEEDBACK_EXTENSION_NAME',
    'VK_EXT_TRANSFORM_FEEDBACK_SPEC_VERSION',
    'VK_EXT_VALIDATION_CACHE_EXTENSION_NAME',
    'VK_EXT_VALIDATION_CACHE_SPEC_VERSION',
    'VK_EXT_VALIDATION_FEATURES_EXTENSION_NAME',
    'VK_EXT_VALIDATION_FEATURES_SPEC_VERSION',
    'VK_EXT_VALIDATION_FLAGS_EXTENSION_NAME',
    'VK_EXT_VALIDATION_FLAGS_SPEC_VERSION',
    'VK_EXT_VERTEX_ATTRIBUTE_DIVISOR_EXTENSION_NAME',
    'VK_EXT_VERTEX_ATTRIBUTE_DIVISOR_SPEC_VERSION',
    'VK_EXT_VERTEX_INPUT_DYNAMIC_STATE_EXTENSION_NAME',
    'VK_EXT_VERTEX_INPUT_DYNAMIC_STATE_SPEC_VERSION',
    'VK_EXT_YCBCR_2PLANE_444_FORMATS_EXTENSION_NAME',
    'VK_EXT_YCBCR_2PLANE_444_FORMATS_SPEC_VERSION',
    'VK_EXT_YCBCR_IMAGE_ARRAYS_EXTENSION_NAME',
    'VK_EXT_YCBCR_IMAGE_ARRAYS_SPEC_VERSION',
    'VK_EXT_acquire_drm_display', 'VK_EXT_astc_decode_mode',
    'VK_EXT_attachment_feedback_loop_dynamic_state',
    'VK_EXT_attachment_feedback_loop_layout',
    'VK_EXT_blend_operation_advanced', 'VK_EXT_border_color_swizzle',
    'VK_EXT_buffer_device_address', 'VK_EXT_calibrated_timestamps',
    'VK_EXT_color_write_enable', 'VK_EXT_conditional_rendering',
    'VK_EXT_conservative_rasterization', 'VK_EXT_custom_border_color',
    'VK_EXT_debug_marker', 'VK_EXT_debug_report',
    'VK_EXT_debug_utils', 'VK_EXT_depth_bias_control',
    'VK_EXT_depth_clamp_zero_one', 'VK_EXT_depth_clip_control',
    'VK_EXT_depth_clip_enable', 'VK_EXT_depth_range_unrestricted',
    'VK_EXT_descriptor_buffer', 'VK_EXT_descriptor_indexing',
    'VK_EXT_device_address_binding_report', 'VK_EXT_device_fault',
    'VK_EXT_device_memory_report', 'VK_EXT_direct_mode_display',
    'VK_EXT_discard_rectangles', 'VK_EXT_display_control',
    'VK_EXT_display_surface_counter',
    'VK_EXT_dynamic_rendering_unused_attachments',
    'VK_EXT_extended_dynamic_state', 'VK_EXT_extended_dynamic_state2',
    'VK_EXT_extended_dynamic_state3',
    'VK_EXT_external_memory_acquire_unmodified',
    'VK_EXT_external_memory_dma_buf', 'VK_EXT_external_memory_host',
    'VK_EXT_filter_cubic', 'VK_EXT_fragment_density_map',
    'VK_EXT_fragment_density_map2',
    'VK_EXT_fragment_shader_interlock', 'VK_EXT_frame_boundary',
    'VK_EXT_global_priority', 'VK_EXT_global_priority_query',
    'VK_EXT_graphics_pipeline_library', 'VK_EXT_hdr_metadata',
    'VK_EXT_headless_surface', 'VK_EXT_host_image_copy',
    'VK_EXT_host_query_reset', 'VK_EXT_image_2d_view_of_3d',
    'VK_EXT_image_compression_control',
    'VK_EXT_image_compression_control_swapchain',
    'VK_EXT_image_drm_format_modifier', 'VK_EXT_image_robustness',
    'VK_EXT_image_sliced_view_of_3d', 'VK_EXT_image_view_min_lod',
    'VK_EXT_index_type_uint8', 'VK_EXT_inline_uniform_block',
    'VK_EXT_layer_settings', 'VK_EXT_legacy_dithering',
    'VK_EXT_line_rasterization', 'VK_EXT_load_store_op_none',
    'VK_EXT_memory_budget', 'VK_EXT_memory_priority',
    'VK_EXT_mesh_shader', 'VK_EXT_multi_draw',
    'VK_EXT_multisampled_render_to_single_sampled',
    'VK_EXT_mutable_descriptor_type', 'VK_EXT_nested_command_buffer',
    'VK_EXT_non_seamless_cube_map', 'VK_EXT_opacity_micromap',
    'VK_EXT_pageable_device_local_memory', 'VK_EXT_pci_bus_info',
    'VK_EXT_physical_device_drm',
    'VK_EXT_pipeline_creation_cache_control',
    'VK_EXT_pipeline_creation_feedback',
    'VK_EXT_pipeline_library_group_handles',
    'VK_EXT_pipeline_properties', 'VK_EXT_pipeline_protected_access',
    'VK_EXT_pipeline_robustness', 'VK_EXT_post_depth_coverage',
    'VK_EXT_primitive_topology_list_restart',
    'VK_EXT_primitives_generated_query', 'VK_EXT_private_data',
    'VK_EXT_provoking_vertex', 'VK_EXT_queue_family_foreign',
    'VK_EXT_rasterization_order_attachment_access',
    'VK_EXT_rgba10x6_formats', 'VK_EXT_robustness2',
    'VK_EXT_sample_locations', 'VK_EXT_sampler_filter_minmax',
    'VK_EXT_scalar_block_layout', 'VK_EXT_separate_stencil_usage',
    'VK_EXT_shader_atomic_float', 'VK_EXT_shader_atomic_float2',
    'VK_EXT_shader_demote_to_helper_invocation',
    'VK_EXT_shader_image_atomic_int64',
    'VK_EXT_shader_module_identifier', 'VK_EXT_shader_object',
    'VK_EXT_shader_stencil_export', 'VK_EXT_shader_subgroup_ballot',
    'VK_EXT_shader_subgroup_vote', 'VK_EXT_shader_tile_image',
    'VK_EXT_shader_viewport_index_layer',
    'VK_EXT_subgroup_size_control', 'VK_EXT_subpass_merge_feedback',
    'VK_EXT_surface_maintenance1', 'VK_EXT_swapchain_colorspace',
    'VK_EXT_swapchain_maintenance1', 'VK_EXT_texel_buffer_alignment',
    'VK_EXT_texture_compression_astc_hdr', 'VK_EXT_tooling_info',
    'VK_EXT_transform_feedback', 'VK_EXT_validation_cache',
    'VK_EXT_validation_features', 'VK_EXT_validation_flags',
    'VK_EXT_vertex_attribute_divisor',
    'VK_EXT_vertex_input_dynamic_state',
    'VK_EXT_ycbcr_2plane_444_formats', 'VK_EXT_ycbcr_image_arrays',
    'VK_FALSE', 'VK_FENCE_CREATE_FLAG_BITS_MAX_ENUM',
    'VK_FENCE_CREATE_SIGNALED_BIT',
    'VK_FENCE_IMPORT_FLAG_BITS_MAX_ENUM',
    'VK_FENCE_IMPORT_TEMPORARY_BIT',
    'VK_FENCE_IMPORT_TEMPORARY_BIT_KHR', 'VK_FILTER_CUBIC_EXT',
    'VK_FILTER_CUBIC_IMG', 'VK_FILTER_LINEAR', 'VK_FILTER_MAX_ENUM',
    'VK_FILTER_NEAREST', 'VK_FORMAT_A1B5G5R5_UNORM_PACK16_KHR',
    'VK_FORMAT_A1R5G5B5_UNORM_PACK16',
    'VK_FORMAT_A2B10G10R10_SINT_PACK32',
    'VK_FORMAT_A2B10G10R10_SNORM_PACK32',
    'VK_FORMAT_A2B10G10R10_SSCALED_PACK32',
    'VK_FORMAT_A2B10G10R10_UINT_PACK32',
    'VK_FORMAT_A2B10G10R10_UNORM_PACK32',
    'VK_FORMAT_A2B10G10R10_USCALED_PACK32',
    'VK_FORMAT_A2R10G10B10_SINT_PACK32',
    'VK_FORMAT_A2R10G10B10_SNORM_PACK32',
    'VK_FORMAT_A2R10G10B10_SSCALED_PACK32',
    'VK_FORMAT_A2R10G10B10_UINT_PACK32',
    'VK_FORMAT_A2R10G10B10_UNORM_PACK32',
    'VK_FORMAT_A2R10G10B10_USCALED_PACK32',
    'VK_FORMAT_A4B4G4R4_UNORM_PACK16',
    'VK_FORMAT_A4B4G4R4_UNORM_PACK16_EXT',
    'VK_FORMAT_A4R4G4B4_UNORM_PACK16',
    'VK_FORMAT_A4R4G4B4_UNORM_PACK16_EXT',
    'VK_FORMAT_A8B8G8R8_SINT_PACK32',
    'VK_FORMAT_A8B8G8R8_SNORM_PACK32',
    'VK_FORMAT_A8B8G8R8_SRGB_PACK32',
    'VK_FORMAT_A8B8G8R8_SSCALED_PACK32',
    'VK_FORMAT_A8B8G8R8_UINT_PACK32',
    'VK_FORMAT_A8B8G8R8_UNORM_PACK32',
    'VK_FORMAT_A8B8G8R8_USCALED_PACK32', 'VK_FORMAT_A8_UNORM_KHR',
    'VK_FORMAT_ASTC_10x10_SFLOAT_BLOCK',
    'VK_FORMAT_ASTC_10x10_SFLOAT_BLOCK_EXT',
    'VK_FORMAT_ASTC_10x10_SRGB_BLOCK',
    'VK_FORMAT_ASTC_10x10_UNORM_BLOCK',
    'VK_FORMAT_ASTC_10x5_SFLOAT_BLOCK',
    'VK_FORMAT_ASTC_10x5_SFLOAT_BLOCK_EXT',
    'VK_FORMAT_ASTC_10x5_SRGB_BLOCK',
    'VK_FORMAT_ASTC_10x5_UNORM_BLOCK',
    'VK_FORMAT_ASTC_10x6_SFLOAT_BLOCK',
    'VK_FORMAT_ASTC_10x6_SFLOAT_BLOCK_EXT',
    'VK_FORMAT_ASTC_10x6_SRGB_BLOCK',
    'VK_FORMAT_ASTC_10x6_UNORM_BLOCK',
    'VK_FORMAT_ASTC_10x8_SFLOAT_BLOCK',
    'VK_FORMAT_ASTC_10x8_SFLOAT_BLOCK_EXT',
    'VK_FORMAT_ASTC_10x8_SRGB_BLOCK',
    'VK_FORMAT_ASTC_10x8_UNORM_BLOCK',
    'VK_FORMAT_ASTC_12x10_SFLOAT_BLOCK',
    'VK_FORMAT_ASTC_12x10_SFLOAT_BLOCK_EXT',
    'VK_FORMAT_ASTC_12x10_SRGB_BLOCK',
    'VK_FORMAT_ASTC_12x10_UNORM_BLOCK',
    'VK_FORMAT_ASTC_12x12_SFLOAT_BLOCK',
    'VK_FORMAT_ASTC_12x12_SFLOAT_BLOCK_EXT',
    'VK_FORMAT_ASTC_12x12_SRGB_BLOCK',
    'VK_FORMAT_ASTC_12x12_UNORM_BLOCK',
    'VK_FORMAT_ASTC_4x4_SFLOAT_BLOCK',
    'VK_FORMAT_ASTC_4x4_SFLOAT_BLOCK_EXT',
    'VK_FORMAT_ASTC_4x4_SRGB_BLOCK', 'VK_FORMAT_ASTC_4x4_UNORM_BLOCK',
    'VK_FORMAT_ASTC_5x4_SFLOAT_BLOCK',
    'VK_FORMAT_ASTC_5x4_SFLOAT_BLOCK_EXT',
    'VK_FORMAT_ASTC_5x4_SRGB_BLOCK', 'VK_FORMAT_ASTC_5x4_UNORM_BLOCK',
    'VK_FORMAT_ASTC_5x5_SFLOAT_BLOCK',
    'VK_FORMAT_ASTC_5x5_SFLOAT_BLOCK_EXT',
    'VK_FORMAT_ASTC_5x5_SRGB_BLOCK', 'VK_FORMAT_ASTC_5x5_UNORM_BLOCK',
    'VK_FORMAT_ASTC_6x5_SFLOAT_BLOCK',
    'VK_FORMAT_ASTC_6x5_SFLOAT_BLOCK_EXT',
    'VK_FORMAT_ASTC_6x5_SRGB_BLOCK', 'VK_FORMAT_ASTC_6x5_UNORM_BLOCK',
    'VK_FORMAT_ASTC_6x6_SFLOAT_BLOCK',
    'VK_FORMAT_ASTC_6x6_SFLOAT_BLOCK_EXT',
    'VK_FORMAT_ASTC_6x6_SRGB_BLOCK', 'VK_FORMAT_ASTC_6x6_UNORM_BLOCK',
    'VK_FORMAT_ASTC_8x5_SFLOAT_BLOCK',
    'VK_FORMAT_ASTC_8x5_SFLOAT_BLOCK_EXT',
    'VK_FORMAT_ASTC_8x5_SRGB_BLOCK', 'VK_FORMAT_ASTC_8x5_UNORM_BLOCK',
    'VK_FORMAT_ASTC_8x6_SFLOAT_BLOCK',
    'VK_FORMAT_ASTC_8x6_SFLOAT_BLOCK_EXT',
    'VK_FORMAT_ASTC_8x6_SRGB_BLOCK', 'VK_FORMAT_ASTC_8x6_UNORM_BLOCK',
    'VK_FORMAT_ASTC_8x8_SFLOAT_BLOCK',
    'VK_FORMAT_ASTC_8x8_SFLOAT_BLOCK_EXT',
    'VK_FORMAT_ASTC_8x8_SRGB_BLOCK', 'VK_FORMAT_ASTC_8x8_UNORM_BLOCK',
    'VK_FORMAT_B10G11R11_UFLOAT_PACK32',
    'VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16',
    'VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16_KHR',
    'VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16',
    'VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16_KHR',
    'VK_FORMAT_B16G16R16G16_422_UNORM',
    'VK_FORMAT_B16G16R16G16_422_UNORM_KHR',
    'VK_FORMAT_B4G4R4A4_UNORM_PACK16',
    'VK_FORMAT_B5G5R5A1_UNORM_PACK16',
    'VK_FORMAT_B5G6R5_UNORM_PACK16', 'VK_FORMAT_B8G8R8A8_SINT',
    'VK_FORMAT_B8G8R8A8_SNORM', 'VK_FORMAT_B8G8R8A8_SRGB',
    'VK_FORMAT_B8G8R8A8_SSCALED', 'VK_FORMAT_B8G8R8A8_UINT',
    'VK_FORMAT_B8G8R8A8_UNORM', 'VK_FORMAT_B8G8R8A8_USCALED',
    'VK_FORMAT_B8G8R8G8_422_UNORM',
    'VK_FORMAT_B8G8R8G8_422_UNORM_KHR', 'VK_FORMAT_B8G8R8_SINT',
    'VK_FORMAT_B8G8R8_SNORM', 'VK_FORMAT_B8G8R8_SRGB',
    'VK_FORMAT_B8G8R8_SSCALED', 'VK_FORMAT_B8G8R8_UINT',
    'VK_FORMAT_B8G8R8_UNORM', 'VK_FORMAT_B8G8R8_USCALED',
    'VK_FORMAT_BC1_RGBA_SRGB_BLOCK', 'VK_FORMAT_BC1_RGBA_UNORM_BLOCK',
    'VK_FORMAT_BC1_RGB_SRGB_BLOCK', 'VK_FORMAT_BC1_RGB_UNORM_BLOCK',
    'VK_FORMAT_BC2_SRGB_BLOCK', 'VK_FORMAT_BC2_UNORM_BLOCK',
    'VK_FORMAT_BC3_SRGB_BLOCK', 'VK_FORMAT_BC3_UNORM_BLOCK',
    'VK_FORMAT_BC4_SNORM_BLOCK', 'VK_FORMAT_BC4_UNORM_BLOCK',
    'VK_FORMAT_BC5_SNORM_BLOCK', 'VK_FORMAT_BC5_UNORM_BLOCK',
    'VK_FORMAT_BC6H_SFLOAT_BLOCK', 'VK_FORMAT_BC6H_UFLOAT_BLOCK',
    'VK_FORMAT_BC7_SRGB_BLOCK', 'VK_FORMAT_BC7_UNORM_BLOCK',
    'VK_FORMAT_D16_UNORM', 'VK_FORMAT_D16_UNORM_S8_UINT',
    'VK_FORMAT_D24_UNORM_S8_UINT', 'VK_FORMAT_D32_SFLOAT',
    'VK_FORMAT_D32_SFLOAT_S8_UINT',
    'VK_FORMAT_E5B9G9R9_UFLOAT_PACK32',
    'VK_FORMAT_EAC_R11G11_SNORM_BLOCK',
    'VK_FORMAT_EAC_R11G11_UNORM_BLOCK',
    'VK_FORMAT_EAC_R11_SNORM_BLOCK', 'VK_FORMAT_EAC_R11_UNORM_BLOCK',
    'VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK',
    'VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK',
    'VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK',
    'VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK',
    'VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK',
    'VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK',
    'VK_FORMAT_FEATURE_2_ACCELERATION_STRUCTURE_VERTEX_BUFFER_BIT_KHR',
    'VK_FORMAT_FEATURE_2_BLIT_DST_BIT',
    'VK_FORMAT_FEATURE_2_BLIT_DST_BIT_KHR',
    'VK_FORMAT_FEATURE_2_BLIT_SRC_BIT',
    'VK_FORMAT_FEATURE_2_BLIT_SRC_BIT_KHR',
    'VK_FORMAT_FEATURE_2_BLOCK_MATCHING_BIT_QCOM',
    'VK_FORMAT_FEATURE_2_BOX_FILTER_SAMPLED_BIT_QCOM',
    'VK_FORMAT_FEATURE_2_COLOR_ATTACHMENT_BIT',
    'VK_FORMAT_FEATURE_2_COLOR_ATTACHMENT_BIT_KHR',
    'VK_FORMAT_FEATURE_2_COLOR_ATTACHMENT_BLEND_BIT',
    'VK_FORMAT_FEATURE_2_COLOR_ATTACHMENT_BLEND_BIT_KHR',
    'VK_FORMAT_FEATURE_2_COSITED_CHROMA_SAMPLES_BIT',
    'VK_FORMAT_FEATURE_2_COSITED_CHROMA_SAMPLES_BIT_KHR',
    'VK_FORMAT_FEATURE_2_DEPTH_STENCIL_ATTACHMENT_BIT',
    'VK_FORMAT_FEATURE_2_DEPTH_STENCIL_ATTACHMENT_BIT_KHR',
    'VK_FORMAT_FEATURE_2_DISJOINT_BIT',
    'VK_FORMAT_FEATURE_2_DISJOINT_BIT_KHR',
    'VK_FORMAT_FEATURE_2_FRAGMENT_DENSITY_MAP_BIT_EXT',
    'VK_FORMAT_FEATURE_2_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR',
    'VK_FORMAT_FEATURE_2_HOST_IMAGE_TRANSFER_BIT_EXT',
    'VK_FORMAT_FEATURE_2_LINEAR_COLOR_ATTACHMENT_BIT_NV',
    'VK_FORMAT_FEATURE_2_MIDPOINT_CHROMA_SAMPLES_BIT',
    'VK_FORMAT_FEATURE_2_MIDPOINT_CHROMA_SAMPLES_BIT_KHR',
    'VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV',
    'VK_FORMAT_FEATURE_2_OPTICAL_FLOW_IMAGE_BIT_NV',
    'VK_FORMAT_FEATURE_2_OPTICAL_FLOW_VECTOR_BIT_NV',
    'VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_BIT',
    'VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_BIT_KHR',
    'VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_DEPTH_COMPARISON_BIT',
    'VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_DEPTH_COMPARISON_BIT_KHR',
    'VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_CUBIC_BIT',
    'VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_CUBIC_BIT_EXT',
    'VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_LINEAR_BIT',
    'VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_LINEAR_BIT_KHR',
    'VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_MINMAX_BIT',
    'VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_MINMAX_BIT_KHR',
    'VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT',
    'VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT_KHR',
    'VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT',
    'VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT_KHR',
    'VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT',
    'VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT_KHR',
    'VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT',
    'VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT_KHR',
    'VK_FORMAT_FEATURE_2_STORAGE_IMAGE_ATOMIC_BIT',
    'VK_FORMAT_FEATURE_2_STORAGE_IMAGE_ATOMIC_BIT_KHR',
    'VK_FORMAT_FEATURE_2_STORAGE_IMAGE_BIT',
    'VK_FORMAT_FEATURE_2_STORAGE_IMAGE_BIT_KHR',
    'VK_FORMAT_FEATURE_2_STORAGE_READ_WITHOUT_FORMAT_BIT',
    'VK_FORMAT_FEATURE_2_STORAGE_READ_WITHOUT_FORMAT_BIT_KHR',
    'VK_FORMAT_FEATURE_2_STORAGE_TEXEL_BUFFER_ATOMIC_BIT',
    'VK_FORMAT_FEATURE_2_STORAGE_TEXEL_BUFFER_ATOMIC_BIT_KHR',
    'VK_FORMAT_FEATURE_2_STORAGE_TEXEL_BUFFER_BIT',
    'VK_FORMAT_FEATURE_2_STORAGE_TEXEL_BUFFER_BIT_KHR',
    'VK_FORMAT_FEATURE_2_STORAGE_WRITE_WITHOUT_FORMAT_BIT',
    'VK_FORMAT_FEATURE_2_STORAGE_WRITE_WITHOUT_FORMAT_BIT_KHR',
    'VK_FORMAT_FEATURE_2_TRANSFER_DST_BIT',
    'VK_FORMAT_FEATURE_2_TRANSFER_DST_BIT_KHR',
    'VK_FORMAT_FEATURE_2_TRANSFER_SRC_BIT',
    'VK_FORMAT_FEATURE_2_TRANSFER_SRC_BIT_KHR',
    'VK_FORMAT_FEATURE_2_UNIFORM_TEXEL_BUFFER_BIT',
    'VK_FORMAT_FEATURE_2_UNIFORM_TEXEL_BUFFER_BIT_KHR',
    'VK_FORMAT_FEATURE_2_VERTEX_BUFFER_BIT',
    'VK_FORMAT_FEATURE_2_VERTEX_BUFFER_BIT_KHR',
    'VK_FORMAT_FEATURE_2_VIDEO_DECODE_DPB_BIT_KHR',
    'VK_FORMAT_FEATURE_2_VIDEO_DECODE_OUTPUT_BIT_KHR',
    'VK_FORMAT_FEATURE_2_VIDEO_ENCODE_DPB_BIT_KHR',
    'VK_FORMAT_FEATURE_2_VIDEO_ENCODE_INPUT_BIT_KHR',
    'VK_FORMAT_FEATURE_2_WEIGHT_IMAGE_BIT_QCOM',
    'VK_FORMAT_FEATURE_2_WEIGHT_SAMPLED_IMAGE_BIT_QCOM',
    'VK_FORMAT_FEATURE_ACCELERATION_STRUCTURE_VERTEX_BUFFER_BIT_KHR',
    'VK_FORMAT_FEATURE_BLIT_DST_BIT',
    'VK_FORMAT_FEATURE_BLIT_SRC_BIT',
    'VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT',
    'VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT',
    'VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT',
    'VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT_KHR',
    'VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT',
    'VK_FORMAT_FEATURE_DISJOINT_BIT',
    'VK_FORMAT_FEATURE_DISJOINT_BIT_KHR',
    'VK_FORMAT_FEATURE_FLAG_BITS_MAX_ENUM',
    'VK_FORMAT_FEATURE_FRAGMENT_DENSITY_MAP_BIT_EXT',
    'VK_FORMAT_FEATURE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR',
    'VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT',
    'VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT_KHR',
    'VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT',
    'VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_EXT',
    'VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_IMG',
    'VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT',
    'VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT',
    'VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT_EXT',
    'VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT',
    'VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT_KHR',
    'VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT',
    'VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT_KHR',
    'VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT',
    'VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT_KHR',
    'VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT',
    'VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT_KHR',
    'VK_FORMAT_FEATURE_STORAGE_IMAGE_ATOMIC_BIT',
    'VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT',
    'VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_ATOMIC_BIT',
    'VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT',
    'VK_FORMAT_FEATURE_TRANSFER_DST_BIT',
    'VK_FORMAT_FEATURE_TRANSFER_DST_BIT_KHR',
    'VK_FORMAT_FEATURE_TRANSFER_SRC_BIT',
    'VK_FORMAT_FEATURE_TRANSFER_SRC_BIT_KHR',
    'VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT',
    'VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT',
    'VK_FORMAT_FEATURE_VIDEO_DECODE_DPB_BIT_KHR',
    'VK_FORMAT_FEATURE_VIDEO_DECODE_OUTPUT_BIT_KHR',
    'VK_FORMAT_FEATURE_VIDEO_ENCODE_DPB_BIT_KHR',
    'VK_FORMAT_FEATURE_VIDEO_ENCODE_INPUT_BIT_KHR',
    'VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16',
    'VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16_KHR',
    'VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16',
    'VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16_KHR',
    'VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16',
    'VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16_KHR',
    'VK_FORMAT_G10X6_B10X6R10X6_2PLANE_444_UNORM_3PACK16',
    'VK_FORMAT_G10X6_B10X6R10X6_2PLANE_444_UNORM_3PACK16_EXT',
    'VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16',
    'VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16_KHR',
    'VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16',
    'VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16_KHR',
    'VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16',
    'VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16_KHR',
    'VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16',
    'VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16_KHR',
    'VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16',
    'VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16_KHR',
    'VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16',
    'VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16_KHR',
    'VK_FORMAT_G12X4_B12X4R12X4_2PLANE_444_UNORM_3PACK16',
    'VK_FORMAT_G12X4_B12X4R12X4_2PLANE_444_UNORM_3PACK16_EXT',
    'VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16',
    'VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16_KHR',
    'VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16',
    'VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16_KHR',
    'VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16',
    'VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16_KHR',
    'VK_FORMAT_G16B16G16R16_422_UNORM',
    'VK_FORMAT_G16B16G16R16_422_UNORM_KHR',
    'VK_FORMAT_G16_B16R16_2PLANE_420_UNORM',
    'VK_FORMAT_G16_B16R16_2PLANE_420_UNORM_KHR',
    'VK_FORMAT_G16_B16R16_2PLANE_422_UNORM',
    'VK_FORMAT_G16_B16R16_2PLANE_422_UNORM_KHR',
    'VK_FORMAT_G16_B16R16_2PLANE_444_UNORM',
    'VK_FORMAT_G16_B16R16_2PLANE_444_UNORM_EXT',
    'VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM',
    'VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM_KHR',
    'VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM',
    'VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM_KHR',
    'VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM',
    'VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM_KHR',
    'VK_FORMAT_G8B8G8R8_422_UNORM',
    'VK_FORMAT_G8B8G8R8_422_UNORM_KHR',
    'VK_FORMAT_G8_B8R8_2PLANE_420_UNORM',
    'VK_FORMAT_G8_B8R8_2PLANE_420_UNORM_KHR',
    'VK_FORMAT_G8_B8R8_2PLANE_422_UNORM',
    'VK_FORMAT_G8_B8R8_2PLANE_422_UNORM_KHR',
    'VK_FORMAT_G8_B8R8_2PLANE_444_UNORM',
    'VK_FORMAT_G8_B8R8_2PLANE_444_UNORM_EXT',
    'VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM',
    'VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM_KHR',
    'VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM',
    'VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM_KHR',
    'VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM',
    'VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM_KHR', 'VK_FORMAT_MAX_ENUM',
    'VK_FORMAT_PVRTC1_2BPP_SRGB_BLOCK_IMG',
    'VK_FORMAT_PVRTC1_2BPP_UNORM_BLOCK_IMG',
    'VK_FORMAT_PVRTC1_4BPP_SRGB_BLOCK_IMG',
    'VK_FORMAT_PVRTC1_4BPP_UNORM_BLOCK_IMG',
    'VK_FORMAT_PVRTC2_2BPP_SRGB_BLOCK_IMG',
    'VK_FORMAT_PVRTC2_2BPP_UNORM_BLOCK_IMG',
    'VK_FORMAT_PVRTC2_4BPP_SRGB_BLOCK_IMG',
    'VK_FORMAT_PVRTC2_4BPP_UNORM_BLOCK_IMG',
    'VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16',
    'VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16_KHR',
    'VK_FORMAT_R10X6G10X6_UNORM_2PACK16',
    'VK_FORMAT_R10X6G10X6_UNORM_2PACK16_KHR',
    'VK_FORMAT_R10X6_UNORM_PACK16',
    'VK_FORMAT_R10X6_UNORM_PACK16_KHR',
    'VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16',
    'VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16_KHR',
    'VK_FORMAT_R12X4G12X4_UNORM_2PACK16',
    'VK_FORMAT_R12X4G12X4_UNORM_2PACK16_KHR',
    'VK_FORMAT_R12X4_UNORM_PACK16',
    'VK_FORMAT_R12X4_UNORM_PACK16_KHR',
    'VK_FORMAT_R16G16B16A16_SFLOAT', 'VK_FORMAT_R16G16B16A16_SINT',
    'VK_FORMAT_R16G16B16A16_SNORM', 'VK_FORMAT_R16G16B16A16_SSCALED',
    'VK_FORMAT_R16G16B16A16_UINT', 'VK_FORMAT_R16G16B16A16_UNORM',
    'VK_FORMAT_R16G16B16A16_USCALED', 'VK_FORMAT_R16G16B16_SFLOAT',
    'VK_FORMAT_R16G16B16_SINT', 'VK_FORMAT_R16G16B16_SNORM',
    'VK_FORMAT_R16G16B16_SSCALED', 'VK_FORMAT_R16G16B16_UINT',
    'VK_FORMAT_R16G16B16_UNORM', 'VK_FORMAT_R16G16B16_USCALED',
    'VK_FORMAT_R16G16_S10_5_NV', 'VK_FORMAT_R16G16_SFLOAT',
    'VK_FORMAT_R16G16_SINT', 'VK_FORMAT_R16G16_SNORM',
    'VK_FORMAT_R16G16_SSCALED', 'VK_FORMAT_R16G16_UINT',
    'VK_FORMAT_R16G16_UNORM', 'VK_FORMAT_R16G16_USCALED',
    'VK_FORMAT_R16_SFLOAT', 'VK_FORMAT_R16_SINT',
    'VK_FORMAT_R16_SNORM', 'VK_FORMAT_R16_SSCALED',
    'VK_FORMAT_R16_UINT', 'VK_FORMAT_R16_UNORM',
    'VK_FORMAT_R16_USCALED', 'VK_FORMAT_R32G32B32A32_SFLOAT',
    'VK_FORMAT_R32G32B32A32_SINT', 'VK_FORMAT_R32G32B32A32_UINT',
    'VK_FORMAT_R32G32B32_SFLOAT', 'VK_FORMAT_R32G32B32_SINT',
    'VK_FORMAT_R32G32B32_UINT', 'VK_FORMAT_R32G32_SFLOAT',
    'VK_FORMAT_R32G32_SINT', 'VK_FORMAT_R32G32_UINT',
    'VK_FORMAT_R32_SFLOAT', 'VK_FORMAT_R32_SINT',
    'VK_FORMAT_R32_UINT', 'VK_FORMAT_R4G4B4A4_UNORM_PACK16',
    'VK_FORMAT_R4G4_UNORM_PACK8', 'VK_FORMAT_R5G5B5A1_UNORM_PACK16',
    'VK_FORMAT_R5G6B5_UNORM_PACK16', 'VK_FORMAT_R64G64B64A64_SFLOAT',
    'VK_FORMAT_R64G64B64A64_SINT', 'VK_FORMAT_R64G64B64A64_UINT',
    'VK_FORMAT_R64G64B64_SFLOAT', 'VK_FORMAT_R64G64B64_SINT',
    'VK_FORMAT_R64G64B64_UINT', 'VK_FORMAT_R64G64_SFLOAT',
    'VK_FORMAT_R64G64_SINT', 'VK_FORMAT_R64G64_UINT',
    'VK_FORMAT_R64_SFLOAT', 'VK_FORMAT_R64_SINT',
    'VK_FORMAT_R64_UINT', 'VK_FORMAT_R8G8B8A8_SINT',
    'VK_FORMAT_R8G8B8A8_SNORM', 'VK_FORMAT_R8G8B8A8_SRGB',
    'VK_FORMAT_R8G8B8A8_SSCALED', 'VK_FORMAT_R8G8B8A8_UINT',
    'VK_FORMAT_R8G8B8A8_UNORM', 'VK_FORMAT_R8G8B8A8_USCALED',
    'VK_FORMAT_R8G8B8_SINT', 'VK_FORMAT_R8G8B8_SNORM',
    'VK_FORMAT_R8G8B8_SRGB', 'VK_FORMAT_R8G8B8_SSCALED',
    'VK_FORMAT_R8G8B8_UINT', 'VK_FORMAT_R8G8B8_UNORM',
    'VK_FORMAT_R8G8B8_USCALED', 'VK_FORMAT_R8G8_SINT',
    'VK_FORMAT_R8G8_SNORM', 'VK_FORMAT_R8G8_SRGB',
    'VK_FORMAT_R8G8_SSCALED', 'VK_FORMAT_R8G8_UINT',
    'VK_FORMAT_R8G8_UNORM', 'VK_FORMAT_R8G8_USCALED',
    'VK_FORMAT_R8_SINT', 'VK_FORMAT_R8_SNORM', 'VK_FORMAT_R8_SRGB',
    'VK_FORMAT_R8_SSCALED', 'VK_FORMAT_R8_UINT', 'VK_FORMAT_R8_UNORM',
    'VK_FORMAT_R8_USCALED', 'VK_FORMAT_S8_UINT',
    'VK_FORMAT_UNDEFINED', 'VK_FORMAT_X8_D24_UNORM_PACK32',
    'VK_FRAGMENT_SHADING_RATE_16_INVOCATIONS_PER_PIXEL_NV',
    'VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_1X2_PIXELS_NV',
    'VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X1_PIXELS_NV',
    'VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X2_PIXELS_NV',
    'VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X4_PIXELS_NV',
    'VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_4X2_PIXELS_NV',
    'VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_4X4_PIXELS_NV',
    'VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_PIXEL_NV',
    'VK_FRAGMENT_SHADING_RATE_2_INVOCATIONS_PER_PIXEL_NV',
    'VK_FRAGMENT_SHADING_RATE_4_INVOCATIONS_PER_PIXEL_NV',
    'VK_FRAGMENT_SHADING_RATE_8_INVOCATIONS_PER_PIXEL_NV',
    'VK_FRAGMENT_SHADING_RATE_COMBINER_OP_KEEP_KHR',
    'VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MAX_ENUM_KHR',
    'VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MAX_KHR',
    'VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MIN_KHR',
    'VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MUL_KHR',
    'VK_FRAGMENT_SHADING_RATE_COMBINER_OP_REPLACE_KHR',
    'VK_FRAGMENT_SHADING_RATE_MAX_ENUM_NV',
    'VK_FRAGMENT_SHADING_RATE_NO_INVOCATIONS_NV',
    'VK_FRAGMENT_SHADING_RATE_TYPE_ENUMS_NV',
    'VK_FRAGMENT_SHADING_RATE_TYPE_FRAGMENT_SIZE_NV',
    'VK_FRAGMENT_SHADING_RATE_TYPE_MAX_ENUM_NV',
    'VK_FRAMEBUFFER_CREATE_FLAG_BITS_MAX_ENUM',
    'VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT',
    'VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT_KHR',
    'VK_FRAME_BOUNDARY_FLAG_BITS_MAX_ENUM_EXT',
    'VK_FRAME_BOUNDARY_FRAME_END_BIT_EXT', 'VK_FRONT_FACE_CLOCKWISE',
    'VK_FRONT_FACE_COUNTER_CLOCKWISE', 'VK_FRONT_FACE_MAX_ENUM',
    'VK_GEOMETRY_FLAG_BITS_MAX_ENUM_KHR',
    'VK_GEOMETRY_INSTANCE_DISABLE_OPACITY_MICROMAPS_EXT',
    'VK_GEOMETRY_INSTANCE_FLAG_BITS_MAX_ENUM_KHR',
    'VK_GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_KHR',
    'VK_GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_NV',
    'VK_GEOMETRY_INSTANCE_FORCE_OPACITY_MICROMAP_2_STATE_EXT',
    'VK_GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_KHR',
    'VK_GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_NV',
    'VK_GEOMETRY_INSTANCE_TRIANGLE_CULL_DISABLE_BIT_NV',
    'VK_GEOMETRY_INSTANCE_TRIANGLE_FACING_CULL_DISABLE_BIT_KHR',
    'VK_GEOMETRY_INSTANCE_TRIANGLE_FLIP_FACING_BIT_KHR',
    'VK_GEOMETRY_INSTANCE_TRIANGLE_FRONT_COUNTERCLOCKWISE_BIT_KHR',
    'VK_GEOMETRY_INSTANCE_TRIANGLE_FRONT_COUNTERCLOCKWISE_BIT_NV',
    'VK_GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_KHR',
    'VK_GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_NV',
    'VK_GEOMETRY_OPAQUE_BIT_KHR', 'VK_GEOMETRY_OPAQUE_BIT_NV',
    'VK_GEOMETRY_TYPE_AABBS_KHR', 'VK_GEOMETRY_TYPE_AABBS_NV',
    'VK_GEOMETRY_TYPE_INSTANCES_KHR', 'VK_GEOMETRY_TYPE_MAX_ENUM_KHR',
    'VK_GEOMETRY_TYPE_TRIANGLES_KHR', 'VK_GEOMETRY_TYPE_TRIANGLES_NV',
    'VK_GOOGLE_DECORATE_STRING_EXTENSION_NAME',
    'VK_GOOGLE_DECORATE_STRING_SPEC_VERSION',
    'VK_GOOGLE_DISPLAY_TIMING_EXTENSION_NAME',
    'VK_GOOGLE_DISPLAY_TIMING_SPEC_VERSION',
    'VK_GOOGLE_HLSL_FUNCTIONALITY1_EXTENSION_NAME',
    'VK_GOOGLE_HLSL_FUNCTIONALITY1_SPEC_VERSION',
    'VK_GOOGLE_HLSL_FUNCTIONALITY_1_EXTENSION_NAME',
    'VK_GOOGLE_HLSL_FUNCTIONALITY_1_SPEC_VERSION',
    'VK_GOOGLE_SURFACELESS_QUERY_EXTENSION_NAME',
    'VK_GOOGLE_SURFACELESS_QUERY_SPEC_VERSION',
    'VK_GOOGLE_USER_TYPE_EXTENSION_NAME',
    'VK_GOOGLE_USER_TYPE_SPEC_VERSION', 'VK_GOOGLE_decorate_string',
    'VK_GOOGLE_display_timing', 'VK_GOOGLE_hlsl_functionality1',
    'VK_GOOGLE_surfaceless_query', 'VK_GOOGLE_user_type',
    'VK_GRAPHICS_PIPELINE_LIBRARY_FLAG_BITS_MAX_ENUM_EXT',
    'VK_GRAPHICS_PIPELINE_LIBRARY_FRAGMENT_OUTPUT_INTERFACE_BIT_EXT',
    'VK_GRAPHICS_PIPELINE_LIBRARY_FRAGMENT_SHADER_BIT_EXT',
    'VK_GRAPHICS_PIPELINE_LIBRARY_PRE_RASTERIZATION_SHADERS_BIT_EXT',
    'VK_GRAPHICS_PIPELINE_LIBRARY_VERTEX_INPUT_INTERFACE_BIT_EXT',
    'VK_HEADER_VERSION', 'VK_HEADER_VERSION_COMPLETE',
    'VK_HOST_IMAGE_COPY_FLAG_BITS_MAX_ENUM_EXT',
    'VK_HOST_IMAGE_COPY_MEMCPY_EXT',
    'VK_HUAWEI_CLUSTER_CULLING_SHADER_EXTENSION_NAME',
    'VK_HUAWEI_CLUSTER_CULLING_SHADER_SPEC_VERSION',
    'VK_HUAWEI_INVOCATION_MASK_EXTENSION_NAME',
    'VK_HUAWEI_INVOCATION_MASK_SPEC_VERSION',
    'VK_HUAWEI_SUBPASS_SHADING_EXTENSION_NAME',
    'VK_HUAWEI_SUBPASS_SHADING_SPEC_VERSION',
    'VK_HUAWEI_cluster_culling_shader', 'VK_HUAWEI_invocation_mask',
    'VK_HUAWEI_subpass_shading', 'VK_IMAGE_ASPECT_COLOR_BIT',
    'VK_IMAGE_ASPECT_DEPTH_BIT', 'VK_IMAGE_ASPECT_FLAG_BITS_MAX_ENUM',
    'VK_IMAGE_ASPECT_MEMORY_PLANE_0_BIT_EXT',
    'VK_IMAGE_ASPECT_MEMORY_PLANE_1_BIT_EXT',
    'VK_IMAGE_ASPECT_MEMORY_PLANE_2_BIT_EXT',
    'VK_IMAGE_ASPECT_MEMORY_PLANE_3_BIT_EXT',
    'VK_IMAGE_ASPECT_METADATA_BIT', 'VK_IMAGE_ASPECT_NONE',
    'VK_IMAGE_ASPECT_NONE_KHR', 'VK_IMAGE_ASPECT_PLANE_0_BIT',
    'VK_IMAGE_ASPECT_PLANE_0_BIT_KHR', 'VK_IMAGE_ASPECT_PLANE_1_BIT',
    'VK_IMAGE_ASPECT_PLANE_1_BIT_KHR', 'VK_IMAGE_ASPECT_PLANE_2_BIT',
    'VK_IMAGE_ASPECT_PLANE_2_BIT_KHR', 'VK_IMAGE_ASPECT_STENCIL_BIT',
    'VK_IMAGE_COMPRESSION_DEFAULT_EXT',
    'VK_IMAGE_COMPRESSION_DISABLED_EXT',
    'VK_IMAGE_COMPRESSION_FIXED_RATE_10BPC_BIT_EXT',
    'VK_IMAGE_COMPRESSION_FIXED_RATE_11BPC_BIT_EXT',
    'VK_IMAGE_COMPRESSION_FIXED_RATE_12BPC_BIT_EXT',
    'VK_IMAGE_COMPRESSION_FIXED_RATE_13BPC_BIT_EXT',
    'VK_IMAGE_COMPRESSION_FIXED_RATE_14BPC_BIT_EXT',
    'VK_IMAGE_COMPRESSION_FIXED_RATE_15BPC_BIT_EXT',
    'VK_IMAGE_COMPRESSION_FIXED_RATE_16BPC_BIT_EXT',
    'VK_IMAGE_COMPRESSION_FIXED_RATE_17BPC_BIT_EXT',
    'VK_IMAGE_COMPRESSION_FIXED_RATE_18BPC_BIT_EXT',
    'VK_IMAGE_COMPRESSION_FIXED_RATE_19BPC_BIT_EXT',
    'VK_IMAGE_COMPRESSION_FIXED_RATE_1BPC_BIT_EXT',
    'VK_IMAGE_COMPRESSION_FIXED_RATE_20BPC_BIT_EXT',
    'VK_IMAGE_COMPRESSION_FIXED_RATE_21BPC_BIT_EXT',
    'VK_IMAGE_COMPRESSION_FIXED_RATE_22BPC_BIT_EXT',
    'VK_IMAGE_COMPRESSION_FIXED_RATE_23BPC_BIT_EXT',
    'VK_IMAGE_COMPRESSION_FIXED_RATE_24BPC_BIT_EXT',
    'VK_IMAGE_COMPRESSION_FIXED_RATE_2BPC_BIT_EXT',
    'VK_IMAGE_COMPRESSION_FIXED_RATE_3BPC_BIT_EXT',
    'VK_IMAGE_COMPRESSION_FIXED_RATE_4BPC_BIT_EXT',
    'VK_IMAGE_COMPRESSION_FIXED_RATE_5BPC_BIT_EXT',
    'VK_IMAGE_COMPRESSION_FIXED_RATE_6BPC_BIT_EXT',
    'VK_IMAGE_COMPRESSION_FIXED_RATE_7BPC_BIT_EXT',
    'VK_IMAGE_COMPRESSION_FIXED_RATE_8BPC_BIT_EXT',
    'VK_IMAGE_COMPRESSION_FIXED_RATE_9BPC_BIT_EXT',
    'VK_IMAGE_COMPRESSION_FIXED_RATE_DEFAULT_EXT',
    'VK_IMAGE_COMPRESSION_FIXED_RATE_EXPLICIT_EXT',
    'VK_IMAGE_COMPRESSION_FIXED_RATE_FLAG_BITS_MAX_ENUM_EXT',
    'VK_IMAGE_COMPRESSION_FIXED_RATE_NONE_EXT',
    'VK_IMAGE_COMPRESSION_FLAG_BITS_MAX_ENUM_EXT',
    'VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT',
    'VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT_KHR',
    'VK_IMAGE_CREATE_2D_VIEW_COMPATIBLE_BIT_EXT',
    'VK_IMAGE_CREATE_ALIAS_BIT', 'VK_IMAGE_CREATE_ALIAS_BIT_KHR',
    'VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT',
    'VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT_KHR',
    'VK_IMAGE_CREATE_CORNER_SAMPLED_BIT_NV',
    'VK_IMAGE_CREATE_CUBE_COMPATIBLE_BIT',
    'VK_IMAGE_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT',
    'VK_IMAGE_CREATE_DISJOINT_BIT',
    'VK_IMAGE_CREATE_DISJOINT_BIT_KHR',
    'VK_IMAGE_CREATE_EXTENDED_USAGE_BIT',
    'VK_IMAGE_CREATE_EXTENDED_USAGE_BIT_KHR',
    'VK_IMAGE_CREATE_FLAG_BITS_MAX_ENUM',
    'VK_IMAGE_CREATE_FRAGMENT_DENSITY_MAP_OFFSET_BIT_QCOM',
    'VK_IMAGE_CREATE_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_BIT_EXT',
    'VK_IMAGE_CREATE_MUTABLE_FORMAT_BIT',
    'VK_IMAGE_CREATE_PROTECTED_BIT',
    'VK_IMAGE_CREATE_SAMPLE_LOCATIONS_COMPATIBLE_DEPTH_BIT_EXT',
    'VK_IMAGE_CREATE_SPARSE_ALIASED_BIT',
    'VK_IMAGE_CREATE_SPARSE_BINDING_BIT',
    'VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT',
    'VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT',
    'VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR',
    'VK_IMAGE_CREATE_SUBSAMPLED_BIT_EXT',
    'VK_IMAGE_CREATE_VIDEO_PROFILE_INDEPENDENT_BIT_KHR',
    'VK_IMAGE_LAYOUT_ATTACHMENT_FEEDBACK_LOOP_OPTIMAL_EXT',
    'VK_IMAGE_LAYOUT_ATTACHMENT_OPTIMAL',
    'VK_IMAGE_LAYOUT_ATTACHMENT_OPTIMAL_KHR',
    'VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL',
    'VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL',
    'VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL_KHR',
    'VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL',
    'VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL_KHR',
    'VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL',
    'VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL_KHR',
    'VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL',
    'VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL_KHR',
    'VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL',
    'VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL',
    'VK_IMAGE_LAYOUT_FRAGMENT_DENSITY_MAP_OPTIMAL_EXT',
    'VK_IMAGE_LAYOUT_FRAGMENT_SHADING_RATE_ATTACHMENT_OPTIMAL_KHR',
    'VK_IMAGE_LAYOUT_GENERAL', 'VK_IMAGE_LAYOUT_MAX_ENUM',
    'VK_IMAGE_LAYOUT_PREINITIALIZED',
    'VK_IMAGE_LAYOUT_PRESENT_SRC_KHR',
    'VK_IMAGE_LAYOUT_READ_ONLY_OPTIMAL',
    'VK_IMAGE_LAYOUT_READ_ONLY_OPTIMAL_KHR',
    'VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL',
    'VK_IMAGE_LAYOUT_SHADING_RATE_OPTIMAL_NV',
    'VK_IMAGE_LAYOUT_SHARED_PRESENT_KHR',
    'VK_IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL',
    'VK_IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL_KHR',
    'VK_IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL',
    'VK_IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL_KHR',
    'VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL',
    'VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL',
    'VK_IMAGE_LAYOUT_UNDEFINED',
    'VK_IMAGE_LAYOUT_VIDEO_DECODE_DPB_KHR',
    'VK_IMAGE_LAYOUT_VIDEO_DECODE_DST_KHR',
    'VK_IMAGE_LAYOUT_VIDEO_DECODE_SRC_KHR',
    'VK_IMAGE_LAYOUT_VIDEO_ENCODE_DPB_KHR',
    'VK_IMAGE_LAYOUT_VIDEO_ENCODE_DST_KHR',
    'VK_IMAGE_LAYOUT_VIDEO_ENCODE_SRC_KHR',
    'VK_IMAGE_TILING_DRM_FORMAT_MODIFIER_EXT',
    'VK_IMAGE_TILING_LINEAR', 'VK_IMAGE_TILING_MAX_ENUM',
    'VK_IMAGE_TILING_OPTIMAL', 'VK_IMAGE_TYPE_1D', 'VK_IMAGE_TYPE_2D',
    'VK_IMAGE_TYPE_3D', 'VK_IMAGE_TYPE_MAX_ENUM',
    'VK_IMAGE_USAGE_ATTACHMENT_FEEDBACK_LOOP_BIT_EXT',
    'VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT',
    'VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT',
    'VK_IMAGE_USAGE_FLAG_BITS_MAX_ENUM',
    'VK_IMAGE_USAGE_FRAGMENT_DENSITY_MAP_BIT_EXT',
    'VK_IMAGE_USAGE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR',
    'VK_IMAGE_USAGE_HOST_TRANSFER_BIT_EXT',
    'VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT',
    'VK_IMAGE_USAGE_INVOCATION_MASK_BIT_HUAWEI',
    'VK_IMAGE_USAGE_SAMPLED_BIT',
    'VK_IMAGE_USAGE_SAMPLE_BLOCK_MATCH_BIT_QCOM',
    'VK_IMAGE_USAGE_SAMPLE_WEIGHT_BIT_QCOM',
    'VK_IMAGE_USAGE_SHADING_RATE_IMAGE_BIT_NV',
    'VK_IMAGE_USAGE_STORAGE_BIT', 'VK_IMAGE_USAGE_TRANSFER_DST_BIT',
    'VK_IMAGE_USAGE_TRANSFER_SRC_BIT',
    'VK_IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT',
    'VK_IMAGE_USAGE_VIDEO_DECODE_DPB_BIT_KHR',
    'VK_IMAGE_USAGE_VIDEO_DECODE_DST_BIT_KHR',
    'VK_IMAGE_USAGE_VIDEO_DECODE_SRC_BIT_KHR',
    'VK_IMAGE_USAGE_VIDEO_ENCODE_DPB_BIT_KHR',
    'VK_IMAGE_USAGE_VIDEO_ENCODE_DST_BIT_KHR',
    'VK_IMAGE_USAGE_VIDEO_ENCODE_SRC_BIT_KHR',
    'VK_IMAGE_VIEW_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT',
    'VK_IMAGE_VIEW_CREATE_FLAG_BITS_MAX_ENUM',
    'VK_IMAGE_VIEW_CREATE_FRAGMENT_DENSITY_MAP_DEFERRED_BIT_EXT',
    'VK_IMAGE_VIEW_CREATE_FRAGMENT_DENSITY_MAP_DYNAMIC_BIT_EXT',
    'VK_IMAGE_VIEW_TYPE_1D', 'VK_IMAGE_VIEW_TYPE_1D_ARRAY',
    'VK_IMAGE_VIEW_TYPE_2D', 'VK_IMAGE_VIEW_TYPE_2D_ARRAY',
    'VK_IMAGE_VIEW_TYPE_3D', 'VK_IMAGE_VIEW_TYPE_CUBE',
    'VK_IMAGE_VIEW_TYPE_CUBE_ARRAY', 'VK_IMAGE_VIEW_TYPE_MAX_ENUM',
    'VK_IMG_FILTER_CUBIC_EXTENSION_NAME',
    'VK_IMG_FILTER_CUBIC_SPEC_VERSION',
    'VK_IMG_FORMAT_PVRTC_EXTENSION_NAME',
    'VK_IMG_FORMAT_PVRTC_SPEC_VERSION',
    'VK_IMG_RELAXED_LINE_RASTERIZATION_EXTENSION_NAME',
    'VK_IMG_RELAXED_LINE_RASTERIZATION_SPEC_VERSION',
    'VK_IMG_filter_cubic', 'VK_IMG_format_pvrtc',
    'VK_IMG_relaxed_line_rasterization', 'VK_INCOMPLETE',
    'VK_INDEX_TYPE_MAX_ENUM', 'VK_INDEX_TYPE_NONE_KHR',
    'VK_INDEX_TYPE_NONE_NV', 'VK_INDEX_TYPE_UINT16',
    'VK_INDEX_TYPE_UINT32', 'VK_INDEX_TYPE_UINT8_EXT',
    'VK_INDIRECT_COMMANDS_LAYOUT_USAGE_EXPLICIT_PREPROCESS_BIT_NV',
    'VK_INDIRECT_COMMANDS_LAYOUT_USAGE_FLAG_BITS_MAX_ENUM_NV',
    'VK_INDIRECT_COMMANDS_LAYOUT_USAGE_INDEXED_SEQUENCES_BIT_NV',
    'VK_INDIRECT_COMMANDS_LAYOUT_USAGE_UNORDERED_SEQUENCES_BIT_NV',
    'VK_INDIRECT_COMMANDS_TOKEN_TYPE_DISPATCH_NV',
    'VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_INDEXED_NV',
    'VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_MESH_TASKS_NV',
    'VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_NV',
    'VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_TASKS_NV',
    'VK_INDIRECT_COMMANDS_TOKEN_TYPE_INDEX_BUFFER_NV',
    'VK_INDIRECT_COMMANDS_TOKEN_TYPE_MAX_ENUM_NV',
    'VK_INDIRECT_COMMANDS_TOKEN_TYPE_PIPELINE_NV',
    'VK_INDIRECT_COMMANDS_TOKEN_TYPE_PUSH_CONSTANT_NV',
    'VK_INDIRECT_COMMANDS_TOKEN_TYPE_SHADER_GROUP_NV',
    'VK_INDIRECT_COMMANDS_TOKEN_TYPE_STATE_FLAGS_NV',
    'VK_INDIRECT_COMMANDS_TOKEN_TYPE_VERTEX_BUFFER_NV',
    'VK_INDIRECT_STATE_FLAG_BITS_MAX_ENUM_NV',
    'VK_INDIRECT_STATE_FLAG_FRONTFACE_BIT_NV',
    'VK_INSTANCE_CREATE_ENUMERATE_PORTABILITY_BIT_KHR',
    'VK_INSTANCE_CREATE_FLAG_BITS_MAX_ENUM',
    'VK_INTEL_PERFORMANCE_QUERY_EXTENSION_NAME',
    'VK_INTEL_PERFORMANCE_QUERY_SPEC_VERSION',
    'VK_INTEL_SHADER_INTEGER_FUNCTIONS_2_EXTENSION_NAME',
    'VK_INTEL_SHADER_INTEGER_FUNCTIONS_2_SPEC_VERSION',
    'VK_INTEL_performance_query',
    'VK_INTEL_shader_integer_functions2',
    'VK_INTERNAL_ALLOCATION_TYPE_EXECUTABLE',
    'VK_INTERNAL_ALLOCATION_TYPE_MAX_ENUM',
    'VK_KHR_16BIT_STORAGE_EXTENSION_NAME',
    'VK_KHR_16BIT_STORAGE_SPEC_VERSION', 'VK_KHR_16bit_storage',
    'VK_KHR_8BIT_STORAGE_EXTENSION_NAME',
    'VK_KHR_8BIT_STORAGE_SPEC_VERSION', 'VK_KHR_8bit_storage',
    'VK_KHR_ACCELERATION_STRUCTURE_EXTENSION_NAME',
    'VK_KHR_ACCELERATION_STRUCTURE_SPEC_VERSION',
    'VK_KHR_BIND_MEMORY_2_EXTENSION_NAME',
    'VK_KHR_BIND_MEMORY_2_SPEC_VERSION',
    'VK_KHR_BUFFER_DEVICE_ADDRESS_EXTENSION_NAME',
    'VK_KHR_BUFFER_DEVICE_ADDRESS_SPEC_VERSION',
    'VK_KHR_CALIBRATED_TIMESTAMPS_EXTENSION_NAME',
    'VK_KHR_CALIBRATED_TIMESTAMPS_SPEC_VERSION',
    'VK_KHR_COOPERATIVE_MATRIX_EXTENSION_NAME',
    'VK_KHR_COOPERATIVE_MATRIX_SPEC_VERSION',
    'VK_KHR_COPY_COMMANDS_2_EXTENSION_NAME',
    'VK_KHR_COPY_COMMANDS_2_SPEC_VERSION',
    'VK_KHR_CREATE_RENDERPASS_2_EXTENSION_NAME',
    'VK_KHR_CREATE_RENDERPASS_2_SPEC_VERSION',
    'VK_KHR_DEDICATED_ALLOCATION_EXTENSION_NAME',
    'VK_KHR_DEDICATED_ALLOCATION_SPEC_VERSION',
    'VK_KHR_DEFERRED_HOST_OPERATIONS_EXTENSION_NAME',
    'VK_KHR_DEFERRED_HOST_OPERATIONS_SPEC_VERSION',
    'VK_KHR_DEPTH_STENCIL_RESOLVE_EXTENSION_NAME',
    'VK_KHR_DEPTH_STENCIL_RESOLVE_SPEC_VERSION',
    'VK_KHR_DESCRIPTOR_UPDATE_TEMPLATE_EXTENSION_NAME',
    'VK_KHR_DESCRIPTOR_UPDATE_TEMPLATE_SPEC_VERSION',
    'VK_KHR_DEVICE_GROUP_CREATION_EXTENSION_NAME',
    'VK_KHR_DEVICE_GROUP_CREATION_SPEC_VERSION',
    'VK_KHR_DEVICE_GROUP_EXTENSION_NAME',
    'VK_KHR_DEVICE_GROUP_SPEC_VERSION',
    'VK_KHR_DISPLAY_EXTENSION_NAME', 'VK_KHR_DISPLAY_SPEC_VERSION',
    'VK_KHR_DISPLAY_SWAPCHAIN_EXTENSION_NAME',
    'VK_KHR_DISPLAY_SWAPCHAIN_SPEC_VERSION',
    'VK_KHR_DRAW_INDIRECT_COUNT_EXTENSION_NAME',
    'VK_KHR_DRAW_INDIRECT_COUNT_SPEC_VERSION',
    'VK_KHR_DRIVER_PROPERTIES_EXTENSION_NAME',
    'VK_KHR_DRIVER_PROPERTIES_SPEC_VERSION',
    'VK_KHR_DYNAMIC_RENDERING_EXTENSION_NAME',
    'VK_KHR_DYNAMIC_RENDERING_SPEC_VERSION',
    'VK_KHR_EXTERNAL_FENCE_CAPABILITIES_EXTENSION_NAME',
    'VK_KHR_EXTERNAL_FENCE_CAPABILITIES_SPEC_VERSION',
    'VK_KHR_EXTERNAL_FENCE_EXTENSION_NAME',
    'VK_KHR_EXTERNAL_FENCE_FD_EXTENSION_NAME',
    'VK_KHR_EXTERNAL_FENCE_FD_SPEC_VERSION',
    'VK_KHR_EXTERNAL_FENCE_SPEC_VERSION',
    'VK_KHR_EXTERNAL_MEMORY_CAPABILITIES_EXTENSION_NAME',
    'VK_KHR_EXTERNAL_MEMORY_CAPABILITIES_SPEC_VERSION',
    'VK_KHR_EXTERNAL_MEMORY_EXTENSION_NAME',
    'VK_KHR_EXTERNAL_MEMORY_FD_EXTENSION_NAME',
    'VK_KHR_EXTERNAL_MEMORY_FD_SPEC_VERSION',
    'VK_KHR_EXTERNAL_MEMORY_SPEC_VERSION',
    'VK_KHR_EXTERNAL_SEMAPHORE_CAPABILITIES_EXTENSION_NAME',
    'VK_KHR_EXTERNAL_SEMAPHORE_CAPABILITIES_SPEC_VERSION',
    'VK_KHR_EXTERNAL_SEMAPHORE_EXTENSION_NAME',
    'VK_KHR_EXTERNAL_SEMAPHORE_FD_EXTENSION_NAME',
    'VK_KHR_EXTERNAL_SEMAPHORE_FD_SPEC_VERSION',
    'VK_KHR_EXTERNAL_SEMAPHORE_SPEC_VERSION',
    'VK_KHR_FORMAT_FEATURE_FLAGS_2_EXTENSION_NAME',
    'VK_KHR_FORMAT_FEATURE_FLAGS_2_SPEC_VERSION',
    'VK_KHR_FRAGMENT_SHADER_BARYCENTRIC_EXTENSION_NAME',
    'VK_KHR_FRAGMENT_SHADER_BARYCENTRIC_SPEC_VERSION',
    'VK_KHR_FRAGMENT_SHADING_RATE_EXTENSION_NAME',
    'VK_KHR_FRAGMENT_SHADING_RATE_SPEC_VERSION',
    'VK_KHR_GET_DISPLAY_PROPERTIES_2_EXTENSION_NAME',
    'VK_KHR_GET_DISPLAY_PROPERTIES_2_SPEC_VERSION',
    'VK_KHR_GET_MEMORY_REQUIREMENTS_2_EXTENSION_NAME',
    'VK_KHR_GET_MEMORY_REQUIREMENTS_2_SPEC_VERSION',
    'VK_KHR_GET_PHYSICAL_DEVICE_PROPERTIES_2_EXTENSION_NAME',
    'VK_KHR_GET_PHYSICAL_DEVICE_PROPERTIES_2_SPEC_VERSION',
    'VK_KHR_GET_SURFACE_CAPABILITIES_2_EXTENSION_NAME',
    'VK_KHR_GET_SURFACE_CAPABILITIES_2_SPEC_VERSION',
    'VK_KHR_GLOBAL_PRIORITY_EXTENSION_NAME',
    'VK_KHR_GLOBAL_PRIORITY_SPEC_VERSION',
    'VK_KHR_IMAGELESS_FRAMEBUFFER_EXTENSION_NAME',
    'VK_KHR_IMAGELESS_FRAMEBUFFER_SPEC_VERSION',
    'VK_KHR_IMAGE_FORMAT_LIST_EXTENSION_NAME',
    'VK_KHR_IMAGE_FORMAT_LIST_SPEC_VERSION',
    'VK_KHR_INCREMENTAL_PRESENT_EXTENSION_NAME',
    'VK_KHR_INCREMENTAL_PRESENT_SPEC_VERSION',
    'VK_KHR_MAINTENANCE1_EXTENSION_NAME',
    'VK_KHR_MAINTENANCE1_SPEC_VERSION',
    'VK_KHR_MAINTENANCE2_EXTENSION_NAME',
    'VK_KHR_MAINTENANCE2_SPEC_VERSION',
    'VK_KHR_MAINTENANCE3_EXTENSION_NAME',
    'VK_KHR_MAINTENANCE3_SPEC_VERSION',
    'VK_KHR_MAINTENANCE_1_EXTENSION_NAME',
    'VK_KHR_MAINTENANCE_1_SPEC_VERSION',
    'VK_KHR_MAINTENANCE_2_EXTENSION_NAME',
    'VK_KHR_MAINTENANCE_2_SPEC_VERSION',
    'VK_KHR_MAINTENANCE_3_EXTENSION_NAME',
    'VK_KHR_MAINTENANCE_3_SPEC_VERSION',
    'VK_KHR_MAINTENANCE_4_EXTENSION_NAME',
    'VK_KHR_MAINTENANCE_4_SPEC_VERSION',
    'VK_KHR_MAINTENANCE_5_EXTENSION_NAME',
    'VK_KHR_MAINTENANCE_5_SPEC_VERSION',
    'VK_KHR_MAINTENANCE_6_EXTENSION_NAME',
    'VK_KHR_MAINTENANCE_6_SPEC_VERSION',
    'VK_KHR_MAP_MEMORY_2_EXTENSION_NAME',
    'VK_KHR_MAP_MEMORY_2_SPEC_VERSION',
    'VK_KHR_MULTIVIEW_EXTENSION_NAME',
    'VK_KHR_MULTIVIEW_SPEC_VERSION',
    'VK_KHR_PERFORMANCE_QUERY_EXTENSION_NAME',
    'VK_KHR_PERFORMANCE_QUERY_SPEC_VERSION',
    'VK_KHR_PIPELINE_EXECUTABLE_PROPERTIES_EXTENSION_NAME',
    'VK_KHR_PIPELINE_EXECUTABLE_PROPERTIES_SPEC_VERSION',
    'VK_KHR_PIPELINE_LIBRARY_EXTENSION_NAME',
    'VK_KHR_PIPELINE_LIBRARY_SPEC_VERSION',
    'VK_KHR_PORTABILITY_ENUMERATION_EXTENSION_NAME',
    'VK_KHR_PORTABILITY_ENUMERATION_SPEC_VERSION',
    'VK_KHR_PRESENT_ID_EXTENSION_NAME',
    'VK_KHR_PRESENT_ID_SPEC_VERSION',
    'VK_KHR_PRESENT_WAIT_EXTENSION_NAME',
    'VK_KHR_PRESENT_WAIT_SPEC_VERSION',
    'VK_KHR_PUSH_DESCRIPTOR_EXTENSION_NAME',
    'VK_KHR_PUSH_DESCRIPTOR_SPEC_VERSION',
    'VK_KHR_RAY_QUERY_EXTENSION_NAME',
    'VK_KHR_RAY_QUERY_SPEC_VERSION',
    'VK_KHR_RAY_TRACING_MAINTENANCE_1_EXTENSION_NAME',
    'VK_KHR_RAY_TRACING_MAINTENANCE_1_SPEC_VERSION',
    'VK_KHR_RAY_TRACING_PIPELINE_EXTENSION_NAME',
    'VK_KHR_RAY_TRACING_PIPELINE_SPEC_VERSION',
    'VK_KHR_RAY_TRACING_POSITION_FETCH_EXTENSION_NAME',
    'VK_KHR_RAY_TRACING_POSITION_FETCH_SPEC_VERSION',
    'VK_KHR_RELAXED_BLOCK_LAYOUT_EXTENSION_NAME',
    'VK_KHR_RELAXED_BLOCK_LAYOUT_SPEC_VERSION',
    'VK_KHR_SAMPLER_MIRROR_CLAMP_TO_EDGE_EXTENSION_NAME',
    'VK_KHR_SAMPLER_MIRROR_CLAMP_TO_EDGE_SPEC_VERSION',
    'VK_KHR_SAMPLER_YCBCR_CONVERSION_EXTENSION_NAME',
    'VK_KHR_SAMPLER_YCBCR_CONVERSION_SPEC_VERSION',
    'VK_KHR_SEPARATE_DEPTH_STENCIL_LAYOUTS_EXTENSION_NAME',
    'VK_KHR_SEPARATE_DEPTH_STENCIL_LAYOUTS_SPEC_VERSION',
    'VK_KHR_SHADER_ATOMIC_INT64_EXTENSION_NAME',
    'VK_KHR_SHADER_ATOMIC_INT64_SPEC_VERSION',
    'VK_KHR_SHADER_CLOCK_EXTENSION_NAME',
    'VK_KHR_SHADER_CLOCK_SPEC_VERSION',
    'VK_KHR_SHADER_DRAW_PARAMETERS_EXTENSION_NAME',
    'VK_KHR_SHADER_DRAW_PARAMETERS_SPEC_VERSION',
    'VK_KHR_SHADER_FLOAT16_INT8_EXTENSION_NAME',
    'VK_KHR_SHADER_FLOAT16_INT8_SPEC_VERSION',
    'VK_KHR_SHADER_FLOAT_CONTROLS_EXTENSION_NAME',
    'VK_KHR_SHADER_FLOAT_CONTROLS_SPEC_VERSION',
    'VK_KHR_SHADER_INTEGER_DOT_PRODUCT_EXTENSION_NAME',
    'VK_KHR_SHADER_INTEGER_DOT_PRODUCT_SPEC_VERSION',
    'VK_KHR_SHADER_NON_SEMANTIC_INFO_EXTENSION_NAME',
    'VK_KHR_SHADER_NON_SEMANTIC_INFO_SPEC_VERSION',
    'VK_KHR_SHADER_SUBGROUP_EXTENDED_TYPES_EXTENSION_NAME',
    'VK_KHR_SHADER_SUBGROUP_EXTENDED_TYPES_SPEC_VERSION',
    'VK_KHR_SHADER_SUBGROUP_UNIFORM_CONTROL_FLOW_EXTENSION_NAME',
    'VK_KHR_SHADER_SUBGROUP_UNIFORM_CONTROL_FLOW_SPEC_VERSION',
    'VK_KHR_SHADER_TERMINATE_INVOCATION_EXTENSION_NAME',
    'VK_KHR_SHADER_TERMINATE_INVOCATION_SPEC_VERSION',
    'VK_KHR_SHARED_PRESENTABLE_IMAGE_EXTENSION_NAME',
    'VK_KHR_SHARED_PRESENTABLE_IMAGE_SPEC_VERSION',
    'VK_KHR_SPIRV_1_4_EXTENSION_NAME',
    'VK_KHR_SPIRV_1_4_SPEC_VERSION',
    'VK_KHR_STORAGE_BUFFER_STORAGE_CLASS_EXTENSION_NAME',
    'VK_KHR_STORAGE_BUFFER_STORAGE_CLASS_SPEC_VERSION',
    'VK_KHR_SURFACE_EXTENSION_NAME',
    'VK_KHR_SURFACE_PROTECTED_CAPABILITIES_EXTENSION_NAME',
    'VK_KHR_SURFACE_PROTECTED_CAPABILITIES_SPEC_VERSION',
    'VK_KHR_SURFACE_SPEC_VERSION', 'VK_KHR_SWAPCHAIN_EXTENSION_NAME',
    'VK_KHR_SWAPCHAIN_MUTABLE_FORMAT_EXTENSION_NAME',
    'VK_KHR_SWAPCHAIN_MUTABLE_FORMAT_SPEC_VERSION',
    'VK_KHR_SWAPCHAIN_SPEC_VERSION',
    'VK_KHR_SYNCHRONIZATION_2_EXTENSION_NAME',
    'VK_KHR_SYNCHRONIZATION_2_SPEC_VERSION',
    'VK_KHR_TIMELINE_SEMAPHORE_EXTENSION_NAME',
    'VK_KHR_TIMELINE_SEMAPHORE_SPEC_VERSION',
    'VK_KHR_UNIFORM_BUFFER_STANDARD_LAYOUT_EXTENSION_NAME',
    'VK_KHR_UNIFORM_BUFFER_STANDARD_LAYOUT_SPEC_VERSION',
    'VK_KHR_VARIABLE_POINTERS_EXTENSION_NAME',
    'VK_KHR_VARIABLE_POINTERS_SPEC_VERSION',
    'VK_KHR_VERTEX_ATTRIBUTE_DIVISOR_EXTENSION_NAME',
    'VK_KHR_VERTEX_ATTRIBUTE_DIVISOR_SPEC_VERSION',
    'VK_KHR_VIDEO_DECODE_H264_EXTENSION_NAME',
    'VK_KHR_VIDEO_DECODE_H264_SPEC_VERSION',
    'VK_KHR_VIDEO_DECODE_H265_EXTENSION_NAME',
    'VK_KHR_VIDEO_DECODE_H265_SPEC_VERSION',
    'VK_KHR_VIDEO_DECODE_QUEUE_EXTENSION_NAME',
    'VK_KHR_VIDEO_DECODE_QUEUE_SPEC_VERSION',
    'VK_KHR_VIDEO_ENCODE_H264_EXTENSION_NAME',
    'VK_KHR_VIDEO_ENCODE_H264_SPEC_VERSION',
    'VK_KHR_VIDEO_ENCODE_H265_EXTENSION_NAME',
    'VK_KHR_VIDEO_ENCODE_H265_SPEC_VERSION',
    'VK_KHR_VIDEO_ENCODE_QUEUE_EXTENSION_NAME',
    'VK_KHR_VIDEO_ENCODE_QUEUE_SPEC_VERSION',
    'VK_KHR_VIDEO_MAINTENANCE_1_EXTENSION_NAME',
    'VK_KHR_VIDEO_MAINTENANCE_1_SPEC_VERSION',
    'VK_KHR_VIDEO_QUEUE_EXTENSION_NAME',
    'VK_KHR_VIDEO_QUEUE_SPEC_VERSION',
    'VK_KHR_VULKAN_MEMORY_MODEL_EXTENSION_NAME',
    'VK_KHR_VULKAN_MEMORY_MODEL_SPEC_VERSION',
    'VK_KHR_WORKGROUP_MEMORY_EXPLICIT_LAYOUT_EXTENSION_NAME',
    'VK_KHR_WORKGROUP_MEMORY_EXPLICIT_LAYOUT_SPEC_VERSION',
    'VK_KHR_ZERO_INITIALIZE_WORKGROUP_MEMORY_EXTENSION_NAME',
    'VK_KHR_ZERO_INITIALIZE_WORKGROUP_MEMORY_SPEC_VERSION',
    'VK_KHR_acceleration_structure', 'VK_KHR_bind_memory2',
    'VK_KHR_buffer_device_address', 'VK_KHR_calibrated_timestamps',
    'VK_KHR_cooperative_matrix', 'VK_KHR_copy_commands2',
    'VK_KHR_create_renderpass2', 'VK_KHR_dedicated_allocation',
    'VK_KHR_deferred_host_operations', 'VK_KHR_depth_stencil_resolve',
    'VK_KHR_descriptor_update_template', 'VK_KHR_device_group',
    'VK_KHR_device_group_creation', 'VK_KHR_display',
    'VK_KHR_display_swapchain', 'VK_KHR_draw_indirect_count',
    'VK_KHR_driver_properties', 'VK_KHR_dynamic_rendering',
    'VK_KHR_external_fence', 'VK_KHR_external_fence_capabilities',
    'VK_KHR_external_fence_fd', 'VK_KHR_external_memory',
    'VK_KHR_external_memory_capabilities',
    'VK_KHR_external_memory_fd', 'VK_KHR_external_semaphore',
    'VK_KHR_external_semaphore_capabilities',
    'VK_KHR_external_semaphore_fd', 'VK_KHR_format_feature_flags2',
    'VK_KHR_fragment_shader_barycentric',
    'VK_KHR_fragment_shading_rate', 'VK_KHR_get_display_properties2',
    'VK_KHR_get_memory_requirements2',
    'VK_KHR_get_physical_device_properties2',
    'VK_KHR_get_surface_capabilities2', 'VK_KHR_global_priority',
    'VK_KHR_image_format_list', 'VK_KHR_imageless_framebuffer',
    'VK_KHR_incremental_present', 'VK_KHR_maintenance1',
    'VK_KHR_maintenance2', 'VK_KHR_maintenance3',
    'VK_KHR_maintenance4', 'VK_KHR_maintenance5',
    'VK_KHR_maintenance6', 'VK_KHR_map_memory2', 'VK_KHR_multiview',
    'VK_KHR_performance_query',
    'VK_KHR_pipeline_executable_properties',
    'VK_KHR_pipeline_library', 'VK_KHR_portability_enumeration',
    'VK_KHR_present_id', 'VK_KHR_present_wait',
    'VK_KHR_push_descriptor', 'VK_KHR_ray_query',
    'VK_KHR_ray_tracing_maintenance1', 'VK_KHR_ray_tracing_pipeline',
    'VK_KHR_ray_tracing_position_fetch',
    'VK_KHR_relaxed_block_layout',
    'VK_KHR_sampler_mirror_clamp_to_edge',
    'VK_KHR_sampler_ycbcr_conversion',
    'VK_KHR_separate_depth_stencil_layouts',
    'VK_KHR_shader_atomic_int64', 'VK_KHR_shader_clock',
    'VK_KHR_shader_draw_parameters', 'VK_KHR_shader_float16_int8',
    'VK_KHR_shader_float_controls',
    'VK_KHR_shader_integer_dot_product',
    'VK_KHR_shader_non_semantic_info',
    'VK_KHR_shader_subgroup_extended_types',
    'VK_KHR_shader_subgroup_uniform_control_flow',
    'VK_KHR_shader_terminate_invocation',
    'VK_KHR_shared_presentable_image', 'VK_KHR_spirv_1_4',
    'VK_KHR_storage_buffer_storage_class', 'VK_KHR_surface',
    'VK_KHR_surface_protected_capabilities', 'VK_KHR_swapchain',
    'VK_KHR_swapchain_mutable_format', 'VK_KHR_synchronization2',
    'VK_KHR_timeline_semaphore',
    'VK_KHR_uniform_buffer_standard_layout',
    'VK_KHR_variable_pointers', 'VK_KHR_vertex_attribute_divisor',
    'VK_KHR_video_decode_h264', 'VK_KHR_video_decode_h265',
    'VK_KHR_video_decode_queue', 'VK_KHR_video_encode_h264',
    'VK_KHR_video_encode_h265', 'VK_KHR_video_encode_queue',
    'VK_KHR_video_maintenance1', 'VK_KHR_video_queue',
    'VK_KHR_vulkan_memory_model',
    'VK_KHR_workgroup_memory_explicit_layout',
    'VK_KHR_zero_initialize_workgroup_memory',
    'VK_LATENCY_MARKER_INPUT_SAMPLE_NV',
    'VK_LATENCY_MARKER_MAX_ENUM_NV',
    'VK_LATENCY_MARKER_OUT_OF_BAND_PRESENT_END_NV',
    'VK_LATENCY_MARKER_OUT_OF_BAND_PRESENT_START_NV',
    'VK_LATENCY_MARKER_OUT_OF_BAND_RENDERSUBMIT_END_NV',
    'VK_LATENCY_MARKER_OUT_OF_BAND_RENDERSUBMIT_START_NV',
    'VK_LATENCY_MARKER_PRESENT_END_NV',
    'VK_LATENCY_MARKER_PRESENT_START_NV',
    'VK_LATENCY_MARKER_RENDERSUBMIT_END_NV',
    'VK_LATENCY_MARKER_RENDERSUBMIT_START_NV',
    'VK_LATENCY_MARKER_SIMULATION_END_NV',
    'VK_LATENCY_MARKER_SIMULATION_START_NV',
    'VK_LATENCY_MARKER_TRIGGER_FLASH_NV',
    'VK_LAYERED_DRIVER_UNDERLYING_API_D3D12_MSFT',
    'VK_LAYERED_DRIVER_UNDERLYING_API_MAX_ENUM_MSFT',
    'VK_LAYERED_DRIVER_UNDERLYING_API_NONE_MSFT',
    'VK_LAYER_SETTING_TYPE_BOOL32_EXT',
    'VK_LAYER_SETTING_TYPE_FLOAT32_EXT',
    'VK_LAYER_SETTING_TYPE_FLOAT64_EXT',
    'VK_LAYER_SETTING_TYPE_INT32_EXT',
    'VK_LAYER_SETTING_TYPE_INT64_EXT',
    'VK_LAYER_SETTING_TYPE_MAX_ENUM_EXT',
    'VK_LAYER_SETTING_TYPE_STRING_EXT',
    'VK_LAYER_SETTING_TYPE_UINT32_EXT',
    'VK_LAYER_SETTING_TYPE_UINT64_EXT',
    'VK_LINE_RASTERIZATION_MODE_BRESENHAM_EXT',
    'VK_LINE_RASTERIZATION_MODE_DEFAULT_EXT',
    'VK_LINE_RASTERIZATION_MODE_MAX_ENUM_EXT',
    'VK_LINE_RASTERIZATION_MODE_RECTANGULAR_EXT',
    'VK_LINE_RASTERIZATION_MODE_RECTANGULAR_SMOOTH_EXT',
    'VK_LOD_CLAMP_NONE', 'VK_LOGIC_OP_AND',
    'VK_LOGIC_OP_AND_INVERTED', 'VK_LOGIC_OP_AND_REVERSE',
    'VK_LOGIC_OP_CLEAR', 'VK_LOGIC_OP_COPY',
    'VK_LOGIC_OP_COPY_INVERTED', 'VK_LOGIC_OP_EQUIVALENT',
    'VK_LOGIC_OP_INVERT', 'VK_LOGIC_OP_MAX_ENUM', 'VK_LOGIC_OP_NAND',
    'VK_LOGIC_OP_NOR', 'VK_LOGIC_OP_NO_OP', 'VK_LOGIC_OP_OR',
    'VK_LOGIC_OP_OR_INVERTED', 'VK_LOGIC_OP_OR_REVERSE',
    'VK_LOGIC_OP_SET', 'VK_LOGIC_OP_XOR', 'VK_LUID_SIZE',
    'VK_LUID_SIZE_KHR',
    'VK_LUNARG_DIRECT_DRIVER_LOADING_EXTENSION_NAME',
    'VK_LUNARG_DIRECT_DRIVER_LOADING_SPEC_VERSION',
    'VK_LUNARG_direct_driver_loading', 'VK_MAX_DESCRIPTION_SIZE',
    'VK_MAX_DEVICE_GROUP_SIZE', 'VK_MAX_DEVICE_GROUP_SIZE_KHR',
    'VK_MAX_DRIVER_INFO_SIZE', 'VK_MAX_DRIVER_INFO_SIZE_KHR',
    'VK_MAX_DRIVER_NAME_SIZE', 'VK_MAX_DRIVER_NAME_SIZE_KHR',
    'VK_MAX_EXTENSION_NAME_SIZE', 'VK_MAX_GLOBAL_PRIORITY_SIZE_EXT',
    'VK_MAX_GLOBAL_PRIORITY_SIZE_KHR', 'VK_MAX_MEMORY_HEAPS',
    'VK_MAX_MEMORY_TYPES', 'VK_MAX_PHYSICAL_DEVICE_NAME_SIZE',
    'VK_MAX_SHADER_MODULE_IDENTIFIER_SIZE_EXT',
    'VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT',
    'VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT_KHR',
    'VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT',
    'VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR',
    'VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT',
    'VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT_KHR',
    'VK_MEMORY_ALLOCATE_FLAG_BITS_MAX_ENUM',
    'VK_MEMORY_DECOMPRESSION_METHOD_GDEFLATE_1_0_BIT_NV',
    'VK_MEMORY_HEAP_DEVICE_LOCAL_BIT',
    'VK_MEMORY_HEAP_FLAG_BITS_MAX_ENUM',
    'VK_MEMORY_HEAP_MULTI_INSTANCE_BIT',
    'VK_MEMORY_HEAP_MULTI_INSTANCE_BIT_KHR',
    'VK_MEMORY_OVERALLOCATION_BEHAVIOR_ALLOWED_AMD',
    'VK_MEMORY_OVERALLOCATION_BEHAVIOR_DEFAULT_AMD',
    'VK_MEMORY_OVERALLOCATION_BEHAVIOR_DISALLOWED_AMD',
    'VK_MEMORY_OVERALLOCATION_BEHAVIOR_MAX_ENUM_AMD',
    'VK_MEMORY_PROPERTY_DEVICE_COHERENT_BIT_AMD',
    'VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT',
    'VK_MEMORY_PROPERTY_DEVICE_UNCACHED_BIT_AMD',
    'VK_MEMORY_PROPERTY_FLAG_BITS_MAX_ENUM',
    'VK_MEMORY_PROPERTY_HOST_CACHED_BIT',
    'VK_MEMORY_PROPERTY_HOST_COHERENT_BIT',
    'VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT',
    'VK_MEMORY_PROPERTY_LAZILY_ALLOCATED_BIT',
    'VK_MEMORY_PROPERTY_PROTECTED_BIT',
    'VK_MEMORY_PROPERTY_RDMA_CAPABLE_BIT_NV',
    'VK_MICROMAP_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_EXT',
    'VK_MICROMAP_CREATE_FLAG_BITS_MAX_ENUM_EXT',
    'VK_MICROMAP_TYPE_MAX_ENUM_EXT',
    'VK_MICROMAP_TYPE_OPACITY_MICROMAP_EXT',
    'VK_MSFT_LAYERED_DRIVER_EXTENSION_NAME',
    'VK_MSFT_LAYERED_DRIVER_SPEC_VERSION', 'VK_MSFT_layered_driver',
    'VK_NOT_READY', 'VK_NVX_BINARY_IMPORT_EXTENSION_NAME',
    'VK_NVX_BINARY_IMPORT_SPEC_VERSION',
    'VK_NVX_IMAGE_VIEW_HANDLE_EXTENSION_NAME',
    'VK_NVX_IMAGE_VIEW_HANDLE_SPEC_VERSION',
    'VK_NVX_MULTIVIEW_PER_VIEW_ATTRIBUTES_EXTENSION_NAME',
    'VK_NVX_MULTIVIEW_PER_VIEW_ATTRIBUTES_SPEC_VERSION',
    'VK_NVX_binary_import', 'VK_NVX_image_view_handle',
    'VK_NVX_multiview_per_view_attributes',
    'VK_NV_CLIP_SPACE_W_SCALING_EXTENSION_NAME',
    'VK_NV_CLIP_SPACE_W_SCALING_SPEC_VERSION',
    'VK_NV_COMPUTE_SHADER_DERIVATIVES_EXTENSION_NAME',
    'VK_NV_COMPUTE_SHADER_DERIVATIVES_SPEC_VERSION',
    'VK_NV_COOPERATIVE_MATRIX_EXTENSION_NAME',
    'VK_NV_COOPERATIVE_MATRIX_SPEC_VERSION',
    'VK_NV_COPY_MEMORY_INDIRECT_EXTENSION_NAME',
    'VK_NV_COPY_MEMORY_INDIRECT_SPEC_VERSION',
    'VK_NV_CORNER_SAMPLED_IMAGE_EXTENSION_NAME',
    'VK_NV_CORNER_SAMPLED_IMAGE_SPEC_VERSION',
    'VK_NV_COVERAGE_REDUCTION_MODE_EXTENSION_NAME',
    'VK_NV_COVERAGE_REDUCTION_MODE_SPEC_VERSION',
    'VK_NV_CUDA_KERNEL_LAUNCH_EXTENSION_NAME',
    'VK_NV_CUDA_KERNEL_LAUNCH_SPEC_VERSION',
    'VK_NV_DEDICATED_ALLOCATION_EXTENSION_NAME',
    'VK_NV_DEDICATED_ALLOCATION_IMAGE_ALIASING_EXTENSION_NAME',
    'VK_NV_DEDICATED_ALLOCATION_IMAGE_ALIASING_SPEC_VERSION',
    'VK_NV_DEDICATED_ALLOCATION_SPEC_VERSION',
    'VK_NV_DESCRIPTOR_POOL_OVERALLOCATION_EXTENSION_NAME',
    'VK_NV_DESCRIPTOR_POOL_OVERALLOCATION_SPEC_VERSION',
    'VK_NV_DEVICE_DIAGNOSTICS_CONFIG_EXTENSION_NAME',
    'VK_NV_DEVICE_DIAGNOSTICS_CONFIG_SPEC_VERSION',
    'VK_NV_DEVICE_DIAGNOSTIC_CHECKPOINTS_EXTENSION_NAME',
    'VK_NV_DEVICE_DIAGNOSTIC_CHECKPOINTS_SPEC_VERSION',
    'VK_NV_DEVICE_GENERATED_COMMANDS_COMPUTE_EXTENSION_NAME',
    'VK_NV_DEVICE_GENERATED_COMMANDS_COMPUTE_SPEC_VERSION',
    'VK_NV_DEVICE_GENERATED_COMMANDS_EXTENSION_NAME',
    'VK_NV_DEVICE_GENERATED_COMMANDS_SPEC_VERSION',
    'VK_NV_EXTENDED_SPARSE_ADDRESS_SPACE_EXTENSION_NAME',
    'VK_NV_EXTENDED_SPARSE_ADDRESS_SPACE_SPEC_VERSION',
    'VK_NV_EXTERNAL_MEMORY_CAPABILITIES_EXTENSION_NAME',
    'VK_NV_EXTERNAL_MEMORY_CAPABILITIES_SPEC_VERSION',
    'VK_NV_EXTERNAL_MEMORY_EXTENSION_NAME',
    'VK_NV_EXTERNAL_MEMORY_RDMA_EXTENSION_NAME',
    'VK_NV_EXTERNAL_MEMORY_RDMA_SPEC_VERSION',
    'VK_NV_EXTERNAL_MEMORY_SPEC_VERSION',
    'VK_NV_FILL_RECTANGLE_EXTENSION_NAME',
    'VK_NV_FILL_RECTANGLE_SPEC_VERSION',
    'VK_NV_FRAGMENT_COVERAGE_TO_COLOR_EXTENSION_NAME',
    'VK_NV_FRAGMENT_COVERAGE_TO_COLOR_SPEC_VERSION',
    'VK_NV_FRAGMENT_SHADER_BARYCENTRIC_EXTENSION_NAME',
    'VK_NV_FRAGMENT_SHADER_BARYCENTRIC_SPEC_VERSION',
    'VK_NV_FRAGMENT_SHADING_RATE_ENUMS_EXTENSION_NAME',
    'VK_NV_FRAGMENT_SHADING_RATE_ENUMS_SPEC_VERSION',
    'VK_NV_FRAMEBUFFER_MIXED_SAMPLES_EXTENSION_NAME',
    'VK_NV_FRAMEBUFFER_MIXED_SAMPLES_SPEC_VERSION',
    'VK_NV_GEOMETRY_SHADER_PASSTHROUGH_EXTENSION_NAME',
    'VK_NV_GEOMETRY_SHADER_PASSTHROUGH_SPEC_VERSION',
    'VK_NV_GLSL_SHADER_EXTENSION_NAME',
    'VK_NV_GLSL_SHADER_SPEC_VERSION',
    'VK_NV_INHERITED_VIEWPORT_SCISSOR_EXTENSION_NAME',
    'VK_NV_INHERITED_VIEWPORT_SCISSOR_SPEC_VERSION',
    'VK_NV_LINEAR_COLOR_ATTACHMENT_EXTENSION_NAME',
    'VK_NV_LINEAR_COLOR_ATTACHMENT_SPEC_VERSION',
    'VK_NV_LOW_LATENCY_2_EXTENSION_NAME',
    'VK_NV_LOW_LATENCY_2_SPEC_VERSION',
    'VK_NV_LOW_LATENCY_EXTENSION_NAME',
    'VK_NV_LOW_LATENCY_SPEC_VERSION',
    'VK_NV_MEMORY_DECOMPRESSION_EXTENSION_NAME',
    'VK_NV_MEMORY_DECOMPRESSION_SPEC_VERSION',
    'VK_NV_MESH_SHADER_EXTENSION_NAME',
    'VK_NV_MESH_SHADER_SPEC_VERSION',
    'VK_NV_OPTICAL_FLOW_EXTENSION_NAME',
    'VK_NV_OPTICAL_FLOW_SPEC_VERSION',
    'VK_NV_PER_STAGE_DESCRIPTOR_SET_EXTENSION_NAME',
    'VK_NV_PER_STAGE_DESCRIPTOR_SET_SPEC_VERSION',
    'VK_NV_PRESENT_BARRIER_EXTENSION_NAME',
    'VK_NV_PRESENT_BARRIER_SPEC_VERSION',
    'VK_NV_RAY_TRACING_EXTENSION_NAME',
    'VK_NV_RAY_TRACING_INVOCATION_REORDER_EXTENSION_NAME',
    'VK_NV_RAY_TRACING_INVOCATION_REORDER_SPEC_VERSION',
    'VK_NV_RAY_TRACING_MOTION_BLUR_EXTENSION_NAME',
    'VK_NV_RAY_TRACING_MOTION_BLUR_SPEC_VERSION',
    'VK_NV_RAY_TRACING_SPEC_VERSION',
    'VK_NV_REPRESENTATIVE_FRAGMENT_TEST_EXTENSION_NAME',
    'VK_NV_REPRESENTATIVE_FRAGMENT_TEST_SPEC_VERSION',
    'VK_NV_SAMPLE_MASK_OVERRIDE_COVERAGE_EXTENSION_NAME',
    'VK_NV_SAMPLE_MASK_OVERRIDE_COVERAGE_SPEC_VERSION',
    'VK_NV_SCISSOR_EXCLUSIVE_EXTENSION_NAME',
    'VK_NV_SCISSOR_EXCLUSIVE_SPEC_VERSION',
    'VK_NV_SHADER_IMAGE_FOOTPRINT_EXTENSION_NAME',
    'VK_NV_SHADER_IMAGE_FOOTPRINT_SPEC_VERSION',
    'VK_NV_SHADER_SM_BUILTINS_EXTENSION_NAME',
    'VK_NV_SHADER_SM_BUILTINS_SPEC_VERSION',
    'VK_NV_SHADER_SUBGROUP_PARTITIONED_EXTENSION_NAME',
    'VK_NV_SHADER_SUBGROUP_PARTITIONED_SPEC_VERSION',
    'VK_NV_SHADING_RATE_IMAGE_EXTENSION_NAME',
    'VK_NV_SHADING_RATE_IMAGE_SPEC_VERSION',
    'VK_NV_VIEWPORT_ARRAY2_EXTENSION_NAME',
    'VK_NV_VIEWPORT_ARRAY2_SPEC_VERSION',
    'VK_NV_VIEWPORT_ARRAY_2_EXTENSION_NAME',
    'VK_NV_VIEWPORT_ARRAY_2_SPEC_VERSION',
    'VK_NV_VIEWPORT_SWIZZLE_EXTENSION_NAME',
    'VK_NV_VIEWPORT_SWIZZLE_SPEC_VERSION',
    'VK_NV_clip_space_w_scaling', 'VK_NV_compute_shader_derivatives',
    'VK_NV_cooperative_matrix', 'VK_NV_copy_memory_indirect',
    'VK_NV_corner_sampled_image', 'VK_NV_coverage_reduction_mode',
    'VK_NV_cuda_kernel_launch', 'VK_NV_dedicated_allocation',
    'VK_NV_dedicated_allocation_image_aliasing',
    'VK_NV_descriptor_pool_overallocation',
    'VK_NV_device_diagnostic_checkpoints',
    'VK_NV_device_diagnostics_config',
    'VK_NV_device_generated_commands',
    'VK_NV_device_generated_commands_compute',
    'VK_NV_extended_sparse_address_space', 'VK_NV_external_memory',
    'VK_NV_external_memory_capabilities',
    'VK_NV_external_memory_rdma', 'VK_NV_fill_rectangle',
    'VK_NV_fragment_coverage_to_color',
    'VK_NV_fragment_shader_barycentric',
    'VK_NV_fragment_shading_rate_enums',
    'VK_NV_framebuffer_mixed_samples',
    'VK_NV_geometry_shader_passthrough', 'VK_NV_glsl_shader',
    'VK_NV_inherited_viewport_scissor',
    'VK_NV_linear_color_attachment', 'VK_NV_low_latency',
    'VK_NV_low_latency2', 'VK_NV_memory_decompression',
    'VK_NV_mesh_shader', 'VK_NV_optical_flow',
    'VK_NV_per_stage_descriptor_set', 'VK_NV_present_barrier',
    'VK_NV_ray_tracing', 'VK_NV_ray_tracing_invocation_reorder',
    'VK_NV_ray_tracing_motion_blur',
    'VK_NV_representative_fragment_test',
    'VK_NV_sample_mask_override_coverage', 'VK_NV_scissor_exclusive',
    'VK_NV_shader_image_footprint', 'VK_NV_shader_sm_builtins',
    'VK_NV_shader_subgroup_partitioned', 'VK_NV_shading_rate_image',
    'VK_NV_viewport_array2', 'VK_NV_viewport_swizzle',
    'VK_OBJECT_TYPE_ACCELERATION_STRUCTURE_KHR',
    'VK_OBJECT_TYPE_ACCELERATION_STRUCTURE_NV',
    'VK_OBJECT_TYPE_BUFFER',
    'VK_OBJECT_TYPE_BUFFER_COLLECTION_FUCHSIA',
    'VK_OBJECT_TYPE_BUFFER_VIEW', 'VK_OBJECT_TYPE_COMMAND_BUFFER',
    'VK_OBJECT_TYPE_COMMAND_POOL', 'VK_OBJECT_TYPE_CUDA_FUNCTION_NV',
    'VK_OBJECT_TYPE_CUDA_MODULE_NV', 'VK_OBJECT_TYPE_CU_FUNCTION_NVX',
    'VK_OBJECT_TYPE_CU_MODULE_NVX',
    'VK_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT',
    'VK_OBJECT_TYPE_DEBUG_UTILS_MESSENGER_EXT',
    'VK_OBJECT_TYPE_DEFERRED_OPERATION_KHR',
    'VK_OBJECT_TYPE_DESCRIPTOR_POOL', 'VK_OBJECT_TYPE_DESCRIPTOR_SET',
    'VK_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT',
    'VK_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE',
    'VK_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_KHR',
    'VK_OBJECT_TYPE_DEVICE', 'VK_OBJECT_TYPE_DEVICE_MEMORY',
    'VK_OBJECT_TYPE_DISPLAY_KHR', 'VK_OBJECT_TYPE_DISPLAY_MODE_KHR',
    'VK_OBJECT_TYPE_EVENT', 'VK_OBJECT_TYPE_FENCE',
    'VK_OBJECT_TYPE_FRAMEBUFFER', 'VK_OBJECT_TYPE_IMAGE',
    'VK_OBJECT_TYPE_IMAGE_VIEW',
    'VK_OBJECT_TYPE_INDIRECT_COMMANDS_LAYOUT_NV',
    'VK_OBJECT_TYPE_INSTANCE', 'VK_OBJECT_TYPE_MAX_ENUM',
    'VK_OBJECT_TYPE_MICROMAP_EXT',
    'VK_OBJECT_TYPE_OPTICAL_FLOW_SESSION_NV',
    'VK_OBJECT_TYPE_PERFORMANCE_CONFIGURATION_INTEL',
    'VK_OBJECT_TYPE_PHYSICAL_DEVICE', 'VK_OBJECT_TYPE_PIPELINE',
    'VK_OBJECT_TYPE_PIPELINE_CACHE', 'VK_OBJECT_TYPE_PIPELINE_LAYOUT',
    'VK_OBJECT_TYPE_PRIVATE_DATA_SLOT',
    'VK_OBJECT_TYPE_PRIVATE_DATA_SLOT_EXT',
    'VK_OBJECT_TYPE_QUERY_POOL', 'VK_OBJECT_TYPE_QUEUE',
    'VK_OBJECT_TYPE_RENDER_PASS', 'VK_OBJECT_TYPE_SAMPLER',
    'VK_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION',
    'VK_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_KHR',
    'VK_OBJECT_TYPE_SEMAPHORE', 'VK_OBJECT_TYPE_SHADER_EXT',
    'VK_OBJECT_TYPE_SHADER_MODULE', 'VK_OBJECT_TYPE_SURFACE_KHR',
    'VK_OBJECT_TYPE_SWAPCHAIN_KHR', 'VK_OBJECT_TYPE_UNKNOWN',
    'VK_OBJECT_TYPE_VALIDATION_CACHE_EXT',
    'VK_OBJECT_TYPE_VIDEO_SESSION_KHR',
    'VK_OBJECT_TYPE_VIDEO_SESSION_PARAMETERS_KHR',
    'VK_OPACITY_MICROMAP_FORMAT_2_STATE_EXT',
    'VK_OPACITY_MICROMAP_FORMAT_4_STATE_EXT',
    'VK_OPACITY_MICROMAP_FORMAT_MAX_ENUM_EXT',
    'VK_OPACITY_MICROMAP_SPECIAL_INDEX_FULLY_OPAQUE_EXT',
    'VK_OPACITY_MICROMAP_SPECIAL_INDEX_FULLY_TRANSPARENT_EXT',
    'VK_OPACITY_MICROMAP_SPECIAL_INDEX_FULLY_UNKNOWN_OPAQUE_EXT',
    'VK_OPACITY_MICROMAP_SPECIAL_INDEX_FULLY_UNKNOWN_TRANSPARENT_EXT',
    'VK_OPACITY_MICROMAP_SPECIAL_INDEX_MAX_ENUM_EXT',
    'VK_OPERATION_DEFERRED_KHR', 'VK_OPERATION_NOT_DEFERRED_KHR',
    'VK_OPTICAL_FLOW_EXECUTE_DISABLE_TEMPORAL_HINTS_BIT_NV',
    'VK_OPTICAL_FLOW_EXECUTE_FLAG_BITS_MAX_ENUM_NV',
    'VK_OPTICAL_FLOW_GRID_SIZE_1X1_BIT_NV',
    'VK_OPTICAL_FLOW_GRID_SIZE_2X2_BIT_NV',
    'VK_OPTICAL_FLOW_GRID_SIZE_4X4_BIT_NV',
    'VK_OPTICAL_FLOW_GRID_SIZE_8X8_BIT_NV',
    'VK_OPTICAL_FLOW_GRID_SIZE_FLAG_BITS_MAX_ENUM_NV',
    'VK_OPTICAL_FLOW_GRID_SIZE_UNKNOWN_NV',
    'VK_OPTICAL_FLOW_PERFORMANCE_LEVEL_FAST_NV',
    'VK_OPTICAL_FLOW_PERFORMANCE_LEVEL_MAX_ENUM_NV',
    'VK_OPTICAL_FLOW_PERFORMANCE_LEVEL_MEDIUM_NV',
    'VK_OPTICAL_FLOW_PERFORMANCE_LEVEL_SLOW_NV',
    'VK_OPTICAL_FLOW_PERFORMANCE_LEVEL_UNKNOWN_NV',
    'VK_OPTICAL_FLOW_SESSION_BINDING_POINT_BACKWARD_COST_NV',
    'VK_OPTICAL_FLOW_SESSION_BINDING_POINT_BACKWARD_FLOW_VECTOR_NV',
    'VK_OPTICAL_FLOW_SESSION_BINDING_POINT_COST_NV',
    'VK_OPTICAL_FLOW_SESSION_BINDING_POINT_FLOW_VECTOR_NV',
    'VK_OPTICAL_FLOW_SESSION_BINDING_POINT_GLOBAL_FLOW_NV',
    'VK_OPTICAL_FLOW_SESSION_BINDING_POINT_HINT_NV',
    'VK_OPTICAL_FLOW_SESSION_BINDING_POINT_INPUT_NV',
    'VK_OPTICAL_FLOW_SESSION_BINDING_POINT_MAX_ENUM_NV',
    'VK_OPTICAL_FLOW_SESSION_BINDING_POINT_REFERENCE_NV',
    'VK_OPTICAL_FLOW_SESSION_BINDING_POINT_UNKNOWN_NV',
    'VK_OPTICAL_FLOW_SESSION_CREATE_ALLOW_REGIONS_BIT_NV',
    'VK_OPTICAL_FLOW_SESSION_CREATE_BOTH_DIRECTIONS_BIT_NV',
    'VK_OPTICAL_FLOW_SESSION_CREATE_ENABLE_COST_BIT_NV',
    'VK_OPTICAL_FLOW_SESSION_CREATE_ENABLE_GLOBAL_FLOW_BIT_NV',
    'VK_OPTICAL_FLOW_SESSION_CREATE_ENABLE_HINT_BIT_NV',
    'VK_OPTICAL_FLOW_SESSION_CREATE_FLAG_BITS_MAX_ENUM_NV',
    'VK_OPTICAL_FLOW_USAGE_COST_BIT_NV',
    'VK_OPTICAL_FLOW_USAGE_FLAG_BITS_MAX_ENUM_NV',
    'VK_OPTICAL_FLOW_USAGE_GLOBAL_FLOW_BIT_NV',
    'VK_OPTICAL_FLOW_USAGE_HINT_BIT_NV',
    'VK_OPTICAL_FLOW_USAGE_INPUT_BIT_NV',
    'VK_OPTICAL_FLOW_USAGE_OUTPUT_BIT_NV',
    'VK_OPTICAL_FLOW_USAGE_UNKNOWN_NV',
    'VK_OUT_OF_BAND_QUEUE_TYPE_MAX_ENUM_NV',
    'VK_OUT_OF_BAND_QUEUE_TYPE_PRESENT_NV',
    'VK_OUT_OF_BAND_QUEUE_TYPE_RENDER_NV',
    'VK_PEER_MEMORY_FEATURE_COPY_DST_BIT',
    'VK_PEER_MEMORY_FEATURE_COPY_DST_BIT_KHR',
    'VK_PEER_MEMORY_FEATURE_COPY_SRC_BIT',
    'VK_PEER_MEMORY_FEATURE_COPY_SRC_BIT_KHR',
    'VK_PEER_MEMORY_FEATURE_FLAG_BITS_MAX_ENUM',
    'VK_PEER_MEMORY_FEATURE_GENERIC_DST_BIT',
    'VK_PEER_MEMORY_FEATURE_GENERIC_DST_BIT_KHR',
    'VK_PEER_MEMORY_FEATURE_GENERIC_SRC_BIT',
    'VK_PEER_MEMORY_FEATURE_GENERIC_SRC_BIT_KHR',
    'VK_PERFORMANCE_CONFIGURATION_TYPE_COMMAND_QUEUE_METRICS_DISCOVERY_ACTIVATED_INTEL',
    'VK_PERFORMANCE_CONFIGURATION_TYPE_MAX_ENUM_INTEL',
    'VK_PERFORMANCE_COUNTER_DESCRIPTION_CONCURRENTLY_IMPACTED_BIT_KHR',
    'VK_PERFORMANCE_COUNTER_DESCRIPTION_CONCURRENTLY_IMPACTED_KHR',
    'VK_PERFORMANCE_COUNTER_DESCRIPTION_FLAG_BITS_MAX_ENUM_KHR',
    'VK_PERFORMANCE_COUNTER_DESCRIPTION_PERFORMANCE_IMPACTING_BIT_KHR',
    'VK_PERFORMANCE_COUNTER_DESCRIPTION_PERFORMANCE_IMPACTING_KHR',
    'VK_PERFORMANCE_COUNTER_SCOPE_COMMAND_BUFFER_KHR',
    'VK_PERFORMANCE_COUNTER_SCOPE_COMMAND_KHR',
    'VK_PERFORMANCE_COUNTER_SCOPE_MAX_ENUM_KHR',
    'VK_PERFORMANCE_COUNTER_SCOPE_RENDER_PASS_KHR',
    'VK_PERFORMANCE_COUNTER_STORAGE_FLOAT32_KHR',
    'VK_PERFORMANCE_COUNTER_STORAGE_FLOAT64_KHR',
    'VK_PERFORMANCE_COUNTER_STORAGE_INT32_KHR',
    'VK_PERFORMANCE_COUNTER_STORAGE_INT64_KHR',
    'VK_PERFORMANCE_COUNTER_STORAGE_MAX_ENUM_KHR',
    'VK_PERFORMANCE_COUNTER_STORAGE_UINT32_KHR',
    'VK_PERFORMANCE_COUNTER_STORAGE_UINT64_KHR',
    'VK_PERFORMANCE_COUNTER_UNIT_AMPS_KHR',
    'VK_PERFORMANCE_COUNTER_UNIT_BYTES_KHR',
    'VK_PERFORMANCE_COUNTER_UNIT_BYTES_PER_SECOND_KHR',
    'VK_PERFORMANCE_COUNTER_UNIT_CYCLES_KHR',
    'VK_PERFORMANCE_COUNTER_UNIT_GENERIC_KHR',
    'VK_PERFORMANCE_COUNTER_UNIT_HERTZ_KHR',
    'VK_PERFORMANCE_COUNTER_UNIT_KELVIN_KHR',
    'VK_PERFORMANCE_COUNTER_UNIT_MAX_ENUM_KHR',
    'VK_PERFORMANCE_COUNTER_UNIT_NANOSECONDS_KHR',
    'VK_PERFORMANCE_COUNTER_UNIT_PERCENTAGE_KHR',
    'VK_PERFORMANCE_COUNTER_UNIT_VOLTS_KHR',
    'VK_PERFORMANCE_COUNTER_UNIT_WATTS_KHR',
    'VK_PERFORMANCE_OVERRIDE_TYPE_FLUSH_GPU_CACHES_INTEL',
    'VK_PERFORMANCE_OVERRIDE_TYPE_MAX_ENUM_INTEL',
    'VK_PERFORMANCE_OVERRIDE_TYPE_NULL_HARDWARE_INTEL',
    'VK_PERFORMANCE_PARAMETER_TYPE_HW_COUNTERS_SUPPORTED_INTEL',
    'VK_PERFORMANCE_PARAMETER_TYPE_MAX_ENUM_INTEL',
    'VK_PERFORMANCE_PARAMETER_TYPE_STREAM_MARKER_VALID_BITS_INTEL',
    'VK_PERFORMANCE_VALUE_TYPE_BOOL_INTEL',
    'VK_PERFORMANCE_VALUE_TYPE_FLOAT_INTEL',
    'VK_PERFORMANCE_VALUE_TYPE_MAX_ENUM_INTEL',
    'VK_PERFORMANCE_VALUE_TYPE_STRING_INTEL',
    'VK_PERFORMANCE_VALUE_TYPE_UINT32_INTEL',
    'VK_PERFORMANCE_VALUE_TYPE_UINT64_INTEL',
    'VK_PHYSICAL_DEVICE_SCHEDULING_CONTROLS_SHADER_CORE_COUNT_ARM',
    'VK_PHYSICAL_DEVICE_TYPE_CPU',
    'VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU',
    'VK_PHYSICAL_DEVICE_TYPE_INTEGRATED_GPU',
    'VK_PHYSICAL_DEVICE_TYPE_MAX_ENUM',
    'VK_PHYSICAL_DEVICE_TYPE_OTHER',
    'VK_PHYSICAL_DEVICE_TYPE_VIRTUAL_GPU',
    'VK_PIPELINE_BIND_POINT_COMPUTE',
    'VK_PIPELINE_BIND_POINT_GRAPHICS',
    'VK_PIPELINE_BIND_POINT_MAX_ENUM',
    'VK_PIPELINE_BIND_POINT_RAY_TRACING_KHR',
    'VK_PIPELINE_BIND_POINT_RAY_TRACING_NV',
    'VK_PIPELINE_BIND_POINT_SUBPASS_SHADING_HUAWEI',
    'VK_PIPELINE_CACHE_CREATE_EXTERNALLY_SYNCHRONIZED_BIT',
    'VK_PIPELINE_CACHE_CREATE_EXTERNALLY_SYNCHRONIZED_BIT_EXT',
    'VK_PIPELINE_CACHE_CREATE_FLAG_BITS_MAX_ENUM',
    'VK_PIPELINE_CACHE_HEADER_VERSION_MAX_ENUM',
    'VK_PIPELINE_CACHE_HEADER_VERSION_ONE',
    'VK_PIPELINE_COLOR_BLEND_STATE_CREATE_FLAG_BITS_MAX_ENUM',
    'VK_PIPELINE_COLOR_BLEND_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_BIT_ARM',
    'VK_PIPELINE_COLOR_BLEND_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_BIT_EXT',
    'VK_PIPELINE_COMPILER_CONTROL_FLAG_BITS_MAX_ENUM_AMD',
    'VK_PIPELINE_COMPILE_REQUIRED',
    'VK_PIPELINE_COMPILE_REQUIRED_EXT',
    'VK_PIPELINE_CREATE_2_ALLOW_DERIVATIVES_BIT_KHR',
    'VK_PIPELINE_CREATE_2_CAPTURE_INTERNAL_REPRESENTATIONS_BIT_KHR',
    'VK_PIPELINE_CREATE_2_CAPTURE_STATISTICS_BIT_KHR',
    'VK_PIPELINE_CREATE_2_COLOR_ATTACHMENT_FEEDBACK_LOOP_BIT_EXT',
    'VK_PIPELINE_CREATE_2_DEFER_COMPILE_BIT_NV',
    'VK_PIPELINE_CREATE_2_DEPTH_STENCIL_ATTACHMENT_FEEDBACK_LOOP_BIT_EXT',
    'VK_PIPELINE_CREATE_2_DERIVATIVE_BIT_KHR',
    'VK_PIPELINE_CREATE_2_DESCRIPTOR_BUFFER_BIT_EXT',
    'VK_PIPELINE_CREATE_2_DISABLE_OPTIMIZATION_BIT_KHR',
    'VK_PIPELINE_CREATE_2_DISPATCH_BASE_BIT_KHR',
    'VK_PIPELINE_CREATE_2_EARLY_RETURN_ON_FAILURE_BIT_KHR',
    'VK_PIPELINE_CREATE_2_FAIL_ON_PIPELINE_COMPILE_REQUIRED_BIT_KHR',
    'VK_PIPELINE_CREATE_2_INDIRECT_BINDABLE_BIT_NV',
    'VK_PIPELINE_CREATE_2_LIBRARY_BIT_KHR',
    'VK_PIPELINE_CREATE_2_LINK_TIME_OPTIMIZATION_BIT_EXT',
    'VK_PIPELINE_CREATE_2_NO_PROTECTED_ACCESS_BIT_EXT',
    'VK_PIPELINE_CREATE_2_PROTECTED_ACCESS_ONLY_BIT_EXT',
    'VK_PIPELINE_CREATE_2_RAY_TRACING_ALLOW_MOTION_BIT_NV',
    'VK_PIPELINE_CREATE_2_RAY_TRACING_DISPLACEMENT_MICROMAP_BIT_NV',
    'VK_PIPELINE_CREATE_2_RAY_TRACING_NO_NULL_ANY_HIT_SHADERS_BIT_KHR',
    'VK_PIPELINE_CREATE_2_RAY_TRACING_NO_NULL_CLOSEST_HIT_SHADERS_BIT_KHR',
    'VK_PIPELINE_CREATE_2_RAY_TRACING_NO_NULL_INTERSECTION_SHADERS_BIT_KHR',
    'VK_PIPELINE_CREATE_2_RAY_TRACING_NO_NULL_MISS_SHADERS_BIT_KHR',
    'VK_PIPELINE_CREATE_2_RAY_TRACING_OPACITY_MICROMAP_BIT_EXT',
    'VK_PIPELINE_CREATE_2_RAY_TRACING_SHADER_GROUP_HANDLE_CAPTURE_REPLAY_BIT_KHR',
    'VK_PIPELINE_CREATE_2_RAY_TRACING_SKIP_AABBS_BIT_KHR',
    'VK_PIPELINE_CREATE_2_RAY_TRACING_SKIP_TRIANGLES_BIT_KHR',
    'VK_PIPELINE_CREATE_2_RENDERING_FRAGMENT_DENSITY_MAP_ATTACHMENT_BIT_EXT',
    'VK_PIPELINE_CREATE_2_RENDERING_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR',
    'VK_PIPELINE_CREATE_2_RETAIN_LINK_TIME_OPTIMIZATION_INFO_BIT_EXT',
    'VK_PIPELINE_CREATE_2_VIEW_INDEX_FROM_DEVICE_INDEX_BIT_KHR',
    'VK_PIPELINE_CREATE_ALLOW_DERIVATIVES_BIT',
    'VK_PIPELINE_CREATE_CAPTURE_INTERNAL_REPRESENTATIONS_BIT_KHR',
    'VK_PIPELINE_CREATE_CAPTURE_STATISTICS_BIT_KHR',
    'VK_PIPELINE_CREATE_COLOR_ATTACHMENT_FEEDBACK_LOOP_BIT_EXT',
    'VK_PIPELINE_CREATE_DEFER_COMPILE_BIT_NV',
    'VK_PIPELINE_CREATE_DEPTH_STENCIL_ATTACHMENT_FEEDBACK_LOOP_BIT_EXT',
    'VK_PIPELINE_CREATE_DERIVATIVE_BIT',
    'VK_PIPELINE_CREATE_DESCRIPTOR_BUFFER_BIT_EXT',
    'VK_PIPELINE_CREATE_DISABLE_OPTIMIZATION_BIT',
    'VK_PIPELINE_CREATE_DISPATCH_BASE',
    'VK_PIPELINE_CREATE_DISPATCH_BASE_BIT',
    'VK_PIPELINE_CREATE_DISPATCH_BASE_KHR',
    'VK_PIPELINE_CREATE_EARLY_RETURN_ON_FAILURE_BIT',
    'VK_PIPELINE_CREATE_EARLY_RETURN_ON_FAILURE_BIT_EXT',
    'VK_PIPELINE_CREATE_FAIL_ON_PIPELINE_COMPILE_REQUIRED_BIT',
    'VK_PIPELINE_CREATE_FAIL_ON_PIPELINE_COMPILE_REQUIRED_BIT_EXT',
    'VK_PIPELINE_CREATE_FLAG_BITS_MAX_ENUM',
    'VK_PIPELINE_CREATE_INDIRECT_BINDABLE_BIT_NV',
    'VK_PIPELINE_CREATE_LIBRARY_BIT_KHR',
    'VK_PIPELINE_CREATE_LINK_TIME_OPTIMIZATION_BIT_EXT',
    'VK_PIPELINE_CREATE_NO_PROTECTED_ACCESS_BIT_EXT',
    'VK_PIPELINE_CREATE_PROTECTED_ACCESS_ONLY_BIT_EXT',
    'VK_PIPELINE_CREATE_RAY_TRACING_ALLOW_MOTION_BIT_NV',
    'VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_ANY_HIT_SHADERS_BIT_KHR',
    'VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_CLOSEST_HIT_SHADERS_BIT_KHR',
    'VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_INTERSECTION_SHADERS_BIT_KHR',
    'VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_MISS_SHADERS_BIT_KHR',
    'VK_PIPELINE_CREATE_RAY_TRACING_OPACITY_MICROMAP_BIT_EXT',
    'VK_PIPELINE_CREATE_RAY_TRACING_SHADER_GROUP_HANDLE_CAPTURE_REPLAY_BIT_KHR',
    'VK_PIPELINE_CREATE_RAY_TRACING_SKIP_AABBS_BIT_KHR',
    'VK_PIPELINE_CREATE_RAY_TRACING_SKIP_TRIANGLES_BIT_KHR',
    'VK_PIPELINE_CREATE_RENDERING_FRAGMENT_DENSITY_MAP_ATTACHMENT_BIT_EXT',
    'VK_PIPELINE_CREATE_RENDERING_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR',
    'VK_PIPELINE_CREATE_RETAIN_LINK_TIME_OPTIMIZATION_INFO_BIT_EXT',
    'VK_PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT',
    'VK_PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT_KHR',
    'VK_PIPELINE_CREATION_FEEDBACK_APPLICATION_PIPELINE_CACHE_HIT_BIT',
    'VK_PIPELINE_CREATION_FEEDBACK_APPLICATION_PIPELINE_CACHE_HIT_BIT_EXT',
    'VK_PIPELINE_CREATION_FEEDBACK_BASE_PIPELINE_ACCELERATION_BIT',
    'VK_PIPELINE_CREATION_FEEDBACK_BASE_PIPELINE_ACCELERATION_BIT_EXT',
    'VK_PIPELINE_CREATION_FEEDBACK_FLAG_BITS_MAX_ENUM',
    'VK_PIPELINE_CREATION_FEEDBACK_VALID_BIT',
    'VK_PIPELINE_CREATION_FEEDBACK_VALID_BIT_EXT',
    'VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_FLAG_BITS_MAX_ENUM',
    'VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_DEPTH_ACCESS_BIT_ARM',
    'VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_DEPTH_ACCESS_BIT_EXT',
    'VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_STENCIL_ACCESS_BIT_ARM',
    'VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_STENCIL_ACCESS_BIT_EXT',
    'VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_BOOL32_KHR',
    'VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_FLOAT64_KHR',
    'VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_INT64_KHR',
    'VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_MAX_ENUM_KHR',
    'VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_UINT64_KHR',
    'VK_PIPELINE_LAYOUT_CREATE_FLAG_BITS_MAX_ENUM',
    'VK_PIPELINE_LAYOUT_CREATE_INDEPENDENT_SETS_BIT_EXT',
    'VK_PIPELINE_RASTERIZATION_STATE_CREATE_FRAGMENT_DENSITY_MAP_ATTACHMENT_BIT_EXT',
    'VK_PIPELINE_RASTERIZATION_STATE_CREATE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR',
    'VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_DEVICE_DEFAULT_EXT',
    'VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_DISABLED_EXT',
    'VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_MAX_ENUM_EXT',
    'VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_ROBUST_BUFFER_ACCESS_2_EXT',
    'VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_ROBUST_BUFFER_ACCESS_EXT',
    'VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_DEVICE_DEFAULT_EXT',
    'VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_DISABLED_EXT',
    'VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_MAX_ENUM_EXT',
    'VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_ROBUST_IMAGE_ACCESS_2_EXT',
    'VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_ROBUST_IMAGE_ACCESS_EXT',
    'VK_PIPELINE_SHADER_STAGE_CREATE_ALLOW_VARYING_SUBGROUP_SIZE_BIT',
    'VK_PIPELINE_SHADER_STAGE_CREATE_ALLOW_VARYING_SUBGROUP_SIZE_BIT_EXT',
    'VK_PIPELINE_SHADER_STAGE_CREATE_FLAG_BITS_MAX_ENUM',
    'VK_PIPELINE_SHADER_STAGE_CREATE_REQUIRE_FULL_SUBGROUPS_BIT',
    'VK_PIPELINE_SHADER_STAGE_CREATE_REQUIRE_FULL_SUBGROUPS_BIT_EXT',
    'VK_PIPELINE_STAGE_2_ACCELERATION_STRUCTURE_BUILD_BIT_KHR',
    'VK_PIPELINE_STAGE_2_ACCELERATION_STRUCTURE_BUILD_BIT_NV',
    'VK_PIPELINE_STAGE_2_ACCELERATION_STRUCTURE_COPY_BIT_KHR',
    'VK_PIPELINE_STAGE_2_ALL_COMMANDS_BIT',
    'VK_PIPELINE_STAGE_2_ALL_COMMANDS_BIT_KHR',
    'VK_PIPELINE_STAGE_2_ALL_GRAPHICS_BIT',
    'VK_PIPELINE_STAGE_2_ALL_GRAPHICS_BIT_KHR',
    'VK_PIPELINE_STAGE_2_ALL_TRANSFER_BIT',
    'VK_PIPELINE_STAGE_2_ALL_TRANSFER_BIT_KHR',
    'VK_PIPELINE_STAGE_2_BLIT_BIT',
    'VK_PIPELINE_STAGE_2_BLIT_BIT_KHR',
    'VK_PIPELINE_STAGE_2_BOTTOM_OF_PIPE_BIT',
    'VK_PIPELINE_STAGE_2_BOTTOM_OF_PIPE_BIT_KHR',
    'VK_PIPELINE_STAGE_2_CLEAR_BIT',
    'VK_PIPELINE_STAGE_2_CLEAR_BIT_KHR',
    'VK_PIPELINE_STAGE_2_CLUSTER_CULLING_SHADER_BIT_HUAWEI',
    'VK_PIPELINE_STAGE_2_COLOR_ATTACHMENT_OUTPUT_BIT',
    'VK_PIPELINE_STAGE_2_COLOR_ATTACHMENT_OUTPUT_BIT_KHR',
    'VK_PIPELINE_STAGE_2_COMMAND_PREPROCESS_BIT_NV',
    'VK_PIPELINE_STAGE_2_COMPUTE_SHADER_BIT',
    'VK_PIPELINE_STAGE_2_COMPUTE_SHADER_BIT_KHR',
    'VK_PIPELINE_STAGE_2_CONDITIONAL_RENDERING_BIT_EXT',
    'VK_PIPELINE_STAGE_2_COPY_BIT',
    'VK_PIPELINE_STAGE_2_COPY_BIT_KHR',
    'VK_PIPELINE_STAGE_2_DRAW_INDIRECT_BIT',
    'VK_PIPELINE_STAGE_2_DRAW_INDIRECT_BIT_KHR',
    'VK_PIPELINE_STAGE_2_EARLY_FRAGMENT_TESTS_BIT',
    'VK_PIPELINE_STAGE_2_EARLY_FRAGMENT_TESTS_BIT_KHR',
    'VK_PIPELINE_STAGE_2_FRAGMENT_DENSITY_PROCESS_BIT_EXT',
    'VK_PIPELINE_STAGE_2_FRAGMENT_SHADER_BIT',
    'VK_PIPELINE_STAGE_2_FRAGMENT_SHADER_BIT_KHR',
    'VK_PIPELINE_STAGE_2_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR',
    'VK_PIPELINE_STAGE_2_GEOMETRY_SHADER_BIT',
    'VK_PIPELINE_STAGE_2_GEOMETRY_SHADER_BIT_KHR',
    'VK_PIPELINE_STAGE_2_HOST_BIT',
    'VK_PIPELINE_STAGE_2_HOST_BIT_KHR',
    'VK_PIPELINE_STAGE_2_INDEX_INPUT_BIT',
    'VK_PIPELINE_STAGE_2_INDEX_INPUT_BIT_KHR',
    'VK_PIPELINE_STAGE_2_INVOCATION_MASK_BIT_HUAWEI',
    'VK_PIPELINE_STAGE_2_LATE_FRAGMENT_TESTS_BIT',
    'VK_PIPELINE_STAGE_2_LATE_FRAGMENT_TESTS_BIT_KHR',
    'VK_PIPELINE_STAGE_2_MESH_SHADER_BIT_EXT',
    'VK_PIPELINE_STAGE_2_MESH_SHADER_BIT_NV',
    'VK_PIPELINE_STAGE_2_MICROMAP_BUILD_BIT_EXT',
    'VK_PIPELINE_STAGE_2_NONE', 'VK_PIPELINE_STAGE_2_NONE_KHR',
    'VK_PIPELINE_STAGE_2_OPTICAL_FLOW_BIT_NV',
    'VK_PIPELINE_STAGE_2_PRE_RASTERIZATION_SHADERS_BIT',
    'VK_PIPELINE_STAGE_2_PRE_RASTERIZATION_SHADERS_BIT_KHR',
    'VK_PIPELINE_STAGE_2_RAY_TRACING_SHADER_BIT_KHR',
    'VK_PIPELINE_STAGE_2_RAY_TRACING_SHADER_BIT_NV',
    'VK_PIPELINE_STAGE_2_RESOLVE_BIT',
    'VK_PIPELINE_STAGE_2_RESOLVE_BIT_KHR',
    'VK_PIPELINE_STAGE_2_SHADING_RATE_IMAGE_BIT_NV',
    'VK_PIPELINE_STAGE_2_SUBPASS_SHADER_BIT_HUAWEI',
    'VK_PIPELINE_STAGE_2_SUBPASS_SHADING_BIT_HUAWEI',
    'VK_PIPELINE_STAGE_2_TASK_SHADER_BIT_EXT',
    'VK_PIPELINE_STAGE_2_TASK_SHADER_BIT_NV',
    'VK_PIPELINE_STAGE_2_TESSELLATION_CONTROL_SHADER_BIT',
    'VK_PIPELINE_STAGE_2_TESSELLATION_CONTROL_SHADER_BIT_KHR',
    'VK_PIPELINE_STAGE_2_TESSELLATION_EVALUATION_SHADER_BIT',
    'VK_PIPELINE_STAGE_2_TESSELLATION_EVALUATION_SHADER_BIT_KHR',
    'VK_PIPELINE_STAGE_2_TOP_OF_PIPE_BIT',
    'VK_PIPELINE_STAGE_2_TOP_OF_PIPE_BIT_KHR',
    'VK_PIPELINE_STAGE_2_TRANSFER_BIT',
    'VK_PIPELINE_STAGE_2_TRANSFER_BIT_KHR',
    'VK_PIPELINE_STAGE_2_TRANSFORM_FEEDBACK_BIT_EXT',
    'VK_PIPELINE_STAGE_2_VERTEX_ATTRIBUTE_INPUT_BIT',
    'VK_PIPELINE_STAGE_2_VERTEX_ATTRIBUTE_INPUT_BIT_KHR',
    'VK_PIPELINE_STAGE_2_VERTEX_INPUT_BIT',
    'VK_PIPELINE_STAGE_2_VERTEX_INPUT_BIT_KHR',
    'VK_PIPELINE_STAGE_2_VERTEX_SHADER_BIT',
    'VK_PIPELINE_STAGE_2_VERTEX_SHADER_BIT_KHR',
    'VK_PIPELINE_STAGE_2_VIDEO_DECODE_BIT_KHR',
    'VK_PIPELINE_STAGE_2_VIDEO_ENCODE_BIT_KHR',
    'VK_PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_KHR',
    'VK_PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_NV',
    'VK_PIPELINE_STAGE_ALL_COMMANDS_BIT',
    'VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT',
    'VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT',
    'VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT',
    'VK_PIPELINE_STAGE_COMMAND_PREPROCESS_BIT_NV',
    'VK_PIPELINE_STAGE_COMPUTE_SHADER_BIT',
    'VK_PIPELINE_STAGE_CONDITIONAL_RENDERING_BIT_EXT',
    'VK_PIPELINE_STAGE_DRAW_INDIRECT_BIT',
    'VK_PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT',
    'VK_PIPELINE_STAGE_FLAG_BITS_MAX_ENUM',
    'VK_PIPELINE_STAGE_FRAGMENT_DENSITY_PROCESS_BIT_EXT',
    'VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT',
    'VK_PIPELINE_STAGE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR',
    'VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT',
    'VK_PIPELINE_STAGE_HOST_BIT',
    'VK_PIPELINE_STAGE_LATE_FRAGMENT_TESTS_BIT',
    'VK_PIPELINE_STAGE_MESH_SHADER_BIT_EXT',
    'VK_PIPELINE_STAGE_MESH_SHADER_BIT_NV', 'VK_PIPELINE_STAGE_NONE',
    'VK_PIPELINE_STAGE_NONE_KHR',
    'VK_PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_KHR',
    'VK_PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_NV',
    'VK_PIPELINE_STAGE_SHADING_RATE_IMAGE_BIT_NV',
    'VK_PIPELINE_STAGE_TASK_SHADER_BIT_EXT',
    'VK_PIPELINE_STAGE_TASK_SHADER_BIT_NV',
    'VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT',
    'VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT',
    'VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT',
    'VK_PIPELINE_STAGE_TRANSFER_BIT',
    'VK_PIPELINE_STAGE_TRANSFORM_FEEDBACK_BIT_EXT',
    'VK_PIPELINE_STAGE_VERTEX_INPUT_BIT',
    'VK_PIPELINE_STAGE_VERTEX_SHADER_BIT', 'VK_PLATFORM_H_',
    'VK_POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES',
    'VK_POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES_KHR',
    'VK_POINT_CLIPPING_BEHAVIOR_MAX_ENUM',
    'VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY',
    'VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY_KHR',
    'VK_POLYGON_MODE_FILL', 'VK_POLYGON_MODE_FILL_RECTANGLE_NV',
    'VK_POLYGON_MODE_LINE', 'VK_POLYGON_MODE_MAX_ENUM',
    'VK_POLYGON_MODE_POINT', 'VK_PRESENT_GRAVITY_CENTERED_BIT_EXT',
    'VK_PRESENT_GRAVITY_FLAG_BITS_MAX_ENUM_EXT',
    'VK_PRESENT_GRAVITY_MAX_BIT_EXT',
    'VK_PRESENT_GRAVITY_MIN_BIT_EXT', 'VK_PRESENT_MODE_FIFO_KHR',
    'VK_PRESENT_MODE_FIFO_RELAXED_KHR',
    'VK_PRESENT_MODE_IMMEDIATE_KHR', 'VK_PRESENT_MODE_MAILBOX_KHR',
    'VK_PRESENT_MODE_MAX_ENUM_KHR',
    'VK_PRESENT_MODE_SHARED_CONTINUOUS_REFRESH_KHR',
    'VK_PRESENT_MODE_SHARED_DEMAND_REFRESH_KHR',
    'VK_PRESENT_SCALING_ASPECT_RATIO_STRETCH_BIT_EXT',
    'VK_PRESENT_SCALING_FLAG_BITS_MAX_ENUM_EXT',
    'VK_PRESENT_SCALING_ONE_TO_ONE_BIT_EXT',
    'VK_PRESENT_SCALING_STRETCH_BIT_EXT',
    'VK_PRIMITIVE_TOPOLOGY_LINE_LIST',
    'VK_PRIMITIVE_TOPOLOGY_LINE_LIST_WITH_ADJACENCY',
    'VK_PRIMITIVE_TOPOLOGY_LINE_STRIP',
    'VK_PRIMITIVE_TOPOLOGY_LINE_STRIP_WITH_ADJACENCY',
    'VK_PRIMITIVE_TOPOLOGY_MAX_ENUM',
    'VK_PRIMITIVE_TOPOLOGY_PATCH_LIST',
    'VK_PRIMITIVE_TOPOLOGY_POINT_LIST',
    'VK_PRIMITIVE_TOPOLOGY_TRIANGLE_FAN',
    'VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST',
    'VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST_WITH_ADJACENCY',
    'VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP',
    'VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP_WITH_ADJACENCY',
    'VK_PROVOKING_VERTEX_MODE_FIRST_VERTEX_EXT',
    'VK_PROVOKING_VERTEX_MODE_LAST_VERTEX_EXT',
    'VK_PROVOKING_VERTEX_MODE_MAX_ENUM_EXT',
    'VK_QCOM_FILTER_CUBIC_CLAMP_EXTENSION_NAME',
    'VK_QCOM_FILTER_CUBIC_CLAMP_SPEC_VERSION',
    'VK_QCOM_FILTER_CUBIC_WEIGHTS_EXTENSION_NAME',
    'VK_QCOM_FILTER_CUBIC_WEIGHTS_SPEC_VERSION',
    'VK_QCOM_FRAGMENT_DENSITY_MAP_OFFSET_EXTENSION_NAME',
    'VK_QCOM_FRAGMENT_DENSITY_MAP_OFFSET_SPEC_VERSION',
    'VK_QCOM_IMAGE_PROCESSING_2_EXTENSION_NAME',
    'VK_QCOM_IMAGE_PROCESSING_2_SPEC_VERSION',
    'VK_QCOM_IMAGE_PROCESSING_EXTENSION_NAME',
    'VK_QCOM_IMAGE_PROCESSING_SPEC_VERSION',
    'VK_QCOM_MULTIVIEW_PER_VIEW_RENDER_AREAS_EXTENSION_NAME',
    'VK_QCOM_MULTIVIEW_PER_VIEW_RENDER_AREAS_SPEC_VERSION',
    'VK_QCOM_MULTIVIEW_PER_VIEW_VIEWPORTS_EXTENSION_NAME',
    'VK_QCOM_MULTIVIEW_PER_VIEW_VIEWPORTS_SPEC_VERSION',
    'VK_QCOM_RENDER_PASS_SHADER_RESOLVE_EXTENSION_NAME',
    'VK_QCOM_RENDER_PASS_SHADER_RESOLVE_SPEC_VERSION',
    'VK_QCOM_RENDER_PASS_STORE_OPS_EXTENSION_NAME',
    'VK_QCOM_RENDER_PASS_STORE_OPS_SPEC_VERSION',
    'VK_QCOM_RENDER_PASS_TRANSFORM_EXTENSION_NAME',
    'VK_QCOM_RENDER_PASS_TRANSFORM_SPEC_VERSION',
    'VK_QCOM_ROTATED_COPY_COMMANDS_EXTENSION_NAME',
    'VK_QCOM_ROTATED_COPY_COMMANDS_SPEC_VERSION',
    'VK_QCOM_TILE_PROPERTIES_EXTENSION_NAME',
    'VK_QCOM_TILE_PROPERTIES_SPEC_VERSION',
    'VK_QCOM_YCBCR_DEGAMMA_EXTENSION_NAME',
    'VK_QCOM_YCBCR_DEGAMMA_SPEC_VERSION',
    'VK_QCOM_filter_cubic_clamp', 'VK_QCOM_filter_cubic_weights',
    'VK_QCOM_fragment_density_map_offset', 'VK_QCOM_image_processing',
    'VK_QCOM_image_processing2',
    'VK_QCOM_multiview_per_view_render_areas',
    'VK_QCOM_multiview_per_view_viewports',
    'VK_QCOM_render_pass_shader_resolve',
    'VK_QCOM_render_pass_store_ops', 'VK_QCOM_render_pass_transform',
    'VK_QCOM_rotated_copy_commands', 'VK_QCOM_tile_properties',
    'VK_QCOM_ycbcr_degamma', 'VK_QUERY_CONTROL_FLAG_BITS_MAX_ENUM',
    'VK_QUERY_CONTROL_PRECISE_BIT',
    'VK_QUERY_PIPELINE_STATISTIC_CLIPPING_INVOCATIONS_BIT',
    'VK_QUERY_PIPELINE_STATISTIC_CLIPPING_PRIMITIVES_BIT',
    'VK_QUERY_PIPELINE_STATISTIC_CLUSTER_CULLING_SHADER_INVOCATIONS_BIT_HUAWEI',
    'VK_QUERY_PIPELINE_STATISTIC_COMPUTE_SHADER_INVOCATIONS_BIT',
    'VK_QUERY_PIPELINE_STATISTIC_FLAG_BITS_MAX_ENUM',
    'VK_QUERY_PIPELINE_STATISTIC_FRAGMENT_SHADER_INVOCATIONS_BIT',
    'VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_INVOCATIONS_BIT',
    'VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_PRIMITIVES_BIT',
    'VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_PRIMITIVES_BIT',
    'VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_VERTICES_BIT',
    'VK_QUERY_PIPELINE_STATISTIC_MESH_SHADER_INVOCATIONS_BIT_EXT',
    'VK_QUERY_PIPELINE_STATISTIC_TASK_SHADER_INVOCATIONS_BIT_EXT',
    'VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_CONTROL_SHADER_PATCHES_BIT',
    'VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_EVALUATION_SHADER_INVOCATIONS_BIT',
    'VK_QUERY_PIPELINE_STATISTIC_VERTEX_SHADER_INVOCATIONS_BIT',
    'VK_QUERY_POOL_SAMPLING_MODE_MANUAL_INTEL',
    'VK_QUERY_POOL_SAMPLING_MODE_MAX_ENUM_INTEL',
    'VK_QUERY_RESULT_64_BIT', 'VK_QUERY_RESULT_FLAG_BITS_MAX_ENUM',
    'VK_QUERY_RESULT_PARTIAL_BIT',
    'VK_QUERY_RESULT_STATUS_COMPLETE_KHR',
    'VK_QUERY_RESULT_STATUS_ERROR_KHR',
    'VK_QUERY_RESULT_STATUS_INSUFFICIENT_BITSTREAM_BUFFER_RANGE_KHR',
    'VK_QUERY_RESULT_STATUS_MAX_ENUM_KHR',
    'VK_QUERY_RESULT_STATUS_NOT_READY_KHR',
    'VK_QUERY_RESULT_WAIT_BIT',
    'VK_QUERY_RESULT_WITH_AVAILABILITY_BIT',
    'VK_QUERY_RESULT_WITH_STATUS_BIT_KHR',
    'VK_QUERY_SCOPE_COMMAND_BUFFER_KHR', 'VK_QUERY_SCOPE_COMMAND_KHR',
    'VK_QUERY_SCOPE_RENDER_PASS_KHR',
    'VK_QUERY_TYPE_ACCELERATION_STRUCTURE_COMPACTED_SIZE_KHR',
    'VK_QUERY_TYPE_ACCELERATION_STRUCTURE_COMPACTED_SIZE_NV',
    'VK_QUERY_TYPE_ACCELERATION_STRUCTURE_SERIALIZATION_BOTTOM_LEVEL_POINTERS_KHR',
    'VK_QUERY_TYPE_ACCELERATION_STRUCTURE_SERIALIZATION_SIZE_KHR',
    'VK_QUERY_TYPE_ACCELERATION_STRUCTURE_SIZE_KHR',
    'VK_QUERY_TYPE_MAX_ENUM',
    'VK_QUERY_TYPE_MESH_PRIMITIVES_GENERATED_EXT',
    'VK_QUERY_TYPE_MICROMAP_COMPACTED_SIZE_EXT',
    'VK_QUERY_TYPE_MICROMAP_SERIALIZATION_SIZE_EXT',
    'VK_QUERY_TYPE_OCCLUSION',
    'VK_QUERY_TYPE_PERFORMANCE_QUERY_INTEL',
    'VK_QUERY_TYPE_PERFORMANCE_QUERY_KHR',
    'VK_QUERY_TYPE_PIPELINE_STATISTICS',
    'VK_QUERY_TYPE_PRIMITIVES_GENERATED_EXT',
    'VK_QUERY_TYPE_RESULT_STATUS_ONLY_KHR', 'VK_QUERY_TYPE_TIMESTAMP',
    'VK_QUERY_TYPE_TRANSFORM_FEEDBACK_STREAM_EXT',
    'VK_QUERY_TYPE_VIDEO_ENCODE_FEEDBACK_KHR', 'VK_QUEUE_COMPUTE_BIT',
    'VK_QUEUE_FAMILY_EXTERNAL', 'VK_QUEUE_FAMILY_EXTERNAL_KHR',
    'VK_QUEUE_FAMILY_FOREIGN_EXT', 'VK_QUEUE_FAMILY_IGNORED',
    'VK_QUEUE_FLAG_BITS_MAX_ENUM',
    'VK_QUEUE_GLOBAL_PRIORITY_HIGH_EXT',
    'VK_QUEUE_GLOBAL_PRIORITY_HIGH_KHR',
    'VK_QUEUE_GLOBAL_PRIORITY_LOW_EXT',
    'VK_QUEUE_GLOBAL_PRIORITY_LOW_KHR',
    'VK_QUEUE_GLOBAL_PRIORITY_MAX_ENUM_KHR',
    'VK_QUEUE_GLOBAL_PRIORITY_MEDIUM_EXT',
    'VK_QUEUE_GLOBAL_PRIORITY_MEDIUM_KHR',
    'VK_QUEUE_GLOBAL_PRIORITY_REALTIME_EXT',
    'VK_QUEUE_GLOBAL_PRIORITY_REALTIME_KHR', 'VK_QUEUE_GRAPHICS_BIT',
    'VK_QUEUE_OPTICAL_FLOW_BIT_NV', 'VK_QUEUE_PROTECTED_BIT',
    'VK_QUEUE_SPARSE_BINDING_BIT', 'VK_QUEUE_TRANSFER_BIT',
    'VK_QUEUE_VIDEO_DECODE_BIT_KHR', 'VK_QUEUE_VIDEO_ENCODE_BIT_KHR',
    'VK_RASTERIZATION_ORDER_MAX_ENUM_AMD',
    'VK_RASTERIZATION_ORDER_RELAXED_AMD',
    'VK_RASTERIZATION_ORDER_STRICT_AMD',
    'VK_RAY_TRACING_INVOCATION_REORDER_MODE_MAX_ENUM_NV',
    'VK_RAY_TRACING_INVOCATION_REORDER_MODE_NONE_NV',
    'VK_RAY_TRACING_INVOCATION_REORDER_MODE_REORDER_NV',
    'VK_RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_KHR',
    'VK_RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_NV',
    'VK_RAY_TRACING_SHADER_GROUP_TYPE_MAX_ENUM_KHR',
    'VK_RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_KHR',
    'VK_RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_NV',
    'VK_RAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_KHR',
    'VK_RAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_NV',
    'VK_REMAINING_3D_SLICES_EXT', 'VK_REMAINING_ARRAY_LAYERS',
    'VK_REMAINING_MIP_LEVELS', 'VK_RENDERING_CONTENTS_INLINE_BIT_EXT',
    'VK_RENDERING_CONTENTS_SECONDARY_COMMAND_BUFFERS_BIT',
    'VK_RENDERING_CONTENTS_SECONDARY_COMMAND_BUFFERS_BIT_KHR',
    'VK_RENDERING_ENABLE_LEGACY_DITHERING_BIT_EXT',
    'VK_RENDERING_FLAG_BITS_MAX_ENUM', 'VK_RENDERING_RESUMING_BIT',
    'VK_RENDERING_RESUMING_BIT_KHR', 'VK_RENDERING_SUSPENDING_BIT',
    'VK_RENDERING_SUSPENDING_BIT_KHR',
    'VK_RENDER_PASS_CREATE_FLAG_BITS_MAX_ENUM',
    'VK_RENDER_PASS_CREATE_TRANSFORM_BIT_QCOM',
    'VK_RESOLVE_MODE_AVERAGE_BIT', 'VK_RESOLVE_MODE_AVERAGE_BIT_KHR',
    'VK_RESOLVE_MODE_EXTERNAL_FORMAT_DOWNSAMPLE_ANDROID',
    'VK_RESOLVE_MODE_FLAG_BITS_MAX_ENUM', 'VK_RESOLVE_MODE_MAX_BIT',
    'VK_RESOLVE_MODE_MAX_BIT_KHR', 'VK_RESOLVE_MODE_MIN_BIT',
    'VK_RESOLVE_MODE_MIN_BIT_KHR', 'VK_RESOLVE_MODE_NONE',
    'VK_RESOLVE_MODE_NONE_KHR', 'VK_RESOLVE_MODE_SAMPLE_ZERO_BIT',
    'VK_RESOLVE_MODE_SAMPLE_ZERO_BIT_KHR', 'VK_RESULT_MAX_ENUM',
    'VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER',
    'VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE',
    'VK_SAMPLER_ADDRESS_MODE_MAX_ENUM',
    'VK_SAMPLER_ADDRESS_MODE_MIRRORED_REPEAT',
    'VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE',
    'VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE_KHR',
    'VK_SAMPLER_ADDRESS_MODE_REPEAT',
    'VK_SAMPLER_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT',
    'VK_SAMPLER_CREATE_FLAG_BITS_MAX_ENUM',
    'VK_SAMPLER_CREATE_IMAGE_PROCESSING_BIT_QCOM',
    'VK_SAMPLER_CREATE_NON_SEAMLESS_CUBE_MAP_BIT_EXT',
    'VK_SAMPLER_CREATE_SUBSAMPLED_BIT_EXT',
    'VK_SAMPLER_CREATE_SUBSAMPLED_COARSE_RECONSTRUCTION_BIT_EXT',
    'VK_SAMPLER_MIPMAP_MODE_LINEAR',
    'VK_SAMPLER_MIPMAP_MODE_MAX_ENUM',
    'VK_SAMPLER_MIPMAP_MODE_NEAREST', 'VK_SAMPLER_REDUCTION_MODE_MAX',
    'VK_SAMPLER_REDUCTION_MODE_MAX_ENUM',
    'VK_SAMPLER_REDUCTION_MODE_MAX_EXT',
    'VK_SAMPLER_REDUCTION_MODE_MIN',
    'VK_SAMPLER_REDUCTION_MODE_MIN_EXT',
    'VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE',
    'VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE_EXT',
    'VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE_RANGECLAMP_QCOM',
    'VK_SAMPLER_YCBCR_MODEL_CONVERSION_MAX_ENUM',
    'VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY',
    'VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY_KHR',
    'VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020',
    'VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020_KHR',
    'VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601',
    'VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601_KHR',
    'VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709',
    'VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709_KHR',
    'VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY',
    'VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY_KHR',
    'VK_SAMPLER_YCBCR_RANGE_ITU_FULL',
    'VK_SAMPLER_YCBCR_RANGE_ITU_FULL_KHR',
    'VK_SAMPLER_YCBCR_RANGE_ITU_NARROW',
    'VK_SAMPLER_YCBCR_RANGE_ITU_NARROW_KHR',
    'VK_SAMPLER_YCBCR_RANGE_MAX_ENUM', 'VK_SAMPLE_COUNT_16_BIT',
    'VK_SAMPLE_COUNT_1_BIT', 'VK_SAMPLE_COUNT_2_BIT',
    'VK_SAMPLE_COUNT_32_BIT', 'VK_SAMPLE_COUNT_4_BIT',
    'VK_SAMPLE_COUNT_64_BIT', 'VK_SAMPLE_COUNT_8_BIT',
    'VK_SAMPLE_COUNT_FLAG_BITS_MAX_ENUM', 'VK_SCOPE_DEVICE_KHR',
    'VK_SCOPE_DEVICE_NV', 'VK_SCOPE_MAX_ENUM_KHR',
    'VK_SCOPE_QUEUE_FAMILY_KHR', 'VK_SCOPE_QUEUE_FAMILY_NV',
    'VK_SCOPE_SUBGROUP_KHR', 'VK_SCOPE_SUBGROUP_NV',
    'VK_SCOPE_WORKGROUP_KHR', 'VK_SCOPE_WORKGROUP_NV',
    'VK_SEC_AMIGO_PROFILING_EXTENSION_NAME',
    'VK_SEC_AMIGO_PROFILING_SPEC_VERSION', 'VK_SEC_amigo_profiling',
    'VK_SEMAPHORE_IMPORT_FLAG_BITS_MAX_ENUM',
    'VK_SEMAPHORE_IMPORT_TEMPORARY_BIT',
    'VK_SEMAPHORE_IMPORT_TEMPORARY_BIT_KHR',
    'VK_SEMAPHORE_TYPE_BINARY', 'VK_SEMAPHORE_TYPE_BINARY_KHR',
    'VK_SEMAPHORE_TYPE_MAX_ENUM', 'VK_SEMAPHORE_TYPE_TIMELINE',
    'VK_SEMAPHORE_TYPE_TIMELINE_KHR', 'VK_SEMAPHORE_WAIT_ANY_BIT',
    'VK_SEMAPHORE_WAIT_ANY_BIT_KHR',
    'VK_SEMAPHORE_WAIT_FLAG_BITS_MAX_ENUM',
    'VK_SHADER_CODE_TYPE_BINARY_EXT',
    'VK_SHADER_CODE_TYPE_MAX_ENUM_EXT',
    'VK_SHADER_CODE_TYPE_SPIRV_EXT',
    'VK_SHADER_CORE_PROPERTIES_FLAG_BITS_MAX_ENUM_AMD',
    'VK_SHADER_CREATE_ALLOW_VARYING_SUBGROUP_SIZE_BIT_EXT',
    'VK_SHADER_CREATE_DISPATCH_BASE_BIT_EXT',
    'VK_SHADER_CREATE_FLAG_BITS_MAX_ENUM_EXT',
    'VK_SHADER_CREATE_FRAGMENT_DENSITY_MAP_ATTACHMENT_BIT_EXT',
    'VK_SHADER_CREATE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_EXT',
    'VK_SHADER_CREATE_LINK_STAGE_BIT_EXT',
    'VK_SHADER_CREATE_NO_TASK_SHADER_BIT_EXT',
    'VK_SHADER_CREATE_REQUIRE_FULL_SUBGROUPS_BIT_EXT',
    'VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_32_BIT_ONLY',
    'VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_32_BIT_ONLY_KHR',
    'VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_ALL',
    'VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_ALL_KHR',
    'VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_MAX_ENUM',
    'VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_NONE',
    'VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_NONE_KHR',
    'VK_SHADER_GROUP_SHADER_ANY_HIT_KHR',
    'VK_SHADER_GROUP_SHADER_CLOSEST_HIT_KHR',
    'VK_SHADER_GROUP_SHADER_GENERAL_KHR',
    'VK_SHADER_GROUP_SHADER_INTERSECTION_KHR',
    'VK_SHADER_GROUP_SHADER_MAX_ENUM_KHR',
    'VK_SHADER_INFO_TYPE_BINARY_AMD',
    'VK_SHADER_INFO_TYPE_DISASSEMBLY_AMD',
    'VK_SHADER_INFO_TYPE_MAX_ENUM_AMD',
    'VK_SHADER_INFO_TYPE_STATISTICS_AMD', 'VK_SHADER_STAGE_ALL',
    'VK_SHADER_STAGE_ALL_GRAPHICS', 'VK_SHADER_STAGE_ANY_HIT_BIT_KHR',
    'VK_SHADER_STAGE_ANY_HIT_BIT_NV',
    'VK_SHADER_STAGE_CALLABLE_BIT_KHR',
    'VK_SHADER_STAGE_CALLABLE_BIT_NV',
    'VK_SHADER_STAGE_CLOSEST_HIT_BIT_KHR',
    'VK_SHADER_STAGE_CLOSEST_HIT_BIT_NV',
    'VK_SHADER_STAGE_CLUSTER_CULLING_BIT_HUAWEI',
    'VK_SHADER_STAGE_COMPUTE_BIT',
    'VK_SHADER_STAGE_FLAG_BITS_MAX_ENUM',
    'VK_SHADER_STAGE_FRAGMENT_BIT', 'VK_SHADER_STAGE_GEOMETRY_BIT',
    'VK_SHADER_STAGE_INTERSECTION_BIT_KHR',
    'VK_SHADER_STAGE_INTERSECTION_BIT_NV',
    'VK_SHADER_STAGE_MESH_BIT_EXT', 'VK_SHADER_STAGE_MESH_BIT_NV',
    'VK_SHADER_STAGE_MISS_BIT_KHR', 'VK_SHADER_STAGE_MISS_BIT_NV',
    'VK_SHADER_STAGE_RAYGEN_BIT_KHR', 'VK_SHADER_STAGE_RAYGEN_BIT_NV',
    'VK_SHADER_STAGE_SUBPASS_SHADING_BIT_HUAWEI',
    'VK_SHADER_STAGE_TASK_BIT_EXT', 'VK_SHADER_STAGE_TASK_BIT_NV',
    'VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT',
    'VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT',
    'VK_SHADER_STAGE_VERTEX_BIT', 'VK_SHADER_UNUSED_KHR',
    'VK_SHADER_UNUSED_NV',
    'VK_SHADING_RATE_PALETTE_ENTRY_16_INVOCATIONS_PER_PIXEL_NV',
    'VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_1X2_PIXELS_NV',
    'VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X1_PIXELS_NV',
    'VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X2_PIXELS_NV',
    'VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X4_PIXELS_NV',
    'VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X2_PIXELS_NV',
    'VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X4_PIXELS_NV',
    'VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_PIXEL_NV',
    'VK_SHADING_RATE_PALETTE_ENTRY_2_INVOCATIONS_PER_PIXEL_NV',
    'VK_SHADING_RATE_PALETTE_ENTRY_4_INVOCATIONS_PER_PIXEL_NV',
    'VK_SHADING_RATE_PALETTE_ENTRY_8_INVOCATIONS_PER_PIXEL_NV',
    'VK_SHADING_RATE_PALETTE_ENTRY_MAX_ENUM_NV',
    'VK_SHADING_RATE_PALETTE_ENTRY_NO_INVOCATIONS_NV',
    'VK_SHARING_MODE_CONCURRENT', 'VK_SHARING_MODE_EXCLUSIVE',
    'VK_SHARING_MODE_MAX_ENUM',
    'VK_SPARSE_IMAGE_FORMAT_ALIGNED_MIP_SIZE_BIT',
    'VK_SPARSE_IMAGE_FORMAT_FLAG_BITS_MAX_ENUM',
    'VK_SPARSE_IMAGE_FORMAT_NONSTANDARD_BLOCK_SIZE_BIT',
    'VK_SPARSE_IMAGE_FORMAT_SINGLE_MIPTAIL_BIT',
    'VK_SPARSE_MEMORY_BIND_FLAG_BITS_MAX_ENUM',
    'VK_SPARSE_MEMORY_BIND_METADATA_BIT', 'VK_STENCIL_FACE_BACK_BIT',
    'VK_STENCIL_FACE_FLAG_BITS_MAX_ENUM',
    'VK_STENCIL_FACE_FRONT_AND_BACK', 'VK_STENCIL_FACE_FRONT_BIT',
    'VK_STENCIL_FRONT_AND_BACK', 'VK_STENCIL_OP_DECREMENT_AND_CLAMP',
    'VK_STENCIL_OP_DECREMENT_AND_WRAP',
    'VK_STENCIL_OP_INCREMENT_AND_CLAMP',
    'VK_STENCIL_OP_INCREMENT_AND_WRAP', 'VK_STENCIL_OP_INVERT',
    'VK_STENCIL_OP_KEEP', 'VK_STENCIL_OP_MAX_ENUM',
    'VK_STENCIL_OP_REPLACE', 'VK_STENCIL_OP_ZERO',
    'VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_GEOMETRY_INFO_KHR',
    'VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_SIZES_INFO_KHR',
    'VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CAPTURE_DESCRIPTOR_DATA_INFO_EXT',
    'VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_KHR',
    'VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_NV',
    'VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_DEVICE_ADDRESS_INFO_KHR',
    'VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_AABBS_DATA_KHR',
    'VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_INSTANCES_DATA_KHR',
    'VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_KHR',
    'VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_MOTION_TRIANGLES_DATA_NV',
    'VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_TRIANGLES_DATA_KHR',
    'VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_INFO_NV',
    'VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_INFO_NV',
    'VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MOTION_INFO_NV',
    'VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_TRIANGLES_OPACITY_MICROMAP_EXT',
    'VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_VERSION_INFO_KHR',
    'VK_STRUCTURE_TYPE_ACQUIRE_NEXT_IMAGE_INFO_KHR',
    'VK_STRUCTURE_TYPE_ACQUIRE_PROFILING_LOCK_INFO_KHR',
    'VK_STRUCTURE_TYPE_AMIGO_PROFILING_SUBMIT_INFO_SEC',
    'VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_FORMAT_PROPERTIES_2_ANDROID',
    'VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_FORMAT_PROPERTIES_ANDROID',
    'VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_FORMAT_RESOLVE_PROPERTIES_ANDROID',
    'VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_PROPERTIES_ANDROID',
    'VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_USAGE_ANDROID',
    'VK_STRUCTURE_TYPE_ANDROID_SURFACE_CREATE_INFO_KHR',
    'VK_STRUCTURE_TYPE_APPLICATION_INFO',
    'VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2',
    'VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2_KHR',
    'VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT',
    'VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT_KHR',
    'VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2',
    'VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2_KHR',
    'VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT',
    'VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT_KHR',
    'VK_STRUCTURE_TYPE_ATTACHMENT_SAMPLE_COUNT_INFO_AMD',
    'VK_STRUCTURE_TYPE_ATTACHMENT_SAMPLE_COUNT_INFO_NV',
    'VK_STRUCTURE_TYPE_BIND_ACCELERATION_STRUCTURE_MEMORY_INFO_NV',
    'VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO',
    'VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO_KHR',
    'VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO',
    'VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO_KHR',
    'VK_STRUCTURE_TYPE_BIND_DESCRIPTOR_BUFFER_EMBEDDED_SAMPLERS_INFO_EXT',
    'VK_STRUCTURE_TYPE_BIND_DESCRIPTOR_SETS_INFO_KHR',
    'VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO',
    'VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO_KHR',
    'VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO',
    'VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO_KHR',
    'VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_SWAPCHAIN_INFO_KHR',
    'VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO',
    'VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO_KHR',
    'VK_STRUCTURE_TYPE_BIND_MEMORY_STATUS_KHR',
    'VK_STRUCTURE_TYPE_BIND_SPARSE_INFO',
    'VK_STRUCTURE_TYPE_BIND_VIDEO_SESSION_MEMORY_INFO_KHR',
    'VK_STRUCTURE_TYPE_BLIT_IMAGE_CUBIC_WEIGHTS_INFO_QCOM',
    'VK_STRUCTURE_TYPE_BLIT_IMAGE_INFO_2',
    'VK_STRUCTURE_TYPE_BLIT_IMAGE_INFO_2_KHR',
    'VK_STRUCTURE_TYPE_BUFFER_CAPTURE_DESCRIPTOR_DATA_INFO_EXT',
    'VK_STRUCTURE_TYPE_BUFFER_COLLECTION_BUFFER_CREATE_INFO_FUCHSIA',
    'VK_STRUCTURE_TYPE_BUFFER_COLLECTION_CONSTRAINTS_INFO_FUCHSIA',
    'VK_STRUCTURE_TYPE_BUFFER_COLLECTION_CREATE_INFO_FUCHSIA',
    'VK_STRUCTURE_TYPE_BUFFER_COLLECTION_IMAGE_CREATE_INFO_FUCHSIA',
    'VK_STRUCTURE_TYPE_BUFFER_COLLECTION_PROPERTIES_FUCHSIA',
    'VK_STRUCTURE_TYPE_BUFFER_CONSTRAINTS_INFO_FUCHSIA',
    'VK_STRUCTURE_TYPE_BUFFER_COPY_2',
    'VK_STRUCTURE_TYPE_BUFFER_COPY_2_KHR',
    'VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO',
    'VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_CREATE_INFO_EXT',
    'VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO',
    'VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO_EXT',
    'VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO_KHR',
    'VK_STRUCTURE_TYPE_BUFFER_IMAGE_COPY_2',
    'VK_STRUCTURE_TYPE_BUFFER_IMAGE_COPY_2_KHR',
    'VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER',
    'VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER_2',
    'VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER_2_KHR',
    'VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2',
    'VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2_KHR',
    'VK_STRUCTURE_TYPE_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO',
    'VK_STRUCTURE_TYPE_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO_KHR',
    'VK_STRUCTURE_TYPE_BUFFER_USAGE_FLAGS_2_CREATE_INFO_KHR',
    'VK_STRUCTURE_TYPE_BUFFER_VIEW_CREATE_INFO',
    'VK_STRUCTURE_TYPE_CALIBRATED_TIMESTAMP_INFO_EXT',
    'VK_STRUCTURE_TYPE_CALIBRATED_TIMESTAMP_INFO_KHR',
    'VK_STRUCTURE_TYPE_CHECKPOINT_DATA_2_NV',
    'VK_STRUCTURE_TYPE_CHECKPOINT_DATA_NV',
    'VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO',
    'VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO',
    'VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_CONDITIONAL_RENDERING_INFO_EXT',
    'VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_INFO',
    'VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDERING_INFO',
    'VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDERING_INFO_KHR',
    'VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDER_PASS_TRANSFORM_INFO_QCOM',
    'VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_VIEWPORT_SCISSOR_INFO_NV',
    'VK_STRUCTURE_TYPE_COMMAND_BUFFER_SUBMIT_INFO',
    'VK_STRUCTURE_TYPE_COMMAND_BUFFER_SUBMIT_INFO_KHR',
    'VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO',
    'VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO',
    'VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_INDIRECT_BUFFER_INFO_NV',
    'VK_STRUCTURE_TYPE_CONDITIONAL_RENDERING_BEGIN_INFO_EXT',
    'VK_STRUCTURE_TYPE_COOPERATIVE_MATRIX_PROPERTIES_KHR',
    'VK_STRUCTURE_TYPE_COOPERATIVE_MATRIX_PROPERTIES_NV',
    'VK_STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_INFO_KHR',
    'VK_STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_TO_MEMORY_INFO_KHR',
    'VK_STRUCTURE_TYPE_COPY_BUFFER_INFO_2',
    'VK_STRUCTURE_TYPE_COPY_BUFFER_INFO_2_KHR',
    'VK_STRUCTURE_TYPE_COPY_BUFFER_TO_IMAGE_INFO_2',
    'VK_STRUCTURE_TYPE_COPY_BUFFER_TO_IMAGE_INFO_2_KHR',
    'VK_STRUCTURE_TYPE_COPY_COMMAND_TRANSFORM_INFO_QCOM',
    'VK_STRUCTURE_TYPE_COPY_DESCRIPTOR_SET',
    'VK_STRUCTURE_TYPE_COPY_IMAGE_INFO_2',
    'VK_STRUCTURE_TYPE_COPY_IMAGE_INFO_2_KHR',
    'VK_STRUCTURE_TYPE_COPY_IMAGE_TO_BUFFER_INFO_2',
    'VK_STRUCTURE_TYPE_COPY_IMAGE_TO_BUFFER_INFO_2_KHR',
    'VK_STRUCTURE_TYPE_COPY_IMAGE_TO_IMAGE_INFO_EXT',
    'VK_STRUCTURE_TYPE_COPY_IMAGE_TO_MEMORY_INFO_EXT',
    'VK_STRUCTURE_TYPE_COPY_MEMORY_TO_ACCELERATION_STRUCTURE_INFO_KHR',
    'VK_STRUCTURE_TYPE_COPY_MEMORY_TO_IMAGE_INFO_EXT',
    'VK_STRUCTURE_TYPE_COPY_MEMORY_TO_MICROMAP_INFO_EXT',
    'VK_STRUCTURE_TYPE_COPY_MICROMAP_INFO_EXT',
    'VK_STRUCTURE_TYPE_COPY_MICROMAP_TO_MEMORY_INFO_EXT',
    'VK_STRUCTURE_TYPE_CUDA_FUNCTION_CREATE_INFO_NV',
    'VK_STRUCTURE_TYPE_CUDA_LAUNCH_INFO_NV',
    'VK_STRUCTURE_TYPE_CUDA_MODULE_CREATE_INFO_NV',
    'VK_STRUCTURE_TYPE_CU_FUNCTION_CREATE_INFO_NVX',
    'VK_STRUCTURE_TYPE_CU_LAUNCH_INFO_NVX',
    'VK_STRUCTURE_TYPE_CU_MODULE_CREATE_INFO_NVX',
    'VK_STRUCTURE_TYPE_D3D12_FENCE_SUBMIT_INFO_KHR',
    'VK_STRUCTURE_TYPE_DEBUG_MARKER_MARKER_INFO_EXT',
    'VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_NAME_INFO_EXT',
    'VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_TAG_INFO_EXT',
    'VK_STRUCTURE_TYPE_DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT',
    'VK_STRUCTURE_TYPE_DEBUG_REPORT_CREATE_INFO_EXT',
    'VK_STRUCTURE_TYPE_DEBUG_UTILS_LABEL_EXT',
    'VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CALLBACK_DATA_EXT',
    'VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT',
    'VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT',
    'VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_TAG_INFO_EXT',
    'VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_BUFFER_CREATE_INFO_NV',
    'VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_IMAGE_CREATE_INFO_NV',
    'VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_MEMORY_ALLOCATE_INFO_NV',
    'VK_STRUCTURE_TYPE_DEPENDENCY_INFO',
    'VK_STRUCTURE_TYPE_DEPENDENCY_INFO_KHR',
    'VK_STRUCTURE_TYPE_DEPTH_BIAS_INFO_EXT',
    'VK_STRUCTURE_TYPE_DEPTH_BIAS_REPRESENTATION_INFO_EXT',
    'VK_STRUCTURE_TYPE_DESCRIPTOR_ADDRESS_INFO_EXT',
    'VK_STRUCTURE_TYPE_DESCRIPTOR_BUFFER_BINDING_INFO_EXT',
    'VK_STRUCTURE_TYPE_DESCRIPTOR_BUFFER_BINDING_PUSH_DESCRIPTOR_BUFFER_HANDLE_EXT',
    'VK_STRUCTURE_TYPE_DESCRIPTOR_GET_INFO_EXT',
    'VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO',
    'VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_INLINE_UNIFORM_BLOCK_CREATE_INFO',
    'VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_INLINE_UNIFORM_BLOCK_CREATE_INFO_EXT',
    'VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO',
    'VK_STRUCTURE_TYPE_DESCRIPTOR_SET_BINDING_REFERENCE_VALVE',
    'VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO',
    'VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO_EXT',
    'VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO',
    'VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_HOST_MAPPING_INFO_VALVE',
    'VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT',
    'VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT_KHR',
    'VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO',
    'VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO_EXT',
    'VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT',
    'VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT_EXT',
    'VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO',
    'VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO_KHR',
    'VK_STRUCTURE_TYPE_DEVICE_ADDRESS_BINDING_CALLBACK_DATA_EXT',
    'VK_STRUCTURE_TYPE_DEVICE_BUFFER_MEMORY_REQUIREMENTS',
    'VK_STRUCTURE_TYPE_DEVICE_BUFFER_MEMORY_REQUIREMENTS_KHR',
    'VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO',
    'VK_STRUCTURE_TYPE_DEVICE_DEVICE_MEMORY_REPORT_CREATE_INFO_EXT',
    'VK_STRUCTURE_TYPE_DEVICE_DIAGNOSTICS_CONFIG_CREATE_INFO_NV',
    'VK_STRUCTURE_TYPE_DEVICE_EVENT_INFO_EXT',
    'VK_STRUCTURE_TYPE_DEVICE_FAULT_COUNTS_EXT',
    'VK_STRUCTURE_TYPE_DEVICE_FAULT_INFO_EXT',
    'VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO',
    'VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO_KHR',
    'VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO',
    'VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO_KHR',
    'VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO',
    'VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO_KHR',
    'VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_CAPABILITIES_KHR',
    'VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_INFO_KHR',
    'VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO',
    'VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO_KHR',
    'VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO',
    'VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO_KHR',
    'VK_STRUCTURE_TYPE_DEVICE_GROUP_SWAPCHAIN_CREATE_INFO_KHR',
    'VK_STRUCTURE_TYPE_DEVICE_IMAGE_MEMORY_REQUIREMENTS',
    'VK_STRUCTURE_TYPE_DEVICE_IMAGE_MEMORY_REQUIREMENTS_KHR',
    'VK_STRUCTURE_TYPE_DEVICE_IMAGE_SUBRESOURCE_INFO_KHR',
    'VK_STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO',
    'VK_STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO_KHR',
    'VK_STRUCTURE_TYPE_DEVICE_MEMORY_OVERALLOCATION_CREATE_INFO_AMD',
    'VK_STRUCTURE_TYPE_DEVICE_MEMORY_REPORT_CALLBACK_DATA_EXT',
    'VK_STRUCTURE_TYPE_DEVICE_PRIVATE_DATA_CREATE_INFO',
    'VK_STRUCTURE_TYPE_DEVICE_PRIVATE_DATA_CREATE_INFO_EXT',
    'VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO',
    'VK_STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_EXT',
    'VK_STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_KHR',
    'VK_STRUCTURE_TYPE_DEVICE_QUEUE_INFO_2',
    'VK_STRUCTURE_TYPE_DEVICE_QUEUE_SHADER_CORE_CONTROL_CREATE_INFO_ARM',
    'VK_STRUCTURE_TYPE_DIRECTFB_SURFACE_CREATE_INFO_EXT',
    'VK_STRUCTURE_TYPE_DIRECT_DRIVER_LOADING_INFO_LUNARG',
    'VK_STRUCTURE_TYPE_DIRECT_DRIVER_LOADING_LIST_LUNARG',
    'VK_STRUCTURE_TYPE_DISPLAY_EVENT_INFO_EXT',
    'VK_STRUCTURE_TYPE_DISPLAY_MODE_CREATE_INFO_KHR',
    'VK_STRUCTURE_TYPE_DISPLAY_MODE_PROPERTIES_2_KHR',
    'VK_STRUCTURE_TYPE_DISPLAY_NATIVE_HDR_SURFACE_CAPABILITIES_AMD',
    'VK_STRUCTURE_TYPE_DISPLAY_PLANE_CAPABILITIES_2_KHR',
    'VK_STRUCTURE_TYPE_DISPLAY_PLANE_INFO_2_KHR',
    'VK_STRUCTURE_TYPE_DISPLAY_PLANE_PROPERTIES_2_KHR',
    'VK_STRUCTURE_TYPE_DISPLAY_POWER_INFO_EXT',
    'VK_STRUCTURE_TYPE_DISPLAY_PRESENT_INFO_KHR',
    'VK_STRUCTURE_TYPE_DISPLAY_PROPERTIES_2_KHR',
    'VK_STRUCTURE_TYPE_DISPLAY_SURFACE_CREATE_INFO_KHR',
    'VK_STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_LIST_2_EXT',
    'VK_STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_LIST_EXT',
    'VK_STRUCTURE_TYPE_EVENT_CREATE_INFO',
    'VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO',
    'VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO_KHR',
    'VK_STRUCTURE_TYPE_EXPORT_FENCE_WIN32_HANDLE_INFO_KHR',
    'VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO',
    'VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_KHR',
    'VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_NV',
    'VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_KHR',
    'VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_NV',
    'VK_STRUCTURE_TYPE_EXPORT_METAL_BUFFER_INFO_EXT',
    'VK_STRUCTURE_TYPE_EXPORT_METAL_COMMAND_QUEUE_INFO_EXT',
    'VK_STRUCTURE_TYPE_EXPORT_METAL_DEVICE_INFO_EXT',
    'VK_STRUCTURE_TYPE_EXPORT_METAL_IO_SURFACE_INFO_EXT',
    'VK_STRUCTURE_TYPE_EXPORT_METAL_OBJECTS_INFO_EXT',
    'VK_STRUCTURE_TYPE_EXPORT_METAL_OBJECT_CREATE_INFO_EXT',
    'VK_STRUCTURE_TYPE_EXPORT_METAL_SHARED_EVENT_INFO_EXT',
    'VK_STRUCTURE_TYPE_EXPORT_METAL_TEXTURE_INFO_EXT',
    'VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO',
    'VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO_KHR',
    'VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR',
    'VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES',
    'VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES_KHR',
    'VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES',
    'VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES_KHR',
    'VK_STRUCTURE_TYPE_EXTERNAL_FORMAT_ANDROID',
    'VK_STRUCTURE_TYPE_EXTERNAL_FORMAT_QNX',
    'VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES',
    'VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES_KHR',
    'VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_ACQUIRE_UNMODIFIED_EXT',
    'VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO',
    'VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO_KHR',
    'VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO',
    'VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_KHR',
    'VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_NV',
    'VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES',
    'VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES_KHR',
    'VK_STRUCTURE_TYPE_FENCE_CREATE_INFO',
    'VK_STRUCTURE_TYPE_FENCE_GET_FD_INFO_KHR',
    'VK_STRUCTURE_TYPE_FENCE_GET_WIN32_HANDLE_INFO_KHR',
    'VK_STRUCTURE_TYPE_FILTER_CUBIC_IMAGE_VIEW_IMAGE_FORMAT_PROPERTIES_EXT',
    'VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2',
    'VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2_KHR',
    'VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_3',
    'VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_3_KHR',
    'VK_STRUCTURE_TYPE_FRAGMENT_SHADING_RATE_ATTACHMENT_INFO_KHR',
    'VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO',
    'VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO_KHR',
    'VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO',
    'VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO_KHR',
    'VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO',
    'VK_STRUCTURE_TYPE_FRAMEBUFFER_MIXED_SAMPLES_COMBINATION_NV',
    'VK_STRUCTURE_TYPE_FRAME_BOUNDARY_EXT',
    'VK_STRUCTURE_TYPE_GENERATED_COMMANDS_INFO_NV',
    'VK_STRUCTURE_TYPE_GENERATED_COMMANDS_MEMORY_REQUIREMENTS_INFO_NV',
    'VK_STRUCTURE_TYPE_GEOMETRY_AABB_NV',
    'VK_STRUCTURE_TYPE_GEOMETRY_NV',
    'VK_STRUCTURE_TYPE_GEOMETRY_TRIANGLES_NV',
    'VK_STRUCTURE_TYPE_GET_LATENCY_MARKER_INFO_NV',
    'VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO',
    'VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_LIBRARY_CREATE_INFO_EXT',
    'VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_SHADER_GROUPS_CREATE_INFO_NV',
    'VK_STRUCTURE_TYPE_GRAPHICS_SHADER_GROUP_CREATE_INFO_NV',
    'VK_STRUCTURE_TYPE_HDR_METADATA_EXT',
    'VK_STRUCTURE_TYPE_HEADLESS_SURFACE_CREATE_INFO_EXT',
    'VK_STRUCTURE_TYPE_HOST_IMAGE_COPY_DEVICE_PERFORMANCE_QUERY_EXT',
    'VK_STRUCTURE_TYPE_HOST_IMAGE_LAYOUT_TRANSITION_INFO_EXT',
    'VK_STRUCTURE_TYPE_IMAGEPIPE_SURFACE_CREATE_INFO_FUCHSIA',
    'VK_STRUCTURE_TYPE_IMAGE_BLIT_2',
    'VK_STRUCTURE_TYPE_IMAGE_BLIT_2_KHR',
    'VK_STRUCTURE_TYPE_IMAGE_CAPTURE_DESCRIPTOR_DATA_INFO_EXT',
    'VK_STRUCTURE_TYPE_IMAGE_COMPRESSION_CONTROL_EXT',
    'VK_STRUCTURE_TYPE_IMAGE_COMPRESSION_PROPERTIES_EXT',
    'VK_STRUCTURE_TYPE_IMAGE_CONSTRAINTS_INFO_FUCHSIA',
    'VK_STRUCTURE_TYPE_IMAGE_COPY_2',
    'VK_STRUCTURE_TYPE_IMAGE_COPY_2_KHR',
    'VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO',
    'VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_EXPLICIT_CREATE_INFO_EXT',
    'VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_LIST_CREATE_INFO_EXT',
    'VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_PROPERTIES_EXT',
    'VK_STRUCTURE_TYPE_IMAGE_FORMAT_CONSTRAINTS_INFO_FUCHSIA',
    'VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO',
    'VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO_KHR',
    'VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2',
    'VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2_KHR',
    'VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER',
    'VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER_2',
    'VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER_2_KHR',
    'VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2',
    'VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2_KHR',
    'VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO',
    'VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO_KHR',
    'VK_STRUCTURE_TYPE_IMAGE_RESOLVE_2',
    'VK_STRUCTURE_TYPE_IMAGE_RESOLVE_2_KHR',
    'VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2',
    'VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2_KHR',
    'VK_STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO',
    'VK_STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO_EXT',
    'VK_STRUCTURE_TYPE_IMAGE_SUBRESOURCE_2_EXT',
    'VK_STRUCTURE_TYPE_IMAGE_SUBRESOURCE_2_KHR',
    'VK_STRUCTURE_TYPE_IMAGE_SWAPCHAIN_CREATE_INFO_KHR',
    'VK_STRUCTURE_TYPE_IMAGE_TO_MEMORY_COPY_EXT',
    'VK_STRUCTURE_TYPE_IMAGE_VIEW_ADDRESS_PROPERTIES_NVX',
    'VK_STRUCTURE_TYPE_IMAGE_VIEW_ASTC_DECODE_MODE_EXT',
    'VK_STRUCTURE_TYPE_IMAGE_VIEW_CAPTURE_DESCRIPTOR_DATA_INFO_EXT',
    'VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO',
    'VK_STRUCTURE_TYPE_IMAGE_VIEW_HANDLE_INFO_NVX',
    'VK_STRUCTURE_TYPE_IMAGE_VIEW_MIN_LOD_CREATE_INFO_EXT',
    'VK_STRUCTURE_TYPE_IMAGE_VIEW_SAMPLE_WEIGHT_CREATE_INFO_QCOM',
    'VK_STRUCTURE_TYPE_IMAGE_VIEW_SLICED_CREATE_INFO_EXT',
    'VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO',
    'VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO_KHR',
    'VK_STRUCTURE_TYPE_IMPORT_ANDROID_HARDWARE_BUFFER_INFO_ANDROID',
    'VK_STRUCTURE_TYPE_IMPORT_FENCE_FD_INFO_KHR',
    'VK_STRUCTURE_TYPE_IMPORT_FENCE_WIN32_HANDLE_INFO_KHR',
    'VK_STRUCTURE_TYPE_IMPORT_MEMORY_BUFFER_COLLECTION_FUCHSIA',
    'VK_STRUCTURE_TYPE_IMPORT_MEMORY_FD_INFO_KHR',
    'VK_STRUCTURE_TYPE_IMPORT_MEMORY_HOST_POINTER_INFO_EXT',
    'VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_KHR',
    'VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_NV',
    'VK_STRUCTURE_TYPE_IMPORT_MEMORY_ZIRCON_HANDLE_INFO_FUCHSIA',
    'VK_STRUCTURE_TYPE_IMPORT_METAL_BUFFER_INFO_EXT',
    'VK_STRUCTURE_TYPE_IMPORT_METAL_IO_SURFACE_INFO_EXT',
    'VK_STRUCTURE_TYPE_IMPORT_METAL_SHARED_EVENT_INFO_EXT',
    'VK_STRUCTURE_TYPE_IMPORT_METAL_TEXTURE_INFO_EXT',
    'VK_STRUCTURE_TYPE_IMPORT_SCREEN_BUFFER_INFO_QNX',
    'VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_FD_INFO_KHR',
    'VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR',
    'VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_ZIRCON_HANDLE_INFO_FUCHSIA',
    'VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_CREATE_INFO_NV',
    'VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_TOKEN_NV',
    'VK_STRUCTURE_TYPE_INITIALIZE_PERFORMANCE_API_INFO_INTEL',
    'VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO',
    'VK_STRUCTURE_TYPE_IOS_SURFACE_CREATE_INFO_MVK',
    'VK_STRUCTURE_TYPE_LATENCY_SLEEP_INFO_NV',
    'VK_STRUCTURE_TYPE_LATENCY_SLEEP_MODE_INFO_NV',
    'VK_STRUCTURE_TYPE_LATENCY_SUBMISSION_PRESENT_ID_NV',
    'VK_STRUCTURE_TYPE_LATENCY_SURFACE_CAPABILITIES_NV',
    'VK_STRUCTURE_TYPE_LATENCY_TIMINGS_FRAME_REPORT_NV',
    'VK_STRUCTURE_TYPE_LAYER_SETTINGS_CREATE_INFO_EXT',
    'VK_STRUCTURE_TYPE_LOADER_DEVICE_CREATE_INFO',
    'VK_STRUCTURE_TYPE_LOADER_INSTANCE_CREATE_INFO',
    'VK_STRUCTURE_TYPE_MACOS_SURFACE_CREATE_INFO_MVK',
    'VK_STRUCTURE_TYPE_MAPPED_MEMORY_RANGE',
    'VK_STRUCTURE_TYPE_MAX_ENUM',
    'VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO',
    'VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO_KHR',
    'VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO',
    'VK_STRUCTURE_TYPE_MEMORY_BARRIER',
    'VK_STRUCTURE_TYPE_MEMORY_BARRIER_2',
    'VK_STRUCTURE_TYPE_MEMORY_BARRIER_2_KHR',
    'VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO',
    'VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO_KHR',
    'VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS',
    'VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS_KHR',
    'VK_STRUCTURE_TYPE_MEMORY_FD_PROPERTIES_KHR',
    'VK_STRUCTURE_TYPE_MEMORY_GET_ANDROID_HARDWARE_BUFFER_INFO_ANDROID',
    'VK_STRUCTURE_TYPE_MEMORY_GET_FD_INFO_KHR',
    'VK_STRUCTURE_TYPE_MEMORY_GET_REMOTE_ADDRESS_INFO_NV',
    'VK_STRUCTURE_TYPE_MEMORY_GET_WIN32_HANDLE_INFO_KHR',
    'VK_STRUCTURE_TYPE_MEMORY_GET_ZIRCON_HANDLE_INFO_FUCHSIA',
    'VK_STRUCTURE_TYPE_MEMORY_HOST_POINTER_PROPERTIES_EXT',
    'VK_STRUCTURE_TYPE_MEMORY_MAP_INFO_KHR',
    'VK_STRUCTURE_TYPE_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO',
    'VK_STRUCTURE_TYPE_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO_KHR',
    'VK_STRUCTURE_TYPE_MEMORY_PRIORITY_ALLOCATE_INFO_EXT',
    'VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2',
    'VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2_KHR',
    'VK_STRUCTURE_TYPE_MEMORY_TO_IMAGE_COPY_EXT',
    'VK_STRUCTURE_TYPE_MEMORY_UNMAP_INFO_KHR',
    'VK_STRUCTURE_TYPE_MEMORY_WIN32_HANDLE_PROPERTIES_KHR',
    'VK_STRUCTURE_TYPE_MEMORY_ZIRCON_HANDLE_PROPERTIES_FUCHSIA',
    'VK_STRUCTURE_TYPE_METAL_SURFACE_CREATE_INFO_EXT',
    'VK_STRUCTURE_TYPE_MICROMAP_BUILD_INFO_EXT',
    'VK_STRUCTURE_TYPE_MICROMAP_BUILD_SIZES_INFO_EXT',
    'VK_STRUCTURE_TYPE_MICROMAP_CREATE_INFO_EXT',
    'VK_STRUCTURE_TYPE_MICROMAP_VERSION_INFO_EXT',
    'VK_STRUCTURE_TYPE_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_INFO_EXT',
    'VK_STRUCTURE_TYPE_MULTISAMPLE_PROPERTIES_EXT',
    'VK_STRUCTURE_TYPE_MULTIVIEW_PER_VIEW_ATTRIBUTES_INFO_NVX',
    'VK_STRUCTURE_TYPE_MULTIVIEW_PER_VIEW_RENDER_AREAS_RENDER_PASS_BEGIN_INFO_QCOM',
    'VK_STRUCTURE_TYPE_MUTABLE_DESCRIPTOR_TYPE_CREATE_INFO_EXT',
    'VK_STRUCTURE_TYPE_MUTABLE_DESCRIPTOR_TYPE_CREATE_INFO_VALVE',
    'VK_STRUCTURE_TYPE_OPAQUE_CAPTURE_DESCRIPTOR_DATA_CREATE_INFO_EXT',
    'VK_STRUCTURE_TYPE_OPTICAL_FLOW_EXECUTE_INFO_NV',
    'VK_STRUCTURE_TYPE_OPTICAL_FLOW_IMAGE_FORMAT_INFO_NV',
    'VK_STRUCTURE_TYPE_OPTICAL_FLOW_IMAGE_FORMAT_PROPERTIES_NV',
    'VK_STRUCTURE_TYPE_OPTICAL_FLOW_SESSION_CREATE_INFO_NV',
    'VK_STRUCTURE_TYPE_OPTICAL_FLOW_SESSION_CREATE_PRIVATE_DATA_INFO_NV',
    'VK_STRUCTURE_TYPE_OUT_OF_BAND_QUEUE_TYPE_INFO_NV',
    'VK_STRUCTURE_TYPE_PERFORMANCE_CONFIGURATION_ACQUIRE_INFO_INTEL',
    'VK_STRUCTURE_TYPE_PERFORMANCE_COUNTER_DESCRIPTION_KHR',
    'VK_STRUCTURE_TYPE_PERFORMANCE_COUNTER_KHR',
    'VK_STRUCTURE_TYPE_PERFORMANCE_MARKER_INFO_INTEL',
    'VK_STRUCTURE_TYPE_PERFORMANCE_OVERRIDE_INFO_INTEL',
    'VK_STRUCTURE_TYPE_PERFORMANCE_QUERY_SUBMIT_INFO_KHR',
    'VK_STRUCTURE_TYPE_PERFORMANCE_STREAM_MARKER_INFO_INTEL',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES_KHR',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_4444_FORMATS_FEATURES_EXT',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES_KHR',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_FEATURES_KHR',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_PROPERTIES_KHR',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ADDRESS_BINDING_REPORT_FEATURES_EXT',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_AMIGO_PROFILING_FEATURES_SEC',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ASTC_DECODE_FEATURES_EXT',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ATTACHMENT_FEEDBACK_LOOP_DYNAMIC_STATE_FEATURES_EXT',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ATTACHMENT_FEEDBACK_LOOP_LAYOUT_FEATURES_EXT',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_FEATURES_EXT',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_PROPERTIES_EXT',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BORDER_COLOR_SWIZZLE_FEATURES_EXT',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_ADDRESS_FEATURES_EXT',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_EXT',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_KHR',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CLUSTER_CULLING_SHADER_FEATURES_HUAWEI',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CLUSTER_CULLING_SHADER_PROPERTIES_HUAWEI',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CLUSTER_CULLING_SHADER_VRS_FEATURES_HUAWEI',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COHERENT_MEMORY_FEATURES_AMD',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COLOR_WRITE_ENABLE_FEATURES_EXT',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COMPUTE_SHADER_DERIVATIVES_FEATURES_NV',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONDITIONAL_RENDERING_FEATURES_EXT',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONSERVATIVE_RASTERIZATION_PROPERTIES_EXT',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_FEATURES_KHR',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_FEATURES_NV',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_PROPERTIES_KHR',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_PROPERTIES_NV',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COPY_MEMORY_INDIRECT_FEATURES_NV',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COPY_MEMORY_INDIRECT_PROPERTIES_NV',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CORNER_SAMPLED_IMAGE_FEATURES_NV',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COVERAGE_REDUCTION_MODE_FEATURES_NV',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUBIC_CLAMP_FEATURES_QCOM',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUBIC_WEIGHTS_FEATURES_QCOM',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUDA_KERNEL_LAUNCH_FEATURES_NV',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUDA_KERNEL_LAUNCH_PROPERTIES_NV',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_FEATURES_EXT',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_PROPERTIES_EXT',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEDICATED_ALLOCATION_IMAGE_ALIASING_FEATURES_NV',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_BIAS_CONTROL_FEATURES_EXT',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLAMP_ZERO_ONE_FEATURES_EXT',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLIP_CONTROL_FEATURES_EXT',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLIP_ENABLE_FEATURES_EXT',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES_KHR',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_BUFFER_DENSITY_MAP_PROPERTIES_EXT',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_BUFFER_FEATURES_EXT',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_BUFFER_PROPERTIES_EXT',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES_EXT',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES_EXT',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_POOL_OVERALLOCATION_FEATURES_NV',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_SET_HOST_MAPPING_FEATURES_VALVE',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_COMPUTE_FEATURES_NV',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_FEATURES_NV',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_PROPERTIES_NV',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_MEMORY_REPORT_FEATURES_EXT',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DIAGNOSTICS_CONFIG_FEATURES_NV',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DISCARD_RECTANGLE_PROPERTIES_EXT',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES_KHR',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRM_PROPERTIES_EXT',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DYNAMIC_RENDERING_FEATURES',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DYNAMIC_RENDERING_FEATURES_KHR',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DYNAMIC_RENDERING_UNUSED_ATTACHMENTS_FEATURES_EXT',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXCLUSIVE_SCISSOR_FEATURES_NV',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_2_FEATURES_EXT',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_3_FEATURES_EXT',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_3_PROPERTIES_EXT',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_FEATURES_EXT',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_SPARSE_ADDRESS_SPACE_FEATURES_NV',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_SPARSE_ADDRESS_SPACE_PROPERTIES_NV',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO_KHR',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO_KHR',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FORMAT_RESOLVE_FEATURES_ANDROID',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FORMAT_RESOLVE_PROPERTIES_ANDROID',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO_KHR',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_HOST_PROPERTIES_EXT',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_RDMA_FEATURES_NV',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_SCREEN_BUFFER_FEATURES_QNX',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO_KHR',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FAULT_FEATURES_EXT',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2_KHR',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT16_INT8_FEATURES_KHR',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES_KHR',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_FEATURES_EXT',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_PROPERTIES_EXT',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_FEATURES_EXT',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_OFFSET_FEATURES_QCOM',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_OFFSET_PROPERTIES_QCOM',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_PROPERTIES_EXT',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_FEATURES_KHR',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_FEATURES_NV',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_PROPERTIES_KHR',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_INTERLOCK_FEATURES_EXT',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_ENUMS_FEATURES_NV',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_ENUMS_PROPERTIES_NV',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_FEATURES_KHR',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_KHR',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_PROPERTIES_KHR',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAME_BOUNDARY_FEATURES_EXT',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GLOBAL_PRIORITY_QUERY_FEATURES_EXT',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GLOBAL_PRIORITY_QUERY_FEATURES_KHR',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GRAPHICS_PIPELINE_LIBRARY_FEATURES_EXT',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GRAPHICS_PIPELINE_LIBRARY_PROPERTIES_EXT',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES_KHR',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_IMAGE_COPY_FEATURES_EXT',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_IMAGE_COPY_PROPERTIES_EXT',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES_EXT',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES_KHR',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES_KHR',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_2D_VIEW_OF_3D_FEATURES_EXT',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_COMPRESSION_CONTROL_FEATURES_EXT',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_COMPRESSION_CONTROL_SWAPCHAIN_FEATURES_EXT',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_DRM_FORMAT_MODIFIER_INFO_EXT',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2_KHR',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_PROCESSING_2_FEATURES_QCOM',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_PROCESSING_2_PROPERTIES_QCOM',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_PROCESSING_FEATURES_QCOM',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_PROCESSING_PROPERTIES_QCOM',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ROBUSTNESS_FEATURES',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ROBUSTNESS_FEATURES_EXT',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_SLICED_VIEW_OF_3D_FEATURES_EXT',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_VIEW_IMAGE_FORMAT_INFO_EXT',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_VIEW_MIN_LOD_FEATURES_EXT',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INDEX_TYPE_UINT8_FEATURES_EXT',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INHERITED_VIEWPORT_SCISSOR_FEATURES_NV',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES_EXT',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES_EXT',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INVOCATION_MASK_FEATURES_HUAWEI',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LAYERED_DRIVER_PROPERTIES_MSFT',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LEGACY_DITHERING_FEATURES_EXT',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINEAR_COLOR_ATTACHMENT_FEATURES_NV',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_FEATURES_EXT',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_PROPERTIES_EXT',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES_KHR',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_FEATURES',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_FEATURES_KHR',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_PROPERTIES',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_PROPERTIES_KHR',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_5_FEATURES_KHR',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_5_PROPERTIES_KHR',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_6_FEATURES_KHR',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_6_PROPERTIES_KHR',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_BUDGET_PROPERTIES_EXT',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_DECOMPRESSION_FEATURES_NV',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_DECOMPRESSION_PROPERTIES_NV',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PRIORITY_FEATURES_EXT',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2_KHR',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_FEATURES_EXT',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_FEATURES_NV',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_PROPERTIES_EXT',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_PROPERTIES_NV',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_FEATURES_EXT',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES_KHR',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_ATTRIBUTES_PROPERTIES_NVX',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_RENDER_AREAS_FEATURES_QCOM',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_VIEWPORTS_FEATURES_QCOM',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES_KHR',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTI_DRAW_FEATURES_EXT',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTI_DRAW_PROPERTIES_EXT',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MUTABLE_DESCRIPTOR_TYPE_FEATURES_EXT',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MUTABLE_DESCRIPTOR_TYPE_FEATURES_VALVE',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_NESTED_COMMAND_BUFFER_FEATURES_EXT',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_NESTED_COMMAND_BUFFER_PROPERTIES_EXT',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_NON_SEAMLESS_CUBE_MAP_FEATURES_EXT',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_OPACITY_MICROMAP_FEATURES_EXT',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_OPACITY_MICROMAP_PROPERTIES_EXT',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_OPTICAL_FLOW_FEATURES_NV',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_OPTICAL_FLOW_PROPERTIES_NV',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PAGEABLE_DEVICE_LOCAL_MEMORY_FEATURES_EXT',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PCI_BUS_INFO_PROPERTIES_EXT',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_FEATURES_KHR',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_PROPERTIES_KHR',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PER_STAGE_DESCRIPTOR_SET_FEATURES_NV',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_CREATION_CACHE_CONTROL_FEATURES',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_CREATION_CACHE_CONTROL_FEATURES_EXT',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_EXECUTABLE_PROPERTIES_FEATURES_KHR',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_LIBRARY_GROUP_HANDLES_FEATURES_EXT',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_PROPERTIES_FEATURES_EXT',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_PROTECTED_ACCESS_FEATURES_EXT',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_ROBUSTNESS_FEATURES_EXT',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_ROBUSTNESS_PROPERTIES_EXT',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES_KHR',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_BARRIER_FEATURES_NV',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_ID_FEATURES_KHR',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_WAIT_FEATURES_KHR',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIMITIVES_GENERATED_QUERY_FEATURES_EXT',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIMITIVE_TOPOLOGY_LIST_RESTART_FEATURES_EXT',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIVATE_DATA_FEATURES',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIVATE_DATA_FEATURES_EXT',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2_KHR',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_FEATURES',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_PROPERTIES',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROVOKING_VERTEX_FEATURES_EXT',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROVOKING_VERTEX_PROPERTIES_EXT',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PUSH_DESCRIPTOR_PROPERTIES_KHR',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_FEATURES_ARM',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_FEATURES_EXT',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_QUERY_FEATURES_KHR',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_INVOCATION_REORDER_FEATURES_NV',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_INVOCATION_REORDER_PROPERTIES_NV',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_MAINTENANCE_1_FEATURES_KHR',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_MOTION_BLUR_FEATURES_NV',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PIPELINE_FEATURES_KHR',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PIPELINE_PROPERTIES_KHR',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_POSITION_FETCH_FEATURES_KHR',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PROPERTIES_NV',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RELAXED_LINE_RASTERIZATION_FEATURES_IMG',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RENDER_PASS_STRIPED_FEATURES_ARM',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RENDER_PASS_STRIPED_PROPERTIES_ARM',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_REPRESENTATIVE_FRAGMENT_TEST_FEATURES_NV',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RGBA10X6_FORMATS_FEATURES_EXT',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_FEATURES_EXT',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_PROPERTIES_EXT',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES_EXT',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES_KHR',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLE_LOCATIONS_PROPERTIES_EXT',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES_EXT',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCHEDULING_CONTROLS_FEATURES_ARM',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCHEDULING_CONTROLS_PROPERTIES_ARM',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES_KHR',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT_2_FEATURES_EXT',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT_FEATURES_EXT',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES_KHR',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CLOCK_FEATURES_KHR',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_BUILTINS_FEATURES_ARM',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_BUILTINS_PROPERTIES_ARM',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_2_AMD',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_AMD',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_ARM',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DEMOTE_TO_HELPER_INVOCATION_FEATURES',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DEMOTE_TO_HELPER_INVOCATION_FEATURES_EXT',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETERS_FEATURES',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETER_FEATURES',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_EARLY_AND_LATE_FRAGMENT_TESTS_FEATURES_AMD',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES_KHR',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_ATOMIC_INT64_FEATURES_EXT',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_FOOTPRINT_FEATURES_NV',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_FEATURES',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_FEATURES_KHR',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_PROPERTIES',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_PROPERTIES_KHR',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_FUNCTIONS_2_FEATURES_INTEL',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_MODULE_IDENTIFIER_FEATURES_EXT',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_MODULE_IDENTIFIER_PROPERTIES_EXT',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_OBJECT_FEATURES_EXT',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_OBJECT_PROPERTIES_EXT',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_FEATURES_NV',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_PROPERTIES_NV',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES_KHR',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_UNIFORM_CONTROL_FLOW_FEATURES_KHR',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TERMINATE_INVOCATION_FEATURES',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TERMINATE_INVOCATION_FEATURES_KHR',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TILE_IMAGE_FEATURES_EXT',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TILE_IMAGE_PROPERTIES_EXT',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_FEATURES_NV',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_PROPERTIES_NV',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2_KHR',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_PROPERTIES',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_FEATURES',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_FEATURES_EXT',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_PROPERTIES',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_PROPERTIES_EXT',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBPASS_MERGE_FEEDBACK_FEATURES_EXT',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBPASS_SHADING_FEATURES_HUAWEI',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBPASS_SHADING_PROPERTIES_HUAWEI',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SURFACE_INFO_2_KHR',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SWAPCHAIN_MAINTENANCE_1_FEATURES_EXT',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SYNCHRONIZATION_2_FEATURES',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SYNCHRONIZATION_2_FEATURES_KHR',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_FEATURES_EXT',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_PROPERTIES',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_PROPERTIES_EXT',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXTURE_COMPRESSION_ASTC_HDR_FEATURES',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXTURE_COMPRESSION_ASTC_HDR_FEATURES_EXT',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TILE_PROPERTIES_FEATURES_QCOM',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES_KHR',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES_KHR',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TOOL_PROPERTIES',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TOOL_PROPERTIES_EXT',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_FEATURES_EXT',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_PROPERTIES_EXT',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES_KHR',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES_KHR',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTER_FEATURES',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTER_FEATURES_KHR',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_FEATURES_EXT',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_FEATURES_KHR',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_PROPERTIES_EXT',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_PROPERTIES_KHR',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_INPUT_DYNAMIC_STATE_FEATURES_EXT',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VIDEO_ENCODE_QUALITY_LEVEL_INFO_KHR',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VIDEO_FORMAT_INFO_KHR',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VIDEO_MAINTENANCE_1_FEATURES_KHR',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_FEATURES',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_PROPERTIES',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_FEATURES',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_PROPERTIES',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_3_FEATURES',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_3_PROPERTIES',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES_KHR',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_WORKGROUP_MEMORY_EXPLICIT_LAYOUT_FEATURES_KHR',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_2_PLANE_444_FORMATS_FEATURES_EXT',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_DEGAMMA_FEATURES_QCOM',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_IMAGE_ARRAYS_FEATURES_EXT',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ZERO_INITIALIZE_WORKGROUP_MEMORY_FEATURES',
    'VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ZERO_INITIALIZE_WORKGROUP_MEMORY_FEATURES_KHR',
    'VK_STRUCTURE_TYPE_PIPELINE_CACHE_CREATE_INFO',
    'VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_ADVANCED_STATE_CREATE_INFO_EXT',
    'VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO',
    'VK_STRUCTURE_TYPE_PIPELINE_COLOR_WRITE_CREATE_INFO_EXT',
    'VK_STRUCTURE_TYPE_PIPELINE_COMPILER_CONTROL_CREATE_INFO_AMD',
    'VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_MODULATION_STATE_CREATE_INFO_NV',
    'VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_REDUCTION_STATE_CREATE_INFO_NV',
    'VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_TO_COLOR_STATE_CREATE_INFO_NV',
    'VK_STRUCTURE_TYPE_PIPELINE_CREATE_FLAGS_2_CREATE_INFO_KHR',
    'VK_STRUCTURE_TYPE_PIPELINE_CREATION_FEEDBACK_CREATE_INFO',
    'VK_STRUCTURE_TYPE_PIPELINE_CREATION_FEEDBACK_CREATE_INFO_EXT',
    'VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO',
    'VK_STRUCTURE_TYPE_PIPELINE_DISCARD_RECTANGLE_STATE_CREATE_INFO_EXT',
    'VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO',
    'VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INFO_KHR',
    'VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INTERNAL_REPRESENTATION_KHR',
    'VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_PROPERTIES_KHR',
    'VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_STATISTIC_KHR',
    'VK_STRUCTURE_TYPE_PIPELINE_FRAGMENT_SHADING_RATE_ENUM_STATE_CREATE_INFO_NV',
    'VK_STRUCTURE_TYPE_PIPELINE_FRAGMENT_SHADING_RATE_STATE_CREATE_INFO_KHR',
    'VK_STRUCTURE_TYPE_PIPELINE_INDIRECT_DEVICE_ADDRESS_INFO_NV',
    'VK_STRUCTURE_TYPE_PIPELINE_INFO_EXT',
    'VK_STRUCTURE_TYPE_PIPELINE_INFO_KHR',
    'VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO',
    'VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO',
    'VK_STRUCTURE_TYPE_PIPELINE_LIBRARY_CREATE_INFO_KHR',
    'VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO',
    'VK_STRUCTURE_TYPE_PIPELINE_PROPERTIES_IDENTIFIER_EXT',
    'VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_CONSERVATIVE_STATE_CREATE_INFO_EXT',
    'VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_DEPTH_CLIP_STATE_CREATE_INFO_EXT',
    'VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_LINE_STATE_CREATE_INFO_EXT',
    'VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_PROVOKING_VERTEX_STATE_CREATE_INFO_EXT',
    'VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO',
    'VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_RASTERIZATION_ORDER_AMD',
    'VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_STREAM_CREATE_INFO_EXT',
    'VK_STRUCTURE_TYPE_PIPELINE_RENDERING_CREATE_INFO',
    'VK_STRUCTURE_TYPE_PIPELINE_RENDERING_CREATE_INFO_KHR',
    'VK_STRUCTURE_TYPE_PIPELINE_REPRESENTATIVE_FRAGMENT_TEST_STATE_CREATE_INFO_NV',
    'VK_STRUCTURE_TYPE_PIPELINE_ROBUSTNESS_CREATE_INFO_EXT',
    'VK_STRUCTURE_TYPE_PIPELINE_SAMPLE_LOCATIONS_STATE_CREATE_INFO_EXT',
    'VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO',
    'VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_MODULE_IDENTIFIER_CREATE_INFO_EXT',
    'VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_REQUIRED_SUBGROUP_SIZE_CREATE_INFO',
    'VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_REQUIRED_SUBGROUP_SIZE_CREATE_INFO_EXT',
    'VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO',
    'VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO_KHR',
    'VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO',
    'VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_DIVISOR_STATE_CREATE_INFO_EXT',
    'VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_DIVISOR_STATE_CREATE_INFO_KHR',
    'VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO',
    'VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_COARSE_SAMPLE_ORDER_STATE_CREATE_INFO_NV',
    'VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_DEPTH_CLIP_CONTROL_CREATE_INFO_EXT',
    'VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_EXCLUSIVE_SCISSOR_STATE_CREATE_INFO_NV',
    'VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SHADING_RATE_IMAGE_STATE_CREATE_INFO_NV',
    'VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO',
    'VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SWIZZLE_STATE_CREATE_INFO_NV',
    'VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_W_SCALING_STATE_CREATE_INFO_NV',
    'VK_STRUCTURE_TYPE_PRESENT_FRAME_TOKEN_GGP',
    'VK_STRUCTURE_TYPE_PRESENT_ID_KHR',
    'VK_STRUCTURE_TYPE_PRESENT_INFO_KHR',
    'VK_STRUCTURE_TYPE_PRESENT_REGIONS_KHR',
    'VK_STRUCTURE_TYPE_PRESENT_TIMES_INFO_GOOGLE',
    'VK_STRUCTURE_TYPE_PRIVATE_DATA_SLOT_CREATE_INFO',
    'VK_STRUCTURE_TYPE_PRIVATE_DATA_SLOT_CREATE_INFO_EXT',
    'VK_STRUCTURE_TYPE_PROTECTED_SUBMIT_INFO',
    'VK_STRUCTURE_TYPE_PUSH_CONSTANTS_INFO_KHR',
    'VK_STRUCTURE_TYPE_PUSH_DESCRIPTOR_SET_INFO_KHR',
    'VK_STRUCTURE_TYPE_PUSH_DESCRIPTOR_SET_WITH_TEMPLATE_INFO_KHR',
    'VK_STRUCTURE_TYPE_QUERY_LOW_LATENCY_SUPPORT_NV',
    'VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO',
    'VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO_INTEL',
    'VK_STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_CREATE_INFO_KHR',
    'VK_STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_QUERY_CREATE_INFO_INTEL',
    'VK_STRUCTURE_TYPE_QUERY_POOL_VIDEO_ENCODE_FEEDBACK_CREATE_INFO_KHR',
    'VK_STRUCTURE_TYPE_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_2_NV',
    'VK_STRUCTURE_TYPE_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_NV',
    'VK_STRUCTURE_TYPE_QUEUE_FAMILY_GLOBAL_PRIORITY_PROPERTIES_EXT',
    'VK_STRUCTURE_TYPE_QUEUE_FAMILY_GLOBAL_PRIORITY_PROPERTIES_KHR',
    'VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2',
    'VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2_KHR',
    'VK_STRUCTURE_TYPE_QUEUE_FAMILY_QUERY_RESULT_STATUS_PROPERTIES_KHR',
    'VK_STRUCTURE_TYPE_QUEUE_FAMILY_VIDEO_PROPERTIES_KHR',
    'VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_KHR',
    'VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_NV',
    'VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_INTERFACE_CREATE_INFO_KHR',
    'VK_STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_KHR',
    'VK_STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_NV',
    'VK_STRUCTURE_TYPE_RELEASE_SWAPCHAIN_IMAGES_INFO_EXT',
    'VK_STRUCTURE_TYPE_RENDERING_AREA_INFO_KHR',
    'VK_STRUCTURE_TYPE_RENDERING_ATTACHMENT_INFO',
    'VK_STRUCTURE_TYPE_RENDERING_ATTACHMENT_INFO_KHR',
    'VK_STRUCTURE_TYPE_RENDERING_FRAGMENT_DENSITY_MAP_ATTACHMENT_INFO_EXT',
    'VK_STRUCTURE_TYPE_RENDERING_FRAGMENT_SHADING_RATE_ATTACHMENT_INFO_KHR',
    'VK_STRUCTURE_TYPE_RENDERING_INFO',
    'VK_STRUCTURE_TYPE_RENDERING_INFO_KHR',
    'VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO',
    'VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO_KHR',
    'VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO',
    'VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO',
    'VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2',
    'VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2_KHR',
    'VK_STRUCTURE_TYPE_RENDER_PASS_CREATION_CONTROL_EXT',
    'VK_STRUCTURE_TYPE_RENDER_PASS_CREATION_FEEDBACK_CREATE_INFO_EXT',
    'VK_STRUCTURE_TYPE_RENDER_PASS_FRAGMENT_DENSITY_MAP_CREATE_INFO_EXT',
    'VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO',
    'VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO_KHR',
    'VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO',
    'VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO_KHR',
    'VK_STRUCTURE_TYPE_RENDER_PASS_SAMPLE_LOCATIONS_BEGIN_INFO_EXT',
    'VK_STRUCTURE_TYPE_RENDER_PASS_STRIPE_BEGIN_INFO_ARM',
    'VK_STRUCTURE_TYPE_RENDER_PASS_STRIPE_INFO_ARM',
    'VK_STRUCTURE_TYPE_RENDER_PASS_STRIPE_SUBMIT_INFO_ARM',
    'VK_STRUCTURE_TYPE_RENDER_PASS_SUBPASS_FEEDBACK_CREATE_INFO_EXT',
    'VK_STRUCTURE_TYPE_RENDER_PASS_TRANSFORM_BEGIN_INFO_QCOM',
    'VK_STRUCTURE_TYPE_RESOLVE_IMAGE_INFO_2',
    'VK_STRUCTURE_TYPE_RESOLVE_IMAGE_INFO_2_KHR',
    'VK_STRUCTURE_TYPE_SAMPLER_BLOCK_MATCH_WINDOW_CREATE_INFO_QCOM',
    'VK_STRUCTURE_TYPE_SAMPLER_BORDER_COLOR_COMPONENT_MAPPING_CREATE_INFO_EXT',
    'VK_STRUCTURE_TYPE_SAMPLER_CAPTURE_DESCRIPTOR_DATA_INFO_EXT',
    'VK_STRUCTURE_TYPE_SAMPLER_CREATE_INFO',
    'VK_STRUCTURE_TYPE_SAMPLER_CUBIC_WEIGHTS_CREATE_INFO_QCOM',
    'VK_STRUCTURE_TYPE_SAMPLER_CUSTOM_BORDER_COLOR_CREATE_INFO_EXT',
    'VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO',
    'VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO_EXT',
    'VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO',
    'VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO_KHR',
    'VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES',
    'VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES_KHR',
    'VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO',
    'VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO_KHR',
    'VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_YCBCR_DEGAMMA_CREATE_INFO_QCOM',
    'VK_STRUCTURE_TYPE_SAMPLE_LOCATIONS_INFO_EXT',
    'VK_STRUCTURE_TYPE_SCREEN_BUFFER_FORMAT_PROPERTIES_QNX',
    'VK_STRUCTURE_TYPE_SCREEN_BUFFER_PROPERTIES_QNX',
    'VK_STRUCTURE_TYPE_SCREEN_SURFACE_CREATE_INFO_QNX',
    'VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO',
    'VK_STRUCTURE_TYPE_SEMAPHORE_GET_FD_INFO_KHR',
    'VK_STRUCTURE_TYPE_SEMAPHORE_GET_WIN32_HANDLE_INFO_KHR',
    'VK_STRUCTURE_TYPE_SEMAPHORE_GET_ZIRCON_HANDLE_INFO_FUCHSIA',
    'VK_STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO',
    'VK_STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO_KHR',
    'VK_STRUCTURE_TYPE_SEMAPHORE_SUBMIT_INFO',
    'VK_STRUCTURE_TYPE_SEMAPHORE_SUBMIT_INFO_KHR',
    'VK_STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO',
    'VK_STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO_KHR',
    'VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO',
    'VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO_KHR',
    'VK_STRUCTURE_TYPE_SET_DESCRIPTOR_BUFFER_OFFSETS_INFO_EXT',
    'VK_STRUCTURE_TYPE_SET_LATENCY_MARKER_INFO_NV',
    'VK_STRUCTURE_TYPE_SHADER_CREATE_INFO_EXT',
    'VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO',
    'VK_STRUCTURE_TYPE_SHADER_MODULE_IDENTIFIER_EXT',
    'VK_STRUCTURE_TYPE_SHADER_MODULE_VALIDATION_CACHE_CREATE_INFO_EXT',
    'VK_STRUCTURE_TYPE_SHADER_REQUIRED_SUBGROUP_SIZE_CREATE_INFO_EXT',
    'VK_STRUCTURE_TYPE_SHARED_PRESENT_SURFACE_CAPABILITIES_KHR',
    'VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2',
    'VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2_KHR',
    'VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2',
    'VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2_KHR',
    'VK_STRUCTURE_TYPE_STREAM_DESCRIPTOR_SURFACE_CREATE_INFO_GGP',
    'VK_STRUCTURE_TYPE_SUBMIT_INFO',
    'VK_STRUCTURE_TYPE_SUBMIT_INFO_2',
    'VK_STRUCTURE_TYPE_SUBMIT_INFO_2_KHR',
    'VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO',
    'VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO_KHR',
    'VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2',
    'VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2_KHR',
    'VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2',
    'VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2_KHR',
    'VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE',
    'VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE_KHR',
    'VK_STRUCTURE_TYPE_SUBPASS_END_INFO',
    'VK_STRUCTURE_TYPE_SUBPASS_END_INFO_KHR',
    'VK_STRUCTURE_TYPE_SUBPASS_FRAGMENT_DENSITY_MAP_OFFSET_END_INFO_QCOM',
    'VK_STRUCTURE_TYPE_SUBPASS_RESOLVE_PERFORMANCE_QUERY_EXT',
    'VK_STRUCTURE_TYPE_SUBPASS_SHADING_PIPELINE_CREATE_INFO_HUAWEI',
    'VK_STRUCTURE_TYPE_SUBRESOURCE_HOST_MEMCPY_SIZE_EXT',
    'VK_STRUCTURE_TYPE_SUBRESOURCE_LAYOUT_2_EXT',
    'VK_STRUCTURE_TYPE_SUBRESOURCE_LAYOUT_2_KHR',
    'VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES2_EXT',
    'VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_EXT',
    'VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_KHR',
    'VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_FULL_SCREEN_EXCLUSIVE_EXT',
    'VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_PRESENT_BARRIER_NV',
    'VK_STRUCTURE_TYPE_SURFACE_FORMAT_2_KHR',
    'VK_STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_INFO_EXT',
    'VK_STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_WIN32_INFO_EXT',
    'VK_STRUCTURE_TYPE_SURFACE_PRESENT_MODE_COMPATIBILITY_EXT',
    'VK_STRUCTURE_TYPE_SURFACE_PRESENT_MODE_EXT',
    'VK_STRUCTURE_TYPE_SURFACE_PRESENT_SCALING_CAPABILITIES_EXT',
    'VK_STRUCTURE_TYPE_SURFACE_PROTECTED_CAPABILITIES_KHR',
    'VK_STRUCTURE_TYPE_SWAPCHAIN_COUNTER_CREATE_INFO_EXT',
    'VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR',
    'VK_STRUCTURE_TYPE_SWAPCHAIN_DISPLAY_NATIVE_HDR_CREATE_INFO_AMD',
    'VK_STRUCTURE_TYPE_SWAPCHAIN_LATENCY_CREATE_INFO_NV',
    'VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_BARRIER_CREATE_INFO_NV',
    'VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_FENCE_INFO_EXT',
    'VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_MODES_CREATE_INFO_EXT',
    'VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_MODE_INFO_EXT',
    'VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_SCALING_CREATE_INFO_EXT',
    'VK_STRUCTURE_TYPE_SYSMEM_COLOR_SPACE_FUCHSIA',
    'VK_STRUCTURE_TYPE_TEXTURE_LOD_GATHER_FORMAT_PROPERTIES_AMD',
    'VK_STRUCTURE_TYPE_TILE_PROPERTIES_QCOM',
    'VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO',
    'VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO_KHR',
    'VK_STRUCTURE_TYPE_VALIDATION_CACHE_CREATE_INFO_EXT',
    'VK_STRUCTURE_TYPE_VALIDATION_FEATURES_EXT',
    'VK_STRUCTURE_TYPE_VALIDATION_FLAGS_EXT',
    'VK_STRUCTURE_TYPE_VERTEX_INPUT_ATTRIBUTE_DESCRIPTION_2_EXT',
    'VK_STRUCTURE_TYPE_VERTEX_INPUT_BINDING_DESCRIPTION_2_EXT',
    'VK_STRUCTURE_TYPE_VIDEO_BEGIN_CODING_INFO_KHR',
    'VK_STRUCTURE_TYPE_VIDEO_CAPABILITIES_KHR',
    'VK_STRUCTURE_TYPE_VIDEO_CODING_CONTROL_INFO_KHR',
    'VK_STRUCTURE_TYPE_VIDEO_DECODE_CAPABILITIES_KHR',
    'VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_CAPABILITIES_KHR',
    'VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_DPB_SLOT_INFO_KHR',
    'VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_PICTURE_INFO_KHR',
    'VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_PROFILE_INFO_KHR',
    'VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_SESSION_PARAMETERS_ADD_INFO_KHR',
    'VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_SESSION_PARAMETERS_CREATE_INFO_KHR',
    'VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_CAPABILITIES_KHR',
    'VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_DPB_SLOT_INFO_KHR',
    'VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_PICTURE_INFO_KHR',
    'VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_PROFILE_INFO_KHR',
    'VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_SESSION_PARAMETERS_ADD_INFO_KHR',
    'VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_SESSION_PARAMETERS_CREATE_INFO_KHR',
    'VK_STRUCTURE_TYPE_VIDEO_DECODE_INFO_KHR',
    'VK_STRUCTURE_TYPE_VIDEO_DECODE_USAGE_INFO_KHR',
    'VK_STRUCTURE_TYPE_VIDEO_ENCODE_CAPABILITIES_KHR',
    'VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_CAPABILITIES_KHR',
    'VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_DPB_SLOT_INFO_KHR',
    'VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_GOP_REMAINING_FRAME_INFO_KHR',
    'VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_NALU_SLICE_INFO_KHR',
    'VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_PICTURE_INFO_KHR',
    'VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_PROFILE_INFO_KHR',
    'VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_QUALITY_LEVEL_PROPERTIES_KHR',
    'VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_RATE_CONTROL_INFO_KHR',
    'VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_RATE_CONTROL_LAYER_INFO_KHR',
    'VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_CREATE_INFO_KHR',
    'VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_PARAMETERS_ADD_INFO_KHR',
    'VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_PARAMETERS_CREATE_INFO_KHR',
    'VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_PARAMETERS_FEEDBACK_INFO_KHR',
    'VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_PARAMETERS_GET_INFO_KHR',
    'VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_CAPABILITIES_KHR',
    'VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_DPB_SLOT_INFO_KHR',
    'VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_GOP_REMAINING_FRAME_INFO_KHR',
    'VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_NALU_SLICE_SEGMENT_INFO_KHR',
    'VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_PICTURE_INFO_KHR',
    'VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_PROFILE_INFO_KHR',
    'VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_QUALITY_LEVEL_PROPERTIES_KHR',
    'VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_RATE_CONTROL_INFO_KHR',
    'VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_RATE_CONTROL_LAYER_INFO_KHR',
    'VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_SESSION_CREATE_INFO_KHR',
    'VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_SESSION_PARAMETERS_ADD_INFO_KHR',
    'VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_SESSION_PARAMETERS_CREATE_INFO_KHR',
    'VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_SESSION_PARAMETERS_FEEDBACK_INFO_KHR',
    'VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_SESSION_PARAMETERS_GET_INFO_KHR',
    'VK_STRUCTURE_TYPE_VIDEO_ENCODE_INFO_KHR',
    'VK_STRUCTURE_TYPE_VIDEO_ENCODE_QUALITY_LEVEL_INFO_KHR',
    'VK_STRUCTURE_TYPE_VIDEO_ENCODE_QUALITY_LEVEL_PROPERTIES_KHR',
    'VK_STRUCTURE_TYPE_VIDEO_ENCODE_RATE_CONTROL_INFO_KHR',
    'VK_STRUCTURE_TYPE_VIDEO_ENCODE_RATE_CONTROL_LAYER_INFO_KHR',
    'VK_STRUCTURE_TYPE_VIDEO_ENCODE_SESSION_PARAMETERS_FEEDBACK_INFO_KHR',
    'VK_STRUCTURE_TYPE_VIDEO_ENCODE_SESSION_PARAMETERS_GET_INFO_KHR',
    'VK_STRUCTURE_TYPE_VIDEO_ENCODE_USAGE_INFO_KHR',
    'VK_STRUCTURE_TYPE_VIDEO_END_CODING_INFO_KHR',
    'VK_STRUCTURE_TYPE_VIDEO_FORMAT_PROPERTIES_KHR',
    'VK_STRUCTURE_TYPE_VIDEO_INLINE_QUERY_INFO_KHR',
    'VK_STRUCTURE_TYPE_VIDEO_PICTURE_RESOURCE_INFO_KHR',
    'VK_STRUCTURE_TYPE_VIDEO_PROFILE_INFO_KHR',
    'VK_STRUCTURE_TYPE_VIDEO_PROFILE_LIST_INFO_KHR',
    'VK_STRUCTURE_TYPE_VIDEO_REFERENCE_SLOT_INFO_KHR',
    'VK_STRUCTURE_TYPE_VIDEO_SESSION_CREATE_INFO_KHR',
    'VK_STRUCTURE_TYPE_VIDEO_SESSION_MEMORY_REQUIREMENTS_KHR',
    'VK_STRUCTURE_TYPE_VIDEO_SESSION_PARAMETERS_CREATE_INFO_KHR',
    'VK_STRUCTURE_TYPE_VIDEO_SESSION_PARAMETERS_UPDATE_INFO_KHR',
    'VK_STRUCTURE_TYPE_VI_SURFACE_CREATE_INFO_NN',
    'VK_STRUCTURE_TYPE_WAYLAND_SURFACE_CREATE_INFO_KHR',
    'VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_KHR',
    'VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_NV',
    'VK_STRUCTURE_TYPE_WIN32_SURFACE_CREATE_INFO_KHR',
    'VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET',
    'VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_KHR',
    'VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_NV',
    'VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_INLINE_UNIFORM_BLOCK',
    'VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_INLINE_UNIFORM_BLOCK_EXT',
    'VK_STRUCTURE_TYPE_XCB_SURFACE_CREATE_INFO_KHR',
    'VK_STRUCTURE_TYPE_XLIB_SURFACE_CREATE_INFO_KHR',
    'VK_SUBGROUP_FEATURE_ARITHMETIC_BIT',
    'VK_SUBGROUP_FEATURE_BALLOT_BIT', 'VK_SUBGROUP_FEATURE_BASIC_BIT',
    'VK_SUBGROUP_FEATURE_CLUSTERED_BIT',
    'VK_SUBGROUP_FEATURE_FLAG_BITS_MAX_ENUM',
    'VK_SUBGROUP_FEATURE_PARTITIONED_BIT_NV',
    'VK_SUBGROUP_FEATURE_QUAD_BIT', 'VK_SUBGROUP_FEATURE_SHUFFLE_BIT',
    'VK_SUBGROUP_FEATURE_SHUFFLE_RELATIVE_BIT',
    'VK_SUBGROUP_FEATURE_VOTE_BIT', 'VK_SUBMIT_FLAG_BITS_MAX_ENUM',
    'VK_SUBMIT_PROTECTED_BIT', 'VK_SUBMIT_PROTECTED_BIT_KHR',
    'VK_SUBOPTIMAL_KHR', 'VK_SUBPASS_CONTENTS_INLINE',
    'VK_SUBPASS_CONTENTS_INLINE_AND_SECONDARY_COMMAND_BUFFERS_EXT',
    'VK_SUBPASS_CONTENTS_MAX_ENUM',
    'VK_SUBPASS_CONTENTS_SECONDARY_COMMAND_BUFFERS',
    'VK_SUBPASS_DESCRIPTION_ENABLE_LEGACY_DITHERING_BIT_EXT',
    'VK_SUBPASS_DESCRIPTION_FLAG_BITS_MAX_ENUM',
    'VK_SUBPASS_DESCRIPTION_FRAGMENT_REGION_BIT_QCOM',
    'VK_SUBPASS_DESCRIPTION_PER_VIEW_ATTRIBUTES_BIT_NVX',
    'VK_SUBPASS_DESCRIPTION_PER_VIEW_POSITION_X_ONLY_BIT_NVX',
    'VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_COLOR_ACCESS_BIT_ARM',
    'VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_COLOR_ACCESS_BIT_EXT',
    'VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_DEPTH_ACCESS_BIT_ARM',
    'VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_DEPTH_ACCESS_BIT_EXT',
    'VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_STENCIL_ACCESS_BIT_ARM',
    'VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_STENCIL_ACCESS_BIT_EXT',
    'VK_SUBPASS_DESCRIPTION_SHADER_RESOLVE_BIT_QCOM',
    'VK_SUBPASS_EXTERNAL', 'VK_SUBPASS_MERGE_STATUS_DISALLOWED_EXT',
    'VK_SUBPASS_MERGE_STATUS_MAX_ENUM_EXT',
    'VK_SUBPASS_MERGE_STATUS_MERGED_EXT',
    'VK_SUBPASS_MERGE_STATUS_NOT_MERGED_ALIASING_EXT',
    'VK_SUBPASS_MERGE_STATUS_NOT_MERGED_DEPENDENCIES_EXT',
    'VK_SUBPASS_MERGE_STATUS_NOT_MERGED_DEPTH_STENCIL_COUNT_EXT',
    'VK_SUBPASS_MERGE_STATUS_NOT_MERGED_INCOMPATIBLE_INPUT_ATTACHMENT_EXT',
    'VK_SUBPASS_MERGE_STATUS_NOT_MERGED_INSUFFICIENT_STORAGE_EXT',
    'VK_SUBPASS_MERGE_STATUS_NOT_MERGED_RESOLVE_ATTACHMENT_REUSE_EXT',
    'VK_SUBPASS_MERGE_STATUS_NOT_MERGED_SAMPLES_MISMATCH_EXT',
    'VK_SUBPASS_MERGE_STATUS_NOT_MERGED_SIDE_EFFECTS_EXT',
    'VK_SUBPASS_MERGE_STATUS_NOT_MERGED_SINGLE_SUBPASS_EXT',
    'VK_SUBPASS_MERGE_STATUS_NOT_MERGED_TOO_MANY_ATTACHMENTS_EXT',
    'VK_SUBPASS_MERGE_STATUS_NOT_MERGED_UNSPECIFIED_EXT',
    'VK_SUBPASS_MERGE_STATUS_NOT_MERGED_VIEWS_MISMATCH_EXT',
    'VK_SUCCESS', 'VK_SURFACE_COUNTER_FLAG_BITS_MAX_ENUM_EXT',
    'VK_SURFACE_COUNTER_VBLANK_BIT_EXT',
    'VK_SURFACE_COUNTER_VBLANK_EXT',
    'VK_SURFACE_TRANSFORM_FLAG_BITS_MAX_ENUM_KHR',
    'VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_BIT_KHR',
    'VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_180_BIT_KHR',
    'VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_270_BIT_KHR',
    'VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_90_BIT_KHR',
    'VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR',
    'VK_SURFACE_TRANSFORM_INHERIT_BIT_KHR',
    'VK_SURFACE_TRANSFORM_ROTATE_180_BIT_KHR',
    'VK_SURFACE_TRANSFORM_ROTATE_270_BIT_KHR',
    'VK_SURFACE_TRANSFORM_ROTATE_90_BIT_KHR',
    'VK_SWAPCHAIN_CREATE_DEFERRED_MEMORY_ALLOCATION_BIT_EXT',
    'VK_SWAPCHAIN_CREATE_FLAG_BITS_MAX_ENUM_KHR',
    'VK_SWAPCHAIN_CREATE_MUTABLE_FORMAT_BIT_KHR',
    'VK_SWAPCHAIN_CREATE_PROTECTED_BIT_KHR',
    'VK_SWAPCHAIN_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR',
    'VK_SYSTEM_ALLOCATION_SCOPE_CACHE',
    'VK_SYSTEM_ALLOCATION_SCOPE_COMMAND',
    'VK_SYSTEM_ALLOCATION_SCOPE_DEVICE',
    'VK_SYSTEM_ALLOCATION_SCOPE_INSTANCE',
    'VK_SYSTEM_ALLOCATION_SCOPE_MAX_ENUM',
    'VK_SYSTEM_ALLOCATION_SCOPE_OBJECT',
    'VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT',
    'VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT_KHR',
    'VK_TESSELLATION_DOMAIN_ORIGIN_MAX_ENUM',
    'VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT',
    'VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT_KHR',
    'VK_THREAD_DONE_KHR', 'VK_THREAD_IDLE_KHR', 'VK_TIMEOUT',
    'VK_TIME_DOMAIN_CLOCK_MONOTONIC_EXT',
    'VK_TIME_DOMAIN_CLOCK_MONOTONIC_KHR',
    'VK_TIME_DOMAIN_CLOCK_MONOTONIC_RAW_EXT',
    'VK_TIME_DOMAIN_CLOCK_MONOTONIC_RAW_KHR',
    'VK_TIME_DOMAIN_DEVICE_EXT', 'VK_TIME_DOMAIN_DEVICE_KHR',
    'VK_TIME_DOMAIN_MAX_ENUM_KHR',
    'VK_TIME_DOMAIN_QUERY_PERFORMANCE_COUNTER_EXT',
    'VK_TIME_DOMAIN_QUERY_PERFORMANCE_COUNTER_KHR',
    'VK_TOOL_PURPOSE_ADDITIONAL_FEATURES_BIT',
    'VK_TOOL_PURPOSE_ADDITIONAL_FEATURES_BIT_EXT',
    'VK_TOOL_PURPOSE_DEBUG_MARKERS_BIT_EXT',
    'VK_TOOL_PURPOSE_DEBUG_REPORTING_BIT_EXT',
    'VK_TOOL_PURPOSE_FLAG_BITS_MAX_ENUM',
    'VK_TOOL_PURPOSE_MODIFYING_FEATURES_BIT',
    'VK_TOOL_PURPOSE_MODIFYING_FEATURES_BIT_EXT',
    'VK_TOOL_PURPOSE_PROFILING_BIT',
    'VK_TOOL_PURPOSE_PROFILING_BIT_EXT',
    'VK_TOOL_PURPOSE_TRACING_BIT', 'VK_TOOL_PURPOSE_TRACING_BIT_EXT',
    'VK_TOOL_PURPOSE_VALIDATION_BIT',
    'VK_TOOL_PURPOSE_VALIDATION_BIT_EXT', 'VK_TRUE',
    'VK_USE_64_BIT_PTR_DEFINES', 'VK_UUID_SIZE',
    'VK_VALIDATION_CACHE_HEADER_VERSION_MAX_ENUM_EXT',
    'VK_VALIDATION_CACHE_HEADER_VERSION_ONE_EXT',
    'VK_VALIDATION_CHECK_ALL_EXT', 'VK_VALIDATION_CHECK_MAX_ENUM_EXT',
    'VK_VALIDATION_CHECK_SHADERS_EXT',
    'VK_VALIDATION_FEATURE_DISABLE_ALL_EXT',
    'VK_VALIDATION_FEATURE_DISABLE_API_PARAMETERS_EXT',
    'VK_VALIDATION_FEATURE_DISABLE_CORE_CHECKS_EXT',
    'VK_VALIDATION_FEATURE_DISABLE_MAX_ENUM_EXT',
    'VK_VALIDATION_FEATURE_DISABLE_OBJECT_LIFETIMES_EXT',
    'VK_VALIDATION_FEATURE_DISABLE_SHADERS_EXT',
    'VK_VALIDATION_FEATURE_DISABLE_SHADER_VALIDATION_CACHE_EXT',
    'VK_VALIDATION_FEATURE_DISABLE_THREAD_SAFETY_EXT',
    'VK_VALIDATION_FEATURE_DISABLE_UNIQUE_HANDLES_EXT',
    'VK_VALIDATION_FEATURE_ENABLE_BEST_PRACTICES_EXT',
    'VK_VALIDATION_FEATURE_ENABLE_DEBUG_PRINTF_EXT',
    'VK_VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_EXT',
    'VK_VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_RESERVE_BINDING_SLOT_EXT',
    'VK_VALIDATION_FEATURE_ENABLE_MAX_ENUM_EXT',
    'VK_VALIDATION_FEATURE_ENABLE_SYNCHRONIZATION_VALIDATION_EXT',
    'VK_VALVE_DESCRIPTOR_SET_HOST_MAPPING_EXTENSION_NAME',
    'VK_VALVE_DESCRIPTOR_SET_HOST_MAPPING_SPEC_VERSION',
    'VK_VALVE_MUTABLE_DESCRIPTOR_TYPE_EXTENSION_NAME',
    'VK_VALVE_MUTABLE_DESCRIPTOR_TYPE_SPEC_VERSION',
    'VK_VALVE_descriptor_set_host_mapping',
    'VK_VALVE_mutable_descriptor_type', 'VK_VENDOR_ID_CODEPLAY',
    'VK_VENDOR_ID_KAZAN', 'VK_VENDOR_ID_MAX_ENUM',
    'VK_VENDOR_ID_MESA', 'VK_VENDOR_ID_MOBILEYE', 'VK_VENDOR_ID_POCL',
    'VK_VENDOR_ID_VIV', 'VK_VENDOR_ID_VSI', 'VK_VERSION_1_0',
    'VK_VERSION_1_1', 'VK_VERSION_1_2', 'VK_VERSION_1_3',
    'VK_VERTEX_INPUT_RATE_INSTANCE', 'VK_VERTEX_INPUT_RATE_MAX_ENUM',
    'VK_VERTEX_INPUT_RATE_VERTEX',
    'VK_VIDEO_CAPABILITY_FLAG_BITS_MAX_ENUM_KHR',
    'VK_VIDEO_CAPABILITY_PROTECTED_CONTENT_BIT_KHR',
    'VK_VIDEO_CAPABILITY_SEPARATE_REFERENCE_IMAGES_BIT_KHR',
    'VK_VIDEO_CHROMA_SUBSAMPLING_420_BIT_KHR',
    'VK_VIDEO_CHROMA_SUBSAMPLING_422_BIT_KHR',
    'VK_VIDEO_CHROMA_SUBSAMPLING_444_BIT_KHR',
    'VK_VIDEO_CHROMA_SUBSAMPLING_FLAG_BITS_MAX_ENUM_KHR',
    'VK_VIDEO_CHROMA_SUBSAMPLING_INVALID_KHR',
    'VK_VIDEO_CHROMA_SUBSAMPLING_MONOCHROME_BIT_KHR',
    'VK_VIDEO_CODEC_OPERATION_DECODE_H264_BIT_KHR',
    'VK_VIDEO_CODEC_OPERATION_DECODE_H265_BIT_KHR',
    'VK_VIDEO_CODEC_OPERATION_ENCODE_H264_BIT_KHR',
    'VK_VIDEO_CODEC_OPERATION_ENCODE_H265_BIT_KHR',
    'VK_VIDEO_CODEC_OPERATION_FLAG_BITS_MAX_ENUM_KHR',
    'VK_VIDEO_CODEC_OPERATION_NONE_KHR',
    'VK_VIDEO_CODING_CONTROL_ENCODE_QUALITY_LEVEL_BIT_KHR',
    'VK_VIDEO_CODING_CONTROL_ENCODE_RATE_CONTROL_BIT_KHR',
    'VK_VIDEO_CODING_CONTROL_FLAG_BITS_MAX_ENUM_KHR',
    'VK_VIDEO_CODING_CONTROL_RESET_BIT_KHR',
    'VK_VIDEO_COMPONENT_BIT_DEPTH_10_BIT_KHR',
    'VK_VIDEO_COMPONENT_BIT_DEPTH_12_BIT_KHR',
    'VK_VIDEO_COMPONENT_BIT_DEPTH_8_BIT_KHR',
    'VK_VIDEO_COMPONENT_BIT_DEPTH_FLAG_BITS_MAX_ENUM_KHR',
    'VK_VIDEO_COMPONENT_BIT_DEPTH_INVALID_KHR',
    'VK_VIDEO_DECODE_CAPABILITY_DPB_AND_OUTPUT_COINCIDE_BIT_KHR',
    'VK_VIDEO_DECODE_CAPABILITY_DPB_AND_OUTPUT_DISTINCT_BIT_KHR',
    'VK_VIDEO_DECODE_CAPABILITY_FLAG_BITS_MAX_ENUM_KHR',
    'VK_VIDEO_DECODE_H264_PICTURE_LAYOUT_FLAG_BITS_MAX_ENUM_KHR',
    'VK_VIDEO_DECODE_H264_PICTURE_LAYOUT_INTERLACED_INTERLEAVED_LINES_BIT_KHR',
    'VK_VIDEO_DECODE_H264_PICTURE_LAYOUT_INTERLACED_SEPARATE_PLANES_BIT_KHR',
    'VK_VIDEO_DECODE_H264_PICTURE_LAYOUT_PROGRESSIVE_KHR',
    'VK_VIDEO_DECODE_USAGE_DEFAULT_KHR',
    'VK_VIDEO_DECODE_USAGE_FLAG_BITS_MAX_ENUM_KHR',
    'VK_VIDEO_DECODE_USAGE_OFFLINE_BIT_KHR',
    'VK_VIDEO_DECODE_USAGE_STREAMING_BIT_KHR',
    'VK_VIDEO_DECODE_USAGE_TRANSCODING_BIT_KHR',
    'VK_VIDEO_ENCODE_CAPABILITY_FLAG_BITS_MAX_ENUM_KHR',
    'VK_VIDEO_ENCODE_CAPABILITY_INSUFFICIENT_BITSTREAM_BUFFER_RANGE_DETECTION_BIT_KHR',
    'VK_VIDEO_ENCODE_CAPABILITY_PRECEDING_EXTERNALLY_ENCODED_BYTES_BIT_KHR',
    'VK_VIDEO_ENCODE_CONTENT_CAMERA_BIT_KHR',
    'VK_VIDEO_ENCODE_CONTENT_DEFAULT_KHR',
    'VK_VIDEO_ENCODE_CONTENT_DESKTOP_BIT_KHR',
    'VK_VIDEO_ENCODE_CONTENT_FLAG_BITS_MAX_ENUM_KHR',
    'VK_VIDEO_ENCODE_CONTENT_RENDERED_BIT_KHR',
    'VK_VIDEO_ENCODE_FEEDBACK_BITSTREAM_BUFFER_OFFSET_BIT_KHR',
    'VK_VIDEO_ENCODE_FEEDBACK_BITSTREAM_BYTES_WRITTEN_BIT_KHR',
    'VK_VIDEO_ENCODE_FEEDBACK_BITSTREAM_HAS_OVERRIDES_BIT_KHR',
    'VK_VIDEO_ENCODE_FEEDBACK_FLAG_BITS_MAX_ENUM_KHR',
    'VK_VIDEO_ENCODE_H264_CAPABILITY_B_FRAME_IN_L0_LIST_BIT_KHR',
    'VK_VIDEO_ENCODE_H264_CAPABILITY_B_FRAME_IN_L1_LIST_BIT_KHR',
    'VK_VIDEO_ENCODE_H264_CAPABILITY_DIFFERENT_SLICE_TYPE_BIT_KHR',
    'VK_VIDEO_ENCODE_H264_CAPABILITY_FLAG_BITS_MAX_ENUM_KHR',
    'VK_VIDEO_ENCODE_H264_CAPABILITY_GENERATE_PREFIX_NALU_BIT_KHR',
    'VK_VIDEO_ENCODE_H264_CAPABILITY_HRD_COMPLIANCE_BIT_KHR',
    'VK_VIDEO_ENCODE_H264_CAPABILITY_PER_PICTURE_TYPE_MIN_MAX_QP_BIT_KHR',
    'VK_VIDEO_ENCODE_H264_CAPABILITY_PER_SLICE_CONSTANT_QP_BIT_KHR',
    'VK_VIDEO_ENCODE_H264_CAPABILITY_PREDICTION_WEIGHT_TABLE_GENERATED_BIT_KHR',
    'VK_VIDEO_ENCODE_H264_CAPABILITY_ROW_UNALIGNED_SLICE_BIT_KHR',
    'VK_VIDEO_ENCODE_H264_RATE_CONTROL_ATTEMPT_HRD_COMPLIANCE_BIT_KHR',
    'VK_VIDEO_ENCODE_H264_RATE_CONTROL_FLAG_BITS_MAX_ENUM_KHR',
    'VK_VIDEO_ENCODE_H264_RATE_CONTROL_REFERENCE_PATTERN_DYADIC_BIT_KHR',
    'VK_VIDEO_ENCODE_H264_RATE_CONTROL_REFERENCE_PATTERN_FLAT_BIT_KHR',
    'VK_VIDEO_ENCODE_H264_RATE_CONTROL_REGULAR_GOP_BIT_KHR',
    'VK_VIDEO_ENCODE_H264_RATE_CONTROL_TEMPORAL_LAYER_PATTERN_DYADIC_BIT_KHR',
    'VK_VIDEO_ENCODE_H264_STD_CHROMA_QP_INDEX_OFFSET_BIT_KHR',
    'VK_VIDEO_ENCODE_H264_STD_CONSTRAINED_INTRA_PRED_FLAG_SET_BIT_KHR',
    'VK_VIDEO_ENCODE_H264_STD_DEBLOCKING_FILTER_DISABLED_BIT_KHR',
    'VK_VIDEO_ENCODE_H264_STD_DEBLOCKING_FILTER_ENABLED_BIT_KHR',
    'VK_VIDEO_ENCODE_H264_STD_DEBLOCKING_FILTER_PARTIAL_BIT_KHR',
    'VK_VIDEO_ENCODE_H264_STD_DIFFERENT_SLICE_QP_DELTA_BIT_KHR',
    'VK_VIDEO_ENCODE_H264_STD_DIRECT_8X8_INFERENCE_FLAG_UNSET_BIT_KHR',
    'VK_VIDEO_ENCODE_H264_STD_DIRECT_SPATIAL_MV_PRED_FLAG_UNSET_BIT_KHR',
    'VK_VIDEO_ENCODE_H264_STD_ENTROPY_CODING_MODE_FLAG_SET_BIT_KHR',
    'VK_VIDEO_ENCODE_H264_STD_ENTROPY_CODING_MODE_FLAG_UNSET_BIT_KHR',
    'VK_VIDEO_ENCODE_H264_STD_FLAG_BITS_MAX_ENUM_KHR',
    'VK_VIDEO_ENCODE_H264_STD_PIC_INIT_QP_MINUS26_BIT_KHR',
    'VK_VIDEO_ENCODE_H264_STD_QPPRIME_Y_ZERO_TRANSFORM_BYPASS_FLAG_SET_BIT_KHR',
    'VK_VIDEO_ENCODE_H264_STD_SCALING_MATRIX_PRESENT_FLAG_SET_BIT_KHR',
    'VK_VIDEO_ENCODE_H264_STD_SECOND_CHROMA_QP_INDEX_OFFSET_BIT_KHR',
    'VK_VIDEO_ENCODE_H264_STD_SEPARATE_COLOR_PLANE_FLAG_SET_BIT_KHR',
    'VK_VIDEO_ENCODE_H264_STD_SLICE_QP_DELTA_BIT_KHR',
    'VK_VIDEO_ENCODE_H264_STD_TRANSFORM_8X8_MODE_FLAG_SET_BIT_KHR',
    'VK_VIDEO_ENCODE_H264_STD_WEIGHTED_BIPRED_IDC_EXPLICIT_BIT_KHR',
    'VK_VIDEO_ENCODE_H264_STD_WEIGHTED_BIPRED_IDC_IMPLICIT_BIT_KHR',
    'VK_VIDEO_ENCODE_H264_STD_WEIGHTED_PRED_FLAG_SET_BIT_KHR',
    'VK_VIDEO_ENCODE_H265_CAPABILITY_B_FRAME_IN_L0_LIST_BIT_KHR',
    'VK_VIDEO_ENCODE_H265_CAPABILITY_B_FRAME_IN_L1_LIST_BIT_KHR',
    'VK_VIDEO_ENCODE_H265_CAPABILITY_DIFFERENT_SLICE_SEGMENT_TYPE_BIT_KHR',
    'VK_VIDEO_ENCODE_H265_CAPABILITY_FLAG_BITS_MAX_ENUM_KHR',
    'VK_VIDEO_ENCODE_H265_CAPABILITY_HRD_COMPLIANCE_BIT_KHR',
    'VK_VIDEO_ENCODE_H265_CAPABILITY_MULTIPLE_SLICE_SEGMENTS_PER_TILE_BIT_KHR',
    'VK_VIDEO_ENCODE_H265_CAPABILITY_MULTIPLE_TILES_PER_SLICE_SEGMENT_BIT_KHR',
    'VK_VIDEO_ENCODE_H265_CAPABILITY_PER_PICTURE_TYPE_MIN_MAX_QP_BIT_KHR',
    'VK_VIDEO_ENCODE_H265_CAPABILITY_PER_SLICE_SEGMENT_CONSTANT_QP_BIT_KHR',
    'VK_VIDEO_ENCODE_H265_CAPABILITY_PREDICTION_WEIGHT_TABLE_GENERATED_BIT_KHR',
    'VK_VIDEO_ENCODE_H265_CAPABILITY_ROW_UNALIGNED_SLICE_SEGMENT_BIT_KHR',
    'VK_VIDEO_ENCODE_H265_CTB_SIZE_16_BIT_KHR',
    'VK_VIDEO_ENCODE_H265_CTB_SIZE_32_BIT_KHR',
    'VK_VIDEO_ENCODE_H265_CTB_SIZE_64_BIT_KHR',
    'VK_VIDEO_ENCODE_H265_CTB_SIZE_FLAG_BITS_MAX_ENUM_KHR',
    'VK_VIDEO_ENCODE_H265_RATE_CONTROL_ATTEMPT_HRD_COMPLIANCE_BIT_KHR',
    'VK_VIDEO_ENCODE_H265_RATE_CONTROL_FLAG_BITS_MAX_ENUM_KHR',
    'VK_VIDEO_ENCODE_H265_RATE_CONTROL_REFERENCE_PATTERN_DYADIC_BIT_KHR',
    'VK_VIDEO_ENCODE_H265_RATE_CONTROL_REFERENCE_PATTERN_FLAT_BIT_KHR',
    'VK_VIDEO_ENCODE_H265_RATE_CONTROL_REGULAR_GOP_BIT_KHR',
    'VK_VIDEO_ENCODE_H265_RATE_CONTROL_TEMPORAL_SUB_LAYER_PATTERN_DYADIC_BIT_KHR',
    'VK_VIDEO_ENCODE_H265_STD_CONSTRAINED_INTRA_PRED_FLAG_SET_BIT_KHR',
    'VK_VIDEO_ENCODE_H265_STD_DEBLOCKING_FILTER_OVERRIDE_ENABLED_FLAG_SET_BIT_KHR',
    'VK_VIDEO_ENCODE_H265_STD_DEPENDENT_SLICE_SEGMENTS_ENABLED_FLAG_SET_BIT_KHR',
    'VK_VIDEO_ENCODE_H265_STD_DEPENDENT_SLICE_SEGMENT_FLAG_SET_BIT_KHR',
    'VK_VIDEO_ENCODE_H265_STD_DIFFERENT_SLICE_QP_DELTA_BIT_KHR',
    'VK_VIDEO_ENCODE_H265_STD_ENTROPY_CODING_SYNC_ENABLED_FLAG_SET_BIT_KHR',
    'VK_VIDEO_ENCODE_H265_STD_FLAG_BITS_MAX_ENUM_KHR',
    'VK_VIDEO_ENCODE_H265_STD_INIT_QP_MINUS26_BIT_KHR',
    'VK_VIDEO_ENCODE_H265_STD_LOG2_PARALLEL_MERGE_LEVEL_MINUS2_BIT_KHR',
    'VK_VIDEO_ENCODE_H265_STD_PCM_ENABLED_FLAG_SET_BIT_KHR',
    'VK_VIDEO_ENCODE_H265_STD_PPS_SLICE_CHROMA_QP_OFFSETS_PRESENT_FLAG_SET_BIT_KHR',
    'VK_VIDEO_ENCODE_H265_STD_SAMPLE_ADAPTIVE_OFFSET_ENABLED_FLAG_SET_BIT_KHR',
    'VK_VIDEO_ENCODE_H265_STD_SCALING_LIST_DATA_PRESENT_FLAG_SET_BIT_KHR',
    'VK_VIDEO_ENCODE_H265_STD_SEPARATE_COLOR_PLANE_FLAG_SET_BIT_KHR',
    'VK_VIDEO_ENCODE_H265_STD_SIGN_DATA_HIDING_ENABLED_FLAG_SET_BIT_KHR',
    'VK_VIDEO_ENCODE_H265_STD_SLICE_QP_DELTA_BIT_KHR',
    'VK_VIDEO_ENCODE_H265_STD_SPS_TEMPORAL_MVP_ENABLED_FLAG_SET_BIT_KHR',
    'VK_VIDEO_ENCODE_H265_STD_TRANSFORM_SKIP_ENABLED_FLAG_SET_BIT_KHR',
    'VK_VIDEO_ENCODE_H265_STD_TRANSFORM_SKIP_ENABLED_FLAG_UNSET_BIT_KHR',
    'VK_VIDEO_ENCODE_H265_STD_TRANSQUANT_BYPASS_ENABLED_FLAG_SET_BIT_KHR',
    'VK_VIDEO_ENCODE_H265_STD_WEIGHTED_BIPRED_FLAG_SET_BIT_KHR',
    'VK_VIDEO_ENCODE_H265_STD_WEIGHTED_PRED_FLAG_SET_BIT_KHR',
    'VK_VIDEO_ENCODE_H265_TRANSFORM_BLOCK_SIZE_16_BIT_KHR',
    'VK_VIDEO_ENCODE_H265_TRANSFORM_BLOCK_SIZE_32_BIT_KHR',
    'VK_VIDEO_ENCODE_H265_TRANSFORM_BLOCK_SIZE_4_BIT_KHR',
    'VK_VIDEO_ENCODE_H265_TRANSFORM_BLOCK_SIZE_8_BIT_KHR',
    'VK_VIDEO_ENCODE_H265_TRANSFORM_BLOCK_SIZE_FLAG_BITS_MAX_ENUM_KHR',
    'VK_VIDEO_ENCODE_RATE_CONTROL_MODE_CBR_BIT_KHR',
    'VK_VIDEO_ENCODE_RATE_CONTROL_MODE_DEFAULT_KHR',
    'VK_VIDEO_ENCODE_RATE_CONTROL_MODE_DISABLED_BIT_KHR',
    'VK_VIDEO_ENCODE_RATE_CONTROL_MODE_FLAG_BITS_MAX_ENUM_KHR',
    'VK_VIDEO_ENCODE_RATE_CONTROL_MODE_VBR_BIT_KHR',
    'VK_VIDEO_ENCODE_TUNING_MODE_DEFAULT_KHR',
    'VK_VIDEO_ENCODE_TUNING_MODE_HIGH_QUALITY_KHR',
    'VK_VIDEO_ENCODE_TUNING_MODE_LOSSLESS_KHR',
    'VK_VIDEO_ENCODE_TUNING_MODE_LOW_LATENCY_KHR',
    'VK_VIDEO_ENCODE_TUNING_MODE_MAX_ENUM_KHR',
    'VK_VIDEO_ENCODE_TUNING_MODE_ULTRA_LOW_LATENCY_KHR',
    'VK_VIDEO_ENCODE_USAGE_CONFERENCING_BIT_KHR',
    'VK_VIDEO_ENCODE_USAGE_DEFAULT_KHR',
    'VK_VIDEO_ENCODE_USAGE_FLAG_BITS_MAX_ENUM_KHR',
    'VK_VIDEO_ENCODE_USAGE_RECORDING_BIT_KHR',
    'VK_VIDEO_ENCODE_USAGE_STREAMING_BIT_KHR',
    'VK_VIDEO_ENCODE_USAGE_TRANSCODING_BIT_KHR',
    'VK_VIDEO_SESSION_CREATE_ALLOW_ENCODE_PARAMETER_OPTIMIZATIONS_BIT_KHR',
    'VK_VIDEO_SESSION_CREATE_FLAG_BITS_MAX_ENUM_KHR',
    'VK_VIDEO_SESSION_CREATE_INLINE_QUERIES_BIT_KHR',
    'VK_VIDEO_SESSION_CREATE_PROTECTED_CONTENT_BIT_KHR',
    'VK_VIEWPORT_COORDINATE_SWIZZLE_MAX_ENUM_NV',
    'VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_W_NV',
    'VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_X_NV',
    'VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Y_NV',
    'VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Z_NV',
    'VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_W_NV',
    'VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_X_NV',
    'VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Y_NV',
    'VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Z_NV', 'VK_WHOLE_SIZE',
    'VULKAN_CORE_H_', 'VULKAN_H_', 'VkAabbPositionsKHR',
    'VkAabbPositionsNV',
    'VkAccelerationStructureBuildGeometryInfoKHR',
    'VkAccelerationStructureBuildRangeInfoKHR',
    'VkAccelerationStructureBuildSizesInfoKHR',
    'VkAccelerationStructureBuildTypeKHR',
    'VkAccelerationStructureCaptureDescriptorDataInfoEXT',
    'VkAccelerationStructureCompatibilityKHR',
    'VkAccelerationStructureCreateFlagBitsKHR',
    'VkAccelerationStructureCreateFlagsKHR',
    'VkAccelerationStructureCreateInfoKHR',
    'VkAccelerationStructureCreateInfoNV',
    'VkAccelerationStructureDeviceAddressInfoKHR',
    'VkAccelerationStructureGeometryAabbsDataKHR',
    'VkAccelerationStructureGeometryDataKHR',
    'VkAccelerationStructureGeometryInstancesDataKHR',
    'VkAccelerationStructureGeometryKHR',
    'VkAccelerationStructureGeometryMotionTrianglesDataNV',
    'VkAccelerationStructureGeometryTrianglesDataKHR',
    'VkAccelerationStructureInfoNV',
    'VkAccelerationStructureInstanceKHR',
    'VkAccelerationStructureInstanceNV', 'VkAccelerationStructureKHR',
    'VkAccelerationStructureMatrixMotionInstanceNV',
    'VkAccelerationStructureMemoryRequirementsInfoNV',
    'VkAccelerationStructureMemoryRequirementsTypeNV',
    'VkAccelerationStructureMotionInfoFlagsNV',
    'VkAccelerationStructureMotionInfoNV',
    'VkAccelerationStructureMotionInstanceDataNV',
    'VkAccelerationStructureMotionInstanceFlagsNV',
    'VkAccelerationStructureMotionInstanceNV',
    'VkAccelerationStructureMotionInstanceTypeNV',
    'VkAccelerationStructureNV',
    'VkAccelerationStructureSRTMotionInstanceNV',
    'VkAccelerationStructureTrianglesOpacityMicromapEXT',
    'VkAccelerationStructureTypeKHR', 'VkAccelerationStructureTypeNV',
    'VkAccelerationStructureTypeNV__enumvalues',
    'VkAccelerationStructureVersionInfoKHR', 'VkAccessFlagBits',
    'VkAccessFlagBits2', 'VkAccessFlagBits2KHR', 'VkAccessFlags',
    'VkAccessFlags2', 'VkAccessFlags2KHR',
    'VkAcquireNextImageInfoKHR', 'VkAcquireProfilingLockFlagBitsKHR',
    'VkAcquireProfilingLockFlagsKHR', 'VkAcquireProfilingLockInfoKHR',
    'VkAllocationCallbacks', 'VkAmigoProfilingSubmitInfoSEC',
    'VkApplicationInfo', 'VkAttachmentDescription',
    'VkAttachmentDescription2', 'VkAttachmentDescription2KHR',
    'VkAttachmentDescriptionFlagBits', 'VkAttachmentDescriptionFlags',
    'VkAttachmentDescriptionStencilLayout',
    'VkAttachmentDescriptionStencilLayoutKHR', 'VkAttachmentLoadOp',
    'VkAttachmentReference', 'VkAttachmentReference2',
    'VkAttachmentReference2KHR', 'VkAttachmentReferenceStencilLayout',
    'VkAttachmentReferenceStencilLayoutKHR',
    'VkAttachmentSampleCountInfoAMD', 'VkAttachmentSampleCountInfoNV',
    'VkAttachmentSampleLocationsEXT', 'VkAttachmentStoreOp',
    'VkBaseInStructure', 'VkBaseOutStructure',
    'VkBindAccelerationStructureMemoryInfoNV',
    'VkBindBufferMemoryDeviceGroupInfo',
    'VkBindBufferMemoryDeviceGroupInfoKHR', 'VkBindBufferMemoryInfo',
    'VkBindBufferMemoryInfoKHR',
    'VkBindDescriptorBufferEmbeddedSamplersInfoEXT',
    'VkBindDescriptorSetsInfoKHR', 'VkBindImageMemoryDeviceGroupInfo',
    'VkBindImageMemoryDeviceGroupInfoKHR', 'VkBindImageMemoryInfo',
    'VkBindImageMemoryInfoKHR', 'VkBindImageMemorySwapchainInfoKHR',
    'VkBindImagePlaneMemoryInfo', 'VkBindImagePlaneMemoryInfoKHR',
    'VkBindIndexBufferIndirectCommandNV', 'VkBindMemoryStatusKHR',
    'VkBindPipelineIndirectCommandNV',
    'VkBindShaderGroupIndirectCommandNV', 'VkBindSparseInfo',
    'VkBindVertexBufferIndirectCommandNV',
    'VkBindVideoSessionMemoryInfoKHR', 'VkBlendFactor', 'VkBlendOp',
    'VkBlendOverlapEXT', 'VkBlitImageCubicWeightsInfoQCOM',
    'VkBlitImageInfo2', 'VkBlitImageInfo2KHR',
    'VkBlockMatchWindowCompareModeQCOM', 'VkBool32', 'VkBorderColor',
    'VkBuffer', 'VkBufferCaptureDescriptorDataInfoEXT',
    'VkBufferCopy', 'VkBufferCopy2', 'VkBufferCopy2KHR',
    'VkBufferCreateFlagBits', 'VkBufferCreateFlags',
    'VkBufferCreateInfo', 'VkBufferDeviceAddressCreateInfoEXT',
    'VkBufferDeviceAddressInfo', 'VkBufferDeviceAddressInfoEXT',
    'VkBufferDeviceAddressInfoKHR', 'VkBufferImageCopy',
    'VkBufferImageCopy2', 'VkBufferImageCopy2KHR',
    'VkBufferMemoryBarrier', 'VkBufferMemoryBarrier2',
    'VkBufferMemoryBarrier2KHR', 'VkBufferMemoryRequirementsInfo2',
    'VkBufferMemoryRequirementsInfo2KHR',
    'VkBufferOpaqueCaptureAddressCreateInfo',
    'VkBufferOpaqueCaptureAddressCreateInfoKHR',
    'VkBufferUsageFlagBits', 'VkBufferUsageFlagBits2KHR',
    'VkBufferUsageFlags', 'VkBufferUsageFlags2CreateInfoKHR',
    'VkBufferUsageFlags2KHR', 'VkBufferView',
    'VkBufferViewCreateFlags', 'VkBufferViewCreateInfo',
    'VkBuildAccelerationStructureFlagBitsKHR',
    'VkBuildAccelerationStructureFlagBitsNV',
    'VkBuildAccelerationStructureFlagBitsNV__enumvalues',
    'VkBuildAccelerationStructureFlagsKHR',
    'VkBuildAccelerationStructureFlagsNV',
    'VkBuildAccelerationStructureModeKHR',
    'VkBuildMicromapFlagBitsEXT', 'VkBuildMicromapFlagsEXT',
    'VkBuildMicromapModeEXT', 'VkCalibratedTimestampInfoEXT',
    'VkCalibratedTimestampInfoKHR', 'VkCheckpointData2NV',
    'VkCheckpointDataNV', 'VkChromaLocation', 'VkChromaLocationKHR',
    'VkChromaLocationKHR__enumvalues', 'VkClearAttachment',
    'VkClearColorValue', 'VkClearDepthStencilValue', 'VkClearRect',
    'VkClearValue', 'VkCoarseSampleLocationNV',
    'VkCoarseSampleOrderCustomNV', 'VkCoarseSampleOrderTypeNV',
    'VkColorBlendAdvancedEXT', 'VkColorBlendEquationEXT',
    'VkColorComponentFlagBits', 'VkColorComponentFlags',
    'VkColorSpaceKHR', 'VkCommandBuffer',
    'VkCommandBufferAllocateInfo', 'VkCommandBufferBeginInfo',
    'VkCommandBufferInheritanceConditionalRenderingInfoEXT',
    'VkCommandBufferInheritanceInfo',
    'VkCommandBufferInheritanceRenderPassTransformInfoQCOM',
    'VkCommandBufferInheritanceRenderingInfo',
    'VkCommandBufferInheritanceRenderingInfoKHR',
    'VkCommandBufferInheritanceViewportScissorInfoNV',
    'VkCommandBufferLevel', 'VkCommandBufferResetFlagBits',
    'VkCommandBufferResetFlags', 'VkCommandBufferSubmitInfo',
    'VkCommandBufferSubmitInfoKHR', 'VkCommandBufferUsageFlagBits',
    'VkCommandBufferUsageFlags', 'VkCommandPool',
    'VkCommandPoolCreateFlagBits', 'VkCommandPoolCreateFlags',
    'VkCommandPoolCreateInfo', 'VkCommandPoolResetFlagBits',
    'VkCommandPoolResetFlags', 'VkCommandPoolTrimFlags',
    'VkCommandPoolTrimFlagsKHR', 'VkCompareOp', 'VkComponentMapping',
    'VkComponentSwizzle', 'VkComponentTypeKHR', 'VkComponentTypeNV',
    'VkComponentTypeNV__enumvalues', 'VkCompositeAlphaFlagBitsKHR',
    'VkCompositeAlphaFlagsKHR', 'VkComputePipelineCreateInfo',
    'VkComputePipelineIndirectBufferInfoNV',
    'VkConditionalRenderingBeginInfoEXT',
    'VkConditionalRenderingFlagBitsEXT',
    'VkConditionalRenderingFlagsEXT', 'VkConformanceVersion',
    'VkConformanceVersionKHR', 'VkConservativeRasterizationModeEXT',
    'VkCooperativeMatrixPropertiesKHR',
    'VkCooperativeMatrixPropertiesNV',
    'VkCopyAccelerationStructureInfoKHR',
    'VkCopyAccelerationStructureModeKHR',
    'VkCopyAccelerationStructureModeNV',
    'VkCopyAccelerationStructureModeNV__enumvalues',
    'VkCopyAccelerationStructureToMemoryInfoKHR', 'VkCopyBufferInfo2',
    'VkCopyBufferInfo2KHR', 'VkCopyBufferToImageInfo2',
    'VkCopyBufferToImageInfo2KHR', 'VkCopyCommandTransformInfoQCOM',
    'VkCopyDescriptorSet', 'VkCopyImageInfo2', 'VkCopyImageInfo2KHR',
    'VkCopyImageToBufferInfo2', 'VkCopyImageToBufferInfo2KHR',
    'VkCopyImageToImageInfoEXT', 'VkCopyImageToMemoryInfoEXT',
    'VkCopyMemoryIndirectCommandNV',
    'VkCopyMemoryToAccelerationStructureInfoKHR',
    'VkCopyMemoryToImageIndirectCommandNV',
    'VkCopyMemoryToImageInfoEXT', 'VkCopyMemoryToMicromapInfoEXT',
    'VkCopyMicromapInfoEXT', 'VkCopyMicromapModeEXT',
    'VkCopyMicromapToMemoryInfoEXT', 'VkCoverageModulationModeNV',
    'VkCoverageReductionModeNV', 'VkCuFunctionCreateInfoNVX',
    'VkCuFunctionNVX', 'VkCuLaunchInfoNVX', 'VkCuModuleCreateInfoNVX',
    'VkCuModuleNVX', 'VkCubicFilterWeightsQCOM',
    'VkCudaFunctionCreateInfoNV', 'VkCudaFunctionNV',
    'VkCudaLaunchInfoNV', 'VkCudaModuleCreateInfoNV',
    'VkCudaModuleNV', 'VkCullModeFlagBits', 'VkCullModeFlags',
    'VkDebugMarkerMarkerInfoEXT', 'VkDebugMarkerObjectNameInfoEXT',
    'VkDebugMarkerObjectTagInfoEXT',
    'VkDebugReportCallbackCreateInfoEXT', 'VkDebugReportCallbackEXT',
    'VkDebugReportFlagBitsEXT', 'VkDebugReportFlagsEXT',
    'VkDebugReportObjectTypeEXT', 'VkDebugUtilsLabelEXT',
    'VkDebugUtilsMessageSeverityFlagBitsEXT',
    'VkDebugUtilsMessageSeverityFlagsEXT',
    'VkDebugUtilsMessageTypeFlagBitsEXT',
    'VkDebugUtilsMessageTypeFlagsEXT',
    'VkDebugUtilsMessengerCallbackDataEXT',
    'VkDebugUtilsMessengerCallbackDataFlagsEXT',
    'VkDebugUtilsMessengerCreateFlagsEXT',
    'VkDebugUtilsMessengerCreateInfoEXT', 'VkDebugUtilsMessengerEXT',
    'VkDebugUtilsObjectNameInfoEXT', 'VkDebugUtilsObjectTagInfoEXT',
    'VkDecompressMemoryRegionNV',
    'VkDedicatedAllocationBufferCreateInfoNV',
    'VkDedicatedAllocationImageCreateInfoNV',
    'VkDedicatedAllocationMemoryAllocateInfoNV',
    'VkDeferredOperationKHR', 'VkDependencyFlagBits',
    'VkDependencyFlags', 'VkDependencyInfo', 'VkDependencyInfoKHR',
    'VkDepthBiasInfoEXT', 'VkDepthBiasRepresentationEXT',
    'VkDepthBiasRepresentationInfoEXT', 'VkDescriptorAddressInfoEXT',
    'VkDescriptorBindingFlagBits', 'VkDescriptorBindingFlagBitsEXT',
    'VkDescriptorBindingFlagBitsEXT__enumvalues',
    'VkDescriptorBindingFlags', 'VkDescriptorBindingFlagsEXT',
    'VkDescriptorBufferBindingInfoEXT',
    'VkDescriptorBufferBindingPushDescriptorBufferHandleEXT',
    'VkDescriptorBufferInfo', 'VkDescriptorDataEXT',
    'VkDescriptorGetInfoEXT', 'VkDescriptorImageInfo',
    'VkDescriptorPool', 'VkDescriptorPoolCreateFlagBits',
    'VkDescriptorPoolCreateFlags', 'VkDescriptorPoolCreateInfo',
    'VkDescriptorPoolInlineUniformBlockCreateInfo',
    'VkDescriptorPoolInlineUniformBlockCreateInfoEXT',
    'VkDescriptorPoolResetFlags', 'VkDescriptorPoolSize',
    'VkDescriptorSet', 'VkDescriptorSetAllocateInfo',
    'VkDescriptorSetBindingReferenceVALVE', 'VkDescriptorSetLayout',
    'VkDescriptorSetLayoutBinding',
    'VkDescriptorSetLayoutBindingFlagsCreateInfo',
    'VkDescriptorSetLayoutBindingFlagsCreateInfoEXT',
    'VkDescriptorSetLayoutCreateFlagBits',
    'VkDescriptorSetLayoutCreateFlags',
    'VkDescriptorSetLayoutCreateInfo',
    'VkDescriptorSetLayoutHostMappingInfoVALVE',
    'VkDescriptorSetLayoutSupport', 'VkDescriptorSetLayoutSupportKHR',
    'VkDescriptorSetVariableDescriptorCountAllocateInfo',
    'VkDescriptorSetVariableDescriptorCountAllocateInfoEXT',
    'VkDescriptorSetVariableDescriptorCountLayoutSupport',
    'VkDescriptorSetVariableDescriptorCountLayoutSupportEXT',
    'VkDescriptorType', 'VkDescriptorUpdateTemplate',
    'VkDescriptorUpdateTemplateCreateFlags',
    'VkDescriptorUpdateTemplateCreateFlagsKHR',
    'VkDescriptorUpdateTemplateCreateInfo',
    'VkDescriptorUpdateTemplateCreateInfoKHR',
    'VkDescriptorUpdateTemplateEntry',
    'VkDescriptorUpdateTemplateEntryKHR',
    'VkDescriptorUpdateTemplateKHR', 'VkDescriptorUpdateTemplateType',
    'VkDescriptorUpdateTemplateTypeKHR',
    'VkDescriptorUpdateTemplateTypeKHR__enumvalues', 'VkDevice',
    'VkDeviceAddress', 'VkDeviceAddressBindingCallbackDataEXT',
    'VkDeviceAddressBindingFlagBitsEXT',
    'VkDeviceAddressBindingFlagsEXT', 'VkDeviceAddressBindingTypeEXT',
    'VkDeviceBufferMemoryRequirements',
    'VkDeviceBufferMemoryRequirementsKHR', 'VkDeviceCreateFlags',
    'VkDeviceCreateInfo', 'VkDeviceDeviceMemoryReportCreateInfoEXT',
    'VkDeviceDiagnosticsConfigCreateInfoNV',
    'VkDeviceDiagnosticsConfigFlagBitsNV',
    'VkDeviceDiagnosticsConfigFlagsNV', 'VkDeviceEventInfoEXT',
    'VkDeviceEventTypeEXT', 'VkDeviceFaultAddressInfoEXT',
    'VkDeviceFaultAddressTypeEXT', 'VkDeviceFaultCountsEXT',
    'VkDeviceFaultInfoEXT',
    'VkDeviceFaultVendorBinaryHeaderVersionEXT',
    'VkDeviceFaultVendorBinaryHeaderVersionOneEXT',
    'VkDeviceFaultVendorInfoEXT', 'VkDeviceGroupBindSparseInfo',
    'VkDeviceGroupBindSparseInfoKHR',
    'VkDeviceGroupCommandBufferBeginInfo',
    'VkDeviceGroupCommandBufferBeginInfoKHR',
    'VkDeviceGroupDeviceCreateInfo',
    'VkDeviceGroupDeviceCreateInfoKHR',
    'VkDeviceGroupPresentCapabilitiesKHR',
    'VkDeviceGroupPresentInfoKHR',
    'VkDeviceGroupPresentModeFlagBitsKHR',
    'VkDeviceGroupPresentModeFlagsKHR',
    'VkDeviceGroupRenderPassBeginInfo',
    'VkDeviceGroupRenderPassBeginInfoKHR', 'VkDeviceGroupSubmitInfo',
    'VkDeviceGroupSubmitInfoKHR',
    'VkDeviceGroupSwapchainCreateInfoKHR',
    'VkDeviceImageMemoryRequirements',
    'VkDeviceImageMemoryRequirementsKHR',
    'VkDeviceImageSubresourceInfoKHR', 'VkDeviceMemory',
    'VkDeviceMemoryOpaqueCaptureAddressInfo',
    'VkDeviceMemoryOpaqueCaptureAddressInfoKHR',
    'VkDeviceMemoryOverallocationCreateInfoAMD',
    'VkDeviceMemoryReportCallbackDataEXT',
    'VkDeviceMemoryReportEventTypeEXT',
    'VkDeviceMemoryReportFlagsEXT', 'VkDeviceOrHostAddressConstKHR',
    'VkDeviceOrHostAddressKHR', 'VkDevicePrivateDataCreateInfo',
    'VkDevicePrivateDataCreateInfoEXT', 'VkDeviceQueueCreateFlagBits',
    'VkDeviceQueueCreateFlags', 'VkDeviceQueueCreateInfo',
    'VkDeviceQueueGlobalPriorityCreateInfoEXT',
    'VkDeviceQueueGlobalPriorityCreateInfoKHR', 'VkDeviceQueueInfo2',
    'VkDeviceQueueShaderCoreControlCreateInfoARM', 'VkDeviceSize',
    'VkDirectDriverLoadingFlagsLUNARG',
    'VkDirectDriverLoadingInfoLUNARG',
    'VkDirectDriverLoadingListLUNARG',
    'VkDirectDriverLoadingModeLUNARG', 'VkDiscardRectangleModeEXT',
    'VkDispatchIndirectCommand', 'VkDisplayEventInfoEXT',
    'VkDisplayEventTypeEXT', 'VkDisplayKHR',
    'VkDisplayModeCreateFlagsKHR', 'VkDisplayModeCreateInfoKHR',
    'VkDisplayModeKHR', 'VkDisplayModeParametersKHR',
    'VkDisplayModeProperties2KHR', 'VkDisplayModePropertiesKHR',
    'VkDisplayNativeHdrSurfaceCapabilitiesAMD',
    'VkDisplayPlaneAlphaFlagBitsKHR', 'VkDisplayPlaneAlphaFlagsKHR',
    'VkDisplayPlaneCapabilities2KHR', 'VkDisplayPlaneCapabilitiesKHR',
    'VkDisplayPlaneInfo2KHR', 'VkDisplayPlaneProperties2KHR',
    'VkDisplayPlanePropertiesKHR', 'VkDisplayPowerInfoEXT',
    'VkDisplayPowerStateEXT', 'VkDisplayPresentInfoKHR',
    'VkDisplayProperties2KHR', 'VkDisplayPropertiesKHR',
    'VkDisplaySurfaceCreateFlagsKHR', 'VkDisplaySurfaceCreateInfoKHR',
    'VkDrawIndexedIndirectCommand', 'VkDrawIndirectCommand',
    'VkDrawMeshTasksIndirectCommandEXT',
    'VkDrawMeshTasksIndirectCommandNV', 'VkDriverId', 'VkDriverIdKHR',
    'VkDriverIdKHR__enumvalues', 'VkDrmFormatModifierProperties2EXT',
    'VkDrmFormatModifierPropertiesEXT',
    'VkDrmFormatModifierPropertiesList2EXT',
    'VkDrmFormatModifierPropertiesListEXT', 'VkDynamicState',
    'VkEvent', 'VkEventCreateFlagBits', 'VkEventCreateFlags',
    'VkEventCreateInfo', 'VkExportFenceCreateInfo',
    'VkExportFenceCreateInfoKHR', 'VkExportMemoryAllocateInfo',
    'VkExportMemoryAllocateInfoKHR', 'VkExportMemoryAllocateInfoNV',
    'VkExportSemaphoreCreateInfo', 'VkExportSemaphoreCreateInfoKHR',
    'VkExtensionProperties', 'VkExtent2D', 'VkExtent3D',
    'VkExternalBufferProperties', 'VkExternalBufferPropertiesKHR',
    'VkExternalFenceFeatureFlagBits',
    'VkExternalFenceFeatureFlagBitsKHR',
    'VkExternalFenceFeatureFlagBitsKHR__enumvalues',
    'VkExternalFenceFeatureFlags', 'VkExternalFenceFeatureFlagsKHR',
    'VkExternalFenceHandleTypeFlagBits',
    'VkExternalFenceHandleTypeFlagBitsKHR',
    'VkExternalFenceHandleTypeFlagBitsKHR__enumvalues',
    'VkExternalFenceHandleTypeFlags',
    'VkExternalFenceHandleTypeFlagsKHR', 'VkExternalFenceProperties',
    'VkExternalFencePropertiesKHR', 'VkExternalImageFormatProperties',
    'VkExternalImageFormatPropertiesKHR',
    'VkExternalImageFormatPropertiesNV',
    'VkExternalMemoryAcquireUnmodifiedEXT',
    'VkExternalMemoryBufferCreateInfo',
    'VkExternalMemoryBufferCreateInfoKHR',
    'VkExternalMemoryFeatureFlagBits',
    'VkExternalMemoryFeatureFlagBitsKHR',
    'VkExternalMemoryFeatureFlagBitsKHR__enumvalues',
    'VkExternalMemoryFeatureFlagBitsNV',
    'VkExternalMemoryFeatureFlags', 'VkExternalMemoryFeatureFlagsKHR',
    'VkExternalMemoryFeatureFlagsNV',
    'VkExternalMemoryHandleTypeFlagBits',
    'VkExternalMemoryHandleTypeFlagBitsKHR',
    'VkExternalMemoryHandleTypeFlagBitsKHR__enumvalues',
    'VkExternalMemoryHandleTypeFlagBitsNV',
    'VkExternalMemoryHandleTypeFlags',
    'VkExternalMemoryHandleTypeFlagsKHR',
    'VkExternalMemoryHandleTypeFlagsNV',
    'VkExternalMemoryImageCreateInfo',
    'VkExternalMemoryImageCreateInfoKHR',
    'VkExternalMemoryImageCreateInfoNV', 'VkExternalMemoryProperties',
    'VkExternalMemoryPropertiesKHR',
    'VkExternalSemaphoreFeatureFlagBits',
    'VkExternalSemaphoreFeatureFlagBitsKHR',
    'VkExternalSemaphoreFeatureFlagBitsKHR__enumvalues',
    'VkExternalSemaphoreFeatureFlags',
    'VkExternalSemaphoreFeatureFlagsKHR',
    'VkExternalSemaphoreHandleTypeFlagBits',
    'VkExternalSemaphoreHandleTypeFlagBitsKHR',
    'VkExternalSemaphoreHandleTypeFlagBitsKHR__enumvalues',
    'VkExternalSemaphoreHandleTypeFlags',
    'VkExternalSemaphoreHandleTypeFlagsKHR',
    'VkExternalSemaphoreProperties',
    'VkExternalSemaphorePropertiesKHR', 'VkFence',
    'VkFenceCreateFlagBits', 'VkFenceCreateFlags',
    'VkFenceCreateInfo', 'VkFenceGetFdInfoKHR',
    'VkFenceImportFlagBits', 'VkFenceImportFlagBitsKHR',
    'VkFenceImportFlagBitsKHR__enumvalues', 'VkFenceImportFlags',
    'VkFenceImportFlagsKHR', 'VkFilter',
    'VkFilterCubicImageViewImageFormatPropertiesEXT', 'VkFlags',
    'VkFlags64', 'VkFormat', 'VkFormatFeatureFlagBits',
    'VkFormatFeatureFlagBits2', 'VkFormatFeatureFlagBits2KHR',
    'VkFormatFeatureFlags', 'VkFormatFeatureFlags2',
    'VkFormatFeatureFlags2KHR', 'VkFormatProperties',
    'VkFormatProperties2', 'VkFormatProperties2KHR',
    'VkFormatProperties3', 'VkFormatProperties3KHR',
    'VkFragmentShadingRateAttachmentInfoKHR',
    'VkFragmentShadingRateCombinerOpKHR', 'VkFragmentShadingRateNV',
    'VkFragmentShadingRateTypeNV', 'VkFrameBoundaryEXT',
    'VkFrameBoundaryFlagBitsEXT', 'VkFrameBoundaryFlagsEXT',
    'VkFramebuffer', 'VkFramebufferAttachmentImageInfo',
    'VkFramebufferAttachmentImageInfoKHR',
    'VkFramebufferAttachmentsCreateInfo',
    'VkFramebufferAttachmentsCreateInfoKHR',
    'VkFramebufferCreateFlagBits', 'VkFramebufferCreateFlags',
    'VkFramebufferCreateInfo',
    'VkFramebufferMixedSamplesCombinationNV', 'VkFrontFace',
    'VkGeneratedCommandsInfoNV',
    'VkGeneratedCommandsMemoryRequirementsInfoNV', 'VkGeometryAABBNV',
    'VkGeometryDataNV', 'VkGeometryFlagBitsKHR',
    'VkGeometryFlagBitsNV', 'VkGeometryFlagBitsNV__enumvalues',
    'VkGeometryFlagsKHR', 'VkGeometryFlagsNV',
    'VkGeometryInstanceFlagBitsKHR', 'VkGeometryInstanceFlagBitsNV',
    'VkGeometryInstanceFlagBitsNV__enumvalues',
    'VkGeometryInstanceFlagsKHR', 'VkGeometryInstanceFlagsNV',
    'VkGeometryNV', 'VkGeometryTrianglesNV', 'VkGeometryTypeKHR',
    'VkGeometryTypeNV', 'VkGeometryTypeNV__enumvalues',
    'VkGetLatencyMarkerInfoNV', 'VkGraphicsPipelineCreateInfo',
    'VkGraphicsPipelineLibraryCreateInfoEXT',
    'VkGraphicsPipelineLibraryFlagBitsEXT',
    'VkGraphicsPipelineLibraryFlagsEXT',
    'VkGraphicsPipelineShaderGroupsCreateInfoNV',
    'VkGraphicsShaderGroupCreateInfoNV', 'VkHdrMetadataEXT',
    'VkHeadlessSurfaceCreateFlagsEXT',
    'VkHeadlessSurfaceCreateInfoEXT',
    'VkHostImageCopyDevicePerformanceQueryEXT',
    'VkHostImageCopyFlagBitsEXT', 'VkHostImageCopyFlagsEXT',
    'VkHostImageLayoutTransitionInfoEXT', 'VkImage',
    'VkImageAspectFlagBits', 'VkImageAspectFlags', 'VkImageBlit',
    'VkImageBlit2', 'VkImageBlit2KHR',
    'VkImageCaptureDescriptorDataInfoEXT',
    'VkImageCompressionControlEXT',
    'VkImageCompressionFixedRateFlagBitsEXT',
    'VkImageCompressionFixedRateFlagsEXT',
    'VkImageCompressionFlagBitsEXT', 'VkImageCompressionFlagsEXT',
    'VkImageCompressionPropertiesEXT', 'VkImageCopy', 'VkImageCopy2',
    'VkImageCopy2KHR', 'VkImageCreateFlagBits', 'VkImageCreateFlags',
    'VkImageCreateInfo',
    'VkImageDrmFormatModifierExplicitCreateInfoEXT',
    'VkImageDrmFormatModifierListCreateInfoEXT',
    'VkImageDrmFormatModifierPropertiesEXT',
    'VkImageFormatListCreateInfo', 'VkImageFormatListCreateInfoKHR',
    'VkImageFormatProperties', 'VkImageFormatProperties2',
    'VkImageFormatProperties2KHR', 'VkImageLayout',
    'VkImageMemoryBarrier', 'VkImageMemoryBarrier2',
    'VkImageMemoryBarrier2KHR', 'VkImageMemoryRequirementsInfo2',
    'VkImageMemoryRequirementsInfo2KHR',
    'VkImagePlaneMemoryRequirementsInfo',
    'VkImagePlaneMemoryRequirementsInfoKHR', 'VkImageResolve',
    'VkImageResolve2', 'VkImageResolve2KHR',
    'VkImageSparseMemoryRequirementsInfo2',
    'VkImageSparseMemoryRequirementsInfo2KHR',
    'VkImageStencilUsageCreateInfo',
    'VkImageStencilUsageCreateInfoEXT', 'VkImageSubresource',
    'VkImageSubresource2EXT', 'VkImageSubresource2KHR',
    'VkImageSubresourceLayers', 'VkImageSubresourceRange',
    'VkImageSwapchainCreateInfoKHR', 'VkImageTiling',
    'VkImageToMemoryCopyEXT', 'VkImageType', 'VkImageUsageFlagBits',
    'VkImageUsageFlags', 'VkImageView',
    'VkImageViewASTCDecodeModeEXT', 'VkImageViewAddressPropertiesNVX',
    'VkImageViewCaptureDescriptorDataInfoEXT',
    'VkImageViewCreateFlagBits', 'VkImageViewCreateFlags',
    'VkImageViewCreateInfo', 'VkImageViewHandleInfoNVX',
    'VkImageViewMinLodCreateInfoEXT',
    'VkImageViewSampleWeightCreateInfoQCOM',
    'VkImageViewSlicedCreateInfoEXT', 'VkImageViewType',
    'VkImageViewUsageCreateInfo', 'VkImageViewUsageCreateInfoKHR',
    'VkImportFenceFdInfoKHR', 'VkImportMemoryFdInfoKHR',
    'VkImportMemoryHostPointerInfoEXT', 'VkImportSemaphoreFdInfoKHR',
    'VkIndexType', 'VkIndirectCommandsLayoutCreateInfoNV',
    'VkIndirectCommandsLayoutNV', 'VkIndirectCommandsLayoutTokenNV',
    'VkIndirectCommandsLayoutUsageFlagBitsNV',
    'VkIndirectCommandsLayoutUsageFlagsNV',
    'VkIndirectCommandsStreamNV', 'VkIndirectCommandsTokenTypeNV',
    'VkIndirectStateFlagBitsNV', 'VkIndirectStateFlagsNV',
    'VkInitializePerformanceApiInfoINTEL',
    'VkInputAttachmentAspectReference',
    'VkInputAttachmentAspectReferenceKHR', 'VkInstance',
    'VkInstanceCreateFlagBits', 'VkInstanceCreateFlags',
    'VkInstanceCreateInfo', 'VkInternalAllocationType',
    'VkLatencyMarkerNV', 'VkLatencySleepInfoNV',
    'VkLatencySleepModeInfoNV', 'VkLatencySubmissionPresentIdNV',
    'VkLatencySurfaceCapabilitiesNV', 'VkLatencyTimingsFrameReportNV',
    'VkLayerProperties', 'VkLayerSettingEXT', 'VkLayerSettingTypeEXT',
    'VkLayerSettingsCreateInfoEXT',
    'VkLayeredDriverUnderlyingApiMSFT', 'VkLineRasterizationModeEXT',
    'VkLogicOp', 'VkMappedMemoryRange', 'VkMemoryAllocateFlagBits',
    'VkMemoryAllocateFlagBitsKHR',
    'VkMemoryAllocateFlagBitsKHR__enumvalues',
    'VkMemoryAllocateFlags', 'VkMemoryAllocateFlagsInfo',
    'VkMemoryAllocateFlagsInfoKHR', 'VkMemoryAllocateFlagsKHR',
    'VkMemoryAllocateInfo', 'VkMemoryBarrier', 'VkMemoryBarrier2',
    'VkMemoryBarrier2KHR', 'VkMemoryDecompressionMethodFlagBitsNV',
    'VkMemoryDecompressionMethodFlagsNV',
    'VkMemoryDedicatedAllocateInfo',
    'VkMemoryDedicatedAllocateInfoKHR',
    'VkMemoryDedicatedRequirements',
    'VkMemoryDedicatedRequirementsKHR', 'VkMemoryFdPropertiesKHR',
    'VkMemoryGetFdInfoKHR', 'VkMemoryGetRemoteAddressInfoNV',
    'VkMemoryHeap', 'VkMemoryHeapFlagBits', 'VkMemoryHeapFlags',
    'VkMemoryHostPointerPropertiesEXT', 'VkMemoryMapFlags',
    'VkMemoryMapInfoKHR', 'VkMemoryOpaqueCaptureAddressAllocateInfo',
    'VkMemoryOpaqueCaptureAddressAllocateInfoKHR',
    'VkMemoryOverallocationBehaviorAMD',
    'VkMemoryPriorityAllocateInfoEXT', 'VkMemoryPropertyFlagBits',
    'VkMemoryPropertyFlags', 'VkMemoryRequirements',
    'VkMemoryRequirements2', 'VkMemoryRequirements2KHR',
    'VkMemoryToImageCopyEXT', 'VkMemoryType', 'VkMemoryUnmapFlagsKHR',
    'VkMemoryUnmapInfoKHR', 'VkMicromapBuildInfoEXT',
    'VkMicromapBuildSizesInfoEXT', 'VkMicromapCreateFlagBitsEXT',
    'VkMicromapCreateFlagsEXT', 'VkMicromapCreateInfoEXT',
    'VkMicromapEXT', 'VkMicromapTriangleEXT', 'VkMicromapTypeEXT',
    'VkMicromapUsageEXT', 'VkMicromapVersionInfoEXT',
    'VkMultiDrawIndexedInfoEXT', 'VkMultiDrawInfoEXT',
    'VkMultisamplePropertiesEXT',
    'VkMultisampledRenderToSingleSampledInfoEXT',
    'VkMultiviewPerViewAttributesInfoNVX',
    'VkMultiviewPerViewRenderAreasRenderPassBeginInfoQCOM',
    'VkMutableDescriptorTypeCreateInfoEXT',
    'VkMutableDescriptorTypeCreateInfoVALVE',
    'VkMutableDescriptorTypeListEXT',
    'VkMutableDescriptorTypeListVALVE', 'VkObjectType', 'VkOffset2D',
    'VkOffset3D', 'VkOpacityMicromapFormatEXT',
    'VkOpacityMicromapSpecialIndexEXT',
    'VkOpaqueCaptureDescriptorDataCreateInfoEXT',
    'VkOpticalFlowExecuteFlagBitsNV', 'VkOpticalFlowExecuteFlagsNV',
    'VkOpticalFlowExecuteInfoNV', 'VkOpticalFlowGridSizeFlagBitsNV',
    'VkOpticalFlowGridSizeFlagsNV', 'VkOpticalFlowImageFormatInfoNV',
    'VkOpticalFlowImageFormatPropertiesNV',
    'VkOpticalFlowPerformanceLevelNV',
    'VkOpticalFlowSessionBindingPointNV',
    'VkOpticalFlowSessionCreateFlagBitsNV',
    'VkOpticalFlowSessionCreateFlagsNV',
    'VkOpticalFlowSessionCreateInfoNV',
    'VkOpticalFlowSessionCreatePrivateDataInfoNV',
    'VkOpticalFlowSessionNV', 'VkOpticalFlowUsageFlagBitsNV',
    'VkOpticalFlowUsageFlagsNV', 'VkOutOfBandQueueTypeInfoNV',
    'VkOutOfBandQueueTypeNV', 'VkPastPresentationTimingGOOGLE',
    'VkPeerMemoryFeatureFlagBits', 'VkPeerMemoryFeatureFlagBitsKHR',
    'VkPeerMemoryFeatureFlagBitsKHR__enumvalues',
    'VkPeerMemoryFeatureFlags', 'VkPeerMemoryFeatureFlagsKHR',
    'VkPerformanceConfigurationAcquireInfoINTEL',
    'VkPerformanceConfigurationINTEL',
    'VkPerformanceConfigurationTypeINTEL',
    'VkPerformanceCounterDescriptionFlagBitsKHR',
    'VkPerformanceCounterDescriptionFlagsKHR',
    'VkPerformanceCounterDescriptionKHR', 'VkPerformanceCounterKHR',
    'VkPerformanceCounterResultKHR', 'VkPerformanceCounterScopeKHR',
    'VkPerformanceCounterStorageKHR', 'VkPerformanceCounterUnitKHR',
    'VkPerformanceMarkerInfoINTEL', 'VkPerformanceOverrideInfoINTEL',
    'VkPerformanceOverrideTypeINTEL',
    'VkPerformanceParameterTypeINTEL',
    'VkPerformanceQuerySubmitInfoKHR',
    'VkPerformanceStreamMarkerInfoINTEL',
    'VkPerformanceValueDataINTEL', 'VkPerformanceValueINTEL',
    'VkPerformanceValueTypeINTEL', 'VkPhysicalDevice',
    'VkPhysicalDevice16BitStorageFeatures',
    'VkPhysicalDevice16BitStorageFeaturesKHR',
    'VkPhysicalDevice4444FormatsFeaturesEXT',
    'VkPhysicalDevice8BitStorageFeatures',
    'VkPhysicalDevice8BitStorageFeaturesKHR',
    'VkPhysicalDeviceASTCDecodeFeaturesEXT',
    'VkPhysicalDeviceAccelerationStructureFeaturesKHR',
    'VkPhysicalDeviceAccelerationStructurePropertiesKHR',
    'VkPhysicalDeviceAddressBindingReportFeaturesEXT',
    'VkPhysicalDeviceAmigoProfilingFeaturesSEC',
    'VkPhysicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXT',
    'VkPhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT',
    'VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT',
    'VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT',
    'VkPhysicalDeviceBorderColorSwizzleFeaturesEXT',
    'VkPhysicalDeviceBufferAddressFeaturesEXT',
    'VkPhysicalDeviceBufferDeviceAddressFeatures',
    'VkPhysicalDeviceBufferDeviceAddressFeaturesEXT',
    'VkPhysicalDeviceBufferDeviceAddressFeaturesKHR',
    'VkPhysicalDeviceClusterCullingShaderFeaturesHUAWEI',
    'VkPhysicalDeviceClusterCullingShaderPropertiesHUAWEI',
    'VkPhysicalDeviceClusterCullingShaderVrsFeaturesHUAWEI',
    'VkPhysicalDeviceCoherentMemoryFeaturesAMD',
    'VkPhysicalDeviceColorWriteEnableFeaturesEXT',
    'VkPhysicalDeviceComputeShaderDerivativesFeaturesNV',
    'VkPhysicalDeviceConditionalRenderingFeaturesEXT',
    'VkPhysicalDeviceConservativeRasterizationPropertiesEXT',
    'VkPhysicalDeviceCooperativeMatrixFeaturesKHR',
    'VkPhysicalDeviceCooperativeMatrixFeaturesNV',
    'VkPhysicalDeviceCooperativeMatrixPropertiesKHR',
    'VkPhysicalDeviceCooperativeMatrixPropertiesNV',
    'VkPhysicalDeviceCopyMemoryIndirectFeaturesNV',
    'VkPhysicalDeviceCopyMemoryIndirectPropertiesNV',
    'VkPhysicalDeviceCornerSampledImageFeaturesNV',
    'VkPhysicalDeviceCoverageReductionModeFeaturesNV',
    'VkPhysicalDeviceCubicClampFeaturesQCOM',
    'VkPhysicalDeviceCubicWeightsFeaturesQCOM',
    'VkPhysicalDeviceCudaKernelLaunchFeaturesNV',
    'VkPhysicalDeviceCudaKernelLaunchPropertiesNV',
    'VkPhysicalDeviceCustomBorderColorFeaturesEXT',
    'VkPhysicalDeviceCustomBorderColorPropertiesEXT',
    'VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV',
    'VkPhysicalDeviceDepthBiasControlFeaturesEXT',
    'VkPhysicalDeviceDepthClampZeroOneFeaturesEXT',
    'VkPhysicalDeviceDepthClipControlFeaturesEXT',
    'VkPhysicalDeviceDepthClipEnableFeaturesEXT',
    'VkPhysicalDeviceDepthStencilResolveProperties',
    'VkPhysicalDeviceDepthStencilResolvePropertiesKHR',
    'VkPhysicalDeviceDescriptorBufferDensityMapPropertiesEXT',
    'VkPhysicalDeviceDescriptorBufferFeaturesEXT',
    'VkPhysicalDeviceDescriptorBufferPropertiesEXT',
    'VkPhysicalDeviceDescriptorIndexingFeatures',
    'VkPhysicalDeviceDescriptorIndexingFeaturesEXT',
    'VkPhysicalDeviceDescriptorIndexingProperties',
    'VkPhysicalDeviceDescriptorIndexingPropertiesEXT',
    'VkPhysicalDeviceDescriptorPoolOverallocationFeaturesNV',
    'VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE',
    'VkPhysicalDeviceDeviceGeneratedCommandsComputeFeaturesNV',
    'VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV',
    'VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV',
    'VkPhysicalDeviceDeviceMemoryReportFeaturesEXT',
    'VkPhysicalDeviceDiagnosticsConfigFeaturesNV',
    'VkPhysicalDeviceDiscardRectanglePropertiesEXT',
    'VkPhysicalDeviceDriverProperties',
    'VkPhysicalDeviceDriverPropertiesKHR',
    'VkPhysicalDeviceDrmPropertiesEXT',
    'VkPhysicalDeviceDynamicRenderingFeatures',
    'VkPhysicalDeviceDynamicRenderingFeaturesKHR',
    'VkPhysicalDeviceDynamicRenderingUnusedAttachmentsFeaturesEXT',
    'VkPhysicalDeviceExclusiveScissorFeaturesNV',
    'VkPhysicalDeviceExtendedDynamicState2FeaturesEXT',
    'VkPhysicalDeviceExtendedDynamicState3FeaturesEXT',
    'VkPhysicalDeviceExtendedDynamicState3PropertiesEXT',
    'VkPhysicalDeviceExtendedDynamicStateFeaturesEXT',
    'VkPhysicalDeviceExtendedSparseAddressSpaceFeaturesNV',
    'VkPhysicalDeviceExtendedSparseAddressSpacePropertiesNV',
    'VkPhysicalDeviceExternalBufferInfo',
    'VkPhysicalDeviceExternalBufferInfoKHR',
    'VkPhysicalDeviceExternalFenceInfo',
    'VkPhysicalDeviceExternalFenceInfoKHR',
    'VkPhysicalDeviceExternalImageFormatInfo',
    'VkPhysicalDeviceExternalImageFormatInfoKHR',
    'VkPhysicalDeviceExternalMemoryHostPropertiesEXT',
    'VkPhysicalDeviceExternalMemoryRDMAFeaturesNV',
    'VkPhysicalDeviceExternalSemaphoreInfo',
    'VkPhysicalDeviceExternalSemaphoreInfoKHR',
    'VkPhysicalDeviceFaultFeaturesEXT', 'VkPhysicalDeviceFeatures',
    'VkPhysicalDeviceFeatures2', 'VkPhysicalDeviceFeatures2KHR',
    'VkPhysicalDeviceFloat16Int8FeaturesKHR',
    'VkPhysicalDeviceFloatControlsProperties',
    'VkPhysicalDeviceFloatControlsPropertiesKHR',
    'VkPhysicalDeviceFragmentDensityMap2FeaturesEXT',
    'VkPhysicalDeviceFragmentDensityMap2PropertiesEXT',
    'VkPhysicalDeviceFragmentDensityMapFeaturesEXT',
    'VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM',
    'VkPhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM',
    'VkPhysicalDeviceFragmentDensityMapPropertiesEXT',
    'VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR',
    'VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV',
    'VkPhysicalDeviceFragmentShaderBarycentricPropertiesKHR',
    'VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT',
    'VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV',
    'VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV',
    'VkPhysicalDeviceFragmentShadingRateFeaturesKHR',
    'VkPhysicalDeviceFragmentShadingRateKHR',
    'VkPhysicalDeviceFragmentShadingRatePropertiesKHR',
    'VkPhysicalDeviceFrameBoundaryFeaturesEXT',
    'VkPhysicalDeviceGlobalPriorityQueryFeaturesEXT',
    'VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR',
    'VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT',
    'VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT',
    'VkPhysicalDeviceGroupProperties',
    'VkPhysicalDeviceGroupPropertiesKHR',
    'VkPhysicalDeviceHostImageCopyFeaturesEXT',
    'VkPhysicalDeviceHostImageCopyPropertiesEXT',
    'VkPhysicalDeviceHostQueryResetFeatures',
    'VkPhysicalDeviceHostQueryResetFeaturesEXT',
    'VkPhysicalDeviceIDProperties', 'VkPhysicalDeviceIDPropertiesKHR',
    'VkPhysicalDeviceImage2DViewOf3DFeaturesEXT',
    'VkPhysicalDeviceImageCompressionControlFeaturesEXT',
    'VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT',
    'VkPhysicalDeviceImageDrmFormatModifierInfoEXT',
    'VkPhysicalDeviceImageFormatInfo2',
    'VkPhysicalDeviceImageFormatInfo2KHR',
    'VkPhysicalDeviceImageProcessing2FeaturesQCOM',
    'VkPhysicalDeviceImageProcessing2PropertiesQCOM',
    'VkPhysicalDeviceImageProcessingFeaturesQCOM',
    'VkPhysicalDeviceImageProcessingPropertiesQCOM',
    'VkPhysicalDeviceImageRobustnessFeatures',
    'VkPhysicalDeviceImageRobustnessFeaturesEXT',
    'VkPhysicalDeviceImageSlicedViewOf3DFeaturesEXT',
    'VkPhysicalDeviceImageViewImageFormatInfoEXT',
    'VkPhysicalDeviceImageViewMinLodFeaturesEXT',
    'VkPhysicalDeviceImagelessFramebufferFeatures',
    'VkPhysicalDeviceImagelessFramebufferFeaturesKHR',
    'VkPhysicalDeviceIndexTypeUint8FeaturesEXT',
    'VkPhysicalDeviceInheritedViewportScissorFeaturesNV',
    'VkPhysicalDeviceInlineUniformBlockFeatures',
    'VkPhysicalDeviceInlineUniformBlockFeaturesEXT',
    'VkPhysicalDeviceInlineUniformBlockProperties',
    'VkPhysicalDeviceInlineUniformBlockPropertiesEXT',
    'VkPhysicalDeviceInvocationMaskFeaturesHUAWEI',
    'VkPhysicalDeviceLayeredDriverPropertiesMSFT',
    'VkPhysicalDeviceLegacyDitheringFeaturesEXT',
    'VkPhysicalDeviceLimits',
    'VkPhysicalDeviceLineRasterizationFeaturesEXT',
    'VkPhysicalDeviceLineRasterizationPropertiesEXT',
    'VkPhysicalDeviceLinearColorAttachmentFeaturesNV',
    'VkPhysicalDeviceMaintenance3Properties',
    'VkPhysicalDeviceMaintenance3PropertiesKHR',
    'VkPhysicalDeviceMaintenance4Features',
    'VkPhysicalDeviceMaintenance4FeaturesKHR',
    'VkPhysicalDeviceMaintenance4Properties',
    'VkPhysicalDeviceMaintenance4PropertiesKHR',
    'VkPhysicalDeviceMaintenance5FeaturesKHR',
    'VkPhysicalDeviceMaintenance5PropertiesKHR',
    'VkPhysicalDeviceMaintenance6FeaturesKHR',
    'VkPhysicalDeviceMaintenance6PropertiesKHR',
    'VkPhysicalDeviceMemoryBudgetPropertiesEXT',
    'VkPhysicalDeviceMemoryDecompressionFeaturesNV',
    'VkPhysicalDeviceMemoryDecompressionPropertiesNV',
    'VkPhysicalDeviceMemoryPriorityFeaturesEXT',
    'VkPhysicalDeviceMemoryProperties',
    'VkPhysicalDeviceMemoryProperties2',
    'VkPhysicalDeviceMemoryProperties2KHR',
    'VkPhysicalDeviceMeshShaderFeaturesEXT',
    'VkPhysicalDeviceMeshShaderFeaturesNV',
    'VkPhysicalDeviceMeshShaderPropertiesEXT',
    'VkPhysicalDeviceMeshShaderPropertiesNV',
    'VkPhysicalDeviceMultiDrawFeaturesEXT',
    'VkPhysicalDeviceMultiDrawPropertiesEXT',
    'VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT',
    'VkPhysicalDeviceMultiviewFeatures',
    'VkPhysicalDeviceMultiviewFeaturesKHR',
    'VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX',
    'VkPhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOM',
    'VkPhysicalDeviceMultiviewPerViewViewportsFeaturesQCOM',
    'VkPhysicalDeviceMultiviewProperties',
    'VkPhysicalDeviceMultiviewPropertiesKHR',
    'VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT',
    'VkPhysicalDeviceMutableDescriptorTypeFeaturesVALVE',
    'VkPhysicalDeviceNestedCommandBufferFeaturesEXT',
    'VkPhysicalDeviceNestedCommandBufferPropertiesEXT',
    'VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT',
    'VkPhysicalDeviceOpacityMicromapFeaturesEXT',
    'VkPhysicalDeviceOpacityMicromapPropertiesEXT',
    'VkPhysicalDeviceOpticalFlowFeaturesNV',
    'VkPhysicalDeviceOpticalFlowPropertiesNV',
    'VkPhysicalDevicePCIBusInfoPropertiesEXT',
    'VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT',
    'VkPhysicalDevicePerStageDescriptorSetFeaturesNV',
    'VkPhysicalDevicePerformanceQueryFeaturesKHR',
    'VkPhysicalDevicePerformanceQueryPropertiesKHR',
    'VkPhysicalDevicePipelineCreationCacheControlFeatures',
    'VkPhysicalDevicePipelineCreationCacheControlFeaturesEXT',
    'VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR',
    'VkPhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT',
    'VkPhysicalDevicePipelinePropertiesFeaturesEXT',
    'VkPhysicalDevicePipelineProtectedAccessFeaturesEXT',
    'VkPhysicalDevicePipelineRobustnessFeaturesEXT',
    'VkPhysicalDevicePipelineRobustnessPropertiesEXT',
    'VkPhysicalDevicePointClippingProperties',
    'VkPhysicalDevicePointClippingPropertiesKHR',
    'VkPhysicalDevicePresentBarrierFeaturesNV',
    'VkPhysicalDevicePresentIdFeaturesKHR',
    'VkPhysicalDevicePresentWaitFeaturesKHR',
    'VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT',
    'VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT',
    'VkPhysicalDevicePrivateDataFeatures',
    'VkPhysicalDevicePrivateDataFeaturesEXT',
    'VkPhysicalDeviceProperties', 'VkPhysicalDeviceProperties2',
    'VkPhysicalDeviceProperties2KHR',
    'VkPhysicalDeviceProtectedMemoryFeatures',
    'VkPhysicalDeviceProtectedMemoryProperties',
    'VkPhysicalDeviceProvokingVertexFeaturesEXT',
    'VkPhysicalDeviceProvokingVertexPropertiesEXT',
    'VkPhysicalDevicePushDescriptorPropertiesKHR',
    'VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT',
    'VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesARM',
    'VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT',
    'VkPhysicalDeviceRayQueryFeaturesKHR',
    'VkPhysicalDeviceRayTracingInvocationReorderFeaturesNV',
    'VkPhysicalDeviceRayTracingInvocationReorderPropertiesNV',
    'VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR',
    'VkPhysicalDeviceRayTracingMotionBlurFeaturesNV',
    'VkPhysicalDeviceRayTracingPipelineFeaturesKHR',
    'VkPhysicalDeviceRayTracingPipelinePropertiesKHR',
    'VkPhysicalDeviceRayTracingPositionFetchFeaturesKHR',
    'VkPhysicalDeviceRayTracingPropertiesNV',
    'VkPhysicalDeviceRelaxedLineRasterizationFeaturesIMG',
    'VkPhysicalDeviceRenderPassStripedFeaturesARM',
    'VkPhysicalDeviceRenderPassStripedPropertiesARM',
    'VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV',
    'VkPhysicalDeviceRobustness2FeaturesEXT',
    'VkPhysicalDeviceRobustness2PropertiesEXT',
    'VkPhysicalDeviceSampleLocationsPropertiesEXT',
    'VkPhysicalDeviceSamplerFilterMinmaxProperties',
    'VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT',
    'VkPhysicalDeviceSamplerYcbcrConversionFeatures',
    'VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR',
    'VkPhysicalDeviceScalarBlockLayoutFeatures',
    'VkPhysicalDeviceScalarBlockLayoutFeaturesEXT',
    'VkPhysicalDeviceSchedulingControlsFeaturesARM',
    'VkPhysicalDeviceSchedulingControlsFlagBitsARM',
    'VkPhysicalDeviceSchedulingControlsFlagsARM',
    'VkPhysicalDeviceSchedulingControlsPropertiesARM',
    'VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures',
    'VkPhysicalDeviceSeparateDepthStencilLayoutsFeaturesKHR',
    'VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT',
    'VkPhysicalDeviceShaderAtomicFloatFeaturesEXT',
    'VkPhysicalDeviceShaderAtomicInt64Features',
    'VkPhysicalDeviceShaderAtomicInt64FeaturesKHR',
    'VkPhysicalDeviceShaderClockFeaturesKHR',
    'VkPhysicalDeviceShaderCoreBuiltinsFeaturesARM',
    'VkPhysicalDeviceShaderCoreBuiltinsPropertiesARM',
    'VkPhysicalDeviceShaderCoreProperties2AMD',
    'VkPhysicalDeviceShaderCorePropertiesAMD',
    'VkPhysicalDeviceShaderCorePropertiesARM',
    'VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures',
    'VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT',
    'VkPhysicalDeviceShaderDrawParameterFeatures',
    'VkPhysicalDeviceShaderDrawParametersFeatures',
    'VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD',
    'VkPhysicalDeviceShaderFloat16Int8Features',
    'VkPhysicalDeviceShaderFloat16Int8FeaturesKHR',
    'VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT',
    'VkPhysicalDeviceShaderImageFootprintFeaturesNV',
    'VkPhysicalDeviceShaderIntegerDotProductFeatures',
    'VkPhysicalDeviceShaderIntegerDotProductFeaturesKHR',
    'VkPhysicalDeviceShaderIntegerDotProductProperties',
    'VkPhysicalDeviceShaderIntegerDotProductPropertiesKHR',
    'VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL',
    'VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT',
    'VkPhysicalDeviceShaderModuleIdentifierPropertiesEXT',
    'VkPhysicalDeviceShaderObjectFeaturesEXT',
    'VkPhysicalDeviceShaderObjectPropertiesEXT',
    'VkPhysicalDeviceShaderSMBuiltinsFeaturesNV',
    'VkPhysicalDeviceShaderSMBuiltinsPropertiesNV',
    'VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures',
    'VkPhysicalDeviceShaderSubgroupExtendedTypesFeaturesKHR',
    'VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR',
    'VkPhysicalDeviceShaderTerminateInvocationFeatures',
    'VkPhysicalDeviceShaderTerminateInvocationFeaturesKHR',
    'VkPhysicalDeviceShaderTileImageFeaturesEXT',
    'VkPhysicalDeviceShaderTileImagePropertiesEXT',
    'VkPhysicalDeviceShadingRateImageFeaturesNV',
    'VkPhysicalDeviceShadingRateImagePropertiesNV',
    'VkPhysicalDeviceSparseImageFormatInfo2',
    'VkPhysicalDeviceSparseImageFormatInfo2KHR',
    'VkPhysicalDeviceSparseProperties',
    'VkPhysicalDeviceSubgroupProperties',
    'VkPhysicalDeviceSubgroupSizeControlFeatures',
    'VkPhysicalDeviceSubgroupSizeControlFeaturesEXT',
    'VkPhysicalDeviceSubgroupSizeControlProperties',
    'VkPhysicalDeviceSubgroupSizeControlPropertiesEXT',
    'VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT',
    'VkPhysicalDeviceSubpassShadingFeaturesHUAWEI',
    'VkPhysicalDeviceSubpassShadingPropertiesHUAWEI',
    'VkPhysicalDeviceSurfaceInfo2KHR',
    'VkPhysicalDeviceSwapchainMaintenance1FeaturesEXT',
    'VkPhysicalDeviceSynchronization2Features',
    'VkPhysicalDeviceSynchronization2FeaturesKHR',
    'VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT',
    'VkPhysicalDeviceTexelBufferAlignmentProperties',
    'VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT',
    'VkPhysicalDeviceTextureCompressionASTCHDRFeatures',
    'VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT',
    'VkPhysicalDeviceTilePropertiesFeaturesQCOM',
    'VkPhysicalDeviceTimelineSemaphoreFeatures',
    'VkPhysicalDeviceTimelineSemaphoreFeaturesKHR',
    'VkPhysicalDeviceTimelineSemaphoreProperties',
    'VkPhysicalDeviceTimelineSemaphorePropertiesKHR',
    'VkPhysicalDeviceToolProperties',
    'VkPhysicalDeviceToolPropertiesEXT',
    'VkPhysicalDeviceTransformFeedbackFeaturesEXT',
    'VkPhysicalDeviceTransformFeedbackPropertiesEXT',
    'VkPhysicalDeviceType',
    'VkPhysicalDeviceUniformBufferStandardLayoutFeatures',
    'VkPhysicalDeviceUniformBufferStandardLayoutFeaturesKHR',
    'VkPhysicalDeviceVariablePointerFeatures',
    'VkPhysicalDeviceVariablePointerFeaturesKHR',
    'VkPhysicalDeviceVariablePointersFeatures',
    'VkPhysicalDeviceVariablePointersFeaturesKHR',
    'VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT',
    'VkPhysicalDeviceVertexAttributeDivisorFeaturesKHR',
    'VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT',
    'VkPhysicalDeviceVertexAttributeDivisorPropertiesKHR',
    'VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT',
    'VkPhysicalDeviceVideoEncodeQualityLevelInfoKHR',
    'VkPhysicalDeviceVideoFormatInfoKHR',
    'VkPhysicalDeviceVideoMaintenance1FeaturesKHR',
    'VkPhysicalDeviceVulkan11Features',
    'VkPhysicalDeviceVulkan11Properties',
    'VkPhysicalDeviceVulkan12Features',
    'VkPhysicalDeviceVulkan12Properties',
    'VkPhysicalDeviceVulkan13Features',
    'VkPhysicalDeviceVulkan13Properties',
    'VkPhysicalDeviceVulkanMemoryModelFeatures',
    'VkPhysicalDeviceVulkanMemoryModelFeaturesKHR',
    'VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR',
    'VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT',
    'VkPhysicalDeviceYcbcrDegammaFeaturesQCOM',
    'VkPhysicalDeviceYcbcrImageArraysFeaturesEXT',
    'VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures',
    'VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeaturesKHR',
    'VkPipeline', 'VkPipelineBindPoint', 'VkPipelineCache',
    'VkPipelineCacheCreateFlagBits', 'VkPipelineCacheCreateFlags',
    'VkPipelineCacheCreateInfo', 'VkPipelineCacheHeaderVersion',
    'VkPipelineCacheHeaderVersionOne',
    'VkPipelineColorBlendAdvancedStateCreateInfoEXT',
    'VkPipelineColorBlendAttachmentState',
    'VkPipelineColorBlendStateCreateFlagBits',
    'VkPipelineColorBlendStateCreateFlags',
    'VkPipelineColorBlendStateCreateInfo',
    'VkPipelineColorWriteCreateInfoEXT',
    'VkPipelineCompilerControlCreateInfoAMD',
    'VkPipelineCompilerControlFlagBitsAMD',
    'VkPipelineCompilerControlFlagsAMD',
    'VkPipelineCoverageModulationStateCreateFlagsNV',
    'VkPipelineCoverageModulationStateCreateInfoNV',
    'VkPipelineCoverageReductionStateCreateFlagsNV',
    'VkPipelineCoverageReductionStateCreateInfoNV',
    'VkPipelineCoverageToColorStateCreateFlagsNV',
    'VkPipelineCoverageToColorStateCreateInfoNV',
    'VkPipelineCreateFlagBits', 'VkPipelineCreateFlagBits2KHR',
    'VkPipelineCreateFlags', 'VkPipelineCreateFlags2CreateInfoKHR',
    'VkPipelineCreateFlags2KHR', 'VkPipelineCreationFeedback',
    'VkPipelineCreationFeedbackCreateInfo',
    'VkPipelineCreationFeedbackCreateInfoEXT',
    'VkPipelineCreationFeedbackEXT',
    'VkPipelineCreationFeedbackFlagBits',
    'VkPipelineCreationFeedbackFlagBitsEXT',
    'VkPipelineCreationFeedbackFlagBitsEXT__enumvalues',
    'VkPipelineCreationFeedbackFlags',
    'VkPipelineCreationFeedbackFlagsEXT',
    'VkPipelineDepthStencilStateCreateFlagBits',
    'VkPipelineDepthStencilStateCreateFlags',
    'VkPipelineDepthStencilStateCreateInfo',
    'VkPipelineDiscardRectangleStateCreateFlagsEXT',
    'VkPipelineDiscardRectangleStateCreateInfoEXT',
    'VkPipelineDynamicStateCreateFlags',
    'VkPipelineDynamicStateCreateInfo', 'VkPipelineExecutableInfoKHR',
    'VkPipelineExecutableInternalRepresentationKHR',
    'VkPipelineExecutablePropertiesKHR',
    'VkPipelineExecutableStatisticFormatKHR',
    'VkPipelineExecutableStatisticKHR',
    'VkPipelineExecutableStatisticValueKHR',
    'VkPipelineFragmentShadingRateEnumStateCreateInfoNV',
    'VkPipelineFragmentShadingRateStateCreateInfoKHR',
    'VkPipelineIndirectDeviceAddressInfoNV', 'VkPipelineInfoEXT',
    'VkPipelineInfoKHR', 'VkPipelineInputAssemblyStateCreateFlags',
    'VkPipelineInputAssemblyStateCreateInfo', 'VkPipelineLayout',
    'VkPipelineLayoutCreateFlagBits', 'VkPipelineLayoutCreateFlags',
    'VkPipelineLayoutCreateInfo', 'VkPipelineLibraryCreateInfoKHR',
    'VkPipelineMultisampleStateCreateFlags',
    'VkPipelineMultisampleStateCreateInfo',
    'VkPipelinePropertiesIdentifierEXT',
    'VkPipelineRasterizationConservativeStateCreateFlagsEXT',
    'VkPipelineRasterizationConservativeStateCreateInfoEXT',
    'VkPipelineRasterizationDepthClipStateCreateFlagsEXT',
    'VkPipelineRasterizationDepthClipStateCreateInfoEXT',
    'VkPipelineRasterizationLineStateCreateInfoEXT',
    'VkPipelineRasterizationProvokingVertexStateCreateInfoEXT',
    'VkPipelineRasterizationStateCreateFlags',
    'VkPipelineRasterizationStateCreateInfo',
    'VkPipelineRasterizationStateRasterizationOrderAMD',
    'VkPipelineRasterizationStateStreamCreateFlagsEXT',
    'VkPipelineRasterizationStateStreamCreateInfoEXT',
    'VkPipelineRenderingCreateInfo',
    'VkPipelineRenderingCreateInfoKHR',
    'VkPipelineRepresentativeFragmentTestStateCreateInfoNV',
    'VkPipelineRobustnessBufferBehaviorEXT',
    'VkPipelineRobustnessCreateInfoEXT',
    'VkPipelineRobustnessImageBehaviorEXT',
    'VkPipelineSampleLocationsStateCreateInfoEXT',
    'VkPipelineShaderStageCreateFlagBits',
    'VkPipelineShaderStageCreateFlags',
    'VkPipelineShaderStageCreateInfo',
    'VkPipelineShaderStageModuleIdentifierCreateInfoEXT',
    'VkPipelineShaderStageRequiredSubgroupSizeCreateInfo',
    'VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT',
    'VkPipelineStageFlagBits', 'VkPipelineStageFlagBits2',
    'VkPipelineStageFlagBits2KHR', 'VkPipelineStageFlags',
    'VkPipelineStageFlags2', 'VkPipelineStageFlags2KHR',
    'VkPipelineTessellationDomainOriginStateCreateInfo',
    'VkPipelineTessellationDomainOriginStateCreateInfoKHR',
    'VkPipelineTessellationStateCreateFlags',
    'VkPipelineTessellationStateCreateInfo',
    'VkPipelineVertexInputDivisorStateCreateInfoEXT',
    'VkPipelineVertexInputDivisorStateCreateInfoKHR',
    'VkPipelineVertexInputStateCreateFlags',
    'VkPipelineVertexInputStateCreateInfo',
    'VkPipelineViewportCoarseSampleOrderStateCreateInfoNV',
    'VkPipelineViewportDepthClipControlCreateInfoEXT',
    'VkPipelineViewportExclusiveScissorStateCreateInfoNV',
    'VkPipelineViewportShadingRateImageStateCreateInfoNV',
    'VkPipelineViewportStateCreateFlags',
    'VkPipelineViewportStateCreateInfo',
    'VkPipelineViewportSwizzleStateCreateFlagsNV',
    'VkPipelineViewportSwizzleStateCreateInfoNV',
    'VkPipelineViewportWScalingStateCreateInfoNV',
    'VkPointClippingBehavior', 'VkPointClippingBehaviorKHR',
    'VkPointClippingBehaviorKHR__enumvalues', 'VkPolygonMode',
    'VkPresentGravityFlagBitsEXT', 'VkPresentGravityFlagsEXT',
    'VkPresentIdKHR', 'VkPresentInfoKHR', 'VkPresentModeKHR',
    'VkPresentRegionKHR', 'VkPresentRegionsKHR',
    'VkPresentScalingFlagBitsEXT', 'VkPresentScalingFlagsEXT',
    'VkPresentTimeGOOGLE', 'VkPresentTimesInfoGOOGLE',
    'VkPrimitiveTopology', 'VkPrivateDataSlot',
    'VkPrivateDataSlotCreateFlags', 'VkPrivateDataSlotCreateFlagsEXT',
    'VkPrivateDataSlotCreateInfo', 'VkPrivateDataSlotCreateInfoEXT',
    'VkPrivateDataSlotEXT', 'VkProtectedSubmitInfo',
    'VkProvokingVertexModeEXT', 'VkPushConstantRange',
    'VkPushConstantsInfoKHR', 'VkPushDescriptorSetInfoKHR',
    'VkPushDescriptorSetWithTemplateInfoKHR',
    'VkQueryControlFlagBits', 'VkQueryControlFlags',
    'VkQueryLowLatencySupportNV', 'VkQueryPipelineStatisticFlagBits',
    'VkQueryPipelineStatisticFlags', 'VkQueryPool',
    'VkQueryPoolCreateFlags', 'VkQueryPoolCreateInfo',
    'VkQueryPoolCreateInfoINTEL',
    'VkQueryPoolPerformanceCreateInfoKHR',
    'VkQueryPoolPerformanceQueryCreateInfoINTEL',
    'VkQueryPoolSamplingModeINTEL',
    'VkQueryPoolVideoEncodeFeedbackCreateInfoKHR',
    'VkQueryResultFlagBits', 'VkQueryResultFlags',
    'VkQueryResultStatusKHR', 'VkQueryType', 'VkQueue',
    'VkQueueFamilyCheckpointProperties2NV',
    'VkQueueFamilyCheckpointPropertiesNV',
    'VkQueueFamilyGlobalPriorityPropertiesEXT',
    'VkQueueFamilyGlobalPriorityPropertiesKHR',
    'VkQueueFamilyProperties', 'VkQueueFamilyProperties2',
    'VkQueueFamilyProperties2KHR',
    'VkQueueFamilyQueryResultStatusPropertiesKHR',
    'VkQueueFamilyVideoPropertiesKHR', 'VkQueueFlagBits',
    'VkQueueFlags', 'VkQueueGlobalPriorityEXT',
    'VkQueueGlobalPriorityEXT__enumvalues',
    'VkQueueGlobalPriorityKHR', 'VkRasterizationOrderAMD',
    'VkRayTracingInvocationReorderModeNV',
    'VkRayTracingPipelineCreateInfoKHR',
    'VkRayTracingPipelineCreateInfoNV',
    'VkRayTracingPipelineInterfaceCreateInfoKHR',
    'VkRayTracingShaderGroupCreateInfoKHR',
    'VkRayTracingShaderGroupCreateInfoNV',
    'VkRayTracingShaderGroupTypeKHR', 'VkRayTracingShaderGroupTypeNV',
    'VkRayTracingShaderGroupTypeNV__enumvalues', 'VkRect2D',
    'VkRectLayerKHR', 'VkRefreshCycleDurationGOOGLE',
    'VkReleaseSwapchainImagesInfoEXT', 'VkRemoteAddressNV',
    'VkRenderPass', 'VkRenderPassAttachmentBeginInfo',
    'VkRenderPassAttachmentBeginInfoKHR', 'VkRenderPassBeginInfo',
    'VkRenderPassCreateFlagBits', 'VkRenderPassCreateFlags',
    'VkRenderPassCreateInfo', 'VkRenderPassCreateInfo2',
    'VkRenderPassCreateInfo2KHR', 'VkRenderPassCreationControlEXT',
    'VkRenderPassCreationFeedbackCreateInfoEXT',
    'VkRenderPassCreationFeedbackInfoEXT',
    'VkRenderPassFragmentDensityMapCreateInfoEXT',
    'VkRenderPassInputAttachmentAspectCreateInfo',
    'VkRenderPassInputAttachmentAspectCreateInfoKHR',
    'VkRenderPassMultiviewCreateInfo',
    'VkRenderPassMultiviewCreateInfoKHR',
    'VkRenderPassSampleLocationsBeginInfoEXT',
    'VkRenderPassStripeBeginInfoARM', 'VkRenderPassStripeInfoARM',
    'VkRenderPassStripeSubmitInfoARM',
    'VkRenderPassSubpassFeedbackCreateInfoEXT',
    'VkRenderPassSubpassFeedbackInfoEXT',
    'VkRenderPassTransformBeginInfoQCOM', 'VkRenderingAreaInfoKHR',
    'VkRenderingAttachmentInfo', 'VkRenderingAttachmentInfoKHR',
    'VkRenderingFlagBits', 'VkRenderingFlagBitsKHR',
    'VkRenderingFlagBitsKHR__enumvalues', 'VkRenderingFlags',
    'VkRenderingFlagsKHR',
    'VkRenderingFragmentDensityMapAttachmentInfoEXT',
    'VkRenderingFragmentShadingRateAttachmentInfoKHR',
    'VkRenderingInfo', 'VkRenderingInfoKHR', 'VkResolveImageInfo2',
    'VkResolveImageInfo2KHR', 'VkResolveModeFlagBits',
    'VkResolveModeFlagBitsKHR',
    'VkResolveModeFlagBitsKHR__enumvalues', 'VkResolveModeFlags',
    'VkResolveModeFlagsKHR', 'VkResult', 'VkSRTDataNV',
    'VkSampleCountFlagBits', 'VkSampleCountFlags',
    'VkSampleLocationEXT', 'VkSampleLocationsInfoEXT', 'VkSampleMask',
    'VkSampler', 'VkSamplerAddressMode',
    'VkSamplerBlockMatchWindowCreateInfoQCOM',
    'VkSamplerBorderColorComponentMappingCreateInfoEXT',
    'VkSamplerCaptureDescriptorDataInfoEXT',
    'VkSamplerCreateFlagBits', 'VkSamplerCreateFlags',
    'VkSamplerCreateInfo', 'VkSamplerCubicWeightsCreateInfoQCOM',
    'VkSamplerCustomBorderColorCreateInfoEXT', 'VkSamplerMipmapMode',
    'VkSamplerReductionMode', 'VkSamplerReductionModeCreateInfo',
    'VkSamplerReductionModeCreateInfoEXT',
    'VkSamplerReductionModeEXT',
    'VkSamplerReductionModeEXT__enumvalues',
    'VkSamplerYcbcrConversion', 'VkSamplerYcbcrConversionCreateInfo',
    'VkSamplerYcbcrConversionCreateInfoKHR',
    'VkSamplerYcbcrConversionImageFormatProperties',
    'VkSamplerYcbcrConversionImageFormatPropertiesKHR',
    'VkSamplerYcbcrConversionInfo', 'VkSamplerYcbcrConversionInfoKHR',
    'VkSamplerYcbcrConversionKHR',
    'VkSamplerYcbcrConversionYcbcrDegammaCreateInfoQCOM',
    'VkSamplerYcbcrModelConversion',
    'VkSamplerYcbcrModelConversionKHR',
    'VkSamplerYcbcrModelConversionKHR__enumvalues',
    'VkSamplerYcbcrRange', 'VkSamplerYcbcrRangeKHR',
    'VkSamplerYcbcrRangeKHR__enumvalues', 'VkScopeKHR', 'VkScopeNV',
    'VkScopeNV__enumvalues', 'VkSemaphore', 'VkSemaphoreCreateFlags',
    'VkSemaphoreCreateInfo', 'VkSemaphoreGetFdInfoKHR',
    'VkSemaphoreImportFlagBits', 'VkSemaphoreImportFlagBitsKHR',
    'VkSemaphoreImportFlagBitsKHR__enumvalues',
    'VkSemaphoreImportFlags', 'VkSemaphoreImportFlagsKHR',
    'VkSemaphoreSignalInfo', 'VkSemaphoreSignalInfoKHR',
    'VkSemaphoreSubmitInfo', 'VkSemaphoreSubmitInfoKHR',
    'VkSemaphoreType', 'VkSemaphoreTypeCreateInfo',
    'VkSemaphoreTypeCreateInfoKHR', 'VkSemaphoreTypeKHR',
    'VkSemaphoreTypeKHR__enumvalues', 'VkSemaphoreWaitFlagBits',
    'VkSemaphoreWaitFlagBitsKHR',
    'VkSemaphoreWaitFlagBitsKHR__enumvalues', 'VkSemaphoreWaitFlags',
    'VkSemaphoreWaitFlagsKHR', 'VkSemaphoreWaitInfo',
    'VkSemaphoreWaitInfoKHR', 'VkSetDescriptorBufferOffsetsInfoEXT',
    'VkSetLatencyMarkerInfoNV', 'VkSetStateFlagsIndirectCommandNV',
    'VkShaderCodeTypeEXT', 'VkShaderCorePropertiesFlagBitsAMD',
    'VkShaderCorePropertiesFlagsAMD', 'VkShaderCreateFlagBitsEXT',
    'VkShaderCreateFlagsEXT', 'VkShaderCreateInfoEXT', 'VkShaderEXT',
    'VkShaderFloatControlsIndependence',
    'VkShaderFloatControlsIndependenceKHR',
    'VkShaderFloatControlsIndependenceKHR__enumvalues',
    'VkShaderGroupShaderKHR', 'VkShaderInfoTypeAMD', 'VkShaderModule',
    'VkShaderModuleCreateFlags', 'VkShaderModuleCreateInfo',
    'VkShaderModuleIdentifierEXT',
    'VkShaderModuleValidationCacheCreateInfoEXT',
    'VkShaderRequiredSubgroupSizeCreateInfoEXT',
    'VkShaderResourceUsageAMD', 'VkShaderStageFlagBits',
    'VkShaderStageFlags', 'VkShaderStatisticsInfoAMD',
    'VkShadingRatePaletteEntryNV', 'VkShadingRatePaletteNV',
    'VkSharedPresentSurfaceCapabilitiesKHR', 'VkSharingMode',
    'VkSparseBufferMemoryBindInfo', 'VkSparseImageFormatFlagBits',
    'VkSparseImageFormatFlags', 'VkSparseImageFormatProperties',
    'VkSparseImageFormatProperties2',
    'VkSparseImageFormatProperties2KHR', 'VkSparseImageMemoryBind',
    'VkSparseImageMemoryBindInfo', 'VkSparseImageMemoryRequirements',
    'VkSparseImageMemoryRequirements2',
    'VkSparseImageMemoryRequirements2KHR',
    'VkSparseImageOpaqueMemoryBindInfo', 'VkSparseMemoryBind',
    'VkSparseMemoryBindFlagBits', 'VkSparseMemoryBindFlags',
    'VkSpecializationInfo', 'VkSpecializationMapEntry',
    'VkStencilFaceFlagBits', 'VkStencilFaceFlags', 'VkStencilOp',
    'VkStencilOpState', 'VkStridedDeviceAddressRegionKHR',
    'VkStructureType', 'VkSubgroupFeatureFlagBits',
    'VkSubgroupFeatureFlags', 'VkSubmitFlagBits',
    'VkSubmitFlagBitsKHR', 'VkSubmitFlagBitsKHR__enumvalues',
    'VkSubmitFlags', 'VkSubmitFlagsKHR', 'VkSubmitInfo',
    'VkSubmitInfo2', 'VkSubmitInfo2KHR', 'VkSubpassBeginInfo',
    'VkSubpassBeginInfoKHR', 'VkSubpassContents',
    'VkSubpassDependency', 'VkSubpassDependency2',
    'VkSubpassDependency2KHR', 'VkSubpassDescription',
    'VkSubpassDescription2', 'VkSubpassDescription2KHR',
    'VkSubpassDescriptionDepthStencilResolve',
    'VkSubpassDescriptionDepthStencilResolveKHR',
    'VkSubpassDescriptionFlagBits', 'VkSubpassDescriptionFlags',
    'VkSubpassEndInfo', 'VkSubpassEndInfoKHR',
    'VkSubpassFragmentDensityMapOffsetEndInfoQCOM',
    'VkSubpassMergeStatusEXT', 'VkSubpassResolvePerformanceQueryEXT',
    'VkSubpassSampleLocationsEXT',
    'VkSubpassShadingPipelineCreateInfoHUAWEI',
    'VkSubresourceHostMemcpySizeEXT', 'VkSubresourceLayout',
    'VkSubresourceLayout2EXT', 'VkSubresourceLayout2KHR',
    'VkSurfaceCapabilities2EXT', 'VkSurfaceCapabilities2KHR',
    'VkSurfaceCapabilitiesKHR',
    'VkSurfaceCapabilitiesPresentBarrierNV',
    'VkSurfaceCounterFlagBitsEXT', 'VkSurfaceCounterFlagsEXT',
    'VkSurfaceFormat2KHR', 'VkSurfaceFormatKHR', 'VkSurfaceKHR',
    'VkSurfacePresentModeCompatibilityEXT', 'VkSurfacePresentModeEXT',
    'VkSurfacePresentScalingCapabilitiesEXT',
    'VkSurfaceProtectedCapabilitiesKHR',
    'VkSurfaceTransformFlagBitsKHR', 'VkSurfaceTransformFlagsKHR',
    'VkSwapchainCounterCreateInfoEXT', 'VkSwapchainCreateFlagBitsKHR',
    'VkSwapchainCreateFlagsKHR', 'VkSwapchainCreateInfoKHR',
    'VkSwapchainDisplayNativeHdrCreateInfoAMD', 'VkSwapchainKHR',
    'VkSwapchainLatencyCreateInfoNV',
    'VkSwapchainPresentBarrierCreateInfoNV',
    'VkSwapchainPresentFenceInfoEXT', 'VkSwapchainPresentModeInfoEXT',
    'VkSwapchainPresentModesCreateInfoEXT',
    'VkSwapchainPresentScalingCreateInfoEXT',
    'VkSystemAllocationScope', 'VkTessellationDomainOrigin',
    'VkTessellationDomainOriginKHR',
    'VkTessellationDomainOriginKHR__enumvalues',
    'VkTextureLODGatherFormatPropertiesAMD', 'VkTilePropertiesQCOM',
    'VkTimeDomainEXT', 'VkTimeDomainEXT__enumvalues',
    'VkTimeDomainKHR', 'VkTimelineSemaphoreSubmitInfo',
    'VkTimelineSemaphoreSubmitInfoKHR', 'VkToolPurposeFlagBits',
    'VkToolPurposeFlagBitsEXT',
    'VkToolPurposeFlagBitsEXT__enumvalues', 'VkToolPurposeFlags',
    'VkToolPurposeFlagsEXT', 'VkTraceRaysIndirectCommand2KHR',
    'VkTraceRaysIndirectCommandKHR', 'VkTransformMatrixKHR',
    'VkTransformMatrixNV', 'VkValidationCacheCreateFlagsEXT',
    'VkValidationCacheCreateInfoEXT', 'VkValidationCacheEXT',
    'VkValidationCacheHeaderVersionEXT', 'VkValidationCheckEXT',
    'VkValidationFeatureDisableEXT', 'VkValidationFeatureEnableEXT',
    'VkValidationFeaturesEXT', 'VkValidationFlagsEXT', 'VkVendorId',
    'VkVertexInputAttributeDescription',
    'VkVertexInputAttributeDescription2EXT',
    'VkVertexInputBindingDescription',
    'VkVertexInputBindingDescription2EXT',
    'VkVertexInputBindingDivisorDescriptionEXT',
    'VkVertexInputBindingDivisorDescriptionKHR', 'VkVertexInputRate',
    'VkVideoBeginCodingFlagsKHR', 'VkVideoBeginCodingInfoKHR',
    'VkVideoCapabilitiesKHR', 'VkVideoCapabilityFlagBitsKHR',
    'VkVideoCapabilityFlagsKHR',
    'VkVideoChromaSubsamplingFlagBitsKHR',
    'VkVideoChromaSubsamplingFlagsKHR',
    'VkVideoCodecOperationFlagBitsKHR',
    'VkVideoCodecOperationFlagsKHR',
    'VkVideoCodingControlFlagBitsKHR', 'VkVideoCodingControlFlagsKHR',
    'VkVideoCodingControlInfoKHR',
    'VkVideoComponentBitDepthFlagBitsKHR',
    'VkVideoComponentBitDepthFlagsKHR',
    'VkVideoDecodeCapabilitiesKHR',
    'VkVideoDecodeCapabilityFlagBitsKHR',
    'VkVideoDecodeCapabilityFlagsKHR', 'VkVideoDecodeFlagsKHR',
    'VkVideoDecodeH264CapabilitiesKHR',
    'VkVideoDecodeH264DpbSlotInfoKHR',
    'VkVideoDecodeH264PictureInfoKHR',
    'VkVideoDecodeH264PictureLayoutFlagBitsKHR',
    'VkVideoDecodeH264PictureLayoutFlagsKHR',
    'VkVideoDecodeH264ProfileInfoKHR',
    'VkVideoDecodeH264SessionParametersAddInfoKHR',
    'VkVideoDecodeH264SessionParametersCreateInfoKHR',
    'VkVideoDecodeH265CapabilitiesKHR',
    'VkVideoDecodeH265DpbSlotInfoKHR',
    'VkVideoDecodeH265PictureInfoKHR',
    'VkVideoDecodeH265ProfileInfoKHR',
    'VkVideoDecodeH265SessionParametersAddInfoKHR',
    'VkVideoDecodeH265SessionParametersCreateInfoKHR',
    'VkVideoDecodeInfoKHR', 'VkVideoDecodeUsageFlagBitsKHR',
    'VkVideoDecodeUsageFlagsKHR', 'VkVideoDecodeUsageInfoKHR',
    'VkVideoEncodeCapabilitiesKHR',
    'VkVideoEncodeCapabilityFlagBitsKHR',
    'VkVideoEncodeCapabilityFlagsKHR',
    'VkVideoEncodeContentFlagBitsKHR', 'VkVideoEncodeContentFlagsKHR',
    'VkVideoEncodeFeedbackFlagBitsKHR',
    'VkVideoEncodeFeedbackFlagsKHR', 'VkVideoEncodeFlagsKHR',
    'VkVideoEncodeH264CapabilitiesKHR',
    'VkVideoEncodeH264CapabilityFlagBitsKHR',
    'VkVideoEncodeH264CapabilityFlagsKHR',
    'VkVideoEncodeH264DpbSlotInfoKHR',
    'VkVideoEncodeH264FrameSizeKHR',
    'VkVideoEncodeH264GopRemainingFrameInfoKHR',
    'VkVideoEncodeH264NaluSliceInfoKHR',
    'VkVideoEncodeH264PictureInfoKHR',
    'VkVideoEncodeH264ProfileInfoKHR', 'VkVideoEncodeH264QpKHR',
    'VkVideoEncodeH264QualityLevelPropertiesKHR',
    'VkVideoEncodeH264RateControlFlagBitsKHR',
    'VkVideoEncodeH264RateControlFlagsKHR',
    'VkVideoEncodeH264RateControlInfoKHR',
    'VkVideoEncodeH264RateControlLayerInfoKHR',
    'VkVideoEncodeH264SessionCreateInfoKHR',
    'VkVideoEncodeH264SessionParametersAddInfoKHR',
    'VkVideoEncodeH264SessionParametersCreateInfoKHR',
    'VkVideoEncodeH264SessionParametersFeedbackInfoKHR',
    'VkVideoEncodeH264SessionParametersGetInfoKHR',
    'VkVideoEncodeH264StdFlagBitsKHR', 'VkVideoEncodeH264StdFlagsKHR',
    'VkVideoEncodeH265CapabilitiesKHR',
    'VkVideoEncodeH265CapabilityFlagBitsKHR',
    'VkVideoEncodeH265CapabilityFlagsKHR',
    'VkVideoEncodeH265CtbSizeFlagBitsKHR',
    'VkVideoEncodeH265CtbSizeFlagsKHR',
    'VkVideoEncodeH265DpbSlotInfoKHR',
    'VkVideoEncodeH265FrameSizeKHR',
    'VkVideoEncodeH265GopRemainingFrameInfoKHR',
    'VkVideoEncodeH265NaluSliceSegmentInfoKHR',
    'VkVideoEncodeH265PictureInfoKHR',
    'VkVideoEncodeH265ProfileInfoKHR', 'VkVideoEncodeH265QpKHR',
    'VkVideoEncodeH265QualityLevelPropertiesKHR',
    'VkVideoEncodeH265RateControlFlagBitsKHR',
    'VkVideoEncodeH265RateControlFlagsKHR',
    'VkVideoEncodeH265RateControlInfoKHR',
    'VkVideoEncodeH265RateControlLayerInfoKHR',
    'VkVideoEncodeH265SessionCreateInfoKHR',
    'VkVideoEncodeH265SessionParametersAddInfoKHR',
    'VkVideoEncodeH265SessionParametersCreateInfoKHR',
    'VkVideoEncodeH265SessionParametersFeedbackInfoKHR',
    'VkVideoEncodeH265SessionParametersGetInfoKHR',
    'VkVideoEncodeH265StdFlagBitsKHR', 'VkVideoEncodeH265StdFlagsKHR',
    'VkVideoEncodeH265TransformBlockSizeFlagBitsKHR',
    'VkVideoEncodeH265TransformBlockSizeFlagsKHR',
    'VkVideoEncodeInfoKHR', 'VkVideoEncodeQualityLevelInfoKHR',
    'VkVideoEncodeQualityLevelPropertiesKHR',
    'VkVideoEncodeRateControlFlagsKHR',
    'VkVideoEncodeRateControlInfoKHR',
    'VkVideoEncodeRateControlLayerInfoKHR',
    'VkVideoEncodeRateControlModeFlagBitsKHR',
    'VkVideoEncodeRateControlModeFlagsKHR',
    'VkVideoEncodeSessionParametersFeedbackInfoKHR',
    'VkVideoEncodeSessionParametersGetInfoKHR',
    'VkVideoEncodeTuningModeKHR', 'VkVideoEncodeUsageFlagBitsKHR',
    'VkVideoEncodeUsageFlagsKHR', 'VkVideoEncodeUsageInfoKHR',
    'VkVideoEndCodingFlagsKHR', 'VkVideoEndCodingInfoKHR',
    'VkVideoFormatPropertiesKHR', 'VkVideoInlineQueryInfoKHR',
    'VkVideoPictureResourceInfoKHR', 'VkVideoProfileInfoKHR',
    'VkVideoProfileListInfoKHR', 'VkVideoReferenceSlotInfoKHR',
    'VkVideoSessionCreateFlagBitsKHR', 'VkVideoSessionCreateFlagsKHR',
    'VkVideoSessionCreateInfoKHR', 'VkVideoSessionKHR',
    'VkVideoSessionMemoryRequirementsKHR',
    'VkVideoSessionParametersCreateFlagsKHR',
    'VkVideoSessionParametersCreateInfoKHR',
    'VkVideoSessionParametersKHR',
    'VkVideoSessionParametersUpdateInfoKHR', 'VkViewport',
    'VkViewportCoordinateSwizzleNV', 'VkViewportSwizzleNV',
    'VkViewportWScalingNV', 'VkWriteDescriptorSet',
    'VkWriteDescriptorSetAccelerationStructureKHR',
    'VkWriteDescriptorSetAccelerationStructureNV',
    'VkWriteDescriptorSetInlineUniformBlock',
    'VkWriteDescriptorSetInlineUniformBlockEXT', 'VkXYColorEXT',
    'int32_t', 'size_t', 'struct_StdVideoDecodeH264PictureInfo',
    'struct_StdVideoDecodeH264PictureInfoFlags',
    'struct_StdVideoDecodeH264ReferenceInfo',
    'struct_StdVideoDecodeH264ReferenceInfoFlags',
    'struct_StdVideoDecodeH265PictureInfo',
    'struct_StdVideoDecodeH265PictureInfoFlags',
    'struct_StdVideoDecodeH265ReferenceInfo',
    'struct_StdVideoDecodeH265ReferenceInfoFlags',
    'struct_StdVideoEncodeH264PictureInfo',
    'struct_StdVideoEncodeH264PictureInfoFlags',
    'struct_StdVideoEncodeH264RefListModEntry',
    'struct_StdVideoEncodeH264RefPicMarkingEntry',
    'struct_StdVideoEncodeH264ReferenceInfo',
    'struct_StdVideoEncodeH264ReferenceInfoFlags',
    'struct_StdVideoEncodeH264ReferenceListsInfo',
    'struct_StdVideoEncodeH264ReferenceListsInfoFlags',
    'struct_StdVideoEncodeH264SliceHeader',
    'struct_StdVideoEncodeH264SliceHeaderFlags',
    'struct_StdVideoEncodeH264WeightTable',
    'struct_StdVideoEncodeH264WeightTableFlags',
    'struct_StdVideoEncodeH265LongTermRefPics',
    'struct_StdVideoEncodeH265PictureInfo',
    'struct_StdVideoEncodeH265PictureInfoFlags',
    'struct_StdVideoEncodeH265ReferenceInfo',
    'struct_StdVideoEncodeH265ReferenceInfoFlags',
    'struct_StdVideoEncodeH265ReferenceListsInfo',
    'struct_StdVideoEncodeH265ReferenceListsInfoFlags',
    'struct_StdVideoEncodeH265SliceSegmentHeader',
    'struct_StdVideoEncodeH265SliceSegmentHeaderFlags',
    'struct_StdVideoEncodeH265WeightTable',
    'struct_StdVideoEncodeH265WeightTableFlags',
    'struct_StdVideoH264HrdParameters',
    'struct_StdVideoH264PictureParameterSet',
    'struct_StdVideoH264PpsFlags', 'struct_StdVideoH264ScalingLists',
    'struct_StdVideoH264SequenceParameterSet',
    'struct_StdVideoH264SequenceParameterSetVui',
    'struct_StdVideoH264SpsFlags', 'struct_StdVideoH264SpsVuiFlags',
    'struct_StdVideoH265DecPicBufMgr', 'struct_StdVideoH265HrdFlags',
    'struct_StdVideoH265HrdParameters',
    'struct_StdVideoH265LongTermRefPicsSps',
    'struct_StdVideoH265PictureParameterSet',
    'struct_StdVideoH265PpsFlags',
    'struct_StdVideoH265PredictorPaletteEntries',
    'struct_StdVideoH265ProfileTierLevel',
    'struct_StdVideoH265ProfileTierLevelFlags',
    'struct_StdVideoH265ScalingLists',
    'struct_StdVideoH265SequenceParameterSet',
    'struct_StdVideoH265SequenceParameterSetVui',
    'struct_StdVideoH265ShortTermRefPicSet',
    'struct_StdVideoH265ShortTermRefPicSetFlags',
    'struct_StdVideoH265SpsFlags', 'struct_StdVideoH265SpsVuiFlags',
    'struct_StdVideoH265SubLayerHrdParameters',
    'struct_StdVideoH265VideoParameterSet',
    'struct_StdVideoH265VpsFlags', 'struct_VkAabbPositionsKHR',
    'struct_VkAccelerationStructureBuildGeometryInfoKHR',
    'struct_VkAccelerationStructureBuildRangeInfoKHR',
    'struct_VkAccelerationStructureBuildSizesInfoKHR',
    'struct_VkAccelerationStructureCaptureDescriptorDataInfoEXT',
    'struct_VkAccelerationStructureCreateInfoKHR',
    'struct_VkAccelerationStructureCreateInfoNV',
    'struct_VkAccelerationStructureDeviceAddressInfoKHR',
    'struct_VkAccelerationStructureGeometryAabbsDataKHR',
    'struct_VkAccelerationStructureGeometryInstancesDataKHR',
    'struct_VkAccelerationStructureGeometryKHR',
    'struct_VkAccelerationStructureGeometryMotionTrianglesDataNV',
    'struct_VkAccelerationStructureGeometryTrianglesDataKHR',
    'struct_VkAccelerationStructureInfoNV',
    'struct_VkAccelerationStructureInstanceKHR',
    'struct_VkAccelerationStructureKHR_T',
    'struct_VkAccelerationStructureMatrixMotionInstanceNV',
    'struct_VkAccelerationStructureMemoryRequirementsInfoNV',
    'struct_VkAccelerationStructureMotionInfoNV',
    'struct_VkAccelerationStructureMotionInstanceNV',
    'struct_VkAccelerationStructureNV_T',
    'struct_VkAccelerationStructureSRTMotionInstanceNV',
    'struct_VkAccelerationStructureTrianglesOpacityMicromapEXT',
    'struct_VkAccelerationStructureVersionInfoKHR',
    'struct_VkAcquireNextImageInfoKHR',
    'struct_VkAcquireProfilingLockInfoKHR',
    'struct_VkAllocationCallbacks',
    'struct_VkAmigoProfilingSubmitInfoSEC',
    'struct_VkApplicationInfo', 'struct_VkAttachmentDescription',
    'struct_VkAttachmentDescription2',
    'struct_VkAttachmentDescriptionStencilLayout',
    'struct_VkAttachmentReference', 'struct_VkAttachmentReference2',
    'struct_VkAttachmentReferenceStencilLayout',
    'struct_VkAttachmentSampleCountInfoAMD',
    'struct_VkAttachmentSampleLocationsEXT',
    'struct_VkBaseInStructure', 'struct_VkBaseOutStructure',
    'struct_VkBindAccelerationStructureMemoryInfoNV',
    'struct_VkBindBufferMemoryDeviceGroupInfo',
    'struct_VkBindBufferMemoryInfo',
    'struct_VkBindDescriptorBufferEmbeddedSamplersInfoEXT',
    'struct_VkBindDescriptorSetsInfoKHR',
    'struct_VkBindImageMemoryDeviceGroupInfo',
    'struct_VkBindImageMemoryInfo',
    'struct_VkBindImageMemorySwapchainInfoKHR',
    'struct_VkBindImagePlaneMemoryInfo',
    'struct_VkBindIndexBufferIndirectCommandNV',
    'struct_VkBindMemoryStatusKHR',
    'struct_VkBindPipelineIndirectCommandNV',
    'struct_VkBindShaderGroupIndirectCommandNV',
    'struct_VkBindSparseInfo',
    'struct_VkBindVertexBufferIndirectCommandNV',
    'struct_VkBindVideoSessionMemoryInfoKHR',
    'struct_VkBlitImageCubicWeightsInfoQCOM',
    'struct_VkBlitImageInfo2',
    'struct_VkBufferCaptureDescriptorDataInfoEXT',
    'struct_VkBufferCopy', 'struct_VkBufferCopy2',
    'struct_VkBufferCreateInfo',
    'struct_VkBufferDeviceAddressCreateInfoEXT',
    'struct_VkBufferDeviceAddressInfo', 'struct_VkBufferImageCopy',
    'struct_VkBufferImageCopy2', 'struct_VkBufferMemoryBarrier',
    'struct_VkBufferMemoryBarrier2',
    'struct_VkBufferMemoryRequirementsInfo2',
    'struct_VkBufferOpaqueCaptureAddressCreateInfo',
    'struct_VkBufferUsageFlags2CreateInfoKHR',
    'struct_VkBufferViewCreateInfo', 'struct_VkBufferView_T',
    'struct_VkBuffer_T', 'struct_VkCalibratedTimestampInfoKHR',
    'struct_VkCheckpointData2NV', 'struct_VkCheckpointDataNV',
    'struct_VkClearAttachment', 'struct_VkClearDepthStencilValue',
    'struct_VkClearRect', 'struct_VkCoarseSampleLocationNV',
    'struct_VkCoarseSampleOrderCustomNV',
    'struct_VkColorBlendAdvancedEXT',
    'struct_VkColorBlendEquationEXT',
    'struct_VkCommandBufferAllocateInfo',
    'struct_VkCommandBufferBeginInfo',
    'struct_VkCommandBufferInheritanceConditionalRenderingInfoEXT',
    'struct_VkCommandBufferInheritanceInfo',
    'struct_VkCommandBufferInheritanceRenderPassTransformInfoQCOM',
    'struct_VkCommandBufferInheritanceRenderingInfo',
    'struct_VkCommandBufferInheritanceViewportScissorInfoNV',
    'struct_VkCommandBufferSubmitInfo', 'struct_VkCommandBuffer_T',
    'struct_VkCommandPoolCreateInfo', 'struct_VkCommandPool_T',
    'struct_VkComponentMapping', 'struct_VkComputePipelineCreateInfo',
    'struct_VkComputePipelineIndirectBufferInfoNV',
    'struct_VkConditionalRenderingBeginInfoEXT',
    'struct_VkConformanceVersion',
    'struct_VkCooperativeMatrixPropertiesKHR',
    'struct_VkCooperativeMatrixPropertiesNV',
    'struct_VkCopyAccelerationStructureInfoKHR',
    'struct_VkCopyAccelerationStructureToMemoryInfoKHR',
    'struct_VkCopyBufferInfo2', 'struct_VkCopyBufferToImageInfo2',
    'struct_VkCopyCommandTransformInfoQCOM',
    'struct_VkCopyDescriptorSet', 'struct_VkCopyImageInfo2',
    'struct_VkCopyImageToBufferInfo2',
    'struct_VkCopyImageToImageInfoEXT',
    'struct_VkCopyImageToMemoryInfoEXT',
    'struct_VkCopyMemoryIndirectCommandNV',
    'struct_VkCopyMemoryToAccelerationStructureInfoKHR',
    'struct_VkCopyMemoryToImageIndirectCommandNV',
    'struct_VkCopyMemoryToImageInfoEXT',
    'struct_VkCopyMemoryToMicromapInfoEXT',
    'struct_VkCopyMicromapInfoEXT',
    'struct_VkCopyMicromapToMemoryInfoEXT',
    'struct_VkCuFunctionCreateInfoNVX', 'struct_VkCuFunctionNVX_T',
    'struct_VkCuLaunchInfoNVX', 'struct_VkCuModuleCreateInfoNVX',
    'struct_VkCuModuleNVX_T', 'struct_VkCudaFunctionCreateInfoNV',
    'struct_VkCudaFunctionNV_T', 'struct_VkCudaLaunchInfoNV',
    'struct_VkCudaModuleCreateInfoNV', 'struct_VkCudaModuleNV_T',
    'struct_VkDebugMarkerMarkerInfoEXT',
    'struct_VkDebugMarkerObjectNameInfoEXT',
    'struct_VkDebugMarkerObjectTagInfoEXT',
    'struct_VkDebugReportCallbackCreateInfoEXT',
    'struct_VkDebugReportCallbackEXT_T',
    'struct_VkDebugUtilsLabelEXT',
    'struct_VkDebugUtilsMessengerCallbackDataEXT',
    'struct_VkDebugUtilsMessengerCreateInfoEXT',
    'struct_VkDebugUtilsMessengerEXT_T',
    'struct_VkDebugUtilsObjectNameInfoEXT',
    'struct_VkDebugUtilsObjectTagInfoEXT',
    'struct_VkDecompressMemoryRegionNV',
    'struct_VkDedicatedAllocationBufferCreateInfoNV',
    'struct_VkDedicatedAllocationImageCreateInfoNV',
    'struct_VkDedicatedAllocationMemoryAllocateInfoNV',
    'struct_VkDeferredOperationKHR_T', 'struct_VkDependencyInfo',
    'struct_VkDepthBiasInfoEXT',
    'struct_VkDepthBiasRepresentationInfoEXT',
    'struct_VkDescriptorAddressInfoEXT',
    'struct_VkDescriptorBufferBindingInfoEXT',
    'struct_VkDescriptorBufferBindingPushDescriptorBufferHandleEXT',
    'struct_VkDescriptorBufferInfo', 'struct_VkDescriptorGetInfoEXT',
    'struct_VkDescriptorImageInfo',
    'struct_VkDescriptorPoolCreateInfo',
    'struct_VkDescriptorPoolInlineUniformBlockCreateInfo',
    'struct_VkDescriptorPoolSize', 'struct_VkDescriptorPool_T',
    'struct_VkDescriptorSetAllocateInfo',
    'struct_VkDescriptorSetBindingReferenceVALVE',
    'struct_VkDescriptorSetLayoutBinding',
    'struct_VkDescriptorSetLayoutBindingFlagsCreateInfo',
    'struct_VkDescriptorSetLayoutCreateInfo',
    'struct_VkDescriptorSetLayoutHostMappingInfoVALVE',
    'struct_VkDescriptorSetLayoutSupport',
    'struct_VkDescriptorSetLayout_T',
    'struct_VkDescriptorSetVariableDescriptorCountAllocateInfo',
    'struct_VkDescriptorSetVariableDescriptorCountLayoutSupport',
    'struct_VkDescriptorSet_T',
    'struct_VkDescriptorUpdateTemplateCreateInfo',
    'struct_VkDescriptorUpdateTemplateEntry',
    'struct_VkDescriptorUpdateTemplate_T',
    'struct_VkDeviceAddressBindingCallbackDataEXT',
    'struct_VkDeviceBufferMemoryRequirements',
    'struct_VkDeviceCreateInfo',
    'struct_VkDeviceDeviceMemoryReportCreateInfoEXT',
    'struct_VkDeviceDiagnosticsConfigCreateInfoNV',
    'struct_VkDeviceEventInfoEXT',
    'struct_VkDeviceFaultAddressInfoEXT',
    'struct_VkDeviceFaultCountsEXT', 'struct_VkDeviceFaultInfoEXT',
    'struct_VkDeviceFaultVendorBinaryHeaderVersionOneEXT',
    'struct_VkDeviceFaultVendorInfoEXT',
    'struct_VkDeviceGroupBindSparseInfo',
    'struct_VkDeviceGroupCommandBufferBeginInfo',
    'struct_VkDeviceGroupDeviceCreateInfo',
    'struct_VkDeviceGroupPresentCapabilitiesKHR',
    'struct_VkDeviceGroupPresentInfoKHR',
    'struct_VkDeviceGroupRenderPassBeginInfo',
    'struct_VkDeviceGroupSubmitInfo',
    'struct_VkDeviceGroupSwapchainCreateInfoKHR',
    'struct_VkDeviceImageMemoryRequirements',
    'struct_VkDeviceImageSubresourceInfoKHR',
    'struct_VkDeviceMemoryOpaqueCaptureAddressInfo',
    'struct_VkDeviceMemoryOverallocationCreateInfoAMD',
    'struct_VkDeviceMemoryReportCallbackDataEXT',
    'struct_VkDeviceMemory_T', 'struct_VkDevicePrivateDataCreateInfo',
    'struct_VkDeviceQueueCreateInfo',
    'struct_VkDeviceQueueGlobalPriorityCreateInfoKHR',
    'struct_VkDeviceQueueInfo2',
    'struct_VkDeviceQueueShaderCoreControlCreateInfoARM',
    'struct_VkDevice_T', 'struct_VkDirectDriverLoadingInfoLUNARG',
    'struct_VkDirectDriverLoadingListLUNARG',
    'struct_VkDispatchIndirectCommand',
    'struct_VkDisplayEventInfoEXT', 'struct_VkDisplayKHR_T',
    'struct_VkDisplayModeCreateInfoKHR', 'struct_VkDisplayModeKHR_T',
    'struct_VkDisplayModeParametersKHR',
    'struct_VkDisplayModeProperties2KHR',
    'struct_VkDisplayModePropertiesKHR',
    'struct_VkDisplayNativeHdrSurfaceCapabilitiesAMD',
    'struct_VkDisplayPlaneCapabilities2KHR',
    'struct_VkDisplayPlaneCapabilitiesKHR',
    'struct_VkDisplayPlaneInfo2KHR',
    'struct_VkDisplayPlaneProperties2KHR',
    'struct_VkDisplayPlanePropertiesKHR',
    'struct_VkDisplayPowerInfoEXT', 'struct_VkDisplayPresentInfoKHR',
    'struct_VkDisplayProperties2KHR', 'struct_VkDisplayPropertiesKHR',
    'struct_VkDisplaySurfaceCreateInfoKHR',
    'struct_VkDrawIndexedIndirectCommand',
    'struct_VkDrawIndirectCommand',
    'struct_VkDrawMeshTasksIndirectCommandEXT',
    'struct_VkDrawMeshTasksIndirectCommandNV',
    'struct_VkDrmFormatModifierProperties2EXT',
    'struct_VkDrmFormatModifierPropertiesEXT',
    'struct_VkDrmFormatModifierPropertiesList2EXT',
    'struct_VkDrmFormatModifierPropertiesListEXT',
    'struct_VkEventCreateInfo', 'struct_VkEvent_T',
    'struct_VkExportFenceCreateInfo',
    'struct_VkExportMemoryAllocateInfo',
    'struct_VkExportMemoryAllocateInfoNV',
    'struct_VkExportSemaphoreCreateInfo',
    'struct_VkExtensionProperties', 'struct_VkExtent2D',
    'struct_VkExtent3D', 'struct_VkExternalBufferProperties',
    'struct_VkExternalFenceProperties',
    'struct_VkExternalImageFormatProperties',
    'struct_VkExternalImageFormatPropertiesNV',
    'struct_VkExternalMemoryAcquireUnmodifiedEXT',
    'struct_VkExternalMemoryBufferCreateInfo',
    'struct_VkExternalMemoryImageCreateInfo',
    'struct_VkExternalMemoryImageCreateInfoNV',
    'struct_VkExternalMemoryProperties',
    'struct_VkExternalSemaphoreProperties',
    'struct_VkFenceCreateInfo', 'struct_VkFenceGetFdInfoKHR',
    'struct_VkFence_T',
    'struct_VkFilterCubicImageViewImageFormatPropertiesEXT',
    'struct_VkFormatProperties', 'struct_VkFormatProperties2',
    'struct_VkFormatProperties3',
    'struct_VkFragmentShadingRateAttachmentInfoKHR',
    'struct_VkFrameBoundaryEXT',
    'struct_VkFramebufferAttachmentImageInfo',
    'struct_VkFramebufferAttachmentsCreateInfo',
    'struct_VkFramebufferCreateInfo',
    'struct_VkFramebufferMixedSamplesCombinationNV',
    'struct_VkFramebuffer_T', 'struct_VkGeneratedCommandsInfoNV',
    'struct_VkGeneratedCommandsMemoryRequirementsInfoNV',
    'struct_VkGeometryAABBNV', 'struct_VkGeometryDataNV',
    'struct_VkGeometryNV', 'struct_VkGeometryTrianglesNV',
    'struct_VkGetLatencyMarkerInfoNV',
    'struct_VkGraphicsPipelineCreateInfo',
    'struct_VkGraphicsPipelineLibraryCreateInfoEXT',
    'struct_VkGraphicsPipelineShaderGroupsCreateInfoNV',
    'struct_VkGraphicsShaderGroupCreateInfoNV',
    'struct_VkHdrMetadataEXT',
    'struct_VkHeadlessSurfaceCreateInfoEXT',
    'struct_VkHostImageCopyDevicePerformanceQueryEXT',
    'struct_VkHostImageLayoutTransitionInfoEXT', 'struct_VkImageBlit',
    'struct_VkImageBlit2',
    'struct_VkImageCaptureDescriptorDataInfoEXT',
    'struct_VkImageCompressionControlEXT',
    'struct_VkImageCompressionPropertiesEXT', 'struct_VkImageCopy',
    'struct_VkImageCopy2', 'struct_VkImageCreateInfo',
    'struct_VkImageDrmFormatModifierExplicitCreateInfoEXT',
    'struct_VkImageDrmFormatModifierListCreateInfoEXT',
    'struct_VkImageDrmFormatModifierPropertiesEXT',
    'struct_VkImageFormatListCreateInfo',
    'struct_VkImageFormatProperties',
    'struct_VkImageFormatProperties2', 'struct_VkImageMemoryBarrier',
    'struct_VkImageMemoryBarrier2',
    'struct_VkImageMemoryRequirementsInfo2',
    'struct_VkImagePlaneMemoryRequirementsInfo',
    'struct_VkImageResolve', 'struct_VkImageResolve2',
    'struct_VkImageSparseMemoryRequirementsInfo2',
    'struct_VkImageStencilUsageCreateInfo',
    'struct_VkImageSubresource', 'struct_VkImageSubresource2KHR',
    'struct_VkImageSubresourceLayers',
    'struct_VkImageSubresourceRange',
    'struct_VkImageSwapchainCreateInfoKHR',
    'struct_VkImageToMemoryCopyEXT',
    'struct_VkImageViewASTCDecodeModeEXT',
    'struct_VkImageViewAddressPropertiesNVX',
    'struct_VkImageViewCaptureDescriptorDataInfoEXT',
    'struct_VkImageViewCreateInfo', 'struct_VkImageViewHandleInfoNVX',
    'struct_VkImageViewMinLodCreateInfoEXT',
    'struct_VkImageViewSampleWeightCreateInfoQCOM',
    'struct_VkImageViewSlicedCreateInfoEXT',
    'struct_VkImageViewUsageCreateInfo', 'struct_VkImageView_T',
    'struct_VkImage_T', 'struct_VkImportFenceFdInfoKHR',
    'struct_VkImportMemoryFdInfoKHR',
    'struct_VkImportMemoryHostPointerInfoEXT',
    'struct_VkImportSemaphoreFdInfoKHR',
    'struct_VkIndirectCommandsLayoutCreateInfoNV',
    'struct_VkIndirectCommandsLayoutNV_T',
    'struct_VkIndirectCommandsLayoutTokenNV',
    'struct_VkIndirectCommandsStreamNV',
    'struct_VkInitializePerformanceApiInfoINTEL',
    'struct_VkInputAttachmentAspectReference',
    'struct_VkInstanceCreateInfo', 'struct_VkInstance_T',
    'struct_VkLatencySleepInfoNV', 'struct_VkLatencySleepModeInfoNV',
    'struct_VkLatencySubmissionPresentIdNV',
    'struct_VkLatencySurfaceCapabilitiesNV',
    'struct_VkLatencyTimingsFrameReportNV',
    'struct_VkLayerProperties', 'struct_VkLayerSettingEXT',
    'struct_VkLayerSettingsCreateInfoEXT',
    'struct_VkMappedMemoryRange', 'struct_VkMemoryAllocateFlagsInfo',
    'struct_VkMemoryAllocateInfo', 'struct_VkMemoryBarrier',
    'struct_VkMemoryBarrier2', 'struct_VkMemoryDedicatedAllocateInfo',
    'struct_VkMemoryDedicatedRequirements',
    'struct_VkMemoryFdPropertiesKHR', 'struct_VkMemoryGetFdInfoKHR',
    'struct_VkMemoryGetRemoteAddressInfoNV', 'struct_VkMemoryHeap',
    'struct_VkMemoryHostPointerPropertiesEXT',
    'struct_VkMemoryMapInfoKHR',
    'struct_VkMemoryOpaqueCaptureAddressAllocateInfo',
    'struct_VkMemoryPriorityAllocateInfoEXT',
    'struct_VkMemoryRequirements', 'struct_VkMemoryRequirements2',
    'struct_VkMemoryToImageCopyEXT', 'struct_VkMemoryType',
    'struct_VkMemoryUnmapInfoKHR', 'struct_VkMicromapBuildInfoEXT',
    'struct_VkMicromapBuildSizesInfoEXT',
    'struct_VkMicromapCreateInfoEXT', 'struct_VkMicromapEXT_T',
    'struct_VkMicromapTriangleEXT', 'struct_VkMicromapUsageEXT',
    'struct_VkMicromapVersionInfoEXT',
    'struct_VkMultiDrawIndexedInfoEXT', 'struct_VkMultiDrawInfoEXT',
    'struct_VkMultisamplePropertiesEXT',
    'struct_VkMultisampledRenderToSingleSampledInfoEXT',
    'struct_VkMultiviewPerViewAttributesInfoNVX',
    'struct_VkMultiviewPerViewRenderAreasRenderPassBeginInfoQCOM',
    'struct_VkMutableDescriptorTypeCreateInfoEXT',
    'struct_VkMutableDescriptorTypeListEXT', 'struct_VkOffset2D',
    'struct_VkOffset3D',
    'struct_VkOpaqueCaptureDescriptorDataCreateInfoEXT',
    'struct_VkOpticalFlowExecuteInfoNV',
    'struct_VkOpticalFlowImageFormatInfoNV',
    'struct_VkOpticalFlowImageFormatPropertiesNV',
    'struct_VkOpticalFlowSessionCreateInfoNV',
    'struct_VkOpticalFlowSessionCreatePrivateDataInfoNV',
    'struct_VkOpticalFlowSessionNV_T',
    'struct_VkOutOfBandQueueTypeInfoNV',
    'struct_VkPastPresentationTimingGOOGLE',
    'struct_VkPerformanceConfigurationAcquireInfoINTEL',
    'struct_VkPerformanceConfigurationINTEL_T',
    'struct_VkPerformanceCounterDescriptionKHR',
    'struct_VkPerformanceCounterKHR',
    'struct_VkPerformanceMarkerInfoINTEL',
    'struct_VkPerformanceOverrideInfoINTEL',
    'struct_VkPerformanceQuerySubmitInfoKHR',
    'struct_VkPerformanceStreamMarkerInfoINTEL',
    'struct_VkPerformanceValueINTEL',
    'struct_VkPhysicalDevice16BitStorageFeatures',
    'struct_VkPhysicalDevice4444FormatsFeaturesEXT',
    'struct_VkPhysicalDevice8BitStorageFeatures',
    'struct_VkPhysicalDeviceASTCDecodeFeaturesEXT',
    'struct_VkPhysicalDeviceAccelerationStructureFeaturesKHR',
    'struct_VkPhysicalDeviceAccelerationStructurePropertiesKHR',
    'struct_VkPhysicalDeviceAddressBindingReportFeaturesEXT',
    'struct_VkPhysicalDeviceAmigoProfilingFeaturesSEC',
    'struct_VkPhysicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXT',
    'struct_VkPhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT',
    'struct_VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT',
    'struct_VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT',
    'struct_VkPhysicalDeviceBorderColorSwizzleFeaturesEXT',
    'struct_VkPhysicalDeviceBufferDeviceAddressFeatures',
    'struct_VkPhysicalDeviceBufferDeviceAddressFeaturesEXT',
    'struct_VkPhysicalDeviceClusterCullingShaderFeaturesHUAWEI',
    'struct_VkPhysicalDeviceClusterCullingShaderPropertiesHUAWEI',
    'struct_VkPhysicalDeviceClusterCullingShaderVrsFeaturesHUAWEI',
    'struct_VkPhysicalDeviceCoherentMemoryFeaturesAMD',
    'struct_VkPhysicalDeviceColorWriteEnableFeaturesEXT',
    'struct_VkPhysicalDeviceComputeShaderDerivativesFeaturesNV',
    'struct_VkPhysicalDeviceConditionalRenderingFeaturesEXT',
    'struct_VkPhysicalDeviceConservativeRasterizationPropertiesEXT',
    'struct_VkPhysicalDeviceCooperativeMatrixFeaturesKHR',
    'struct_VkPhysicalDeviceCooperativeMatrixFeaturesNV',
    'struct_VkPhysicalDeviceCooperativeMatrixPropertiesKHR',
    'struct_VkPhysicalDeviceCooperativeMatrixPropertiesNV',
    'struct_VkPhysicalDeviceCopyMemoryIndirectFeaturesNV',
    'struct_VkPhysicalDeviceCopyMemoryIndirectPropertiesNV',
    'struct_VkPhysicalDeviceCornerSampledImageFeaturesNV',
    'struct_VkPhysicalDeviceCoverageReductionModeFeaturesNV',
    'struct_VkPhysicalDeviceCubicClampFeaturesQCOM',
    'struct_VkPhysicalDeviceCubicWeightsFeaturesQCOM',
    'struct_VkPhysicalDeviceCudaKernelLaunchFeaturesNV',
    'struct_VkPhysicalDeviceCudaKernelLaunchPropertiesNV',
    'struct_VkPhysicalDeviceCustomBorderColorFeaturesEXT',
    'struct_VkPhysicalDeviceCustomBorderColorPropertiesEXT',
    'struct_VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV',
    'struct_VkPhysicalDeviceDepthBiasControlFeaturesEXT',
    'struct_VkPhysicalDeviceDepthClampZeroOneFeaturesEXT',
    'struct_VkPhysicalDeviceDepthClipControlFeaturesEXT',
    'struct_VkPhysicalDeviceDepthClipEnableFeaturesEXT',
    'struct_VkPhysicalDeviceDepthStencilResolveProperties',
    'struct_VkPhysicalDeviceDescriptorBufferDensityMapPropertiesEXT',
    'struct_VkPhysicalDeviceDescriptorBufferFeaturesEXT',
    'struct_VkPhysicalDeviceDescriptorBufferPropertiesEXT',
    'struct_VkPhysicalDeviceDescriptorIndexingFeatures',
    'struct_VkPhysicalDeviceDescriptorIndexingProperties',
    'struct_VkPhysicalDeviceDescriptorPoolOverallocationFeaturesNV',
    'struct_VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE',
    'struct_VkPhysicalDeviceDeviceGeneratedCommandsComputeFeaturesNV',
    'struct_VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV',
    'struct_VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV',
    'struct_VkPhysicalDeviceDeviceMemoryReportFeaturesEXT',
    'struct_VkPhysicalDeviceDiagnosticsConfigFeaturesNV',
    'struct_VkPhysicalDeviceDiscardRectanglePropertiesEXT',
    'struct_VkPhysicalDeviceDriverProperties',
    'struct_VkPhysicalDeviceDrmPropertiesEXT',
    'struct_VkPhysicalDeviceDynamicRenderingFeatures',
    'struct_VkPhysicalDeviceDynamicRenderingUnusedAttachmentsFeaturesEXT',
    'struct_VkPhysicalDeviceExclusiveScissorFeaturesNV',
    'struct_VkPhysicalDeviceExtendedDynamicState2FeaturesEXT',
    'struct_VkPhysicalDeviceExtendedDynamicState3FeaturesEXT',
    'struct_VkPhysicalDeviceExtendedDynamicState3PropertiesEXT',
    'struct_VkPhysicalDeviceExtendedDynamicStateFeaturesEXT',
    'struct_VkPhysicalDeviceExtendedSparseAddressSpaceFeaturesNV',
    'struct_VkPhysicalDeviceExtendedSparseAddressSpacePropertiesNV',
    'struct_VkPhysicalDeviceExternalBufferInfo',
    'struct_VkPhysicalDeviceExternalFenceInfo',
    'struct_VkPhysicalDeviceExternalImageFormatInfo',
    'struct_VkPhysicalDeviceExternalMemoryHostPropertiesEXT',
    'struct_VkPhysicalDeviceExternalMemoryRDMAFeaturesNV',
    'struct_VkPhysicalDeviceExternalSemaphoreInfo',
    'struct_VkPhysicalDeviceFaultFeaturesEXT',
    'struct_VkPhysicalDeviceFeatures',
    'struct_VkPhysicalDeviceFeatures2',
    'struct_VkPhysicalDeviceFloatControlsProperties',
    'struct_VkPhysicalDeviceFragmentDensityMap2FeaturesEXT',
    'struct_VkPhysicalDeviceFragmentDensityMap2PropertiesEXT',
    'struct_VkPhysicalDeviceFragmentDensityMapFeaturesEXT',
    'struct_VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM',
    'struct_VkPhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM',
    'struct_VkPhysicalDeviceFragmentDensityMapPropertiesEXT',
    'struct_VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR',
    'struct_VkPhysicalDeviceFragmentShaderBarycentricPropertiesKHR',
    'struct_VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT',
    'struct_VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV',
    'struct_VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV',
    'struct_VkPhysicalDeviceFragmentShadingRateFeaturesKHR',
    'struct_VkPhysicalDeviceFragmentShadingRateKHR',
    'struct_VkPhysicalDeviceFragmentShadingRatePropertiesKHR',
    'struct_VkPhysicalDeviceFrameBoundaryFeaturesEXT',
    'struct_VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR',
    'struct_VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT',
    'struct_VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT',
    'struct_VkPhysicalDeviceGroupProperties',
    'struct_VkPhysicalDeviceHostImageCopyFeaturesEXT',
    'struct_VkPhysicalDeviceHostImageCopyPropertiesEXT',
    'struct_VkPhysicalDeviceHostQueryResetFeatures',
    'struct_VkPhysicalDeviceIDProperties',
    'struct_VkPhysicalDeviceImage2DViewOf3DFeaturesEXT',
    'struct_VkPhysicalDeviceImageCompressionControlFeaturesEXT',
    'struct_VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT',
    'struct_VkPhysicalDeviceImageDrmFormatModifierInfoEXT',
    'struct_VkPhysicalDeviceImageFormatInfo2',
    'struct_VkPhysicalDeviceImageProcessing2FeaturesQCOM',
    'struct_VkPhysicalDeviceImageProcessing2PropertiesQCOM',
    'struct_VkPhysicalDeviceImageProcessingFeaturesQCOM',
    'struct_VkPhysicalDeviceImageProcessingPropertiesQCOM',
    'struct_VkPhysicalDeviceImageRobustnessFeatures',
    'struct_VkPhysicalDeviceImageSlicedViewOf3DFeaturesEXT',
    'struct_VkPhysicalDeviceImageViewImageFormatInfoEXT',
    'struct_VkPhysicalDeviceImageViewMinLodFeaturesEXT',
    'struct_VkPhysicalDeviceImagelessFramebufferFeatures',
    'struct_VkPhysicalDeviceIndexTypeUint8FeaturesEXT',
    'struct_VkPhysicalDeviceInheritedViewportScissorFeaturesNV',
    'struct_VkPhysicalDeviceInlineUniformBlockFeatures',
    'struct_VkPhysicalDeviceInlineUniformBlockProperties',
    'struct_VkPhysicalDeviceInvocationMaskFeaturesHUAWEI',
    'struct_VkPhysicalDeviceLayeredDriverPropertiesMSFT',
    'struct_VkPhysicalDeviceLegacyDitheringFeaturesEXT',
    'struct_VkPhysicalDeviceLimits',
    'struct_VkPhysicalDeviceLineRasterizationFeaturesEXT',
    'struct_VkPhysicalDeviceLineRasterizationPropertiesEXT',
    'struct_VkPhysicalDeviceLinearColorAttachmentFeaturesNV',
    'struct_VkPhysicalDeviceMaintenance3Properties',
    'struct_VkPhysicalDeviceMaintenance4Features',
    'struct_VkPhysicalDeviceMaintenance4Properties',
    'struct_VkPhysicalDeviceMaintenance5FeaturesKHR',
    'struct_VkPhysicalDeviceMaintenance5PropertiesKHR',
    'struct_VkPhysicalDeviceMaintenance6FeaturesKHR',
    'struct_VkPhysicalDeviceMaintenance6PropertiesKHR',
    'struct_VkPhysicalDeviceMemoryBudgetPropertiesEXT',
    'struct_VkPhysicalDeviceMemoryDecompressionFeaturesNV',
    'struct_VkPhysicalDeviceMemoryDecompressionPropertiesNV',
    'struct_VkPhysicalDeviceMemoryPriorityFeaturesEXT',
    'struct_VkPhysicalDeviceMemoryProperties',
    'struct_VkPhysicalDeviceMemoryProperties2',
    'struct_VkPhysicalDeviceMeshShaderFeaturesEXT',
    'struct_VkPhysicalDeviceMeshShaderFeaturesNV',
    'struct_VkPhysicalDeviceMeshShaderPropertiesEXT',
    'struct_VkPhysicalDeviceMeshShaderPropertiesNV',
    'struct_VkPhysicalDeviceMultiDrawFeaturesEXT',
    'struct_VkPhysicalDeviceMultiDrawPropertiesEXT',
    'struct_VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT',
    'struct_VkPhysicalDeviceMultiviewFeatures',
    'struct_VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX',
    'struct_VkPhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOM',
    'struct_VkPhysicalDeviceMultiviewPerViewViewportsFeaturesQCOM',
    'struct_VkPhysicalDeviceMultiviewProperties',
    'struct_VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT',
    'struct_VkPhysicalDeviceNestedCommandBufferFeaturesEXT',
    'struct_VkPhysicalDeviceNestedCommandBufferPropertiesEXT',
    'struct_VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT',
    'struct_VkPhysicalDeviceOpacityMicromapFeaturesEXT',
    'struct_VkPhysicalDeviceOpacityMicromapPropertiesEXT',
    'struct_VkPhysicalDeviceOpticalFlowFeaturesNV',
    'struct_VkPhysicalDeviceOpticalFlowPropertiesNV',
    'struct_VkPhysicalDevicePCIBusInfoPropertiesEXT',
    'struct_VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT',
    'struct_VkPhysicalDevicePerStageDescriptorSetFeaturesNV',
    'struct_VkPhysicalDevicePerformanceQueryFeaturesKHR',
    'struct_VkPhysicalDevicePerformanceQueryPropertiesKHR',
    'struct_VkPhysicalDevicePipelineCreationCacheControlFeatures',
    'struct_VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR',
    'struct_VkPhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT',
    'struct_VkPhysicalDevicePipelinePropertiesFeaturesEXT',
    'struct_VkPhysicalDevicePipelineProtectedAccessFeaturesEXT',
    'struct_VkPhysicalDevicePipelineRobustnessFeaturesEXT',
    'struct_VkPhysicalDevicePipelineRobustnessPropertiesEXT',
    'struct_VkPhysicalDevicePointClippingProperties',
    'struct_VkPhysicalDevicePresentBarrierFeaturesNV',
    'struct_VkPhysicalDevicePresentIdFeaturesKHR',
    'struct_VkPhysicalDevicePresentWaitFeaturesKHR',
    'struct_VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT',
    'struct_VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT',
    'struct_VkPhysicalDevicePrivateDataFeatures',
    'struct_VkPhysicalDeviceProperties',
    'struct_VkPhysicalDeviceProperties2',
    'struct_VkPhysicalDeviceProtectedMemoryFeatures',
    'struct_VkPhysicalDeviceProtectedMemoryProperties',
    'struct_VkPhysicalDeviceProvokingVertexFeaturesEXT',
    'struct_VkPhysicalDeviceProvokingVertexPropertiesEXT',
    'struct_VkPhysicalDevicePushDescriptorPropertiesKHR',
    'struct_VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT',
    'struct_VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT',
    'struct_VkPhysicalDeviceRayQueryFeaturesKHR',
    'struct_VkPhysicalDeviceRayTracingInvocationReorderFeaturesNV',
    'struct_VkPhysicalDeviceRayTracingInvocationReorderPropertiesNV',
    'struct_VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR',
    'struct_VkPhysicalDeviceRayTracingMotionBlurFeaturesNV',
    'struct_VkPhysicalDeviceRayTracingPipelineFeaturesKHR',
    'struct_VkPhysicalDeviceRayTracingPipelinePropertiesKHR',
    'struct_VkPhysicalDeviceRayTracingPositionFetchFeaturesKHR',
    'struct_VkPhysicalDeviceRayTracingPropertiesNV',
    'struct_VkPhysicalDeviceRelaxedLineRasterizationFeaturesIMG',
    'struct_VkPhysicalDeviceRenderPassStripedFeaturesARM',
    'struct_VkPhysicalDeviceRenderPassStripedPropertiesARM',
    'struct_VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV',
    'struct_VkPhysicalDeviceRobustness2FeaturesEXT',
    'struct_VkPhysicalDeviceRobustness2PropertiesEXT',
    'struct_VkPhysicalDeviceSampleLocationsPropertiesEXT',
    'struct_VkPhysicalDeviceSamplerFilterMinmaxProperties',
    'struct_VkPhysicalDeviceSamplerYcbcrConversionFeatures',
    'struct_VkPhysicalDeviceScalarBlockLayoutFeatures',
    'struct_VkPhysicalDeviceSchedulingControlsFeaturesARM',
    'struct_VkPhysicalDeviceSchedulingControlsPropertiesARM',
    'struct_VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures',
    'struct_VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT',
    'struct_VkPhysicalDeviceShaderAtomicFloatFeaturesEXT',
    'struct_VkPhysicalDeviceShaderAtomicInt64Features',
    'struct_VkPhysicalDeviceShaderClockFeaturesKHR',
    'struct_VkPhysicalDeviceShaderCoreBuiltinsFeaturesARM',
    'struct_VkPhysicalDeviceShaderCoreBuiltinsPropertiesARM',
    'struct_VkPhysicalDeviceShaderCoreProperties2AMD',
    'struct_VkPhysicalDeviceShaderCorePropertiesAMD',
    'struct_VkPhysicalDeviceShaderCorePropertiesARM',
    'struct_VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures',
    'struct_VkPhysicalDeviceShaderDrawParametersFeatures',
    'struct_VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD',
    'struct_VkPhysicalDeviceShaderFloat16Int8Features',
    'struct_VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT',
    'struct_VkPhysicalDeviceShaderImageFootprintFeaturesNV',
    'struct_VkPhysicalDeviceShaderIntegerDotProductFeatures',
    'struct_VkPhysicalDeviceShaderIntegerDotProductProperties',
    'struct_VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL',
    'struct_VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT',
    'struct_VkPhysicalDeviceShaderModuleIdentifierPropertiesEXT',
    'struct_VkPhysicalDeviceShaderObjectFeaturesEXT',
    'struct_VkPhysicalDeviceShaderObjectPropertiesEXT',
    'struct_VkPhysicalDeviceShaderSMBuiltinsFeaturesNV',
    'struct_VkPhysicalDeviceShaderSMBuiltinsPropertiesNV',
    'struct_VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures',
    'struct_VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR',
    'struct_VkPhysicalDeviceShaderTerminateInvocationFeatures',
    'struct_VkPhysicalDeviceShaderTileImageFeaturesEXT',
    'struct_VkPhysicalDeviceShaderTileImagePropertiesEXT',
    'struct_VkPhysicalDeviceShadingRateImageFeaturesNV',
    'struct_VkPhysicalDeviceShadingRateImagePropertiesNV',
    'struct_VkPhysicalDeviceSparseImageFormatInfo2',
    'struct_VkPhysicalDeviceSparseProperties',
    'struct_VkPhysicalDeviceSubgroupProperties',
    'struct_VkPhysicalDeviceSubgroupSizeControlFeatures',
    'struct_VkPhysicalDeviceSubgroupSizeControlProperties',
    'struct_VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT',
    'struct_VkPhysicalDeviceSubpassShadingFeaturesHUAWEI',
    'struct_VkPhysicalDeviceSubpassShadingPropertiesHUAWEI',
    'struct_VkPhysicalDeviceSurfaceInfo2KHR',
    'struct_VkPhysicalDeviceSwapchainMaintenance1FeaturesEXT',
    'struct_VkPhysicalDeviceSynchronization2Features',
    'struct_VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT',
    'struct_VkPhysicalDeviceTexelBufferAlignmentProperties',
    'struct_VkPhysicalDeviceTextureCompressionASTCHDRFeatures',
    'struct_VkPhysicalDeviceTilePropertiesFeaturesQCOM',
    'struct_VkPhysicalDeviceTimelineSemaphoreFeatures',
    'struct_VkPhysicalDeviceTimelineSemaphoreProperties',
    'struct_VkPhysicalDeviceToolProperties',
    'struct_VkPhysicalDeviceTransformFeedbackFeaturesEXT',
    'struct_VkPhysicalDeviceTransformFeedbackPropertiesEXT',
    'struct_VkPhysicalDeviceUniformBufferStandardLayoutFeatures',
    'struct_VkPhysicalDeviceVariablePointersFeatures',
    'struct_VkPhysicalDeviceVertexAttributeDivisorFeaturesKHR',
    'struct_VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT',
    'struct_VkPhysicalDeviceVertexAttributeDivisorPropertiesKHR',
    'struct_VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT',
    'struct_VkPhysicalDeviceVideoEncodeQualityLevelInfoKHR',
    'struct_VkPhysicalDeviceVideoFormatInfoKHR',
    'struct_VkPhysicalDeviceVideoMaintenance1FeaturesKHR',
    'struct_VkPhysicalDeviceVulkan11Features',
    'struct_VkPhysicalDeviceVulkan11Properties',
    'struct_VkPhysicalDeviceVulkan12Features',
    'struct_VkPhysicalDeviceVulkan12Properties',
    'struct_VkPhysicalDeviceVulkan13Features',
    'struct_VkPhysicalDeviceVulkan13Properties',
    'struct_VkPhysicalDeviceVulkanMemoryModelFeatures',
    'struct_VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR',
    'struct_VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT',
    'struct_VkPhysicalDeviceYcbcrDegammaFeaturesQCOM',
    'struct_VkPhysicalDeviceYcbcrImageArraysFeaturesEXT',
    'struct_VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures',
    'struct_VkPhysicalDevice_T', 'struct_VkPipelineCacheCreateInfo',
    'struct_VkPipelineCacheHeaderVersionOne',
    'struct_VkPipelineCache_T',
    'struct_VkPipelineColorBlendAdvancedStateCreateInfoEXT',
    'struct_VkPipelineColorBlendAttachmentState',
    'struct_VkPipelineColorBlendStateCreateInfo',
    'struct_VkPipelineColorWriteCreateInfoEXT',
    'struct_VkPipelineCompilerControlCreateInfoAMD',
    'struct_VkPipelineCoverageModulationStateCreateInfoNV',
    'struct_VkPipelineCoverageReductionStateCreateInfoNV',
    'struct_VkPipelineCoverageToColorStateCreateInfoNV',
    'struct_VkPipelineCreateFlags2CreateInfoKHR',
    'struct_VkPipelineCreationFeedback',
    'struct_VkPipelineCreationFeedbackCreateInfo',
    'struct_VkPipelineDepthStencilStateCreateInfo',
    'struct_VkPipelineDiscardRectangleStateCreateInfoEXT',
    'struct_VkPipelineDynamicStateCreateInfo',
    'struct_VkPipelineExecutableInfoKHR',
    'struct_VkPipelineExecutableInternalRepresentationKHR',
    'struct_VkPipelineExecutablePropertiesKHR',
    'struct_VkPipelineExecutableStatisticKHR',
    'struct_VkPipelineFragmentShadingRateEnumStateCreateInfoNV',
    'struct_VkPipelineFragmentShadingRateStateCreateInfoKHR',
    'struct_VkPipelineIndirectDeviceAddressInfoNV',
    'struct_VkPipelineInfoKHR',
    'struct_VkPipelineInputAssemblyStateCreateInfo',
    'struct_VkPipelineLayoutCreateInfo', 'struct_VkPipelineLayout_T',
    'struct_VkPipelineLibraryCreateInfoKHR',
    'struct_VkPipelineMultisampleStateCreateInfo',
    'struct_VkPipelinePropertiesIdentifierEXT',
    'struct_VkPipelineRasterizationConservativeStateCreateInfoEXT',
    'struct_VkPipelineRasterizationDepthClipStateCreateInfoEXT',
    'struct_VkPipelineRasterizationLineStateCreateInfoEXT',
    'struct_VkPipelineRasterizationProvokingVertexStateCreateInfoEXT',
    'struct_VkPipelineRasterizationStateCreateInfo',
    'struct_VkPipelineRasterizationStateRasterizationOrderAMD',
    'struct_VkPipelineRasterizationStateStreamCreateInfoEXT',
    'struct_VkPipelineRenderingCreateInfo',
    'struct_VkPipelineRepresentativeFragmentTestStateCreateInfoNV',
    'struct_VkPipelineRobustnessCreateInfoEXT',
    'struct_VkPipelineSampleLocationsStateCreateInfoEXT',
    'struct_VkPipelineShaderStageCreateInfo',
    'struct_VkPipelineShaderStageModuleIdentifierCreateInfoEXT',
    'struct_VkPipelineShaderStageRequiredSubgroupSizeCreateInfo',
    'struct_VkPipelineTessellationDomainOriginStateCreateInfo',
    'struct_VkPipelineTessellationStateCreateInfo',
    'struct_VkPipelineVertexInputDivisorStateCreateInfoKHR',
    'struct_VkPipelineVertexInputStateCreateInfo',
    'struct_VkPipelineViewportCoarseSampleOrderStateCreateInfoNV',
    'struct_VkPipelineViewportDepthClipControlCreateInfoEXT',
    'struct_VkPipelineViewportExclusiveScissorStateCreateInfoNV',
    'struct_VkPipelineViewportShadingRateImageStateCreateInfoNV',
    'struct_VkPipelineViewportStateCreateInfo',
    'struct_VkPipelineViewportSwizzleStateCreateInfoNV',
    'struct_VkPipelineViewportWScalingStateCreateInfoNV',
    'struct_VkPipeline_T', 'struct_VkPresentIdKHR',
    'struct_VkPresentInfoKHR', 'struct_VkPresentRegionKHR',
    'struct_VkPresentRegionsKHR', 'struct_VkPresentTimeGOOGLE',
    'struct_VkPresentTimesInfoGOOGLE',
    'struct_VkPrivateDataSlotCreateInfo',
    'struct_VkPrivateDataSlot_T', 'struct_VkProtectedSubmitInfo',
    'struct_VkPushConstantRange', 'struct_VkPushConstantsInfoKHR',
    'struct_VkPushDescriptorSetInfoKHR',
    'struct_VkPushDescriptorSetWithTemplateInfoKHR',
    'struct_VkQueryLowLatencySupportNV',
    'struct_VkQueryPoolCreateInfo',
    'struct_VkQueryPoolPerformanceCreateInfoKHR',
    'struct_VkQueryPoolPerformanceQueryCreateInfoINTEL',
    'struct_VkQueryPoolVideoEncodeFeedbackCreateInfoKHR',
    'struct_VkQueryPool_T',
    'struct_VkQueueFamilyCheckpointProperties2NV',
    'struct_VkQueueFamilyCheckpointPropertiesNV',
    'struct_VkQueueFamilyGlobalPriorityPropertiesKHR',
    'struct_VkQueueFamilyProperties',
    'struct_VkQueueFamilyProperties2',
    'struct_VkQueueFamilyQueryResultStatusPropertiesKHR',
    'struct_VkQueueFamilyVideoPropertiesKHR', 'struct_VkQueue_T',
    'struct_VkRayTracingPipelineCreateInfoKHR',
    'struct_VkRayTracingPipelineCreateInfoNV',
    'struct_VkRayTracingPipelineInterfaceCreateInfoKHR',
    'struct_VkRayTracingShaderGroupCreateInfoKHR',
    'struct_VkRayTracingShaderGroupCreateInfoNV', 'struct_VkRect2D',
    'struct_VkRectLayerKHR', 'struct_VkRefreshCycleDurationGOOGLE',
    'struct_VkReleaseSwapchainImagesInfoEXT',
    'struct_VkRenderPassAttachmentBeginInfo',
    'struct_VkRenderPassBeginInfo', 'struct_VkRenderPassCreateInfo',
    'struct_VkRenderPassCreateInfo2',
    'struct_VkRenderPassCreationControlEXT',
    'struct_VkRenderPassCreationFeedbackCreateInfoEXT',
    'struct_VkRenderPassCreationFeedbackInfoEXT',
    'struct_VkRenderPassFragmentDensityMapCreateInfoEXT',
    'struct_VkRenderPassInputAttachmentAspectCreateInfo',
    'struct_VkRenderPassMultiviewCreateInfo',
    'struct_VkRenderPassSampleLocationsBeginInfoEXT',
    'struct_VkRenderPassStripeBeginInfoARM',
    'struct_VkRenderPassStripeInfoARM',
    'struct_VkRenderPassStripeSubmitInfoARM',
    'struct_VkRenderPassSubpassFeedbackCreateInfoEXT',
    'struct_VkRenderPassSubpassFeedbackInfoEXT',
    'struct_VkRenderPassTransformBeginInfoQCOM',
    'struct_VkRenderPass_T', 'struct_VkRenderingAreaInfoKHR',
    'struct_VkRenderingAttachmentInfo',
    'struct_VkRenderingFragmentDensityMapAttachmentInfoEXT',
    'struct_VkRenderingFragmentShadingRateAttachmentInfoKHR',
    'struct_VkRenderingInfo', 'struct_VkResolveImageInfo2',
    'struct_VkSRTDataNV', 'struct_VkSampleLocationEXT',
    'struct_VkSampleLocationsInfoEXT',
    'struct_VkSamplerBlockMatchWindowCreateInfoQCOM',
    'struct_VkSamplerBorderColorComponentMappingCreateInfoEXT',
    'struct_VkSamplerCaptureDescriptorDataInfoEXT',
    'struct_VkSamplerCreateInfo',
    'struct_VkSamplerCubicWeightsCreateInfoQCOM',
    'struct_VkSamplerCustomBorderColorCreateInfoEXT',
    'struct_VkSamplerReductionModeCreateInfo',
    'struct_VkSamplerYcbcrConversionCreateInfo',
    'struct_VkSamplerYcbcrConversionImageFormatProperties',
    'struct_VkSamplerYcbcrConversionInfo',
    'struct_VkSamplerYcbcrConversionYcbcrDegammaCreateInfoQCOM',
    'struct_VkSamplerYcbcrConversion_T', 'struct_VkSampler_T',
    'struct_VkSemaphoreCreateInfo', 'struct_VkSemaphoreGetFdInfoKHR',
    'struct_VkSemaphoreSignalInfo', 'struct_VkSemaphoreSubmitInfo',
    'struct_VkSemaphoreTypeCreateInfo', 'struct_VkSemaphoreWaitInfo',
    'struct_VkSemaphore_T',
    'struct_VkSetDescriptorBufferOffsetsInfoEXT',
    'struct_VkSetLatencyMarkerInfoNV',
    'struct_VkSetStateFlagsIndirectCommandNV',
    'struct_VkShaderCreateInfoEXT', 'struct_VkShaderEXT_T',
    'struct_VkShaderModuleCreateInfo',
    'struct_VkShaderModuleIdentifierEXT',
    'struct_VkShaderModuleValidationCacheCreateInfoEXT',
    'struct_VkShaderModule_T', 'struct_VkShaderResourceUsageAMD',
    'struct_VkShaderStatisticsInfoAMD',
    'struct_VkShadingRatePaletteNV',
    'struct_VkSharedPresentSurfaceCapabilitiesKHR',
    'struct_VkSparseBufferMemoryBindInfo',
    'struct_VkSparseImageFormatProperties',
    'struct_VkSparseImageFormatProperties2',
    'struct_VkSparseImageMemoryBind',
    'struct_VkSparseImageMemoryBindInfo',
    'struct_VkSparseImageMemoryRequirements',
    'struct_VkSparseImageMemoryRequirements2',
    'struct_VkSparseImageOpaqueMemoryBindInfo',
    'struct_VkSparseMemoryBind', 'struct_VkSpecializationInfo',
    'struct_VkSpecializationMapEntry', 'struct_VkStencilOpState',
    'struct_VkStridedDeviceAddressRegionKHR', 'struct_VkSubmitInfo',
    'struct_VkSubmitInfo2', 'struct_VkSubpassBeginInfo',
    'struct_VkSubpassDependency', 'struct_VkSubpassDependency2',
    'struct_VkSubpassDescription', 'struct_VkSubpassDescription2',
    'struct_VkSubpassDescriptionDepthStencilResolve',
    'struct_VkSubpassEndInfo',
    'struct_VkSubpassFragmentDensityMapOffsetEndInfoQCOM',
    'struct_VkSubpassResolvePerformanceQueryEXT',
    'struct_VkSubpassSampleLocationsEXT',
    'struct_VkSubpassShadingPipelineCreateInfoHUAWEI',
    'struct_VkSubresourceHostMemcpySizeEXT',
    'struct_VkSubresourceLayout', 'struct_VkSubresourceLayout2KHR',
    'struct_VkSurfaceCapabilities2EXT',
    'struct_VkSurfaceCapabilities2KHR',
    'struct_VkSurfaceCapabilitiesKHR',
    'struct_VkSurfaceCapabilitiesPresentBarrierNV',
    'struct_VkSurfaceFormat2KHR', 'struct_VkSurfaceFormatKHR',
    'struct_VkSurfaceKHR_T',
    'struct_VkSurfacePresentModeCompatibilityEXT',
    'struct_VkSurfacePresentModeEXT',
    'struct_VkSurfacePresentScalingCapabilitiesEXT',
    'struct_VkSurfaceProtectedCapabilitiesKHR',
    'struct_VkSwapchainCounterCreateInfoEXT',
    'struct_VkSwapchainCreateInfoKHR',
    'struct_VkSwapchainDisplayNativeHdrCreateInfoAMD',
    'struct_VkSwapchainKHR_T',
    'struct_VkSwapchainLatencyCreateInfoNV',
    'struct_VkSwapchainPresentBarrierCreateInfoNV',
    'struct_VkSwapchainPresentFenceInfoEXT',
    'struct_VkSwapchainPresentModeInfoEXT',
    'struct_VkSwapchainPresentModesCreateInfoEXT',
    'struct_VkSwapchainPresentScalingCreateInfoEXT',
    'struct_VkTextureLODGatherFormatPropertiesAMD',
    'struct_VkTilePropertiesQCOM',
    'struct_VkTimelineSemaphoreSubmitInfo',
    'struct_VkTraceRaysIndirectCommand2KHR',
    'struct_VkTraceRaysIndirectCommandKHR',
    'struct_VkTransformMatrixKHR',
    'struct_VkValidationCacheCreateInfoEXT',
    'struct_VkValidationCacheEXT_T', 'struct_VkValidationFeaturesEXT',
    'struct_VkValidationFlagsEXT',
    'struct_VkVertexInputAttributeDescription',
    'struct_VkVertexInputAttributeDescription2EXT',
    'struct_VkVertexInputBindingDescription',
    'struct_VkVertexInputBindingDescription2EXT',
    'struct_VkVertexInputBindingDivisorDescriptionKHR',
    'struct_VkVideoBeginCodingInfoKHR',
    'struct_VkVideoCapabilitiesKHR',
    'struct_VkVideoCodingControlInfoKHR',
    'struct_VkVideoDecodeCapabilitiesKHR',
    'struct_VkVideoDecodeH264CapabilitiesKHR',
    'struct_VkVideoDecodeH264DpbSlotInfoKHR',
    'struct_VkVideoDecodeH264PictureInfoKHR',
    'struct_VkVideoDecodeH264ProfileInfoKHR',
    'struct_VkVideoDecodeH264SessionParametersAddInfoKHR',
    'struct_VkVideoDecodeH264SessionParametersCreateInfoKHR',
    'struct_VkVideoDecodeH265CapabilitiesKHR',
    'struct_VkVideoDecodeH265DpbSlotInfoKHR',
    'struct_VkVideoDecodeH265PictureInfoKHR',
    'struct_VkVideoDecodeH265ProfileInfoKHR',
    'struct_VkVideoDecodeH265SessionParametersAddInfoKHR',
    'struct_VkVideoDecodeH265SessionParametersCreateInfoKHR',
    'struct_VkVideoDecodeInfoKHR', 'struct_VkVideoDecodeUsageInfoKHR',
    'struct_VkVideoEncodeCapabilitiesKHR',
    'struct_VkVideoEncodeH264CapabilitiesKHR',
    'struct_VkVideoEncodeH264DpbSlotInfoKHR',
    'struct_VkVideoEncodeH264FrameSizeKHR',
    'struct_VkVideoEncodeH264GopRemainingFrameInfoKHR',
    'struct_VkVideoEncodeH264NaluSliceInfoKHR',
    'struct_VkVideoEncodeH264PictureInfoKHR',
    'struct_VkVideoEncodeH264ProfileInfoKHR',
    'struct_VkVideoEncodeH264QpKHR',
    'struct_VkVideoEncodeH264QualityLevelPropertiesKHR',
    'struct_VkVideoEncodeH264RateControlInfoKHR',
    'struct_VkVideoEncodeH264RateControlLayerInfoKHR',
    'struct_VkVideoEncodeH264SessionCreateInfoKHR',
    'struct_VkVideoEncodeH264SessionParametersAddInfoKHR',
    'struct_VkVideoEncodeH264SessionParametersCreateInfoKHR',
    'struct_VkVideoEncodeH264SessionParametersFeedbackInfoKHR',
    'struct_VkVideoEncodeH264SessionParametersGetInfoKHR',
    'struct_VkVideoEncodeH265CapabilitiesKHR',
    'struct_VkVideoEncodeH265DpbSlotInfoKHR',
    'struct_VkVideoEncodeH265FrameSizeKHR',
    'struct_VkVideoEncodeH265GopRemainingFrameInfoKHR',
    'struct_VkVideoEncodeH265NaluSliceSegmentInfoKHR',
    'struct_VkVideoEncodeH265PictureInfoKHR',
    'struct_VkVideoEncodeH265ProfileInfoKHR',
    'struct_VkVideoEncodeH265QpKHR',
    'struct_VkVideoEncodeH265QualityLevelPropertiesKHR',
    'struct_VkVideoEncodeH265RateControlInfoKHR',
    'struct_VkVideoEncodeH265RateControlLayerInfoKHR',
    'struct_VkVideoEncodeH265SessionCreateInfoKHR',
    'struct_VkVideoEncodeH265SessionParametersAddInfoKHR',
    'struct_VkVideoEncodeH265SessionParametersCreateInfoKHR',
    'struct_VkVideoEncodeH265SessionParametersFeedbackInfoKHR',
    'struct_VkVideoEncodeH265SessionParametersGetInfoKHR',
    'struct_VkVideoEncodeInfoKHR',
    'struct_VkVideoEncodeQualityLevelInfoKHR',
    'struct_VkVideoEncodeQualityLevelPropertiesKHR',
    'struct_VkVideoEncodeRateControlInfoKHR',
    'struct_VkVideoEncodeRateControlLayerInfoKHR',
    'struct_VkVideoEncodeSessionParametersFeedbackInfoKHR',
    'struct_VkVideoEncodeSessionParametersGetInfoKHR',
    'struct_VkVideoEncodeUsageInfoKHR',
    'struct_VkVideoEndCodingInfoKHR',
    'struct_VkVideoFormatPropertiesKHR',
    'struct_VkVideoInlineQueryInfoKHR',
    'struct_VkVideoPictureResourceInfoKHR',
    'struct_VkVideoProfileInfoKHR',
    'struct_VkVideoProfileListInfoKHR',
    'struct_VkVideoReferenceSlotInfoKHR',
    'struct_VkVideoSessionCreateInfoKHR',
    'struct_VkVideoSessionKHR_T',
    'struct_VkVideoSessionMemoryRequirementsKHR',
    'struct_VkVideoSessionParametersCreateInfoKHR',
    'struct_VkVideoSessionParametersKHR_T',
    'struct_VkVideoSessionParametersUpdateInfoKHR',
    'struct_VkViewport', 'struct_VkViewportSwizzleNV',
    'struct_VkViewportWScalingNV', 'struct_VkWriteDescriptorSet',
    'struct_VkWriteDescriptorSetAccelerationStructureKHR',
    'struct_VkWriteDescriptorSetAccelerationStructureNV',
    'struct_VkWriteDescriptorSetInlineUniformBlock',
    'struct_VkXYColorEXT', 'uint16_t', 'uint32_t', 'uint64_t',
    'union_VkAccelerationStructureGeometryDataKHR',
    'union_VkAccelerationStructureMotionInstanceDataNV',
    'union_VkClearColorValue', 'union_VkClearValue',
    'union_VkDescriptorDataEXT',
    'union_VkDeviceOrHostAddressConstKHR',
    'union_VkDeviceOrHostAddressKHR',
    'union_VkPerformanceCounterResultKHR',
    'union_VkPerformanceValueDataINTEL',
    'union_VkPipelineExecutableStatisticValueKHR',
    'vkAcquireDrmDisplayEXT', 'vkAcquireNextImage2KHR',
    'vkAcquireNextImageKHR', 'vkAcquirePerformanceConfigurationINTEL',
    'vkAcquireProfilingLockKHR', 'vkAllocateCommandBuffers',
    'vkAllocateDescriptorSets', 'vkAllocateMemory',
    'vkBeginCommandBuffer', 'vkBindAccelerationStructureMemoryNV',
    'vkBindBufferMemory', 'vkBindBufferMemory2',
    'vkBindBufferMemory2KHR', 'vkBindImageMemory',
    'vkBindImageMemory2', 'vkBindImageMemory2KHR',
    'vkBindOpticalFlowSessionImageNV', 'vkBindVideoSessionMemoryKHR',
    'vkBuildAccelerationStructuresKHR', 'vkBuildMicromapsEXT',
    'vkCmdBeginConditionalRenderingEXT',
    'vkCmdBeginDebugUtilsLabelEXT', 'vkCmdBeginQuery',
    'vkCmdBeginQueryIndexedEXT', 'vkCmdBeginRenderPass',
    'vkCmdBeginRenderPass2', 'vkCmdBeginRenderPass2KHR',
    'vkCmdBeginRendering', 'vkCmdBeginRenderingKHR',
    'vkCmdBeginTransformFeedbackEXT', 'vkCmdBeginVideoCodingKHR',
    'vkCmdBindDescriptorBufferEmbeddedSamplers2EXT',
    'vkCmdBindDescriptorBufferEmbeddedSamplersEXT',
    'vkCmdBindDescriptorBuffersEXT', 'vkCmdBindDescriptorSets',
    'vkCmdBindDescriptorSets2KHR', 'vkCmdBindIndexBuffer',
    'vkCmdBindIndexBuffer2KHR', 'vkCmdBindInvocationMaskHUAWEI',
    'vkCmdBindPipeline', 'vkCmdBindPipelineShaderGroupNV',
    'vkCmdBindShadersEXT', 'vkCmdBindShadingRateImageNV',
    'vkCmdBindTransformFeedbackBuffersEXT', 'vkCmdBindVertexBuffers',
    'vkCmdBindVertexBuffers2', 'vkCmdBindVertexBuffers2EXT',
    'vkCmdBlitImage', 'vkCmdBlitImage2', 'vkCmdBlitImage2KHR',
    'vkCmdBuildAccelerationStructureNV',
    'vkCmdBuildAccelerationStructuresIndirectKHR',
    'vkCmdBuildAccelerationStructuresKHR', 'vkCmdBuildMicromapsEXT',
    'vkCmdClearAttachments', 'vkCmdClearColorImage',
    'vkCmdClearDepthStencilImage', 'vkCmdControlVideoCodingKHR',
    'vkCmdCopyAccelerationStructureKHR',
    'vkCmdCopyAccelerationStructureNV',
    'vkCmdCopyAccelerationStructureToMemoryKHR', 'vkCmdCopyBuffer',
    'vkCmdCopyBuffer2', 'vkCmdCopyBuffer2KHR',
    'vkCmdCopyBufferToImage', 'vkCmdCopyBufferToImage2',
    'vkCmdCopyBufferToImage2KHR', 'vkCmdCopyImage', 'vkCmdCopyImage2',
    'vkCmdCopyImage2KHR', 'vkCmdCopyImageToBuffer',
    'vkCmdCopyImageToBuffer2', 'vkCmdCopyImageToBuffer2KHR',
    'vkCmdCopyMemoryIndirectNV',
    'vkCmdCopyMemoryToAccelerationStructureKHR',
    'vkCmdCopyMemoryToImageIndirectNV',
    'vkCmdCopyMemoryToMicromapEXT', 'vkCmdCopyMicromapEXT',
    'vkCmdCopyMicromapToMemoryEXT', 'vkCmdCopyQueryPoolResults',
    'vkCmdCuLaunchKernelNVX', 'vkCmdCudaLaunchKernelNV',
    'vkCmdDebugMarkerBeginEXT', 'vkCmdDebugMarkerEndEXT',
    'vkCmdDebugMarkerInsertEXT', 'vkCmdDecodeVideoKHR',
    'vkCmdDecompressMemoryIndirectCountNV', 'vkCmdDecompressMemoryNV',
    'vkCmdDispatch', 'vkCmdDispatchBase', 'vkCmdDispatchBaseKHR',
    'vkCmdDispatchIndirect', 'vkCmdDraw', 'vkCmdDrawClusterHUAWEI',
    'vkCmdDrawClusterIndirectHUAWEI', 'vkCmdDrawIndexed',
    'vkCmdDrawIndexedIndirect', 'vkCmdDrawIndexedIndirectCount',
    'vkCmdDrawIndexedIndirectCountAMD',
    'vkCmdDrawIndexedIndirectCountKHR', 'vkCmdDrawIndirect',
    'vkCmdDrawIndirectByteCountEXT', 'vkCmdDrawIndirectCount',
    'vkCmdDrawIndirectCountAMD', 'vkCmdDrawIndirectCountKHR',
    'vkCmdDrawMeshTasksEXT', 'vkCmdDrawMeshTasksIndirectCountEXT',
    'vkCmdDrawMeshTasksIndirectCountNV',
    'vkCmdDrawMeshTasksIndirectEXT', 'vkCmdDrawMeshTasksIndirectNV',
    'vkCmdDrawMeshTasksNV', 'vkCmdDrawMultiEXT',
    'vkCmdDrawMultiIndexedEXT', 'vkCmdEncodeVideoKHR',
    'vkCmdEndConditionalRenderingEXT', 'vkCmdEndDebugUtilsLabelEXT',
    'vkCmdEndQuery', 'vkCmdEndQueryIndexedEXT', 'vkCmdEndRenderPass',
    'vkCmdEndRenderPass2', 'vkCmdEndRenderPass2KHR',
    'vkCmdEndRendering', 'vkCmdEndRenderingKHR',
    'vkCmdEndTransformFeedbackEXT', 'vkCmdEndVideoCodingKHR',
    'vkCmdExecuteCommands', 'vkCmdExecuteGeneratedCommandsNV',
    'vkCmdFillBuffer', 'vkCmdInsertDebugUtilsLabelEXT',
    'vkCmdNextSubpass', 'vkCmdNextSubpass2', 'vkCmdNextSubpass2KHR',
    'vkCmdOpticalFlowExecuteNV', 'vkCmdPipelineBarrier',
    'vkCmdPipelineBarrier2', 'vkCmdPipelineBarrier2KHR',
    'vkCmdPreprocessGeneratedCommandsNV', 'vkCmdPushConstants',
    'vkCmdPushConstants2KHR', 'vkCmdPushDescriptorSet2KHR',
    'vkCmdPushDescriptorSetKHR',
    'vkCmdPushDescriptorSetWithTemplate2KHR',
    'vkCmdPushDescriptorSetWithTemplateKHR', 'vkCmdResetEvent',
    'vkCmdResetEvent2', 'vkCmdResetEvent2KHR', 'vkCmdResetQueryPool',
    'vkCmdResolveImage', 'vkCmdResolveImage2',
    'vkCmdResolveImage2KHR', 'vkCmdSetAlphaToCoverageEnableEXT',
    'vkCmdSetAlphaToOneEnableEXT',
    'vkCmdSetAttachmentFeedbackLoopEnableEXT',
    'vkCmdSetBlendConstants', 'vkCmdSetCheckpointNV',
    'vkCmdSetCoarseSampleOrderNV', 'vkCmdSetColorBlendAdvancedEXT',
    'vkCmdSetColorBlendEnableEXT', 'vkCmdSetColorBlendEquationEXT',
    'vkCmdSetColorWriteEnableEXT', 'vkCmdSetColorWriteMaskEXT',
    'vkCmdSetConservativeRasterizationModeEXT',
    'vkCmdSetCoverageModulationModeNV',
    'vkCmdSetCoverageModulationTableEnableNV',
    'vkCmdSetCoverageModulationTableNV',
    'vkCmdSetCoverageReductionModeNV',
    'vkCmdSetCoverageToColorEnableNV',
    'vkCmdSetCoverageToColorLocationNV', 'vkCmdSetCullMode',
    'vkCmdSetCullModeEXT', 'vkCmdSetDepthBias',
    'vkCmdSetDepthBias2EXT', 'vkCmdSetDepthBiasEnable',
    'vkCmdSetDepthBiasEnableEXT', 'vkCmdSetDepthBounds',
    'vkCmdSetDepthBoundsTestEnable',
    'vkCmdSetDepthBoundsTestEnableEXT', 'vkCmdSetDepthClampEnableEXT',
    'vkCmdSetDepthClipEnableEXT',
    'vkCmdSetDepthClipNegativeOneToOneEXT', 'vkCmdSetDepthCompareOp',
    'vkCmdSetDepthCompareOpEXT', 'vkCmdSetDepthTestEnable',
    'vkCmdSetDepthTestEnableEXT', 'vkCmdSetDepthWriteEnable',
    'vkCmdSetDepthWriteEnableEXT',
    'vkCmdSetDescriptorBufferOffsets2EXT',
    'vkCmdSetDescriptorBufferOffsetsEXT', 'vkCmdSetDeviceMask',
    'vkCmdSetDeviceMaskKHR', 'vkCmdSetDiscardRectangleEXT',
    'vkCmdSetDiscardRectangleEnableEXT',
    'vkCmdSetDiscardRectangleModeEXT', 'vkCmdSetEvent',
    'vkCmdSetEvent2', 'vkCmdSetEvent2KHR',
    'vkCmdSetExclusiveScissorEnableNV', 'vkCmdSetExclusiveScissorNV',
    'vkCmdSetExtraPrimitiveOverestimationSizeEXT',
    'vkCmdSetFragmentShadingRateEnumNV',
    'vkCmdSetFragmentShadingRateKHR', 'vkCmdSetFrontFace',
    'vkCmdSetFrontFaceEXT', 'vkCmdSetLineRasterizationModeEXT',
    'vkCmdSetLineStippleEXT', 'vkCmdSetLineStippleEnableEXT',
    'vkCmdSetLineWidth', 'vkCmdSetLogicOpEXT',
    'vkCmdSetLogicOpEnableEXT', 'vkCmdSetPatchControlPointsEXT',
    'vkCmdSetPerformanceMarkerINTEL',
    'vkCmdSetPerformanceOverrideINTEL',
    'vkCmdSetPerformanceStreamMarkerINTEL', 'vkCmdSetPolygonModeEXT',
    'vkCmdSetPrimitiveRestartEnable',
    'vkCmdSetPrimitiveRestartEnableEXT', 'vkCmdSetPrimitiveTopology',
    'vkCmdSetPrimitiveTopologyEXT', 'vkCmdSetProvokingVertexModeEXT',
    'vkCmdSetRasterizationSamplesEXT',
    'vkCmdSetRasterizationStreamEXT',
    'vkCmdSetRasterizerDiscardEnable',
    'vkCmdSetRasterizerDiscardEnableEXT',
    'vkCmdSetRayTracingPipelineStackSizeKHR',
    'vkCmdSetRepresentativeFragmentTestEnableNV',
    'vkCmdSetSampleLocationsEXT', 'vkCmdSetSampleLocationsEnableEXT',
    'vkCmdSetSampleMaskEXT', 'vkCmdSetScissor',
    'vkCmdSetScissorWithCount', 'vkCmdSetScissorWithCountEXT',
    'vkCmdSetShadingRateImageEnableNV', 'vkCmdSetStencilCompareMask',
    'vkCmdSetStencilOp', 'vkCmdSetStencilOpEXT',
    'vkCmdSetStencilReference', 'vkCmdSetStencilTestEnable',
    'vkCmdSetStencilTestEnableEXT', 'vkCmdSetStencilWriteMask',
    'vkCmdSetTessellationDomainOriginEXT', 'vkCmdSetVertexInputEXT',
    'vkCmdSetViewport', 'vkCmdSetViewportShadingRatePaletteNV',
    'vkCmdSetViewportSwizzleNV', 'vkCmdSetViewportWScalingEnableNV',
    'vkCmdSetViewportWScalingNV', 'vkCmdSetViewportWithCount',
    'vkCmdSetViewportWithCountEXT', 'vkCmdSubpassShadingHUAWEI',
    'vkCmdTraceRaysIndirect2KHR', 'vkCmdTraceRaysIndirectKHR',
    'vkCmdTraceRaysKHR', 'vkCmdTraceRaysNV', 'vkCmdUpdateBuffer',
    'vkCmdUpdatePipelineIndirectBufferNV', 'vkCmdWaitEvents',
    'vkCmdWaitEvents2', 'vkCmdWaitEvents2KHR',
    'vkCmdWriteAccelerationStructuresPropertiesKHR',
    'vkCmdWriteAccelerationStructuresPropertiesNV',
    'vkCmdWriteBufferMarker2AMD', 'vkCmdWriteBufferMarkerAMD',
    'vkCmdWriteMicromapsPropertiesEXT', 'vkCmdWriteTimestamp',
    'vkCmdWriteTimestamp2', 'vkCmdWriteTimestamp2KHR',
    'vkCompileDeferredNV', 'vkCopyAccelerationStructureKHR',
    'vkCopyAccelerationStructureToMemoryKHR', 'vkCopyImageToImageEXT',
    'vkCopyImageToMemoryEXT',
    'vkCopyMemoryToAccelerationStructureKHR',
    'vkCopyMemoryToImageEXT', 'vkCopyMemoryToMicromapEXT',
    'vkCopyMicromapEXT', 'vkCopyMicromapToMemoryEXT',
    'vkCreateAccelerationStructureKHR',
    'vkCreateAccelerationStructureNV', 'vkCreateBuffer',
    'vkCreateBufferView', 'vkCreateCommandPool',
    'vkCreateComputePipelines', 'vkCreateCuFunctionNVX',
    'vkCreateCuModuleNVX', 'vkCreateCudaFunctionNV',
    'vkCreateCudaModuleNV', 'vkCreateDebugReportCallbackEXT',
    'vkCreateDebugUtilsMessengerEXT', 'vkCreateDeferredOperationKHR',
    'vkCreateDescriptorPool', 'vkCreateDescriptorSetLayout',
    'vkCreateDescriptorUpdateTemplate',
    'vkCreateDescriptorUpdateTemplateKHR', 'vkCreateDevice',
    'vkCreateDisplayModeKHR', 'vkCreateDisplayPlaneSurfaceKHR',
    'vkCreateEvent', 'vkCreateFence', 'vkCreateFramebuffer',
    'vkCreateGraphicsPipelines', 'vkCreateHeadlessSurfaceEXT',
    'vkCreateImage', 'vkCreateImageView',
    'vkCreateIndirectCommandsLayoutNV', 'vkCreateInstance',
    'vkCreateMicromapEXT', 'vkCreateOpticalFlowSessionNV',
    'vkCreatePipelineCache', 'vkCreatePipelineLayout',
    'vkCreatePrivateDataSlot', 'vkCreatePrivateDataSlotEXT',
    'vkCreateQueryPool', 'vkCreateRayTracingPipelinesKHR',
    'vkCreateRayTracingPipelinesNV', 'vkCreateRenderPass',
    'vkCreateRenderPass2', 'vkCreateRenderPass2KHR',
    'vkCreateSampler', 'vkCreateSamplerYcbcrConversion',
    'vkCreateSamplerYcbcrConversionKHR', 'vkCreateSemaphore',
    'vkCreateShaderModule', 'vkCreateShadersEXT',
    'vkCreateSharedSwapchainsKHR', 'vkCreateSwapchainKHR',
    'vkCreateValidationCacheEXT', 'vkCreateVideoSessionKHR',
    'vkCreateVideoSessionParametersKHR',
    'vkDebugMarkerSetObjectNameEXT', 'vkDebugMarkerSetObjectTagEXT',
    'vkDebugReportMessageEXT', 'vkDeferredOperationJoinKHR',
    'vkDestroyAccelerationStructureKHR',
    'vkDestroyAccelerationStructureNV', 'vkDestroyBuffer',
    'vkDestroyBufferView', 'vkDestroyCommandPool',
    'vkDestroyCuFunctionNVX', 'vkDestroyCuModuleNVX',
    'vkDestroyCudaFunctionNV', 'vkDestroyCudaModuleNV',
    'vkDestroyDebugReportCallbackEXT',
    'vkDestroyDebugUtilsMessengerEXT',
    'vkDestroyDeferredOperationKHR', 'vkDestroyDescriptorPool',
    'vkDestroyDescriptorSetLayout',
    'vkDestroyDescriptorUpdateTemplate',
    'vkDestroyDescriptorUpdateTemplateKHR', 'vkDestroyDevice',
    'vkDestroyEvent', 'vkDestroyFence', 'vkDestroyFramebuffer',
    'vkDestroyImage', 'vkDestroyImageView',
    'vkDestroyIndirectCommandsLayoutNV', 'vkDestroyInstance',
    'vkDestroyMicromapEXT', 'vkDestroyOpticalFlowSessionNV',
    'vkDestroyPipeline', 'vkDestroyPipelineCache',
    'vkDestroyPipelineLayout', 'vkDestroyPrivateDataSlot',
    'vkDestroyPrivateDataSlotEXT', 'vkDestroyQueryPool',
    'vkDestroyRenderPass', 'vkDestroySampler',
    'vkDestroySamplerYcbcrConversion',
    'vkDestroySamplerYcbcrConversionKHR', 'vkDestroySemaphore',
    'vkDestroyShaderEXT', 'vkDestroyShaderModule',
    'vkDestroySurfaceKHR', 'vkDestroySwapchainKHR',
    'vkDestroyValidationCacheEXT', 'vkDestroyVideoSessionKHR',
    'vkDestroyVideoSessionParametersKHR', 'vkDeviceWaitIdle',
    'vkDisplayPowerControlEXT', 'vkEndCommandBuffer',
    'vkEnumerateDeviceExtensionProperties',
    'vkEnumerateDeviceLayerProperties',
    'vkEnumerateInstanceExtensionProperties',
    'vkEnumerateInstanceLayerProperties',
    'vkEnumerateInstanceVersion', 'vkEnumeratePhysicalDeviceGroups',
    'vkEnumeratePhysicalDeviceGroupsKHR',
    'vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR',
    'vkEnumeratePhysicalDevices', 'vkFlushMappedMemoryRanges',
    'vkFreeCommandBuffers', 'vkFreeDescriptorSets', 'vkFreeMemory',
    'vkGetAccelerationStructureBuildSizesKHR',
    'vkGetAccelerationStructureDeviceAddressKHR',
    'vkGetAccelerationStructureHandleNV',
    'vkGetAccelerationStructureMemoryRequirementsNV',
    'vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT',
    'vkGetBufferDeviceAddress', 'vkGetBufferDeviceAddressEXT',
    'vkGetBufferDeviceAddressKHR', 'vkGetBufferMemoryRequirements',
    'vkGetBufferMemoryRequirements2',
    'vkGetBufferMemoryRequirements2KHR',
    'vkGetBufferOpaqueCaptureAddress',
    'vkGetBufferOpaqueCaptureAddressKHR',
    'vkGetBufferOpaqueCaptureDescriptorDataEXT',
    'vkGetCalibratedTimestampsEXT', 'vkGetCalibratedTimestampsKHR',
    'vkGetCudaModuleCacheNV',
    'vkGetDeferredOperationMaxConcurrencyKHR',
    'vkGetDeferredOperationResultKHR', 'vkGetDescriptorEXT',
    'vkGetDescriptorSetHostMappingVALVE',
    'vkGetDescriptorSetLayoutBindingOffsetEXT',
    'vkGetDescriptorSetLayoutHostMappingInfoVALVE',
    'vkGetDescriptorSetLayoutSizeEXT',
    'vkGetDescriptorSetLayoutSupport',
    'vkGetDescriptorSetLayoutSupportKHR',
    'vkGetDeviceAccelerationStructureCompatibilityKHR',
    'vkGetDeviceBufferMemoryRequirements',
    'vkGetDeviceBufferMemoryRequirementsKHR',
    'vkGetDeviceFaultInfoEXT', 'vkGetDeviceGroupPeerMemoryFeatures',
    'vkGetDeviceGroupPeerMemoryFeaturesKHR',
    'vkGetDeviceGroupPresentCapabilitiesKHR',
    'vkGetDeviceGroupSurfacePresentModesKHR',
    'vkGetDeviceImageMemoryRequirements',
    'vkGetDeviceImageMemoryRequirementsKHR',
    'vkGetDeviceImageSparseMemoryRequirements',
    'vkGetDeviceImageSparseMemoryRequirementsKHR',
    'vkGetDeviceImageSubresourceLayoutKHR',
    'vkGetDeviceMemoryCommitment',
    'vkGetDeviceMemoryOpaqueCaptureAddress',
    'vkGetDeviceMemoryOpaqueCaptureAddressKHR',
    'vkGetDeviceMicromapCompatibilityEXT', 'vkGetDeviceProcAddr',
    'vkGetDeviceQueue', 'vkGetDeviceQueue2',
    'vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI',
    'vkGetDisplayModeProperties2KHR', 'vkGetDisplayModePropertiesKHR',
    'vkGetDisplayPlaneCapabilities2KHR',
    'vkGetDisplayPlaneCapabilitiesKHR',
    'vkGetDisplayPlaneSupportedDisplaysKHR', 'vkGetDrmDisplayEXT',
    'vkGetDynamicRenderingTilePropertiesQCOM',
    'vkGetEncodedVideoSessionParametersKHR', 'vkGetEventStatus',
    'vkGetFenceFdKHR', 'vkGetFenceStatus',
    'vkGetFramebufferTilePropertiesQCOM',
    'vkGetGeneratedCommandsMemoryRequirementsNV',
    'vkGetImageDrmFormatModifierPropertiesEXT',
    'vkGetImageMemoryRequirements', 'vkGetImageMemoryRequirements2',
    'vkGetImageMemoryRequirements2KHR',
    'vkGetImageOpaqueCaptureDescriptorDataEXT',
    'vkGetImageSparseMemoryRequirements',
    'vkGetImageSparseMemoryRequirements2',
    'vkGetImageSparseMemoryRequirements2KHR',
    'vkGetImageSubresourceLayout', 'vkGetImageSubresourceLayout2EXT',
    'vkGetImageSubresourceLayout2KHR', 'vkGetImageViewAddressNVX',
    'vkGetImageViewHandleNVX',
    'vkGetImageViewOpaqueCaptureDescriptorDataEXT',
    'vkGetInstanceProcAddr', 'vkGetLatencyTimingsNV',
    'vkGetMemoryFdKHR', 'vkGetMemoryFdPropertiesKHR',
    'vkGetMemoryHostPointerPropertiesEXT',
    'vkGetMemoryRemoteAddressNV', 'vkGetMicromapBuildSizesEXT',
    'vkGetPastPresentationTimingGOOGLE',
    'vkGetPerformanceParameterINTEL',
    'vkGetPhysicalDeviceCalibrateableTimeDomainsEXT',
    'vkGetPhysicalDeviceCalibrateableTimeDomainsKHR',
    'vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR',
    'vkGetPhysicalDeviceCooperativeMatrixPropertiesNV',
    'vkGetPhysicalDeviceDisplayPlaneProperties2KHR',
    'vkGetPhysicalDeviceDisplayPlanePropertiesKHR',
    'vkGetPhysicalDeviceDisplayProperties2KHR',
    'vkGetPhysicalDeviceDisplayPropertiesKHR',
    'vkGetPhysicalDeviceExternalBufferProperties',
    'vkGetPhysicalDeviceExternalBufferPropertiesKHR',
    'vkGetPhysicalDeviceExternalFenceProperties',
    'vkGetPhysicalDeviceExternalFencePropertiesKHR',
    'vkGetPhysicalDeviceExternalImageFormatPropertiesNV',
    'vkGetPhysicalDeviceExternalSemaphoreProperties',
    'vkGetPhysicalDeviceExternalSemaphorePropertiesKHR',
    'vkGetPhysicalDeviceFeatures', 'vkGetPhysicalDeviceFeatures2',
    'vkGetPhysicalDeviceFeatures2KHR',
    'vkGetPhysicalDeviceFormatProperties',
    'vkGetPhysicalDeviceFormatProperties2',
    'vkGetPhysicalDeviceFormatProperties2KHR',
    'vkGetPhysicalDeviceFragmentShadingRatesKHR',
    'vkGetPhysicalDeviceImageFormatProperties',
    'vkGetPhysicalDeviceImageFormatProperties2',
    'vkGetPhysicalDeviceImageFormatProperties2KHR',
    'vkGetPhysicalDeviceMemoryProperties',
    'vkGetPhysicalDeviceMemoryProperties2',
    'vkGetPhysicalDeviceMemoryProperties2KHR',
    'vkGetPhysicalDeviceMultisamplePropertiesEXT',
    'vkGetPhysicalDeviceOpticalFlowImageFormatsNV',
    'vkGetPhysicalDevicePresentRectanglesKHR',
    'vkGetPhysicalDeviceProperties', 'vkGetPhysicalDeviceProperties2',
    'vkGetPhysicalDeviceProperties2KHR',
    'vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR',
    'vkGetPhysicalDeviceQueueFamilyProperties',
    'vkGetPhysicalDeviceQueueFamilyProperties2',
    'vkGetPhysicalDeviceQueueFamilyProperties2KHR',
    'vkGetPhysicalDeviceSparseImageFormatProperties',
    'vkGetPhysicalDeviceSparseImageFormatProperties2',
    'vkGetPhysicalDeviceSparseImageFormatProperties2KHR',
    'vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV',
    'vkGetPhysicalDeviceSurfaceCapabilities2EXT',
    'vkGetPhysicalDeviceSurfaceCapabilities2KHR',
    'vkGetPhysicalDeviceSurfaceCapabilitiesKHR',
    'vkGetPhysicalDeviceSurfaceFormats2KHR',
    'vkGetPhysicalDeviceSurfaceFormatsKHR',
    'vkGetPhysicalDeviceSurfacePresentModesKHR',
    'vkGetPhysicalDeviceSurfaceSupportKHR',
    'vkGetPhysicalDeviceToolProperties',
    'vkGetPhysicalDeviceToolPropertiesEXT',
    'vkGetPhysicalDeviceVideoCapabilitiesKHR',
    'vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR',
    'vkGetPhysicalDeviceVideoFormatPropertiesKHR',
    'vkGetPipelineCacheData',
    'vkGetPipelineExecutableInternalRepresentationsKHR',
    'vkGetPipelineExecutablePropertiesKHR',
    'vkGetPipelineExecutableStatisticsKHR',
    'vkGetPipelineIndirectDeviceAddressNV',
    'vkGetPipelineIndirectMemoryRequirementsNV',
    'vkGetPipelinePropertiesEXT', 'vkGetPrivateData',
    'vkGetPrivateDataEXT', 'vkGetQueryPoolResults',
    'vkGetQueueCheckpointData2NV', 'vkGetQueueCheckpointDataNV',
    'vkGetRayTracingCaptureReplayShaderGroupHandlesKHR',
    'vkGetRayTracingShaderGroupHandlesKHR',
    'vkGetRayTracingShaderGroupHandlesNV',
    'vkGetRayTracingShaderGroupStackSizeKHR',
    'vkGetRefreshCycleDurationGOOGLE', 'vkGetRenderAreaGranularity',
    'vkGetRenderingAreaGranularityKHR',
    'vkGetSamplerOpaqueCaptureDescriptorDataEXT',
    'vkGetSemaphoreCounterValue', 'vkGetSemaphoreCounterValueKHR',
    'vkGetSemaphoreFdKHR', 'vkGetShaderBinaryDataEXT',
    'vkGetShaderInfoAMD', 'vkGetShaderModuleCreateInfoIdentifierEXT',
    'vkGetShaderModuleIdentifierEXT', 'vkGetSwapchainCounterEXT',
    'vkGetSwapchainImagesKHR', 'vkGetSwapchainStatusKHR',
    'vkGetValidationCacheDataEXT',
    'vkGetVideoSessionMemoryRequirementsKHR', 'vkImportFenceFdKHR',
    'vkImportSemaphoreFdKHR', 'vkInitializePerformanceApiINTEL',
    'vkInvalidateMappedMemoryRanges', 'vkLatencySleepNV',
    'vkMapMemory', 'vkMapMemory2KHR', 'vkMergePipelineCaches',
    'vkMergeValidationCachesEXT', 'vkQueueBeginDebugUtilsLabelEXT',
    'vkQueueBindSparse', 'vkQueueEndDebugUtilsLabelEXT',
    'vkQueueInsertDebugUtilsLabelEXT', 'vkQueueNotifyOutOfBandNV',
    'vkQueuePresentKHR', 'vkQueueSetPerformanceConfigurationINTEL',
    'vkQueueSubmit', 'vkQueueSubmit2', 'vkQueueSubmit2KHR',
    'vkQueueWaitIdle', 'vkRegisterDeviceEventEXT',
    'vkRegisterDisplayEventEXT', 'vkReleaseDisplayEXT',
    'vkReleasePerformanceConfigurationINTEL',
    'vkReleaseProfilingLockKHR', 'vkReleaseSwapchainImagesEXT',
    'vkResetCommandBuffer', 'vkResetCommandPool',
    'vkResetDescriptorPool', 'vkResetEvent', 'vkResetFences',
    'vkResetQueryPool', 'vkResetQueryPoolEXT',
    'vkSetDebugUtilsObjectNameEXT', 'vkSetDebugUtilsObjectTagEXT',
    'vkSetDeviceMemoryPriorityEXT', 'vkSetEvent',
    'vkSetHdrMetadataEXT', 'vkSetLatencyMarkerNV',
    'vkSetLatencySleepModeNV', 'vkSetLocalDimmingAMD',
    'vkSetPrivateData', 'vkSetPrivateDataEXT', 'vkSignalSemaphore',
    'vkSignalSemaphoreKHR', 'vkSubmitDebugUtilsMessageEXT',
    'vkTransitionImageLayoutEXT', 'vkTrimCommandPool',
    'vkTrimCommandPoolKHR', 'vkUninitializePerformanceApiINTEL',
    'vkUnmapMemory', 'vkUnmapMemory2KHR',
    'vkUpdateDescriptorSetWithTemplate',
    'vkUpdateDescriptorSetWithTemplateKHR', 'vkUpdateDescriptorSets',
    'vkUpdateVideoSessionParametersKHR', 'vkWaitForFences',
    'vkWaitForPresentKHR', 'vkWaitSemaphores', 'vkWaitSemaphoresKHR',
    'vkWriteAccelerationStructuresPropertiesKHR',
    'vkWriteMicromapsPropertiesEXT']
